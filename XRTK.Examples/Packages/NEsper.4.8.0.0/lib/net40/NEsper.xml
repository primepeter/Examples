<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NEsper</name>
    </assembly>
    <members>
        <member name="T:com.espertech.esper.adapter.Adapter">
            <summary>
            An Adapter takes some external data, converts it into events, and sends
            it into the runtime engine.
            </summary>
        </member>
        <member name="M:com.espertech.esper.adapter.Adapter.Start">
            <summary>Start the sending of events into the runtime egine.  </summary>
            <throws>EPException in case of errors processing the events</throws>
        </member>
        <member name="M:com.espertech.esper.adapter.Adapter.Pause">
            <summary>Pause the sending of events after a Adapter has been started.  </summary>
            <throws>EPException if this Adapter has already been stopped</throws>
        </member>
        <member name="M:com.espertech.esper.adapter.Adapter.Resume">
            <summary>Resume sending events after the Adapter has been paused.  </summary>
            <throws>EPException in case of errors processing the events</throws>
        </member>
        <member name="M:com.espertech.esper.adapter.Adapter.Stop">
            <summary>Stop sending events and return the Adapter to the OPENED state, ready to be started once again.  </summary>
            <throws>EPException in case of errors releasing resources</throws>
        </member>
        <member name="M:com.espertech.esper.adapter.Adapter.GetState">
            <summary>Get the state of this Adapter.  </summary>
            <returns>state</returns>
        </member>
        <member name="T:com.espertech.esper.adapter.AdapterSPI">
            <summary>
            An Adapter takes some external data, converts it into events, and sends it into
            the runtime engine.
            </summary>
        </member>
        <member name="P:com.espertech.esper.adapter.AdapterSPI.EPServiceProvider">
            <summary>Gets or sets the engine instance. </summary>
            <returns>engine</returns>
        </member>
        <member name="T:com.espertech.esper.adapter.AdapterState">
            <summary>The state of a Adapter. </summary>
        </member>
        <member name="F:com.espertech.esper.adapter.AdapterState.OPENED">
            <summary>Opened state. </summary>
        </member>
        <member name="F:com.espertech.esper.adapter.AdapterState.STARTED">
            <summary>Started state. </summary>
        </member>
        <member name="F:com.espertech.esper.adapter.AdapterState.PAUSED">
            <summary>Paused state. </summary>
        </member>
        <member name="F:com.espertech.esper.adapter.AdapterState.DESTROYED">
            <summary>Destroyed state. </summary>
        </member>
        <member name="T:com.espertech.esper.adapter.AdapterStateManager">
            <summary>
            A utility to manage the state transitions for an InputAdapter.
            </summary>
        </member>
        <member name="M:com.espertech.esper.adapter.AdapterStateManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.adapter.AdapterStateManager"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.adapter.AdapterStateManager.Start">
            <summary>
            Transition into the STARTED state (from the OPENED state).
            </summary>
            <throws>IllegalStateTransitionException if the transition is not allowed</throws>
        </member>
        <member name="M:com.espertech.esper.adapter.AdapterStateManager.Stop">
            <summary>
            Transition into the OPENED state.
            </summary>
            <throws>IllegalStateTransitionException if the transition isn't allowed</throws>
        </member>
        <member name="M:com.espertech.esper.adapter.AdapterStateManager.Pause">
            <summary>
            Transition into the PAUSED state.
            </summary>
            <throws>IllegalStateTransitionException if the transition isn't allowed</throws>
        </member>
        <member name="M:com.espertech.esper.adapter.AdapterStateManager.Resume">
            <summary>
            Transition into the STARTED state (from the PAUSED state).
            </summary>
            <throws>IllegalStateTransitionException if the state transition is not allowed</throws>
        </member>
        <member name="M:com.espertech.esper.adapter.AdapterStateManager.Dispose">
            <summary>
            Transition into the DESTROYED state.
            </summary>
            <throws>IllegalStateTransitionException if the transition isn't allowed</throws>
        </member>
        <member name="M:com.espertech.esper.adapter.AdapterStateManager.DisallowStateTransitions">
            <summary>
            Disallow future state changes, and throw an IllegalStateTransitionException if they are attempted.
            </summary>
        </member>
        <member name="M:com.espertech.esper.adapter.AdapterStateManager.AssertStateTransitionsAllowed">
            <summary>
            Asserts the state transitions allowed.
            </summary>
        </member>
        <member name="P:com.espertech.esper.adapter.AdapterStateManager.State">
            <summary>
            Gets the state.
            </summary>
            <returns>the state</returns>
        </member>
        <member name="T:com.espertech.esper.adapter.BaseSubscription">
            <summary>
            Subscription is a concept for selecting events for processing out of all events 
            available from an engine instance.
            </summary>
        </member>
        <member name="T:com.espertech.esper.adapter.Subscription">
            <summary>
            Subscriptions are associated with an output adapter and dictate which events are
            sent to a given adapter.
            </summary>
        </member>
        <member name="M:com.espertech.esper.adapter.Subscription.RegisterAdapter(com.espertech.esper.adapter.OutputAdapter)">
            <summary>Sets the output adapter this subscription is associated with. </summary>
            <param name="adapter">to set</param>
        </member>
        <member name="P:com.espertech.esper.adapter.Subscription.SubscriptionName">
            <summary>Returns the subscription name. </summary>
            <returns>subscription name</returns>
        </member>
        <member name="P:com.espertech.esper.adapter.Subscription.EventTypeName">
            <summary>Returns the type name of the event type we are looking for. </summary>
            <returns>event type name</returns>
        </member>
        <member name="P:com.espertech.esper.adapter.Subscription.Adapter">
            <summary>Returns the output adapter this subscription is associated with. </summary>
            <returns>output adapter</returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterHandleCallback">
            <summary>
            Interface for a callback method to be called when an event matches a filter specification. Provided as a convenience 
            for use as a filter handle for registering with the <seealso cref="T:com.espertech.esper.filter.FilterService"/>.
            </summary>
        </member>
        <member name="T:com.espertech.esper.filter.FilterHandle">
            <summary>
            Marker interface for use with <see cref="T:com.espertech.esper.filter.FilterService"/>. Implementations serve as a filter match values when
            events match filters, and also serve to enter and remove a filter from the filter subscription set.
            </summary>
        </member>
        <member name="P:com.espertech.esper.filter.FilterHandle.StatementId">
            <summary>
            Gets the statement id.
            </summary>
            <value>The statement id.</value>
        </member>
        <member name="M:com.espertech.esper.filter.FilterHandleCallback.MatchFound(com.espertech.esper.client.EventBean,System.Collections.Generic.ICollection{com.espertech.esper.filter.FilterHandleCallback})">
            <summary>
            Indicate that an event was evaluated by the <seealso cref="T:com.espertech.esper.filter.FilterService"/> which
            matches the filter specification <seealso cref="T:com.espertech.esper.filter.FilterSpecCompiled"/> associated with this callback.
            </summary>
            <param name="theEvent">the event received that matches the filter specification</param>
            <param name="allStmtMatches">All STMT matches.</param>
        </member>
        <member name="P:com.espertech.esper.filter.FilterHandleCallback.IsSubSelect">
            <summary>
            Returns true if the filter applies to subselects.
            </summary>
            <value>subselect filter</value>
        </member>
        <member name="M:com.espertech.esper.adapter.BaseSubscription.#ctor">
            <summary>Ctor, assigns default name. </summary>
        </member>
        <member name="M:com.espertech.esper.adapter.BaseSubscription.RegisterAdapter(com.espertech.esper.client.EPServiceProvider)">
            <summary>Register an adapter. </summary>
            <param name="epService">engine</param>
        </member>
        <member name="P:com.espertech.esper.adapter.BaseSubscription.StatementId">
            <summary>
            Gets the statement id.
            </summary>
            <value>The statement id.</value>
        </member>
        <member name="P:com.espertech.esper.adapter.BaseSubscription.IsSubSelect">
            <summary>
            Returns true if the filter applies to subselects.
            </summary>
            <value>subselect filter</value>
        </member>
        <member name="P:com.espertech.esper.adapter.BaseSubscription.SubscriptionName">
            <summary>
            Returns the subscription name.
            </summary>
            <value></value>
            <returns>subscription name</returns>
        </member>
        <member name="P:com.espertech.esper.adapter.BaseSubscription.EventTypeName">
            <summary>Set the event type name we are looking for. </summary>
            <value>is a type name</value>
        </member>
        <member name="T:com.espertech.esper.adapter.IllegalStateTransitionException">
            <summary>
            Thrown when an illegal Adapter state transition is attempted.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.EPException">
            <summary> 
            This exception is thrown to indicate a problem in administration and runtime.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPException.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="message">error message
            </param>
        </member>
        <member name="M:com.espertech.esper.client.EPException.#ctor(System.String,System.Exception)">
            <summary> Ctor for an inner exception and message.</summary>
            <param name="message">error message
            </param>
            <param name="cause">inner exception
            </param>
        </member>
        <member name="M:com.espertech.esper.client.EPException.#ctor(System.Exception)">
            <summary> Ctor - just an inner exception.</summary>
            <param name="cause">inner exception
            </param>
        </member>
        <member name="M:com.espertech.esper.adapter.IllegalStateTransitionException.#ctor(System.String)">
            <summary />
            <param name="message">an explanation of the cause of the exception</param>
        </member>
        <member name="T:com.espertech.esper.adapter.InputAdapter">
            <summary>
            An InputAdapter takes some external data, converts it into events, and sends it into the runtime engine.
            </summary>
        </member>
        <member name="F:com.espertech.esper.adapter.InputAdapterConstants.ESPERIO_MAP_EVENT_TYPE">
            <summary>
            Use for MapMessage events to indicate the event type name.
            </summary>
        </member>
        <member name="T:com.espertech.esper.adapter.OutputAdapter">
            <summary>An output adapter transforms engine events and </summary>
        </member>
        <member name="M:com.espertech.esper.adapter.OutputAdapter.GetSubscription(System.String)">
            <summary>Returns a given subscription by it's name, or null if not found </summary>
            <param name="subscriptionName">is the subscription</param>
            <returns>subcription or null</returns>
        </member>
        <member name="P:com.espertech.esper.adapter.OutputAdapter.SubscriptionMap">
            <summary>Returns the subscriptions. </summary>
            <returns>map of name and subscription</returns>
        </member>
        <member name="T:com.espertech.esper.antlr.ASTUtil">
            <summary>
            Utility class for AST node handling.
            </summary>
        </member>
        <member name="M:com.espertech.esper.antlr.ASTUtil.FindFirstNode(Antlr.Runtime.Tree.ITree,System.Int32)">
            <summary>Returns the first child node (shallow search) of the given parent that matches type, or null if no child node matches type. </summary>
            <param name="parent">whose child nodes to ask for type</param>
            <param name="type">the type looked for</param>
            <returns>child node if found, or null if not found</returns>
        </member>
        <member name="M:com.espertech.esper.antlr.ASTUtil.DumpAST(Antlr.Runtime.Tree.ITree)">
            <summary>Dump the AST node to system.out. </summary>
            <param name="ast">to dump</param>
        </member>
        <member name="M:com.espertech.esper.antlr.ASTUtil.PrintTokens(Antlr.Runtime.CommonTokenStream)">
            <summary>Print the token stream to the logger. </summary>
            <param name="tokens">to print</param>
        </member>
        <member name="T:com.espertech.esper.antlr.NoCaseSensitiveStream">
            <summary>
            For use with ANTLR to create a case-insensitive token stream.
            </summary>
        </member>
        <member name="M:com.espertech.esper.antlr.NoCaseSensitiveStream.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="s">string to be parsed</param>
            <throws>IOException to indicate IO errors</throws>
        </member>
        <member name="T:com.espertech.esper.client.annotation.AuditAttribute">
            <summary>
            Annotation for use in EPL statements to add a debug.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.annotation.AuditAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.annotation.AuditAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:com.espertech.esper.client.annotation.AuditAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.annotation.AuditAttribute"/> class.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.annotation.AuditAttribute.Value">
            <summary>
            Comma-separated list of keywords (not case-sentitive), see <see cref="T:com.espertech.esper.client.annotation.AuditEnum"/> for a list of keywords.
            </summary>
            <value>The value.</value>
            <returns>comma-separated list of audit keywords</returns>
        </member>
        <member name="T:com.espertech.esper.client.annotation.AuditEnum">
            <summary>
            Enumeration of audit values. Since audits may be a comma-separate list in a single 
            @Audit annotation they are listed as enumeration values here.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.annotation.AuditEnum.PROPERTY">
            <summary>For use with property audit. </summary>
        </member>
        <member name="F:com.espertech.esper.client.annotation.AuditEnum.EXPRESSION">
            <summary>For use with expression audit. </summary>
        </member>
        <member name="F:com.espertech.esper.client.annotation.AuditEnum.EXPRESSION_NESTED">
            <summary>For use with expression audit.</summary>
        </member>
        <member name="F:com.espertech.esper.client.annotation.AuditEnum.EXPRDEF">
            <summary>For use with expression-definition audit. </summary>
        </member>
        <member name="F:com.espertech.esper.client.annotation.AuditEnum.VIEW">
            <summary>For use with view audit. </summary>
        </member>
        <member name="F:com.espertech.esper.client.annotation.AuditEnum.PATTERN">
            <summary>For use with pattern audit. </summary>
        </member>
        <member name="F:com.espertech.esper.client.annotation.AuditEnum.PATTERNINSTANCES">
            <summary>For use with pattern audit. </summary>
        </member>
        <member name="F:com.espertech.esper.client.annotation.AuditEnum.STREAM">
            <summary>For use with stream-audit. </summary>
        </member>
        <member name="F:com.espertech.esper.client.annotation.AuditEnum.SCHEDULE">
            <summary>For use with stream-audit. </summary>
        </member>
        <member name="F:com.espertech.esper.client.annotation.AuditEnum.INSERT">
            <summary>For use with insert-into audit.</summary>
        </member>
        <member name="F:com.espertech.esper.client.annotation.AuditEnum.DATAFLOW_SOURCE">
            <summary>For use with data flow source operators.</summary>
        </member>
        <member name="F:com.espertech.esper.client.annotation.AuditEnum.DATAFLOW_OP">
            <summary>
            For use with data flow (non-source and source) operators.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.annotation.AuditEnum.DATAFLOW_TRANSITION">
            <summary>
            For use with data flows specifically for transitions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.annotation.AuditEnumExtensions.GetValue(com.espertech.esper.client.annotation.AuditEnum)">
            <summary>Returns the constant. </summary>
            <param name="enumValue">The enum value.</param>
            <returns>constant</returns>
        </member>
        <member name="M:com.espertech.esper.client.annotation.AuditEnumExtensions.GetPrettyPrintText(com.espertech.esper.client.annotation.AuditEnum)">
            <summary>
            Returns text used for the category of the audit log item.
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.annotation.AuditEnumExtensions.GetAudit(com.espertech.esper.client.annotation.AuditEnum,System.Attribute[])">
            <summary>
            Check if the hint is present in the attributes provided.
            </summary>
            <param name="enumValue">The enum value.</param>
            <param name="attributes">the attributes to inspect</param>
            <returns>indicator</returns>
        </member>
        <member name="T:com.espertech.esper.client.annotation.DurableAttribute">
            <summary>Annotation marking a durable-profile EPL statement. </summary>
        </member>
        <member name="T:com.espertech.esper.client.annotation.EventRepresentationAttribute">
            <summary>
            Annotation that can be attached to specify which underlying event representation to use for events.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.annotation.EventRepresentationAttribute.Array">
            <summary>True for object-array, false for Map. </summary>
            <returns>array indicator</returns>
        </member>
        <member name="T:com.espertech.esper.client.annotation.ExternalDWAttribute">
            <summary>Annotation for defining an external data window name and open/close functon. </summary>
        </member>
        <member name="P:com.espertech.esper.client.annotation.ExternalDWAttribute.Name">
            <summary>
            Name
            </summary>
            <value>The name.</value>
            <returns>name</returns>
        </member>
        <member name="P:com.espertech.esper.client.annotation.ExternalDWAttribute.FunctionOpen">
            <summary>
            Open function.
            </summary>
            <value>The function open.</value>
            <returns>open function.</returns>
        </member>
        <member name="P:com.espertech.esper.client.annotation.ExternalDWAttribute.FunctionClose">
            <summary>
            Close function.
            </summary>
            <value>The function close.</value>
            <returns>close function</returns>
        </member>
        <member name="P:com.espertech.esper.client.annotation.ExternalDWAttribute.IsUnique">
            <summary>
            Indicator whether unique-key semantics should apply.
            <para/>
            This indicator is false by default meaning that the implementation should not 
            assume unique-data-window semantics, and would not need to post the previous value 
            of the key as a remove stream event. 
            <para />
            Setting this indicator is interpreted by an implementation to assume unique-data-window 
            semantics, thereby instructing to post the previous value for the currently-updated key 
            as a remove stream event.
            </summary>
            <value><c>true</c> if this instance is unique; otherwise, <c>false</c>.</value>
            <returns>unique-key semantics</returns>
        </member>
        <member name="T:com.espertech.esper.client.annotation.ExternalDWKeyAttribute">
            <summary>
            Annotation for defining the name of the property or the function name returning the external data window key values.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.annotation.ExternalDWKeyAttribute.Property">
            <summary>Property name acting as key. </summary>
            <returns>key property name</returns>
        </member>
        <member name="P:com.espertech.esper.client.annotation.ExternalDWKeyAttribute.PropertyNames">
            <summary>Multiple property names acting as key (check for support in the documentation). </summary>
            <returns>property names array</returns>
        </member>
        <member name="P:com.espertech.esper.client.annotation.ExternalDWKeyAttribute.Function">
            <summary>Key generator function. </summary>
            <returns>function name</returns>
        </member>
        <member name="T:com.espertech.esper.client.annotation.ExternalDWListenerAttribute">
            <summary>Annotation for configuring external data window listeners. </summary>
        </member>
        <member name="P:com.espertech.esper.client.annotation.ExternalDWListenerAttribute.Threaded">
            <summary>Returns indicator whether a listener thread is required or not. </summary>
            <returns>indicator</returns>
        </member>
        <member name="P:com.espertech.esper.client.annotation.ExternalDWListenerAttribute.NumThreads">
            <summary>Returns indicator the number of listener threads. </summary>
            <returns>number of threads</returns>
        </member>
        <member name="T:com.espertech.esper.client.annotation.ExternalDWQueryAttribute">
            <summary>
            Annotation for defining the name of the functions returning external data window key and value
            objects for use with queries against external data windows.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.annotation.ExternalDWQueryAttribute.FunctionKeys">
            <summary>Returns function name that return key objects. </summary>
            <returns>function name</returns>
        </member>
        <member name="P:com.espertech.esper.client.annotation.ExternalDWQueryAttribute.FunctionValues">
            <summary>Returns function name that return value objects. </summary>
            <returns>function name</returns>
        </member>
        <member name="T:com.espertech.esper.client.annotation.ExternalDWSettingAttribute">
            <summary>Annotation for defining a external data window settings. </summary>
        </member>
        <member name="P:com.espertech.esper.client.annotation.ExternalDWSettingAttribute.Iterable">
            <summary>
            Indicator whether iterable or not.
            </summary>
            <value><c>true</c> if iterable; otherwise, <c>false</c>.</value>
            <returns>iterable flag</returns>
        </member>
        <member name="P:com.espertech.esper.client.annotation.ExternalDWSettingAttribute.FunctionLookupCompleted">
            <summary>
            Function name to invoke when a lookup completed.
            </summary>
            <value>The function lookup completed.</value>
            <returns>function name</returns>
        </member>
        <member name="T:com.espertech.esper.client.annotation.ExternalDWValueAttribute">
            <summary>Annotation for mapping of event-to-value and value-to-event for external data windows. </summary>
        </member>
        <member name="P:com.espertech.esper.client.annotation.ExternalDWValueAttribute.FunctionBeanToValue">
            <summary>Returns the function name of the function that maps event beans to value objects. </summary>
            <returns>event to value mapping function name</returns>
        </member>
        <member name="P:com.espertech.esper.client.annotation.ExternalDWValueAttribute.FunctionValueToBean">
            <summary>Returns the function name of the function that maps values to event objects. </summary>
            <returns>value to event mapping function name</returns>
        </member>
        <member name="P:com.espertech.esper.client.annotation.HookAttribute.Hook">
            <summary>Returns the simple class name (using imports) or fully-qualified class name of the hook. </summary>
            <returns>class name</returns>
        </member>
        <member name="P:com.espertech.esper.client.annotation.HookAttribute.Type">
            <summary>Returns hook type. </summary>
            <returns>hook type</returns>
        </member>
        <member name="T:com.espertech.esper.client.annotation.HookType">
            <summary>
            Enumeration for the different types of statement-processing hooks (callbacks) that can be provided for a statement.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.annotation.HookType.SQLCOL">
            <summary>
            For use when installing a callback for converting SQL input parameters or column output values.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.annotation.HookType.SQLROW">
            <summary>
            For use when installing a callback for converting SQL row results to a PONO object.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.annotation.HookType.INTERNAL_QUERY_PLAN">
            <summary>
            For internal use, query planning reporting. 
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.annotation.NoCacheAttribute">
            <summary>For use with EsperHA, denotes a datawindow that hold no events in memory. </summary>
        </member>
        <member name="T:com.espertech.esper.client.annotation.NoLockAttribute">
            <summary>
            Annotation for use in EPL statements to suppress any statement-level locking 
            (use with caution, see below). 
            <para/>
            Caution: We provide this annotation for the purpose of identifing locking overhead,
            or when your application is single-threaded, or when using an external mechanism 
            for concurreny control or for example with virtual data windows or plug-in data 
            windows to allow customizing concurrency for application-provided data windows. 
            Using this annotation may have unpredictable results unless your application is 
            taking concurrency under consideration.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.annotation.OverflowAttribute">
            <summary>Annotation marking a overflow-profile EPL statement. </summary>
        </member>
        <member name="T:com.espertech.esper.client.annotation.ResilientAttribute">
            <summary>Annotation marking a resilient-profile EPL statement. </summary>
        </member>
        <member name="M:com.espertech.esper.client.annotation.SQLTimeoutAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.annotation.SQLTimeoutAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:com.espertech.esper.client.annotation.SQLTimeoutAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.annotation.SQLTimeoutAttribute"/> class.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.annotation.SQLTimeoutAttribute.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:com.espertech.esper.client.annotation.DescriptionAttribute">
            <summary>
            Annotation for use in EPL statements to add a description.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.annotation.DescriptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.annotation.DescriptionAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:com.espertech.esper.client.annotation.DescriptionAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.annotation.DescriptionAttribute"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.annotation.DescriptionAttribute.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.annotation.DescriptionAttribute.Value">
            <summary>
            Returns the description text.
            </summary>
            <returns>
            description text
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.annotation.DropAttribute">
            <summary>
            An execution directive for use in an EPL statement, that causes processing of an
            event to stop after the EPL statement marked with @Drop has processed the event,
            applicable only if multiple statements must process the same event.
            <para/>
            Ensure the engine configuration for prioritized execution is set before using
            this annotation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.annotation.DropAttribute.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.annotation.HintAttribute">
            <summary>
            Annotation for providing a statement execution hint.
            <para/>
            Hints are providing instructions that can change latency, throughput or memory
            requirements of a statement.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.annotation.HintAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.annotation.HintAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:com.espertech.esper.client.annotation.HintAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.annotation.HintAttribute"/> class.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.annotation.HintAttribute.Value">
            <summary>
            Hint Keyword(s), comma-separated.
            </summary>
            <returns>
            keywords
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.annotation.HintEnum">
            <summary>Enumeration of hint values. Since hints may be a comma-separate list in a single @Hint annotation they are listed as enumeration values here. </summary>
        </member>
        <member name="F:com.espertech.esper.client.annotation.HintEnum.ITERATE_ONLY">
            <summary>For use with match_recognize, iterate-only matching. </summary>
        </member>
        <member name="F:com.espertech.esper.client.annotation.HintEnum.DISABLE_RECLAIM_GROUP">
            <summary>For use with group-by, disabled reclaim groups. </summary>
        </member>
        <member name="F:com.espertech.esper.client.annotation.HintEnum.RECLAIM_GROUP_AGED">
            <summary>For use with group-by and std:groupwin, reclaim groups for unbound streams based on time. The number of seconds after which a groups is reclaimed if inactive. </summary>
        </member>
        <member name="F:com.espertech.esper.client.annotation.HintEnum.RECLAIM_GROUP_FREQ">
            <summary>For use with group-by and std:groupwin, reclaim groups for unbound streams based on time, this number is the frequency in seconds at which a sweep occurs for aged groups, if not provided then the sweep frequency is the same number as the age. </summary>
        </member>
        <member name="F:com.espertech.esper.client.annotation.HintEnum.ENABLE_WINDOW_SUBQUERY_INDEXSHARE">
            <summary>For use with create-named-window statements only, to indicate that statements that subquery the named window use named window data structures (unless the subquery statement specifies below DISBABLE hint and as listed below). <para /> By default and if this hint is not specified or subqueries specify a stream filter on a named window, subqueries use statement-local data structures representing named window contents (table, index). Such data structure is maintained by consuming the named window insert and remove stream. </summary>
        </member>
        <member name="F:com.espertech.esper.client.annotation.HintEnum.DISABLE_WINDOW_SUBQUERY_INDEXSHARE">
            <summary>If ENABLE_WINDOW_SUBQUERY_INDEXSHARE is not specified for a named window (the default) then this instruction is ignored. <para /> For use with statements that subquery a named window and that benefit from a statement-local data structure representing named window contents (table, index), maintained through consuming the named window insert and remove stream. <para /> </summary>
        </member>
        <member name="F:com.espertech.esper.client.annotation.HintEnum.SET_NOINDEX">
            <summary>For use with subqueries and on-select, on-merge, on-update and on-delete to specify the query engine neither build an implicit index nor use an existing index, always performing a full table scan. </summary>
        </member>
        <member name="F:com.espertech.esper.client.annotation.HintEnum.FORCE_NESTED_ITER">
            <summary>For use with join query plans to force a nested iteration plan. </summary>
        </member>
        <member name="F:com.espertech.esper.client.annotation.HintEnum.PREFER_MERGE_JOIN">
            <summary>For use with join query plans to indicate preferance of the merge-join query plan. </summary>
        </member>
        <member name="F:com.espertech.esper.client.annotation.HintEnum.INDEX">
            <summary>For use everywhere where indexes are used (subquery, joins, fire-and-forget, onl-select etc.), index hint.</summary>
        </member>
        <member name="M:com.espertech.esper.client.annotation.HintEnumExtensions.GetValue(com.espertech.esper.client.annotation.HintEnum)">
            <summary>Returns the constant. </summary>
            <returns>constant</returns>
        </member>
        <member name="M:com.espertech.esper.client.annotation.HintEnumExtensions.IsAcceptsParameters(com.espertech.esper.client.annotation.HintEnum)">
            <summary>True if the hint accepts params. </summary>
            <returns>indicator</returns>
        </member>
        <member name="M:com.espertech.esper.client.annotation.HintEnumExtensions.IsRequiresParameters(com.espertech.esper.client.annotation.HintEnum)">
            <summary>True if the hint requires params. </summary>
            <returns>indicator</returns>
        </member>
        <member name="M:com.espertech.esper.client.annotation.HintEnumExtensions.GetHint(com.espertech.esper.client.annotation.HintEnum,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Check if the hint is present in the attributes provided.
            </summary>
            <param name="enum">The @enum.</param>
            <param name="attributes">the attributes to inspect</param>
            <returns>indicator</returns>
        </member>
        <member name="M:com.espertech.esper.client.annotation.HintEnumExtensions.ValidateGetListed(System.Attribute)">
            <summary>Validate a hint attribute ensuring it contains only recognized hints. </summary>
            <param name="attribute">to validate</param>
            <throws>AnnotationException if an invalid text was found</throws>
        </member>
        <member name="M:com.espertech.esper.client.annotation.HintEnumExtensions.GetHintAssignedValue(com.espertech.esper.client.annotation.HintEnum,com.espertech.esper.client.annotation.HintAttribute)">
            <summary>
            Returns hint value.
            </summary>
            <param name="hintEnum">The hint enum.</param>
            <param name="annotation">The annotation to look for.</param>
            <returns>hint assigned first value provided</returns>
        </member>
        <member name="M:com.espertech.esper.client.annotation.HintEnumExtensions.GetHintAssignedValues(com.espertech.esper.client.annotation.HintEnum,System.Attribute[])">
            <summary>
            Returns all values assigned for a given hint, if any
            </summary>
            <param name="hintEnum">The hint enum.</param>
            <param name="annotations">the to be interogated</param>
            <returns>
            hint assigned values or null if none found
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.annotation.HintEnumExtensions.SplitCommaUnlessInParen(System.String)">
            <summary>
            Split a line of comma-separated values allowing parenthesis.
            </summary>
            <param name="line">The line to split.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.client.annotation.NameAttribute">
            <summary>
            Annotation for use in EPL statement to define a statement name.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.annotation.NameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.annotation.NameAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:com.espertech.esper.client.annotation.NameAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.annotation.NameAttribute"/> class.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.annotation.NameAttribute.Value">
            <summary>
            Returns the statement name.
            </summary>
            <returns>
            statement name
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.annotation.PriorityAttribute">
            <summary>
            An execution directive for use in an EPL statement, by which processing of an
            event by statements start with the statement that has the highest priority,
            applicable only if multiple statements must process the same event.
            <para/>
            Ensure the engine configuration for prioritized execution is set before using
            this annotation.
            <para/>
            The default priority value is zero (0).
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.annotation.PriorityAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.annotation.PriorityAttribute"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.annotation.PriorityAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.annotation.PriorityAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:com.espertech.esper.client.annotation.PriorityAttribute.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.annotation.PriorityAttribute.Value">
            <summary>
            Priority value.
            </summary>
            <returns>
            value
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.annotation.RequiredAttribute">
            <summary>
            Indicates that the specified property is required.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.annotation.TagAttribute">
            <summary>
            Annotation for use in EPL statement to tag a statement with a name-value pair.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.annotation.TagAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.annotation.TagAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:com.espertech.esper.client.annotation.TagAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.annotation.TagAttribute"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.annotation.TagAttribute.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.annotation.TagAttribute.Name">
            <summary>
            Returns the tag name.
            </summary>
            <returns>
            tag name.
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.annotation.TagAttribute.Value">
            <summary>
            Returns the tag value.
            </summary>
            <returns>
            tag value.
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.annotation.TransientAttribute">
            <summary>Annotation marking a transient-profile EPL statement. </summary>
        </member>
        <member name="M:com.espertech.esper.client.AutoImportDesc.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.AutoImportDesc"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.AutoImportDesc.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.AutoImportDesc"/> class.
            </summary>
            <param name="namespaceOrType">Type of the namespace or.</param>
        </member>
        <member name="M:com.espertech.esper.client.AutoImportDesc.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.AutoImportDesc"/> class.
            </summary>
            <param name="namespaceOrType">Type of the namespace or.</param>
            <param name="assemblyNameOrFile">The assembly name or file.</param>
        </member>
        <member name="M:com.espertech.esper.client.AutoImportDesc.Equals(com.espertech.esper.client.AutoImportDesc)">
            <summary>
            Compares the equality of two <see cref="T:com.espertech.esper.client.AutoImportDesc"/> instances.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.AutoImportDesc.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:com.espertech.esper.client.AutoImportDesc.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.AutoImportDesc.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.AutoImportDesc.TypeOrNamespace">
            <summary>
            Gets or sets the type of the namespace or.
            </summary>
            <value>The type of the namespace or.</value>
        </member>
        <member name="P:com.espertech.esper.client.AutoImportDesc.AssemblyNameOrFile">
            <summary>
            Gets or sets an optional assembly name or file.
            </summary>
            <value>The assembly name or file.</value>
        </member>
        <member name="T:com.espertech.esper.client.Configuration">
            <summary>
            An instance of <tt>Configuration</tt> allows the application
            to specify properties to be used when
            creating a <tt>EPServiceProvider</tt>. Usually an application will create
            a single <tt>Configuration</tt>, then get one or more instances of
            <see cref="T:com.espertech.esper.client.EPServiceProvider"/> via <see cref="T:com.espertech.esper.client.EPServiceProviderManager"/>.
            The <tt>Configuration</tt> is meant
            only as an initialization-time object. <tt>EPServiceProvider</tt>s are
            immutable and do not retain any association back to the
            <tt>Configuration</tt>.
            <para>
            The format of an Esper XML configuration file is defined in
            <tt>esper-configuration-2.0.xsd</tt>.
            </para>
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationOperations">
            <summary>
            Provides configuration operations for configuration-time and runtime parameters.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddEventTypeAutoName(System.String)">
            <summary>
            Adds the namespace that event classes reside in.
            <para/>
            This setting allows an application to place all it's events into one or more namespaces and then
            declare these packages via this method. The engine attempts to resolve an event type name to a class
            residing in each declared package.
            <para/>
            For example, in the statement "select * from MyEvent" the engine attempts to load class "namespace.MyEvent"
            and if successful, uses that class as the event type.
            </summary>
            <param name="packageName">is the fully-qualified the namespace that event classes reside in</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddPlugInAggregationFunctionFactory(System.String,System.String)">
            <summary>
            Adds a plug-in aggregation function given a EPL function name and an aggregation factory class name.
            <para/>
            The same function name cannot be added twice.
            </summary>
            <param name="functionName">is the new aggregation function name for use in EPL</param>
            <param name="aggregationFactoryClassName">is the fully-qualified class name of the class implementing the aggregation function factory interface <seealso cref="T:com.espertech.esper.client.hook.AggregationFunctionFactory"/></param>
            <throws>ConfigurationException is thrown to indicate a problem adding the aggregation function</throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddPlugInAggregationFunction(System.String,System.String)">
            <summary>
            Adds a plug-in aggregation function given an EPL function name and an aggregation class name.
            <para/>
            The aggregation class must : the base class <seealso cref="!:AggregationSupport"/>.
            <para/>
            The same function name cannot be added twice.
            </summary>
            <param name="functionName">is the new aggregation function name</param>
            <param name="aggregationClassName">is the fully-qualified class name of the class implementing the aggregation function</param>
            <throws>ConfigurationException is thrown to indicate a problem adding the aggregation function</throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddPlugInSingleRowFunction(System.String,System.String,System.String,com.espertech.esper.client.ValueCache)">
            <summary>
            Adds a plug-in single-row function given a EPL function name, a class name, method name and setting for value-cache behavior. <para /> The same function name cannot be added twice.
            </summary>
            <param name="functionName">is the new single-row function name for use in EPL</param>
            <param name="className">is the fully-qualified class name of the class implementing the single-row function</param>
            <param name="methodName">is the public static method provided by the class that implements the single-row function</param>
            <param name="valueCache">set the behavior for caching the return value when constant parameters are provided</param>
            <throws>ConfigurationException is thrown to indicate a problem adding the single-row function</throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddPlugInSingleRowFunction(System.String,System.String,System.String,com.espertech.esper.client.FilterOptimizable)">
            <summary>
            Adds a plug-in single-row function given a EPL function name, a class name, method name and setting for value-cache behavior. <para /> The same function name cannot be added twice.
            </summary>
            <param name="functionName">is the new single-row function name for use in EPL</param>
            <param name="className">is the fully-qualified class name of the class implementing the single-row function</param>
            <param name="methodName">is the public static method provided by the class that implements the single-row function</param>
            <param name="filterOptimizable">whether the single-row function, when used in filters, may be subject to reverse index lookup based on the function result</param>
            <throws>ConfigurationException is thrown to indicate a problem adding the single-row function</throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddPlugInSingleRowFunction(System.String,System.String,System.String)">
            <summary>
            Adds a plug-in single-row function given a EPL function name, a class name and a method name.
            <para/>
            The same function name cannot be added twice.
            </summary>
            <param name="functionName">is the new single-row function name for use in EPL</param>
            <param name="className">is the fully-qualified class name of the class implementing the single-row function</param>
            <param name="methodName">is the public static method provided by the class that implements the single-row function</param>
            <throws>ConfigurationException is thrown to indicate a problem adding the single-row function</throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddPlugInSingleRowFunction(System.String,System.String,System.String,com.espertech.esper.client.ValueCache,com.espertech.esper.client.FilterOptimizable,System.Boolean)">
            <summary>
            Adds a plug-in single-row function given a EPL function name, a class name, method name and a setting for value-cache behavior.
            <para/>
            The same function name cannot be added twice.
            </summary>
            <param name="functionName">is the new single-row function name for use in EPL</param>
            <param name="className">is the fully-qualified class name of the class implementing the single-row function</param>
            <param name="methodName">is the public static method provided by the class that implements the single-row function</param>
            <param name="valueCache">The value cache.</param>
            <param name="filterOptimizable">The filter optimizable.</param>
            <param name="rethrowExceptions">if set to <c>true</c> [rethrow exceptions].</param>
            <throws>ConfigurationException is thrown to indicate a problem adding the single-row function</throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddImport(System.String)">
            <summary>
            Adds a package or class to the list of automatically-imported types.
            <para/>
            To import a single class offering a static method, simply supply the fully-qualified name of the
            class and use the syntax <code>classname.Methodname(...)</code>
            	<para/>
            To import a whole package and use the <code>classname.Methodname(...)</code> syntax.
            </summary>
            <param name="importName">is a fully-qualified class name or a package name with wildcard</param>
            <throws>ConfigurationException if incorrect package or class names are encountered</throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddImport(System.String,System.String)">
            <summary>
            Adds the class or namespace (importName) ot the list of automatically imported types.
            </summary>
            <param name="importName">Name of the import.</param>
            <param name="assemblyNameOrFile">The assembly name or file.</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddImport(System.Type)">
            <summary>
            Adds a class to the list of automatically-imported classes.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddImport``1">
            <summary>
            Adds the import.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddNamespaceImport``1">
            <summary>
            Adds an import for the namespace associated with the given type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.IsEventTypeExists(System.String)">
            <summary>Checks if an eventTypeName has already been registered for that name. </summary>
            <unknown>@since 2.1</unknown>
            <param name="eventTypeName">the name</param>
            <returns>true if already registered</returns>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddEventType(System.String,System.String)">
            <summary>
            Add an name for an event type represented by object events.
            <para/>
            Allows a second name to be added for the same type. Does not allow the same name to be used for different types.
            </summary>
            <param name="eventTypeName">is the name for the event type</param>
            <param name="nativeEventTypeName">fully-qualified class name of the event type</param>
            <throws>ConfigurationException if the name is already in used for a different type</throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddEventType(System.String,System.Type)">
            <summary>
            Add an name for an event type represented by plain-old object events.
            <para/> Allows a second name to be added for the same type. Does not allow the same name to be used for different types.
            </summary>
            <param name="eventTypeName">is the name for the event type</param>
            <param name="eventType">is the event class for which to create the name</param>
            <throws>ConfigurationException if the name is already in used for a different type</throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddEventType(System.Type)">
            <summary>
            Add a name for an event type represented by plain-old object events, using the simple name of the
            class as the name.
            <para/>
            For example, if your class is "com.mycompany.MyEvent", then this method adds the name "MyEvent" for the class.
            <para/>
            Allows a second name to be added for the same type. Does not allow the same name to be used for different types.
            </summary>
            <param name="eventType">is the event class for which to create the name from the class simple name</param>
            <throws>ConfigurationException if the name is already in used for a different type</throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddEventType``1(System.String)">
            <summary>
            Adds a name for an event type represented by the type parameter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="eventTypeName">Name of the event type.</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddEventType``1">
            <summary>
            Adds a name for an event type represented by the type parameter.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddEventType(System.String,com.espertech.esper.compat.Properties)">
            <summary>
            Add an event for an event type that represents map events.
            <para/>
            Allows a second name to be added for the same type. Does not allow the same name to be used for different types.
            </summary>
            <param name="eventTypeName">is the name for the event type</param>
            <param name="typeMap">maps the name of each property in the Map event to the Type(fully qualified classname) of
            its value in Map event instances.</param>
            <throws>ConfigurationException if the name is already in used for a different type</throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddEventType(System.String,System.String[],System.Object[])">
            <summary>
            Add an event type that represents Object-array (Object[]) events.
            </summary>
            <param name="eventTypeName">Name of the event type.</param>
            <param name="propertyNames">name of each property, length must match number of types</param>
            <param name="propertyTypes">type of each property, length must match number of names</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddEventType(System.String,System.String[],System.Object[],com.espertech.esper.client.ConfigurationEventTypeObjectArray)">
            <summary>
            Add an event type that represents Object-array (Object[]) events.
            </summary>
            <param name="eventTypeName">the name for the event type</param>
            <param name="propertyNames">name of each property, length must match number of types</param>
            <param name="propertyTypes">type of each property, length must match number of names</param>
            <param name="optionalConfiguration">object-array type configuration</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddEventType(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Add an name for an event type that represents map events, and for which each property may itself be a Map
            of further properties, with unlimited nesting levels. <para/> Each entry in the type mapping must contain
            the String property name as the key value, and either a Class, or a further Map&lt;String, Object&gt;, or
            the name of another previously-register Map event type (append [] for array of Map).
            </summary>
            <param name="eventTypeName">is the name for the event type</param>
            <param name="typeMap">maps the name of each property in the Map event to the Type(fully qualified classname) of its value in Map event instances.</param>
            <throws>ConfigurationException if the name is already in used for a different type</throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddEventType(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},com.espertech.esper.client.ConfigurationEventTypeMap)">
            <summary>
            Add a name for an event type that represents Map events,
            and for which each property may itself be a Map of further properties,
            with unlimited nesting levels.
            <para/>
            Each entry in the type mapping must contain the String property name as the key value,
            and either a Class, or a further Dictionary, or the name
            of another previously-register Map event type (append [] for array of Map).
            </summary>
            <param name="eventTypeName">is the name for the event type</param>
            <param name="mapConfig">is the Map-event type configuration that may defined super-types, timestamp-property-name etc.</param>
            <param name="typeMap">maps the name of each property in the Map event to the type</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddEventType(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.String[])">
            <summary>
            Add an name for an event type that represents map events, and for which each property may itself be a Map
            of further properties, with unlimited nesting levels.
            <para/>
            Each entry in the type mapping must contain the String property name as the key value, and either a Class,
            or a further Map&lt;String, Object&gt;, or the name of another previously-register Map event type (append [] for array of Map).
            </summary>
            <param name="eventTypeName">is the name for the event type</param>
            <param name="typeMap">maps the name of each property in the Map event to the Type(fully qualified classname)
            of its value in Map event instances.</param>
            <param name="superTypes">is an array of event type name of further Map types that this</param>
            <throws>ConfigurationException if the name is already in used for a different type</throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddEventType(System.String,com.espertech.esper.client.ConfigurationEventTypeXMLDOM)">
            <summary>
            Add an name for an event type that represents XmlNode events.
            <para/> Allows a second name to be added for the same type. Does not allow the same name to be used for different types.
            </summary>
            <param name="eventTypeName">is the name for the event type</param>
            <param name="xmlDOMEventTypeDesc">descriptor containing property and mapping information for XML-DOM events</param>
            <throws>ConfigurationException if the name is already in used for a different type</throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddVariable``1(System.String,``0)">
            <summary>
            Add a variable. Use the runtime API to set variable values or EPL statements to change variable values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="variableName">name of the variable to add</param>
            <param name="initializationValue">is the first assigned value</param>
            <throws>ConfigurationException if the type and initialization value don't match or the variable nameis already in use </throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddVariable(System.String,System.Type,System.Object)">
            <summary>
            Add a variable. Use the runtime API to set variable values or EPL statements to change variable values.
            </summary>
            <param name="variableName">name of the variable to add</param>
            <param name="type">the type name of the variable, must be a primitive or boxed builtin scalar type or "object" for any value an event type name or a class name or fully-qualified class name.  Append "[]" for array.</param>
            <param name="initializationValue">is the first assigned value</param>
            <throws>ConfigurationException if the type and initialization value don't match or the variable nameis already in use </throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddVariable(System.String,System.String,System.Object,System.Boolean)">
            <summary>
            Add a variable.
            <para/>
            Use the runtime API to set variable values or EPL statements to change variable values.
            </summary>
            <param name="variableName">name of the variable to add</param>
            <param name="type">the type name of the variable, must be a primitive or boxed builtin scalar type or "object" for any value an event type name or a class name or fully-qualified class name.  Append "[]" for array.</param>
            <param name="initializationValue">is the first assigned value</param>
            <param name="constant">if set to <c>true</c> [constant].</param>
            <throws>ConfigurationException if the type and initialization value don't match or the variable nameis already in use </throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddPlugInEventType(System.String,System.Collections.Generic.IList{System.Uri},System.Object)">
            <summary>
            Adds an name for an event type that one of the plug-in event representations resolves to an event type.
            <para/> The order of the URIs matters as event representations are asked in turn, to accept the event type.
            <para/> URIs can be child URIs of plug-in event representations and can add additional parameters or fragments
            for use by the event representation.
            </summary>
            <param name="eventTypeName">is the name of the event type</param>
            <param name="resolutionURIs">is URIs that are matched to registered event representations</param>
            <param name="initializer">is an optional value for parameterizing or configuring the event type</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddRevisionEventType(System.String,com.espertech.esper.client.ConfigurationRevisionEventType)">
            <summary>
            Adds an revision event type. The name of the event type may be used with named windows to indicate that
            updates or new versions of events are processed.
            </summary>
            <param name="revisioneventTypeName">the name of the revision event type</param>
            <param name="revisionEventTypeConfig">the configuration</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddVariantStream(System.String,com.espertech.esper.client.ConfigurationVariantStream)">
            <summary>
            Adds a new variant stream. Variant streams allow events of disparate types to be treated the same.
            </summary>
            <param name="variantStreamName">is the name of the variant stream</param>
            <param name="variantStreamConfig">the configuration such as variant type names and any-type setting</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.UpdateMapEventType(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Updates an existing Map event type with additional properties.
            <para/> Does not update existing properties of the updated Map event type.
            <para/> Adds additional nested properties to nesting levels, if any.
            <para/> Each entry in the type mapping must contain the String property name of the additional property
            and either a Class or further Map&lt;String, Object&gt; value for nested properties.
            <para/> Map event types can only be updated at runtime, at configuration time updates are not allowed.
            <para/> The type Map may list previously declared properties or can also contain only the new properties to be added.
            </summary>
            <param name="mapeventTypeName">the name of the map event type to update</param>
            <param name="typeMap">a Map of string property name and type</param>
            <throws>ConfigurationException if the event type name could not be found or is not a Map</throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.IsVariantStreamExists(System.String)">
            <summary>
            Returns true if a variant stream by the name has been declared, or false if not.
            </summary>
            <param name="name">of variant stream</param>
            <returns>
            indicator whether the variant stream by that name exists
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.SetMetricsReportingInterval(System.String,System.Int64)">
            <summary>
            Sets a new interval for metrics reporting for a pre-configured statement group, or changes the default statement
            reporting interval if supplying a null value for the statement group name.
            </summary>
            <param name="stmtGroupName">name of statement group, provide a null value for the default statement interval (default group)</param>
            <param name="newIntervalMSec">millisecond interval, use zero or negative value to disable</param>
            <throws>ConfigurationException if the statement group cannot be found</throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.SetMetricsReportingStmtEnabled(System.String)">
            <summary>
            Enable metrics reporting for the given statement.
            <para/> This operation can only be performed at runtime and is not available at engine initialization time.
            <para/> Statement metric reporting follows the configured default or statement group interval.
            <para/> Only if metrics reporting (on the engine level) has been enabled at initialization time can statement-level
            metrics reporting be enabled through this method.
            </summary>
            <param name="statementName">for which to enable metrics reporting</param>
            <throws>ConfigurationException if the statement cannot be found</throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.SetMetricsReportingStmtDisabled(System.String)">
            <summary>
            Disable metrics reporting for a given statement.
            </summary>
            <param name="statementName">for which to disable metrics reporting</param>
            <throws>ConfigurationException if the statement cannot be found</throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.SetMetricsReportingEnabled">
            <summary>
            Enable engine-level metrics reporting.
            <para/> Use this operation to control, at runtime, metrics reporting globally.
            <para/> Only if metrics reporting (on the engine level) has been enabled at initialization time can metrics
            reporting be re-enabled at runtime through this method.
            </summary>
            <throws>ConfigurationException if use at runtime and metrics reporting had not been enabled at initialization time</throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.SetMetricsReportingDisabled">
            <summary>
            Disable engine-level metrics reporting.
            <para/> Use this operation to control, at runtime, metrics reporting globally. Setting metrics reporting to
            disabled removes all performance cost for metrics reporting.
            </summary>
            <throws>ConfigurationException if use at runtime and metrics reporting had not been enabled at initialization time</throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.RemoveEventType(System.String,System.Boolean)">
            <summary>
            Remove an event type by its name, returning an indicator whether the event type was found and removed.
            <para/> This method deletes the event type by it's name from the memory of the engine, thereby allowing that
            the name to be reused for a new event type and disallowing new statements that attempt to use the deleted name.
            <para/> If there are one or more statements in started or stopped state that reference the event type, this
            operation throws ConfigurationException unless the force flag is passed.
            <para/> If using the force flag to remove the type while statements use the type, the exact behavior of the
            engine depends on the event representation of the deleted event type and is thus not well defined. It is
            recommended to destroy statements that use the type before removing the type. Use #geteventTypeNameUsedBy
            to obtain a list of statements that use a type. <para/> The method can be used for event types implicitly
            created for insert-into streams and for named windows. The method does not remove variant streams and does
            not remove revision event types.
            </summary>
            <param name="name">the name of the event type to remove</param>
            <param name="force">false to include a check that the type is no longer in use, true to force the remove
            even though there can be one or more statements relying on that type</param>
            <returns>
            indicator whether the event type was found and removed
            </returns>
            <throws>ConfigurationException thrown to indicate that the remove operation failed</throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.GetEventTypeNameUsedBy(System.String)">
            <summary>
            Return the set of statement names of statements that are in started or stopped state and that reference
            the given event type name. <para/> A reference counts as any mention of the event type in a from-clause,
            a pattern, a insert-into or as part of on-trigger.
            </summary>
            <param name="eventTypeName">name of the event type</param>
            <returns>statement names referencing that type</returns>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.GetVariableNameUsedBy(System.String)">
            <summary>
            Return the set of statement names of statements that are in started or stopped state and that reference 
            the given variable name.
            <para/>
            A reference counts as any mention of the variable in any expression.
            </summary>
            <param name="variableName">name of the variable</param>
            <returns>
            statement names referencing that variable
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.RemoveVariable(System.String,System.Boolean)">
            <summary>
            Remove a variable by its name, returning an indicator whether the variable was found and removed.
            <para/>
            This method deletes the variable by it's name from the memory of the engine, thereby allowing that 
            the name to be reused for a new variable and disallowing new statements that attempt to use the
            deleted name.
            <para/>
            If there are one or more statements in started or stopped state that reference the variable, this 
            operation throws ConfigurationException unless the force flag is passed. 
            <para/>
            If using the force flag to remove the variable while statements use the variable, the exact behavior
            is not well defined and affected statements may log errors. It is recommended to destroy statements
            that use the variable before removing the variable. Use #getVariableNameUsedBy to obtain a list of 
            statements that use a variable.
            </summary>
            <param name="name">the name of the variable to remove</param>
            <param name="force">false to include a check that the variable is no longer in use, true to force the removeeven though there can be one or more statements relying on that variable</param>
            <returns>
            indicator whether the variable was found and removed
            </returns>
            <throws>ConfigurationException thrown to indicate that the remove operation failed</throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.ReplaceXMLEventType(System.String,com.espertech.esper.client.ConfigurationEventTypeXMLDOM)">
            <summary>
            Rebuild the XML event type based on changed type informaton, please read below 
            for limitations. 
            <para/>
            Your application must ensure that the rebuild type information is compatible with existing 
            EPL statements and existing events. 
            <para/>
            The method can be used to change XPath expressions of existing attributes and to reload the 
            schema and to add attributes.
            <para/>
            It is not recommended to remove attributes, change attribute type or change the root element name 
            or namespace, or to change type configuration other then as above. 
            <para/>
            If an existing EPL statement exists that refers to the event type then changes to the event type 
            do not become visible for those existing statements.
            </summary>
            <param name="xmlEventTypeName">the name of the XML event type</param>
            <param name="config">the new type configuration</param>
            <throws>ConfigurationException thrown when the type information change failed</throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.GetEventType(System.String)">
            <summary>
            Returns the event type for a given event type name. Returns null if a type by that name 
            does not exist.
            <para/>
            This operation is not available for static configuration and is only available for runtime use.
            </summary>
            <param name="eventTypeName">to return event type for</param>
            <returns>
            event type or null if a type by that name does not exists
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddEventType(System.String,System.String,com.espertech.esper.client.ConfigurationEventTypeLegacy)">
            <summary>
            Add an name for an event type that represents legacy type (non-object style) events.
            <para/>
            This operation cannot be used to change an existing type.
            </summary>
            <param name="eventTypeName">is the name for the event type</param>
            <param name="eventType">fully-qualified class name of the event type</param>
            <param name="legacyEventTypeDesc">descriptor containing property and mapping information for legacy type events</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.AddPlugInView(System.String,System.String,System.String)">
            <summary>Add a new plug-in view for use as a data window or derived value view. </summary>
            <param name="namespace">view namespace name</param>
            <param name="name">view name</param>
            <param name="viewFactoryClass">factory class of view</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationOperations.UpdateObjectArrayEventType(System.String,System.String[],System.Object[])">
            <summary>
            Updates an existing Object-array event type with additional properties. 
            <para>
            Does not update existing properties of the updated Object-array event type.
            </para>
            <para>
            Adds additional nested properties to nesting levels, if any. 
            </para>
            <para>
            Object-array event types can only be updated at runtime, at configuration 
            time updates are not allowed.
            </para>
            <para>
            The type properties may list previously declared properties or can also 
            contain only the new properties to be added.
            </para>
            </summary>
            <param name="myEvent">the name of the object-array event type to update</param>
            <param name="namesNew">property names</param>
            <param name="typesNew">property types</param>
            <throws>ConfigurationException if the event type name could not be found or is not a Map</throws>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationOperations.PlugInEventTypeResolutionURIs">
            <summary>
            Sets the URIs that point to plug-in event representations that are given a chance to dynamically resolve
            an event type name to an event type, when a new (unseen) event type name occurs in a new EPL statement.
            <para/> The order of the URIs matters as event representations are asked in turn, to accept the name.
            <para/> URIs can be child URIs of plug-in event representations and can add additional parameters or fragments
            for use by the event representation.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationOperations.EventTypes">
            <summary>
            Returns an array of event types tracked or available within the engine in any order. Included
            are all application-configured or EPL-created schema types as well as dynamically-allocated 
            stream's event types or types otherwise known to the engine as a dependeny type or supertype 
            to another type.
            <para/>
            Event types that are associated to statement output may not necessarily be returned as such 
            types, depending on the statement, are considered anonymous.
            <para/>
            This operation is not available for static configuration and is only available for runtime use.
            </summary>
            <value>event type array</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationOperations.PatternMaxSubexpressions">
            <summary>
            Gets or sets the current maximum pattern sub-expression count.
            <para/>
            Use null to indicate that there is not current maximum.
            </summary>
            <value>to set</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationInformation">
            <summary>
            Provides configurations for an engine instance.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.EPServicesContextFactoryClassName">
            <summary>
            Returns the service context factory class name
            </summary>
            <returns>
            class name
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.EventTypeNames">
            <summary>
            Returns the mapping of event type name to type name.
            </summary>
            <returns>
            event type names for type names
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.EventTypesMapEvents">
            <summary>
            Returns a map keyed by event type name, and values being the definition for the
            event type of the property names and types that make up the event.
            </summary>
            <returns>
            map of event type name and definition of event properties
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.EventTypesNestableMapEvents">
            <summary>
            Returns a map keyed by event type name, and values being the definition for the
            event type of the property names and types that make up the event, for nestable,
            strongly-typed Map-based event representations.
            </summary>
            <returns>
            map of event type name and definition of event properties
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.EventTypesXMLDOM">
            <summary>
            Returns the mapping of event type name to XML DOM event type information.
            </summary>
            <returns>
            event type name mapping to XML DOM configs
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.EventTypesLegacy">
            <summary>
            Returns the mapping of event type name to legacy java event type information.
            </summary>
            <returns>
            event type name mapping to legacy java class configs
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.Imports">
            <summary>
            Returns the class and package imports.
            </summary>
            <returns>
            imported names
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.DatabaseReferences">
            <summary>
            Returns a map of string database names to database configuration options.
            </summary>
            <returns>
            map of database configurations
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.PlugInViews">
            <summary>
            Returns a list of configured plug-in views.
            </summary>
            <returns>
            list of plug-in view configs
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.PlugInVirtualDataWindows">
            <summary>
            Returns a list of configured plug-in virtual data windows
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.PluginLoaders">
            <summary>
            Returns a list of configured plugin loaders.
            </summary>
            <returns>
            adapter loaders
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.PlugInAggregationFunctions">
            <summary>
            Returns a list of configured plug-in aggregation functions.
            </summary>
            <returns>
            list of configured aggregations
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.PlugInSingleRowFunctions">
            <summary>
            Returns a list of configured plug-in single-row functions.
            </summary>
            <value>The plug in single row functions.</value>
            <returns>list of configured single-row functions</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.PlugInPatternObjects">
            <summary>
            Returns a list of configured plug-ins for pattern observers and guards.
            </summary>
            <returns>
            list of pattern plug-ins
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.EngineDefaults">
            <summary>
            Returns engine default settings.
            </summary>
            <returns>
            engine defaults
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.Variables">
            <summary>
            Returns the variables by name as key and type plus initialization value as value
            </summary>
            <returns>
            map of variable name and variable configuration
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.MethodInvocationReferences">
            <summary>
            Returns a map of class name and cache configurations, for use in method
            invocations in the from-clause of methods provided by the class.
            </summary>
            <returns>
            map of fully-qualified or simple class name and cache configuration
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.EventTypeAutoNamePackages">
            <summary>
            Returns a set of namespaces that event classes reside in.
            <para/>
            This setting allows an application to place all it's events into one or more
            namespaces and then declare these namespaces via this method. The engine attempts
            to resolve an event type name to a class residing in each declared namespace.
            <para/>
            For example, in the statement "select * from MyEvent" the engine attempts to
            load class "namespace.MyEvent" and if successful, uses that class as the
            event type.
            </summary>
            <returns>
            set of namespace to look for events types when encountering a new event
            type name
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.PlugInEventRepresentation">
            <summary>
            Returns a map of plug-in event representation URI and their event representation
            class and initializer.
            </summary>
            <returns>
            map of URI keys and event representation configuration
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.PlugInEventTypes">
            <summary>
            Returns a map of event type name of those event types that will be supplied by a
            plug-in event representation, and their configuration.
            </summary>
            <returns>
            map of names to plug-in event type config
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.PlugInEventTypeResolutionURIs">
            <summary>
            Returns the URIs that point to plug-in event representations that are given a
            chance to dynamically resolve an event type name to an event type, when a new
            (unseen) event type name occurs in a new EPL statement.
            <para/>
            The order of the URIs matters as event representations are asked in turn, to
            accept the name.
            <para/>
            URIs can be child URIs of plug-in event representations and can add additional
            parameters or fragments for use by the event representation.
            </summary>
            <returns>
            URIs for resolving an event type name
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.RevisionEventTypes">
            <summary>
            Returns a map of revision event type name and revision event type configuration.
            Revision event types handle updates (new versions) for past events.
            </summary>
            <returns>
            map of name and revision event type config
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.VariantStreams">
            <summary>
            Returns a map of variant stream name and variant configuration information.
            Variant streams allows handling events of all sorts of different event types the same
            way.
            </summary>
            <returns>
            map of name and variant stream config
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.MapTypeConfigurations">
            <summary>
            Returns for each Map event type name the set of supertype event type names (Map
            types only).
            </summary>
            <returns>
            map of name to set of supertype names
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.ObjectArrayTypeConfigurations">
            <summary>
            Returns the object-array event type configurations.
            </summary>
            <value>type configs</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationInformation.EventTypesNestableObjectArrayEvents">
            <summary>
            Returns the object-array event types.
            </summary>
            <value>object-array event types</value>
        </member>
        <member name="F:com.espertech.esper.client.Configuration.ESPER_DEFAULT_CONFIG">
            <summary> Default name of the configuration file.</summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration._eventClasses">
            <summary> Map of event name and fully-qualified type name.</summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration._eventTypesXmldom">
            <summary> Map of event type name and XML DOM configuration.</summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration._eventTypesLegacy">
            <summary> Map of event type name and Legacy-type event configuration.</summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration._mapNames">
            <summary>
            The type aliases for events that are backed by Map, not containing
            strongly-typed nested maps.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration._nestableMapNames">
            <summary>
            The type aliases for events that are backed by Map, possibly containing
            strongly-typed nested maps.
            <para/>
            Each entries value must be either a Class or a DataMap to define nested maps.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.espertech.esper.client.Configuration._nestableObjectArrayNames" -->
        <member name="F:com.espertech.esper.client.Configuration._mapTypeConfigurations">
            <summary>Map event types additional configuration information.</summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration._objectArrayTypeConfigurations">
            <summary>
            Map event types additional configuration information.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration._imports">
            <summary>
            The class and namespace imports that will be used to resolve partial class names.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration._plugInViews">
            <summary>List of configured plug-in views.</summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration._plugInVirtualDataWindows">
            <summary>List of configured plug-in views.</summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration._plugInPatternObjects">
            <summary>List of configured plug-in pattern objects.</summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration._plugInAggregationFunctions">
            <summary>List of configured plug-in aggregation functions.</summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration._plugInSingleRowFunctions">
            <summary>List of configured plug-in single-row functions.</summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration._pluginLoaders">
            <summary>List of adapter loaders.</summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration._engineDefaults">
            <summary>
            Saves engine default configs such as threading settings
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration._eventTypeAutoNamePackages">
            <summary>
            Saves the namespaces to search to resolve event type aliases.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration._variables">
            <summary>
            Map of variables.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration._methodInvocationReferences">
            <summary>
            Map of class name and configuration for method invocations on that class.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration._plugInEventRepresentation">
            <summary>Map of plug-in event representation name and configuration</summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration._plugInEventTypes">
            <summary>Map of plug-in event types.</summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration._revisionEventTypes">
            <summary>All revision event types which allow updates to past events.</summary>
        </member>
        <member name="F:com.espertech.esper.client.Configuration._variantStreams">
            <summary>Variant streams allow events of disparate types to be treated the same.</summary>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.#ctor">
            <summary>
            Constructs an empty configuration. The auto import values
            are set to System, System.Collections and System.Text
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddPlugInAggregationFunction(System.String,System.String)">
            <summary>
            Adds a plug-in aggregation function given a function name and an aggregation class name.
            <p>
            The aggregation class must : the base class <see cref="!:AggregationSupport"/>.
            </p>
            <p>
            The same function name cannot be added twice.
            </p>
            </summary>
            <param name="functionName">is the new aggregation function name</param>
            <param name="aggregationClassName">is the fully-qualified class name of the class implementing the aggregation function</param>
            <throws>
            ConfigurationException is thrown to indicate a problem adding aggregation function
            </throws>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddPlugInSingleRowFunction(System.String,System.String,System.String,com.espertech.esper.client.ValueCache,com.espertech.esper.client.FilterOptimizable)">
            <summary>Add single-row function with configurations. </summary>
            <param name="functionName">EPL name of function</param>
            <param name="className">providing fully-qualified class name</param>
            <param name="methodName">providing method name</param>
            <param name="valueCache">value cache settings</param>
            <param name="filterOptimizable">settings whether subject to optimizations</param>
            <throws>ConfigurationException thrown to indicate that the configuration is invalid</throws>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddPlugInSingleRowFunction(System.String,System.String,System.String,com.espertech.esper.client.ValueCache,com.espertech.esper.client.FilterOptimizable,System.Boolean)">
            <summary>
            Add single-row function with configurations.
            </summary>
            <param name="functionName">EPL name of function</param>
            <param name="className">providing fully-qualified class name</param>
            <param name="methodName">providing method name</param>
            <param name="valueCache">value cache settings</param>
            <param name="filterOptimizable">settings whether subject to optimizations</param>
            <param name="rethrowExceptions">if set to <c>true</c> [rethrow exceptions].</param>
            <throws>ConfigurationException thrown to indicate that the configuration is invalid</throws>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddDatabaseReference(System.String,com.espertech.esper.client.ConfigurationDBRef)">
            <summary>
            Add a database reference with a given database name.
            </summary>
            <param name="name">is the database name</param>
            <param name="configurationDBRef">descriptor containing database connection and access policy information</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.IsEventTypeExists(System.String)">
            <summary>
            Checks if an eventTypeName has already been registered for that name.
            </summary>
            <param name="eventTypeName">the name</param>
            <returns>true if already registered</returns>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddEventType(System.String,System.String)">
            <summary>
            Add a name for an event type represented by plain-old object events.
            </summary>
            <param name="eventTypeName">is the name for the event type</param>
            <param name="nativeEventTypeName">fully-qualified class name of the event type</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddEventType(System.String,System.Type)">
            <summary>
            Add a name for an event type represented by plain-old object events.
            </summary>
            <param name="eventTypeName">is the name for the event type</param>
            <param name="eventType">is the event class for which to create the name</param>
            <throws>
            ConfigurationException if the name is already in used for a different type
            </throws>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddEventType(System.Type)">
            <summary>
            Add a name for an event type represented by plain-old object events,
            and the name is the simple name of the type.
            </summary>
            <param name="eventType">the event type for which to create the name</param>
            <throws>ConfigurationException if the name is already in used for a different type</throws>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddEventType``1(System.String)">
            <summary>
            Adds a name for an event type represented by the type parameter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="eventTypeName">Name of the event type.</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddEventType``1">
            <summary>
            Adds a name for an event type represented by the type parameter.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddEventType(System.String,com.espertech.esper.compat.Properties)">
            <summary>
            Add an name for an event type that represents map events.
            <para/>
            Each entry in the type map is the property name and the fully-qualified type name or primitive type name.
            </summary>
            <param name="eventTypeName">is the name for the event type</param>
            <param name="typeMap">maps the name of each property in the Map event to the type(fully qualified classname) of its value in Map event instances. </param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddMapSuperType(System.String,System.String)">
            <summary>
            Add, for a given Map event type identified by the first parameter, the supertype (by its event type name).
            <para/>
            Each Map event type may have any number of supertypes, each supertype must also be of a Map-type event. </summary>
            <param name="mapeventTypeName">the name of a Map event type, that is to have a supertype</param>
            <param name="mapSupertypeName">the name of a Map event type that is the supertype</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddObjectArraySuperType(System.String,System.String)">
            <summary>
            Add, for a given Object-array event type identified by the first parameter, the 
            supertype (by its event type name). 
            <para/>
            Each Object array event type may have any number of supertypes, each supertype must 
            also be of a Object-array-type event.
            </summary>
            <param name="eventTypeName">the name of a Map event type, that is to have a supertype</param>
            <param name="supertypeName">the name of a Map event type that is the supertype</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddMapConfiguration(System.String,com.espertech.esper.client.ConfigurationEventTypeMap)">
            <summary>
            Add configuration for a map event type.
            <param name="mapeventTypeName">configuration to add</param>
            <param name="config">config map type configuration</param>
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddObjectArrayConfiguration(System.String,com.espertech.esper.client.ConfigurationEventTypeObjectArray)">
            <summary>Add configuration for a object array event type. </summary>
            <param name="objectArrayeventTypeName">configuration to add</param>
            <param name="config">map type configuration</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddEventType(System.String,com.espertech.esper.client.ConfigurationEventTypeXMLDOM)">
            <summary>Add an name for an event type that represents System.Xml.XmlNode events. </summary>
            <param name="eventTypeName">is the name for the event type</param>
            <param name="xmlDOMEventTypeDesc">descriptor containing property and mapping information for XML-DOM events</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddEventType``1(com.espertech.esper.client.ConfigurationEventTypeLegacy)">
            <summary>
            Add an name for an event type that represents legacy type events.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="legacyEventTypeDesc">descriptor containing property and mapping information for legacy type events</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddEventType``1(System.String,com.espertech.esper.client.ConfigurationEventTypeLegacy)">
            <summary>
            Add an name for an event type that represents legacy type events.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="eventTypeName">is the name for the event type</param>
            <param name="legacyEventTypeDesc">descriptor containing property and mapping information for legacy type events</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddEventType(System.String,System.String,com.espertech.esper.client.ConfigurationEventTypeLegacy)">
            <summary>Add an name for an event type that represents legacy type events. </summary>
            <param name="eventTypeName">is the name for the event type</param>
            <param name="eventType">fully-qualified class name of the event type</param>
            <param name="legacyEventTypeDesc">descriptor containing property and mapping information for legacy type events</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddImport(System.String)">
            <summary>
            Add a namespace. Adding will suppress the use of the default namespaces.
            </summary>
            <param name="importName">is a fully-qualified class name or a package name with wildcard</param>
            <throws>
            ConfigurationException if incorrect package or class names are encountered
            </throws>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddImport(System.String,System.String)">
            <summary>
            Adds the class or namespace (importName) ot the list of automatically imported types.
            </summary>
            <param name="importName">Name of the import.</param>
            <param name="assemblyNameOrFile">The assembly name or file.</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddImport(System.Type)">
            <summary>
            Adds an import for a specific type.
            </summary>
            <param name="autoImport">The auto import.</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddImport``1">
            <summary>
            Adds the import.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddNamespaceImport``1">
            <summary>
            Adds an import for the namespace associated with the given type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.RemoveImport(System.String)">
            <summary>
            Removes the import.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddMethodRef(System.String,com.espertech.esper.client.ConfigurationMethodRef)">
            <summary>
            Adds a cache configuration for a class providing methods for use in the from-clause.
            </summary>
            <param name="className">the class name (simple or fully-qualified) providing methods</param>
            <param name="methodInvocationConfig">the cache configuration</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddMethodRef(System.Type,com.espertech.esper.client.ConfigurationMethodRef)">
            <summary>
            Adds a cache configuration for a class providing methods for use in the from-clause.
            </summary>
            <param name="clazz">the class providing methods</param>
            <param name="methodInvocationConfig">the cache configuration</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddPluginLoader(System.String,System.String,com.espertech.esper.compat.Properties)">
            <summary>Add an input/output plugin loader.</summary>
            <param name="loaderName">is the name of the loader</param>
            <param name="typeName">is the fully-qualified classname of the loader class</param>
            <param name="configuration">is loader cofiguration entries</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddPluginLoader(System.String,System.String)">
            <summary>
            Add a plugin loader (f.e. an input/output adapter loader) without any additional loader configuration.
            <p>
            The class is expected to implement <seealso cref="T:com.espertech.esper.plugin.PluginLoader"/>
            </p>.
            </summary>
            <param name="loaderName">is the name of the loader</param>
            <param name="className">is the fully-qualified classname of the loader class</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddPluginLoader(System.String,System.String,com.espertech.esper.compat.Properties,System.String)">
            <summary>
            Add a plugin loader (f.e. an input/output adapter loader).
            <p>
            The class is expected to implement <seealso cref="T:com.espertech.esper.plugin.PluginLoader"/>
            </p>.
            </summary>
            <param name="loaderName">is the name of the loader</param>
            <param name="typeName">is the fully-qualified classname of the loader class</param>
            <param name="configuration">is loader cofiguration entries</param>
            <param name="configurationXML">config xml if any</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddPlugInView(System.String,System.String,System.String)">
            <summary>Add a view for plug-in.</summary>
            <param name="namespace">is the namespace the view should be available under</param>
            <param name="name">is the name of the view</param>
            <param name="viewFactoryClass">is the view factory class to use</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddPlugInVirtualDataWindow(System.String,System.String,System.String)">
            <summary>Add a virtual data window for plug-in. </summary>
            <param name="namespace">is the namespace the virtual data window should be available under</param>
            <param name="name">is the name of the data window</param>
            <param name="factoryClass">is the view factory class to use</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddPlugInVirtualDataWindow(System.String,System.String,System.String,System.Object)">
            <summary>Add a virtual data window for plug-in. </summary>
            <param name="namespace">is the namespace the virtual data window should be available under</param>
            <param name="name">is the name of the data window</param>
            <param name="factoryClass">is the view factory class to use</param>
            <param name="customConfigurationObject">additional configuration to be passed along</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddPlugInPatternObserver(System.String,System.String,System.String)">
            <summary>Add a pattern event observer for plug-in.</summary>
            <param name="namespace">is the namespace the observer should be available under</param>
            <param name="name">is the name of the observer</param>
            <param name="observerFactoryClass">is the observer factory class to use</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddPlugInPatternGuard(System.String,System.String,System.String)">
            <summary>Add a pattern guard for plug-in.</summary>
            <param name="namespace">is the namespace the guard should be available under</param>
            <param name="name">is the name of the guard</param>
            <param name="guardFactoryClass">is the guard factory class to use</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddVariable``1(System.String,``0,System.Boolean)">
            <summary>
            Add variable that can be a constant.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="variableName">Name of the variable.</param>
            <param name="initializationValue">The initialization value.</param>
            <param name="constant">if set to <c>true</c> [constant].</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddPlugInEventRepresentation(System.Uri,System.String,System.Object)">
            <summary>Adds an event representation responsible for creating event types (event metadata) and event bean instances (events) fora certain kind of object representation that holds the event property values.</summary>
            <param name="eventRepresentationRootURI">uniquely identifies the event representation and acts as a parentfor child URIs used in resolving</param>
            <param name="eventRepresentationClassName">is the name of the class implementing <see cref="T:com.espertech.esper.plugin.PlugInEventRepresentation"/>.</param>
            <param name="initializer">is optional configuration or initialization information, or null if none required</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddPlugInEventRepresentation(System.Uri,System.Type,System.Object)">
            <summary>Adds an event representation responsible for creating event types (event metadata) and event bean instances (events) fora certain kind of object representation that holds the event property values.</summary>
            <param name="eventRepresentationRootURI">uniquely identifies the event representation and acts as a parentfor child URIs used in resolving</param>
            <param name="eventRepresentationType">is the class implementing <see cref="T:com.espertech.esper.plugin.PlugInEventRepresentation"/>.</param>
            <param name="initializer">is optional configuration or initialization information, or null if none required</param>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.Configure">
            <summary> Use the configuration specified in an application
            resource named <tt>esper.cfg.xml</tt>.
            </summary>
            <returns> Configuration initialized from the resource
            </returns>
            <throws>  EPException thrown to indicate error reading configuration </throws>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.Configure(System.String)">
            <summary> Use the configuration specified in the given application
            resource. The format of the resource is defined in
            <tt>esper-configuration-2.0.xsd</tt>.
            <p/>
            The resource is found via <tt>getConfigurationInputStream(resource)</tt>.
            That method can be overridden to implement an arbitrary lookup strategy.
            <p/>
            See <tt>getResourceAsStream</tt> for information on how the resource name is resolved.
            </summary>
            <param name="resource">if the file name of the resource
            </param>
            <returns> Configuration initialized from the resource
            </returns>
            <throws>  EPException thrown to indicate error reading configuration </throws>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.GetConfigurationInputStream(System.String)">
             <summary> Get the configuration file as an <tt>InputStream</tt>. Might be overridden
             by subclasses to allow the configuration to be located by some arbitrary
             mechanism.
            
             See GetResourceAsStream for information on how the resource name is resolved.
             </summary>
             <param name="resource">is the resource name
             </param>
             <returns> input stream for resource
             </returns>
             <throws>  EPException thrown to indicate error reading configuration </throws>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.Configure(System.Uri)">
             <summary> Use the configuration specified by the given URL.
             The format of the document obtained from the URL is defined in
             <tt>esper-configuration-2.0.xsd</tt>.
            
             </summary>
             <param name="url">URL from which you wish to load the configuration
             </param>
             <returns> A configuration configured via the file
             </returns>
             <throws>  EPException </throws>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.Configure(System.IO.FileInfo)">
             <summary> Use the configuration specified in the given application
             file. The format of the file is defined in
             <tt>esper-configuration-2.0.xsd</tt>.
            
             </summary>
             <param name="configFile"><tt>File</tt> from which you wish to load the configuration
             </param>
             <returns> A configuration configured via the file
             </returns>
             <throws>  EPException </throws>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.Configure(System.Xml.XmlDocument)">
             <summary> Use the mappings and properties specified in the given XML document.
             The format of the file is defined in
             <tt>esper-configuration-2.0.xsd</tt>.
            
             </summary>
             <param name="document">an XML document from which you wish to load the configuration
             </param>
             <returns> A configuration configured via the <tt>Document</tt>
             </returns>
             <throws>  EPException if there is problem in accessing the document. </throws>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.GetResourceAsStream(System.String)">
             <summary> Returns an input stream from an application resource in the classpath.
            
             The method first removes the '/' character from the resource name if
             the first character is '/'.
            
             The lookup order is as follows:
            
             If a thread context class loader exists, use <tt>Thread.CurrentThread().getResourceAsStream</tt>
             to obtain an InputStream.
            
             If no input stream was returned, use the <tt>typeof(Configuration).getResourceAsStream</tt>.
             to obtain an InputStream.
            
             If no input stream was returned, use the <tt>typeof(Configuration).GetClassLoader().getResourceAsStream</tt>.
             to obtain an InputStream.
            
             If no input stream was returned, throw an Exception.
            
             </summary>
             <param name="resource">to get input stream for
             </param>
             <returns> input stream for resource
             </returns>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.Reset">
            <summary> Reset to an empty configuration.</summary>
        </member>
        <member name="M:com.espertech.esper.client.Configuration.AddDefaultImports">
            <summary>
            Use these imports until the user specifies something else.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.EPServicesContextFactoryClassName">
            <summary>
            Gets or sets the service context factory type name
            </summary>
            <value></value>
            <returns>class name</returns>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.EventTypeNames">
            <summary>
            Returns the mapping of event type name to type name.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.EventTypesMapEvents">
            <summary>
            Returns a map keyed by event type name name, and values being the definition for the
            event type of the property names and types that make up the event.
            </summary>
            <returns> map of event type name name and definition of event properties
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.EventTypesXMLDOM">
            <summary> Returns the mapping of event type name to XML DOM event type information.</summary>
            <returns> event type aliases mapping to XML DOM configs
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.EventTypesLegacy">
            <summary> Returns the mapping of event type name to legacy event type information.</summary>
            <returns> event type aliases mapping to legacy type configs
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.Imports">
            <summary> Returns the class and package imports.</summary>
            <returns> imported names
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.DatabaseReferences">
            <summary> Returns a map of string database names to database configuration options.</summary>
            <returns> map of database configurations
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.PlugInViews">
            <summary>Returns a list of configured plug-in views.</summary>
            <returns>list of plug-in view configs</returns>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.PlugInVirtualDataWindows">
            <summary>
            Returns the plug in virtual data windows.
            </summary>
            <value>The plug in virtual data windows.</value>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.PluginLoaders">
            <summary>Returns a list of configured plugin loaders.</summary>
            <returns>plugin loaders</returns>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.PlugInAggregationFunctions">
            <summary>Returns a list of configured plug-in aggregation functions.</summary>
            <returns>list of configured aggregations</returns>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.PlugInPatternObjects">
            <summary>Returns a list of configured plug-ins for pattern observers and guards.</summary>
            <returns>list of pattern plug-ins</returns>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.Variables">
            <summary>
            Gets the variables.
            </summary>
            <value>The variables.</value>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.MethodInvocationReferences">
            <summary>
            Gets the method invocation references.
            </summary>
            <value>The method invocation references.</value>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.EventTypeAutoNamePackages">
            <summary>
            Returns a set of namespaces that event classes reside in.
            <para>
            This setting allows an application to place all it's events into one or more namespaces
            and then declare these packages via this method. The engine
            attempts to resolve an event type name to a type residing in each declared package.
            </para>
            <para>
            For example, in the statement "select * from MyEvent" the engine attempts to load
            class "namespace.MyEvent" and if successful, uses that class as the event type.
            </para>
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.EngineDefaults">
            <summary>
            Gets the engine default settings.
            </summary>
            <value>The engine defaults.</value>
        </member>
        <member name="P:com.espertech.esper.client.Configuration.VariantStreams">
            <summary>
            Gets the variant streams.
            </summary>
            <value>The variant streams.</value>
        </member>
        <member name="T:com.espertech.esper.client.EventRepresentation">
            <summary>
            Enumeration of event representation
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.EventRepresentation.OBJECTARRAY">
            <summary>
            Event representation is object-array (Object[]).
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.EventRepresentation.MAP">
            <summary>
            Event representation is Map (any IDictionary interface implementation).
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationCacheReferenceType">
            <summary>
            Enum indicating what kind of references are used to store the cache map's keys and values.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationCacheReferenceType.HARD">
            <summary>
            Constant indicating that hard references should be used.
            <para>
            Does not allow garbage collection to remove cache entries.
            </para>
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationCacheReferenceType.SOFT">
            <summary>
            Constant indicating that soft references should be used.
            <para>
            Allows garbage collection to remove cache entries only after all weak references have been collected. 
            </para>
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationCacheReferenceType.WEAK">
            <summary>
            Constant indicating that weak references should be used.
            <para>
            Allows garbage collection to remove cache entries. 
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationCacheReferenceTypeHelper.GetDefault">
            <summary>
            The default policy is set to WEAK to reduce the chance that out-of-memory errors occur
            as caches fill, and stay backwards compatible with prior Esper releases.
            </summary>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationDataCache">
            <summary>Marker interface for different cache settings. </summary>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationDBRef">
            <summary>
            Container for database configuration information, such as
            options around getting a database connection and options to control the lifecycle
            of connections and set connection parameters.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationDBRef.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationDBRef.SetDatabaseDriver(System.String,com.espertech.esper.compat.Properties)">
            <summary>
            Sets the database provider connection.
            </summary>
            <param name="driverName">Name of the driver.</param>
            <param name="properties">The properties.</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationDBRef.SetDatabaseDriver(com.espertech.esper.client.DbDriverFactoryConnection)">
            <summary>
            Sets the database driver.
            </summary>
            <param name="dbDriverFactoryConnection">The db driver factory connection.</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationDBRef.SetDatabaseDriver(com.espertech.esper.client.DbDriverFactoryConnection,com.espertech.esper.compat.Properties)">
            <summary>
            Sets the database driver.
            </summary>
            <param name="dbDriverFactoryConnection">The db driver factory connection.</param>
            <param name="properties">The properties.</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationDBRef.SetDatabaseDriver(com.espertech.esper.client.DbDriverConfiguration)">
            <summary>
            Sets the database driver.
            </summary>
            <param name="dbSpecification">The db specification.</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationDBRef.SetExpiryTimeCache(System.Double,System.Double)">
            <summary>
            Configures an expiry-time cache of the given maximum age in seconds and purge interval in seconds.
            <para>
            Specifies the cache reference type to be weak references. Weak reference cache entries become
            eligible for garbage collection and are removed from cache when the garbage collection requires so.
            </para>
            </summary>
            <param name="maxAgeSeconds">is the maximum number of seconds before a query result is considered stale (also known as time-to-live)
            </param>
            <param name="purgeIntervalSeconds">is the interval at which the engine purges stale data from the cache
            </param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationDBRef.SetExpiryTimeCache(System.Double,System.Double,com.espertech.esper.client.ConfigurationCacheReferenceType)">
            <summary>
            Configures an expiry-time cache of the given maximum age in seconds and purge interval in seconds. Also allows
            setting the reference type indicating whether garbage collection may remove entries from cache.
            </summary>
            <param name="maxAgeSeconds">the maximum number of seconds before a query result is considered stale (also known as time-to-live)</param>
            <param name="purgeIntervalSeconds">the interval at which the engine purges stale data from the cache.</param>
            <param name="cacheReferenceType">specifies the reference type to use</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationDBRef.AddSqlTypeBinding(System.Type,System.Type)">
            <summary>
            Adds the SQL types binding.
            </summary>
            <param name="sqlType">Type of the SQL.</param>
            <param name="desiredType">The desired type.</param>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationDBRef.ConnectionAutoCommit">
            <summary>
            Gets or sets the auto-commit connection settings for new connections to this database.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationDBRef.ConnectionTransactionIsolation">
            <summary>
            Gets or sets the transaction isolation level on new connections created for this database.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationDBRef.ConnectionCatalog">
            <summary>
            Gets or sets the catalog name for new connections created for this database.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationDBRef.LRUCache">
            <summary>
            Gets or sets the LRU cache to a given size for the database.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationDBRef.ConnectionSettings">
            <summary> Returns the connection settings for this database.</summary>
            <returns> connection settings
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationDBRef.ConnectionLifecycle">
            <summary>
            Gets or sets the setting to control whether a new connection is obtained
            for each lookup, or connections are retained between lookups. Controls
            whether a new connection is obtained for each lookup, or connections
            are retained between lookups.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationDBRef.ConnectionFactoryDesc">
            <summary>
            Gets the descriptor controlling connection creation settings.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationDBRef.DataCacheDesc">
            <summary>
            Gets a query result data cache descriptor.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationDBRef.DataTypeMapping">
            <summary>
            Returns the mapping of types that the engine must perform
            when receiving output columns of that sql types.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationDBRef.MetadataRetrievalEnum">
            <summary>
            Returns an enumeration indicating how the engine retrieves metadata about the columns
            that a given SQL query returns.
            <para/>
            The engine requires to retrieve result column names and types in order to build a resulting
            event type and perform expression type checking.
            </summary>
            <returns>indication how to retrieve metadata</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationDBRef.MetadataOrigin">
            <summary>
            Gets and sets an indicator that indicates how the engine should retrieve
            metadata about the columns that a given SQL query returns.
            <para>
            The engine requires to retrieve result column names and types in order to build a resulting
            event type and perform expression type checking.
            </para>
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationDBRef.ColumnChangeCase">
            <summary>
            Gets or sets an enum value determining how the engine changes case
            on output column names returned from statement or statement result
            set metadata.
            </summary>
            <returns>change case enums</returns>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationDBRef.MetadataOriginEnum">
            <summary>
            Indicates how the engine retrieves metadata about a statement's output columns.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationDBRef.MetadataOriginEnum.DEFAULT">
            <summary>
            By default, get output column metadata from the prepared statement., unless
            an Oracle connection class is used in which case the behavior is SAMPLE.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationDBRef.MetadataOriginEnum.METADATA">
            <summary>
            Always get output column metadata from the prepared statement regardless of what driver
            or connection is used.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationDBRef.MetadataOriginEnum.SAMPLE">
            <summary>
            Obtain output column metadata by executing a sample query statement at statement
            compilation time. The sample statement
            returns the same columns as the statement executed during event processing.
            See the documentation for the generation or specication of the sample query statement.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationDBRef.ColumnChangeCaseEnum">
            <summary>
            Controls how output column names get reflected in the event type.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationDBRef.ColumnChangeCaseEnum.NONE">
            <summary>
            Leave the column names the way the database driver represents the column.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationDBRef.ColumnChangeCaseEnum.LOWERCASE">
            <summary>
            Change case to lowercase on any column names returned by statement metadata.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationDBRef.ColumnChangeCaseEnum.UPPERCASE">
            <summary>
            Change case to uppercase on any column names returned by statement metadata.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEngineDefaults">
            <summary>Provides access to engine configuration defaults for modification. </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEngineDefaults.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.ThreadingConfig">
            <summary>Returns threading settings. </summary>
            <value>threading settings object</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.ViewResourcesConfig">
            <summary>Returns view resources defaults. </summary>
            <value>view resources defaults</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.EventMetaConfig">
            <summary>Returns event representation default settings. </summary>
            <value>event representation default settings</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.LoggingConfig">
            <summary>Returns logging settings applicable to the engine, other then Log4J settings. </summary>
            <value>logging settings</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.VariablesConfig">
            <summary>Returns engine defaults applicable to variables. </summary>
            <value>variable engine defaults</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.StreamSelectionConfig">
            <summary>Returns engine defaults applicable to streams (insert and remove, insert only or remove only) selected for a statement. </summary>
            <value>stream selection defaults</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.TimeSourceConfig">
            <summary>Returns the time source configuration. </summary>
            <value>time source enum</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.MetricsReportingConfig">
            <summary>Returns the metrics reporting configuration. </summary>
            <value>metrics reporting config</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.LanguageConfig">
            <summary>Returns the language-related settings for the engine. </summary>
            <value>language-related settings</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.ExpressionConfig">
            <summary>Returns the expression-related settings for the engine. </summary>
            <value>expression-related settings</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.ExecutionConfig">
            <summary>Returns statement execution-related settings, settings that influence event/schedule to statement processing. </summary>
            <value>execution settings</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.AlternativeContextConfig">
            <summary>For software-provider-interface use. </summary>
            <value>alternative context</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.ExceptionHandlingConfig">
            <summary>Returns the exception handling configuration. </summary>
            <value>exception handling configuration</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.ConditionHandlingConfig">
            <summary>Returns the condition handling configuration. </summary>
            <value>condition handling configuration</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.ClusterConfig">
            <summary>Returns cluster configuration. </summary>
            <value>cluster configuration</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.PatternsConfig">
            <summary>Return pattern settings. </summary>
            <value>pattern settings</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.ScriptsConfig">
            <summary>Returns script engine settings. </summary>
            <value>script engine settings</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEngineDefaults.Threading">
            <summary>Holds threading settings. </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEngineDefaults.Threading.#ctor">
            <summary>Ctor - sets up defaults. </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Threading.ThreadLocalStyle">
            <summary>
            Gets or sets the thread local style.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Threading.IsListenerDispatchPreserveOrder">
            <summary>Returns true to indicate preserve order for dispatch to listeners, or false to indicate not to preserve order </summary>
            <value>true or false</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Threading.ListenerDispatchTimeout">
            <summary>Returns the timeout in millisecond to wait for listener code to complete before dispatching the next result, if dispatch order is preserved </summary>
            <value>listener dispatch timeout</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Threading.IsInsertIntoDispatchPreserveOrder">
            <summary>Returns true to indicate preserve order for inter-statement insert-into, or false to indicate not to preserve order </summary>
            <value>true or false</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Threading.IsInternalTimerEnabled">
            <summary>Returns true if internal timer is enabled (the default), or false for internal timer disabled. </summary>
            <value>true for internal timer enabled, false for internal timer disabled</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Threading.InternalTimerMsecResolution">
            <summary>Returns the millisecond resolutuion of the internal timer thread. </summary>
            <value>number of msec between timer processing intervals</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Threading.InsertIntoDispatchTimeout">
            <summary>Returns the number of milliseconds that a thread may maximually be blocking to deliver statement results from a producing statement that employs insert-into to a consuming statement. </summary>
            <value>millisecond timeout for order-of-delivery blocking between statements</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Threading.ListenerDispatchLocking">
            <summary>Returns the blocking strategy to use when multiple threads deliver results for a single statement to listeners, and the guarantee of order of delivery must be maintained. </summary>
            <value>is the blocking technique</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Threading.InsertIntoDispatchLocking">
            <summary>Returns the blocking strategy to use when multiple threads deliver results for a single statement to consuming statements of an insert-into, and the guarantee of order of delivery must be maintained. </summary>
            <value>is the blocking technique</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Threading.IsThreadPoolInbound">
            <summary>Returns true for inbound threading enabled, the default is false for not enabled. </summary>
            <value>indicator whether inbound threading is enabled</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Threading.IsThreadPoolTimerExec">
            <summary>Returns true for timer execution threading enabled, the default is false for not enabled. </summary>
            <value>indicator whether timer execution threading is enabled</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Threading.IsThreadPoolRouteExec">
            <summary>Returns true for route execution threading enabled, the default is false for not enabled. </summary>
            <value>indicator whether route execution threading is enabled</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Threading.IsThreadPoolOutbound">
            <summary>Returns true for outbound threading enabled, the default is false for not enabled. </summary>
            <value>indicator whether outbound threading is enabled</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Threading.ThreadPoolInboundNumThreads">
            <summary>Returns the number of thread in the inbound threading pool. </summary>
            <value>number of threads</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Threading.ThreadPoolOutboundNumThreads">
            <summary>Returns the number of thread in the outbound threading pool. </summary>
            <value>number of threads</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Threading.ThreadPoolRouteExecNumThreads">
            <summary>Returns the number of thread in the route execution thread pool. </summary>
            <value>number of threads</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Threading.ThreadPoolTimerExecNumThreads">
            <summary>Returns the number of thread in the timer execution threading pool. </summary>
            <value>number of threads</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Threading.ThreadPoolTimerExecCapacity">
            <summary>Returns the capacity of the timer execution queue, or null if none defined (the unbounded case, default). </summary>
            <value>capacity or null if none defined</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Threading.ThreadPoolInboundCapacity">
            <summary>Returns the capacity of the inbound execution queue, or null if none defined (the unbounded case, default). </summary>
            <value>capacity or null if none defined</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Threading.ThreadPoolRouteExecCapacity">
            <summary>Returns the capacity of the route execution queue, or null if none defined (the unbounded case, default). </summary>
            <value>capacity or null if none defined</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Threading.ThreadPoolOutboundCapacity">
            <summary>Returns the capacity of the outbound queue, or null if none defined (the unbounded case, default). </summary>
            <value>capacity or null if none defined</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Threading.IsEngineFairlock">
            <summary>Returns true if the engine-level lock is configured as a fair lock (default is false). <para /> This lock coordinates event processing threads (threads that send events) with threads that perform administrative functions (threads that start or destroy statements, for example). </summary>
            <value>true for fair lock</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEngineDefaults.Threading.Locking">
            <summary>Enumeration of blocking techniques. </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationEngineDefaults.Threading.Locking.SPIN">
            <summary>Spin lock blocking is good for locks held very shortly or generally uncontended locks and is therefore the default. </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationEngineDefaults.Threading.Locking.SUSPEND">
            <summary>Blocking that suspends a thread and notifies a thread to wake up can be more expensive then spin locks. </summary>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEngineDefaults.Threading.ThreadLocal">
            <summary>
            Enumeration of thread local techniques.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationEngineDefaults.Threading.ThreadLocal.FAST">
            <summary>
            Uses customized thread local objects specifically designed for
            high-speed access.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationEngineDefaults.Threading.ThreadLocal.SYSTEM">
            <summary>
            Uses LocalDataStoreSlot for thread local objects.  This uses the CLR's
            own mechanisms.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEngineDefaults.ViewResources">
            <summary>Holds view resources settings. </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEngineDefaults.ViewResources.#ctor">
            <summary>Ctor - sets up defaults. </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.ViewResources.IsShareViews">
            <summary>Returns true to indicate the engine shares view resources between statements, or false to indicate the engine does not share view resources between statements. </summary>
            <value>indicator whether view resources are shared between statements ifstatements share same-views and the engine sees opportunity to reuse an existing view. </value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.ViewResources.IsAllowMultipleExpiryPolicies">
            <summary>By default this setting is false and thereby multiple expiry policies provided by views can only be combined if any of the retain-keywords is also specified for the stream. <para /> If set to true then multiple expiry policies are allowed and the following statement compiles without exception: "select * from MyEvent.win:time(10).win:time(10)". </summary>
            <value>allowMultipleExpiryPolicies indicator whether to allow combining expiry policies provided by views</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEngineDefaults.EventMeta">
            <summary>Event representation metadata. </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEngineDefaults.EventMeta.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.EventMeta.DefaultAccessorStyle">
            <summary>Returns the default accessor style, native unless changed. </summary>
            <value>style enum</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.EventMeta.ClassPropertyResolutionStyle">
            <summary>Returns the property resolution style to use for resolving property names of Java classes. </summary>
            <value>style of property resolution</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.EventMeta.DefaultEventRepresentation">
            <summary>
            Gets or sets the default event representation.
            </summary>
            <value>The default event representation.</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEngineDefaults.Logging">
            <summary>Holds view logging settings other then the Log4J settings. </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEngineDefaults.Logging.#ctor">
            <summary>Ctor - sets up defaults. </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Logging.IsEnableExecutionDebug">
            <summary>Returns true if execution path debug logging is enabled. <para /> Only if this flag is set to true, in addition to LOG4J settings set to DEBUG, does an engine instance, produce debug out. </summary>
            <value>true if debug logging through Log4j is enabled for any event processing execution paths</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Logging.IsEnableTimerDebug">
            <summary>Returns true if timer debug level logging is enabled (true by default). <para /> Set this value to false to reduce the debug-level logging output for the timer Thread(s). For use only when debug-level logging is enabled. </summary>
            <value>indicator whether timer execution is noisy in debug or not</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Logging.IsEnableQueryPlan">
            <summary>Returns indicator whether query plan logging is enabled or not. </summary>
            <value>indicator</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Logging.IsEnableADO">
            <summary>Returns an indicator whether ADO query reporting is enabled. </summary>
            <value>indicator</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Logging.AuditPattern">
            <summary>Returns the pattern that formats audit logs.
            <para /> Available conversion characters are:  
            <para /> 
            %m      - Used to output the audit message. 
            %s      - Used to output the statement name. 
            %u      - Used to output the engine URI.
            </summary>
            <value>audit formatting pattern</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEngineDefaults.Variables">
            <summary>Holds variables settings. </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEngineDefaults.Variables.#ctor">
            <summary>Ctor - sets up defaults. </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Variables.MsecVersionRelease">
            <summary>Returns the number of milliseconds that a version of a variables is held stable for use by very long-running atomic statement execution. <para /> A slow-executing statement such as an SQL join may use variables that, at the time the statement starts to execute, have certain values. The engine guarantees that during statement execution the value of the variables stays the same as long as the statement does not take longer then the given number of milliseconds to execute. If the statement does take longer to execute then the variables release time, the current variables value applies instead. </summary>
            <value>millisecond time interval that a variables version is guaranteed to be stablein the context of an atomic statement execution </value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEngineDefaults.Scripts">
            <summary>Holder for script settings. </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEngineDefaults.Scripts.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.ConfigurationEngineDefaults.Scripts"/> class.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Scripts.DefaultDialect">
            <summary>Returns the default script dialect. </summary>
            <value>dialect</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEngineDefaults.Patterns">
            <summary>Holds variables settings. </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Patterns.MaxSubexpressions">
            <summary>Returns the maximum number of subexpressions </summary>
            <value>subexpression count</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Patterns.IsMaxSubexpressionPreventStart">
            <summary>Returns true, the default, to indicate that if there is a maximum defined it is being enforced and new subexpressions are not allowed. </summary>
            <value>indicate whether enforced or not</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEngineDefaults.StreamSelection">
            <summary>Holds default settings for stream selection in the select-clause. </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEngineDefaults.StreamSelection.#ctor">
            <summary>Ctor - sets up defaults. </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.StreamSelection.DefaultStreamSelector">
            <summary>Returns the default stream selector. <para /> Statements that select data from streams and that do not use one of the explicit stream selection keywords (istream/rstream/irstream), by default, generate selection results for the insert stream only, and not for the remove stream. <para /> This setting can be used to change the default behavior: Use the RSTREAM_ISTREAM_BOTH value to have your statements generate both insert and remove stream results without the use of the "irstream" keyword in the select clause. </summary>
            <value>default stream selector, which is ISTREAM_ONLY unless changed</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEngineDefaults.TimeSource">
            <summary>Time source configuration, the default in MILLI (millisecond resolution from System.currentTimeMillis). </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEngineDefaults.TimeSource.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.TimeSource.TimeSourceType">
            <summary>Returns the time source type. </summary>
            <value>time source type enum</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEngineDefaults.Language">
            <summary>Language settings in the engine are for string comparisons. </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEngineDefaults.Language.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Language.IsSortUsingCollator">
            <summary>Returns true to indicate to perform locale-independent string comparisons using Collator. <para /> By default this setting is false, i.e. string comparisons use the compare method. </summary>
            <value>indicator whether to use Collator for string comparisons</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEngineDefaults.Expression">
            <summary>Expression evaluation settings in the engine are for results of expressions. </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEngineDefaults.Expression.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Expression.IsIntegerDivision">
            <summary>Returns false (the default) for integer division returning double values. <para /> Returns true to signal that Java-convention integer division semantics are used for divisions, whereas the division between two non-FP numbers returns only the whole number part of the result and any fractional part is dropped. </summary>
            <value>indicator</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Expression.IsDivisionByZeroReturnsNull">
            <summary>Returns false (default) when division by zero returns Double.Infinity. Returns true when division by zero return null. <para /> If integer devision is set, then division by zero for non-FP operands also returns null. </summary>
            <value>indicator for division-by-zero results</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Expression.IsUdfCache">
            <summary>By default true, indicates that user-defined functions cache return results if the parameter set is empty or has constant-only return values. </summary>
            <value>cache flag</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Expression.IsSelfSubselectPreeval">
            <summary>Set to true (the default) to indicate that sub-selects within a statement are updated first when a new event arrives. This is only relevant for statements in which both subselects and the from-clause may react to the same exact event. </summary>
            <value>indicator whether to evaluate sub-selects first or last on new event arrival</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Expression.IsExtendedAggregation">
            <summary>Enables or disables non-SQL standard builtin aggregation functions. </summary>
            <value>indicator</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Expression.IsDuckTyping">
            <summary>Returns true to indicate that duck typing is enable for the specific syntax where it is allowed (check the documentation). </summary>
            <value>indicator</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEngineDefaults.Execution">
            <summary>Holds engine execution-related settings. </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEngineDefaults.Execution.#ctor">
            <summary>Ctor - sets up defaults. </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Execution.IsPrioritized">
            <summary>Returns false (the default) if the engine does not consider statement priority and preemptive instructions, or true to enable priority-based statement execution order. </summary>
            <value>false by default to indicate unprioritized statement execution</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Execution.IsFairlock">
            <summary>Returns true for fair locking, false for unfair locks. </summary>
            <value>fairness flag</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Execution.IsDisableLocking">
            <summary>Returns indicator whether statement-level locks are disabled. The default is false meaning statement-level locks are taken by default and depending on EPL optimizations. If set to true statement-level locks are never taken. </summary>
            <value>indicator for statement-level locks</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Execution.ThreadingProfile">
            <summary>Returns the threading profile </summary>
            <value>profile</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEngineDefaults.ThreadingProfile">
            <summary>Threading profile. </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationEngineDefaults.ThreadingProfile.LARGE">
            <summary>Large for use with 100 threads or more. Please see the documentation for more information. </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationEngineDefaults.ThreadingProfile.NORMAL">
            <summary>For use with 100 threads or less. </summary>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEngineDefaults.TimeSourceType">
            <summary>Time source type. </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationEngineDefaults.TimeSourceType.MILLI">
            <summary>Millisecond time source type with time originating from System.currentTimeMillis </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationEngineDefaults.TimeSourceType.NANO">
            <summary>Nanosecond time source from a wallclock-adjusted System.nanoTime </summary>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEngineDefaults.AlternativeContext">
            <summary>Returns the provider for runtime and administrative interfaces. </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.AlternativeContext.Runtime">
            <summary>Class name of runtime provider. </summary>
            <value>provider class</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.AlternativeContext.Admin">
            <summary>Class name of admin provider. </summary>
            <value>provider class</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.AlternativeContext.EventTypeIdGeneratorFactory">
            <summary>Returns the class name of the event type id generator. </summary>
            <value>class name</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.AlternativeContext.VirtualDataWindowViewFactory">
            <summary>Returns the class name of the virtual data window view factory. </summary>
            <value>factory class name</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.AlternativeContext.StatementMetadataFactory">
            <summary>Sets the class name of the statement metadata factory. </summary>
            <value>factory class name</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.AlternativeContext.StatementIdGeneratorFactory">
            <summary>
            Gets or sets the class name of the class for statement id generation, or 
            null if using default.
            </summary>
            <value>The statement id generator factory.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.AlternativeContext.UserConfiguration">
            <summary>
            Gets or sets the application-provided configuration object carried as 
            part of the configurations.
            </summary>
            <value>The user configuration.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.AlternativeContext.MemberName">
            <summary>
            Gets or sets the name of the member.
            </summary>
            <value>The name of the member.</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEngineDefaults.ExceptionHandling">
            <summary>Configuration object for defining exception handling behavior. </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEngineDefaults.ExceptionHandling.AddClass(System.String)">
            <summary>Add an exception handler factory class name. <para /> Provide a fully-qualified class name of the implementation of the {@link com.espertech.esper.client.hook.ExceptionHandlerFactory} interface. </summary>
            <param name="exceptionHandlerFactoryClassName">class name of exception handler factory</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEngineDefaults.ExceptionHandling.AddClasses(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add a list of exception handler class names.
            </summary>
            <param name="classNames">to add</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEngineDefaults.ExceptionHandling.AddClass(System.Type)">
            <summary>
            Add an exception handler factory class.
            <para/> 
            The class provided should implement the {@link com.espertech.esper.client.hook.ExceptionHandlerFactory} interface.
            </summary>
            <param name="exceptionHandlerFactoryClass">class of implementation</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEngineDefaults.ExceptionHandling.AddClass``1">
            <summary>
            Add an exception handler factory class. 
            <para />
            The class provided should implement the {@link com.espertech.esper.client.hook.ExceptionHandlerFactory} interface.
             </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.ExceptionHandling.HandlerFactories">
            <summary>Returns the list of exception handler factory class names, see {@link com.espertech.esper.client.hook.ExceptionHandlerFactory} </summary>
            <value>list of fully-qualified class names</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEngineDefaults.ConditionHandling">
            <summary>Configuration object for defining condition handling behavior. </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEngineDefaults.ConditionHandling.AddClass(System.String)">
            <summary>Add an condition handler factory class name. <para /> Provide a fully-qualified class name of the implementation of the {@link com.espertech.esper.client.hook.ConditionHandlerFactory} interface. </summary>
            <param name="className">class name of condition handler factory</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEngineDefaults.ConditionHandling.AddClasses(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Add a list of condition handler class names. </summary>
            <param name="classNames">to add</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEngineDefaults.ConditionHandling.AddClass(System.Type)">
            <summary>Add an condition handler factory class. <para /> The class provided should implement the {@link com.espertech.esper.client.hook.ConditionHandlerFactory} interface. </summary>
            <param name="clazz">class of implementation</param>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.ConditionHandling.HandlerFactories">
            <summary>Returns the list of condition handler factory class names, see {@link com.espertech.esper.client.hook.ConditionHandlerFactory} </summary>
            <value>list of fully-qualified class names</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEngineDefaults.Cluster">
            <summary>Cluster configuration. </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Cluster.IsEnabled">
            <summary>Returns true if enabled. </summary>
            <value>enabled flag</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Cluster.ClusterConfig">
            <summary>Returns the cluster configuration object. </summary>
            <value>cluster configuration object</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEngineDefaults.Cluster.ClusterConfiguratorClass">
            <summary>Returns the cluster configurator class. </summary>
            <value>class</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEngineDefaults.ClusterConfigurator">
            <summary>Interface for cluster configurator. </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEngineDefaults.ClusterConfigurator.Configure(com.espertech.esper.client.Configuration)">
            <summary>Provide cluster configuration information. </summary>
            <param name="configuration">information</param>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEventTypeLegacy">
            <summary>
            Configuration information for legacy event types.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeLegacy.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeLegacy.AddMethodProperty(System.String,System.String)">
            <summary>
            Adds the named event property backed by the named accessor method.
            The accessor method is expected to be a public method with no parameters
            for simple event properties, or with a single integer parameter for indexed
            event properties, or with a single String parameter for mapped event properties.
            </summary>
            <param name="name">is the event property name</param>
            <param name="accessorMethod">is the accessor method name.</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeLegacy.AddFieldProperty(System.String,System.String)">
            <summary>
            Adds the named event property backed by the named accessor field.
            </summary>
            <param name="name">is the event property name</param>
            <param name="accessorField">is the accessor field underlying the name</param>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeLegacy.AccessorStyle">
            <summary>
            Gets or sets the accessor style.
            </summary>
            <value>The accessor style.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeLegacy.CodeGeneration">
            <summary>
            Gets or sets the code generation.  Thus controls whether or
            not the engine generates code for access to event property values.
            </summary>
            <value>The code generation.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeLegacy.PropertyResolutionStyle">
            <summary>
            Gets or sets the property resolution style.
            </summary>
            <value>The property resolution style.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeLegacy.MethodProperties">
            <summary>
            Returns a list of descriptors specifying explicitly configured method names
            and their property name.
            </summary>
            <returns> list of explicit method-access descriptors
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeLegacy.FieldProperties">
            <summary> Returns a list of descriptors specifying explicitly configured field names
            and their property name.
            </summary>
            <returns> list of explicit field-access descriptors
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeLegacy.StartTimestampPropertyName">
            <summary>
            Gets or sets the start name of the timestamp property.
            </summary>
            <value>The start name of the timestamp property.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeLegacy.EndTimestampPropertyName">
            <summary>
            Gets or sets the end name of the timestamp property.
            </summary>
            <value>The end name of the timestamp property.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeLegacy.FactoryMethod">
            <summary>
            Gets or sets the the name of the factory method, either fully-qualified or just
            a method name if the method is on the same class as the configured class, to use
            when instantiating objects of the type.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeLegacy.CopyMethod">
            <summary>
            Gets or sets the method name of the method to use to copy the underlying event object.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEventTypeLegacy.LegacyFieldPropDesc">
            <summary>
            Encapsulates information about an accessor field backing a named event property.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeLegacy.LegacyFieldPropDesc.#ctor(System.String,System.String)">
            <summary> Ctor.</summary>
            <param name="name">is the event property name
            </param>
            <param name="accessorFieldName">is the accessor field name
            </param>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeLegacy.LegacyFieldPropDesc.Name">
            <summary> Returns the event property name.</summary>
            <returns> event property name
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeLegacy.LegacyFieldPropDesc.AccessorFieldName">
            <summary> Returns the accessor field name.</summary>
            <returns> accessor field name
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEventTypeLegacy.LegacyMethodPropDesc">
            <summary>
            Encapsulates information about an accessor method backing a named event property.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeLegacy.LegacyMethodPropDesc.#ctor(System.String,System.String)">
            <summary> Ctor.</summary>
            <param name="name">is the event method name
            </param>
            <param name="accessorMethodName">is the accessor method name
            </param>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeLegacy.LegacyMethodPropDesc.Name">
            <summary> Returns the event property name.</summary>
            <returns> event property name
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeLegacy.LegacyMethodPropDesc.AccessorMethodName">
            <summary> Returns the accessor method name.</summary>
            <returns> accessor method name
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.AccessorStyleEnum">
            <summary>
            Accessor style defines the methods of a class that are automatically exposed via event property.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.AccessorStyleEnum.NATIVE">
            <summary> Expose properties only, plus explicitly configured properties.</summary>
        </member>
        <member name="F:com.espertech.esper.client.AccessorStyleEnum.EXPLICIT">
            <summary> Expose only the explicitly configured properties and public members as event properties.</summary>
        </member>
        <member name="F:com.espertech.esper.client.AccessorStyleEnum.PUBLIC">
            <summary> Expose all public properties and public members as event properties, plus explicitly configured properties.</summary>
        </member>
        <member name="T:com.espertech.esper.client.CodeGenerationEnum">
            <summary> Enum to control code generation.</summary>
        </member>
        <member name="F:com.espertech.esper.client.CodeGenerationEnum.ENABLED">
            <summary> Enables code generation.</summary>
        </member>
        <member name="F:com.espertech.esper.client.CodeGenerationEnum.DISABLED">
            <summary> Dispables code generation.</summary>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEventTypeMap">
            <summary>
            Configuration object for Map-based event types.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEventTypeWithSupertype">
            <summary>
            Configuration object for event types with super-types and timestamp.
            </summary>
        </member>
        <member name="T:com.espertech.esper.util.MetaDefItem">
            <summary>
            Marker interface for use with statement and engine-level specifications.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeWithSupertype.#ctor(System.Collections.Generic.ICollection{System.String})">
            <summary>Ctor. </summary>
            <param name="superTypes">super types</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeWithSupertype.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeWithSupertype.SuperTypes">
            <summary>Returns the super types, if any. </summary>
            <value>set of super type names</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeWithSupertype.StartTimestampPropertyName">
            <summary>Returns the property name of the property providing the start timestamp value. </summary>
            <value>start timestamp property name</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeWithSupertype.EndTimestampPropertyName">
            <summary>Returns the property name of the property providing the end timestamp value. </summary>
            <value>end timestamp property name</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEventTypeObjectArray">
            <summary>
            Configuration object for Object array-based event types.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationEventTypeObjectArray.SINGLE_SUPERTYPE_MSG">
            <summary>
            Message for single supertype for object-arrays.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeObjectArray.#ctor(System.Collections.Generic.ICollection{System.String})">
            <summary>Ctor. </summary>
            <param name="superTypes">super types</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeObjectArray.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEventTypeXMLDOM">
            <summary>
            Configuration object for enabling the engine to process events represented as XML DOM document nodes.
            <para/>
            Use this class to configure the engine for processing of XML DOM objects that represent events
            and contain all the data for event properties used by statements.
            <para/>
            Minimally required is the root element name which allows the engine to map the document
            to the event type that has been named in an EPL or pattern statement.
            <para/>
            Event properties that are results of XPath expressions can be made known to the engine via this class.
            For XPath expressions that must refer to namespace prefixes those prefixes and their
            namespace name must be supplied to the engine. A default namespace can be supplied as well.
            <para/>
            By supplying a schema resource the engine can interrogate the schema, allowing the engine to
            verify event properties and return event properties in the type defined by the schema.
            When a schema resource is supplied, the optional root element namespace defines the namespace in case the
            root element name occurs in multiple namespaces.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.AddXPathProperty(System.String,System.String,System.Xml.XPath.XPathResultType)">
            <summary>
            Adds an event property for which the engine uses the supplied XPath expression against
            a DOM document node to resolve a property value.
            </summary>
            <param name="name">name of the event property</param>
            <param name="xpath">is an arbitrary xpath expression</param>
            <param name="type">is the return type of the expression</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.AddXPathProperty(System.String,System.String,System.Xml.XPath.XPathResultType,System.String)">
            <summary>
            Adds an event property for which the engine uses the supplied XPath expression againsta DOM document node to resolve a property value.
            </summary>
            <param name="name">the event property</param>
            <param name="xpath">an arbitrary xpath expression</param>
            <param name="type">a constant obtained from System.Xml.XPath.XPathResultType.</param>
            <param name="castToType">is the type name of the type that the return value of the xpath expression is casted to</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.AddXPathPropertyFragment(System.String,System.String,System.Xml.XPath.XPathResultType,System.String)">
            <summary>Adds an event property for which the engine uses the supplied XPath expression against a DOM document node to resolve a property value. </summary>
            <param name="name">of the event property</param>
            <param name="xpath">is an arbitrary xpath expression</param>
            <param name="type">is a constant obtained from XPathResultType. Typical values are XPathResultType.NodeSet. </param>
            <param name="eventTypeName">is the name of another event type that represents the XPath nodes</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.AddNamespacePrefix(System.String,System.String)">
            <summary> Add a prefix and namespace name for use in XPath expressions refering to that prefix.</summary>
            <param name="prefix">is the prefix of the namespace
            </param>
            <param name="namespace">is the namespace name</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.AddNamespacePrefixes(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Add prefixes and namespace names for use in XPath expressions refering to that prefix. </summary>
            <param name="prefixNamespaceMap">map of prefixes and namespaces</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.RootElementName">
            <summary> Gets or sets the root element name.</summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.RootElementNamespace">
            <summary> Gets or sets the root element namespace.</summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.DefaultNamespace">
            <summary> Gets or sets the default namespace.</summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.SchemaResource">
            <summary>
            Gets or sets  the schema resource.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.SchemaText">
            <summary>
            Gets or sets the schema text.  If provided instead of a schema resource, this 
            returns the actual text of the schema document.
            <para/>
            Set a schema text first. This will not resolve the schema resource to a text.
            </summary>
            <value>The schema text.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.IsXPathPropertyExpr">
            <summary>
            Indicates whether or not that property expressions are evaluated by the DOM-walker implementation
            (the default), or true to  indicate that property expressions are rewritten into XPath expressions.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.IsXPathResolvePropertiesAbsolute">
            <summary>
            When set to true (the default), indicates that when properties are compiled to XPath expressions that the
            compilation should generate an absolute XPath expression such as "/getQuote/request" for the simple request
            property, or "/getQuote/request/symbol" for a "request.symbol" nested property, wherein the root element
            node is "getQuote".
            <para/>
            When set to false, indicates that when properties are compiled to XPath expressions that the compilation
            should generate a deep XPath expression such as "//symbol" for the simple symbol property, or "//request/symbol"
            for a "request.symbol" nested property.
            </summary>
            <value>
            	<c>true</c> if this instance is X path resolve properties absolute; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.IsEventSenderValidatesRoot">
            <summary>
            Gets or sets a flag that indicates that an <seealso cref="T:com.espertech.esper.client.EventSender"/> returned for this event type
            validates the root document element name against the one configured (the default), or false
            to not validate the root document element name as configured.
            </summary>
            <value>
            	<c>true</c> if this instance is event sender validates root; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.IsAutoFragment">
            <summary>
            Set to true (the default) to look up or create event types representing fragments of an XML
            document automatically upon request for fragment event type information; Or false when only
            explicit properties may return fragments.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.IsUpdateStoredType">
            <summary>
            Indicator for use with EsperHA, false by default to indicate that stored type
            information takes precedence over configuration type information provided at
            engine initialization time. Set to true to indicate that configuration type 
            information takes precedence over stored type information.
            <para/>
            When setting this flag to true care should be taken about the compatibility 
            of the supplied XML type configuration information and the existing EPL 
            statements and stored events, if any. For more information please consult 
            <see cref="M:com.espertech.esper.client.ConfigurationOperations.ReplaceXMLEventType(System.String,com.espertech.esper.client.ConfigurationEventTypeXMLDOM)"/>.
            </summary>
            <value>set to false (the default) to indicate that stored type information takes precedence over configuration type information</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.StartTimestampPropertyName">
            <summary>
            Gets or sets the property name of the property providing the start timestamp value.
            </summary>
            <value>The start name of the timestamp property.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.EndTimestampPropertyName">
            <summary>
            Gets or sets the property name of the property providing the end timestamp value.
            </summary>
            <value>The end name of the timestamp property.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.XPathProperties">
            <summary> Returns a map of property name and descriptor for XPath-expression properties.</summary>
            <returns> XPath property information
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.NamespacePrefixes">
            <summary> Returns the namespace prefixes in a map of prefix as key and namespace name as value.</summary>
            <returns> namespace prefixes
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.XPathFunctionResolver">
            <summary>Gets or sets the type name of the XPath function resolver to be assigned to the XPath factory instanceupon type initialization.</summary>
            <returns>class name of xpath function resolver, or null if none set</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.XPathVariableResolver">
            <summary>Gets or sets the class name of the XPath variable resolver to be assigned to the XPath factory instanceupon type initialization.</summary>
            <returns>class name of xpath function resolver, or null if none set</returns>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.XPathPropertyDesc">
            <summary>
            Descriptor class for event properties that are resolved via XPath-expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.XPathPropertyDesc.#ctor(System.String,System.String,System.Xml.XPath.XPathResultType)">
            <summary> Ctor.</summary>
            <param name="name">the event property name</param>
            <param name="xpath">an arbitrary XPath expression</param>
            <param name="type">an XPathConstants constant</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.XPathPropertyDesc.#ctor(System.String,System.String,System.Xml.XPath.XPathResultType,System.Type)">
            <summary>Ctor.</summary>
            <param name="name">the event property name</param>
            <param name="xpath">an arbitrary XPath expression</param>
            <param name="type">a System.Xml.XPath.XPathResultType constant</param>
            <param name="optionalCastToType">if non-null then the return value of the xpath expression is cast to this value</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.XPathPropertyDesc.#ctor(System.String,System.String,System.Xml.XPath.XPathResultType,System.String)">
            <summary>Ctor. </summary>
            <param name="name">is the event property name</param>
            <param name="xpath">is an arbitrary XPath expression</param>
            <param name="type">is a javax.xml.xpath.XPathConstants constant</param>
            <param name="eventTypeName">the name of an event type that represents the fragmented property value</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.XPathPropertyDesc.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.XPathPropertyDesc.Name">
            <summary> Returns the event property name.</summary>
            <returns> event property name
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.XPathPropertyDesc.XPath">
            <summary> Returns the XPath expression.</summary>
            <returns> XPath expression
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.XPathPropertyDesc.ResultType">
            <summary> Returns the representing the event property type.</summary>
            <returns> type infomation
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.XPathPropertyDesc.ResultDataType">
            <summary>
            Returns the native data type representing the event property.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.XPathPropertyDesc.OptionalCastToType">
            <summary>
            Gets the optional cast to type.
            </summary>
            <value>The type of the optional cast to.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationEventTypeXMLDOM.XPathPropertyDesc.OptionalEventTypeName">
            <summary>
            Gets the name of the optional event type.
            </summary>
            <value>The name of the optional event type.</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationException">
            <summary> Thrown to indicate a configuration problem.</summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationException.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="message">error message
            </param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationException.#ctor(System.String,System.Exception)">
            <summary> Ctor for an inner exception and message.</summary>
            <param name="message">error message
            </param>
            <param name="cause">inner exception
            </param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationException.#ctor(System.Exception)">
            <summary> Ctor - just an inner exception.</summary>
            <param name="cause">inner exception
            </param>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationExpiryTimeCache">
            <summary>Expiring cache settings. </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationExpiryTimeCache.#ctor(System.Double,System.Double,com.espertech.esper.client.ConfigurationCacheReferenceType)">
            <summary>Ctor. </summary>
            <param name="maxAgeSeconds">is the maximum age in seconds</param>
            <param name="purgeIntervalSeconds">is the purge interval</param>
            <param name="cacheReferenceType">the reference type may allow garbage collection to remove entries fromcache unless HARD reference type indicates otherwise </param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationExpiryTimeCache.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationExpiryTimeCache.CacheReferenceType">
            <summary>
            Gets the type of the cache reference.
            </summary>
            <value>The type of the cache reference.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationExpiryTimeCache.MaxAgeSeconds">
            <summary>
            Gets the max age in seconds.
            </summary>
            <value>The max age seconds.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationExpiryTimeCache.PurgeIntervalSeconds">
            <summary>
            Gets the purge interval in seconds.
            </summary>
            <value>The purge interval seconds.</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationLRUCache">
            <summary>LRU cache settings. </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationLRUCache.#ctor(System.Int32)">
            <summary>Ctor. </summary>
            <param name="size">is the maximum cache size</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationLRUCache.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationLRUCache.Size">
            <summary>
            Gets the maximum cache size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationMethodRef">
            <summary>
            Holds configuration information for data caches for use in method invocations in the from-clause.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationMethodRef.SetLRUCache(System.Int32)">
            <summary>
            Configures a LRU cache of the given size for the method invocation.
            </summary>
            <param name="size">is the maximum number of entries before method invocation results are evicted</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationMethodRef.SetExpiryTimeCache(System.Double,System.Double)">
            <summary>
            Configures an expiry-time cache of the given maximum age in seconds and purge interval in seconds.
            <para>
            Specifies the cache reference type to be weak references. Weak reference cache entries become
            eligible for garbage collection and are removed from cache when the garbage collection requires so.
            </para>
            </summary>
            <param name="maxAgeSeconds">is the maximum number of seconds before a method invocation result is considered stale (also known as time-to-live)</param>
            <param name="purgeIntervalSeconds">is the interval at which the engine purges stale data from the cache</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationMethodRef.SetExpiryTimeCache(System.Double,System.Double,com.espertech.esper.client.ConfigurationCacheReferenceType)">
            <summary>
            Configures an expiry-time cache of the given maximum age in seconds and purge interval in seconds. Also allows
            setting the reference type indicating whether garbage collection may remove entries from cache.
            </summary>
            <param name="maxAgeSeconds">is the maximum number of seconds before a method invocation result is considered stale (also known as time-to-live)</param>
            <param name="purgeIntervalSeconds">is the interval at which the engine purges stale data from the cache</param>
            <param name="configurationCacheReferenceType">specifies the reference type to use</param>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationMethodRef.DataCacheDesc">
            <summary>
            Return a method invocation result data cache descriptor.
            </summary>
            <returns>cache descriptor</returns>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationMetricsReporting">
            <summary>Configuratiom for metrics reporting. </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationMetricsReporting.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationMetricsReporting.AddStmtGroup(System.String,com.espertech.esper.client.ConfigurationMetricsReporting.StmtGroupMetrics)">
            <summary>
            Add a statement group, allowing control of metrics reporting interval per statement or per multiple statements.
            The reporting interval and be changed at runtime.
            <para/>
            Add pattern include and exclude criteria to control which
            </summary>
            <param name="name">of statement group, not connected to statement name, assigned as anarbitrary identifier for runtime changes to the interval</param>
            <param name="config">the statement group metrics configuration</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationMetricsReporting.SetStatementGroupInterval(System.String,System.Int64)">
            <summary>Sets a new interval for a statement group identified by name. </summary>
            <param name="stmtGroupName">name of statement group as assigned through configuration</param>
            <param name="newInterval">new interval, or a -1 or zero value to disable reporting</param>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationMetricsReporting.IsEnableMetricsReporting">
            <summary>Returns true if metrics reporting is turned on, false if not. </summary>
            <returns>indicator whether metrics reporting is turned on</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationMetricsReporting.IsThreading">
            <summary>Returns true to indicate that metrics reporting takes place in a separate thread (default), or false to indicate that metrics reporting takes place as part of timer processing. </summary>
            <returns>indicator whether metrics reporting is threaded</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationMetricsReporting.EngineInterval">
            <summary>
            Gets or sets the engine metrics production interval in milliseconds.
            <para/>
            Use a negative or zero value to disable engine metrics production.
            </summary>
            <value>The engine interval.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationMetricsReporting.StatementInterval">
            <summary>
            Gets or sets the statement metrics production interval in milliseconds, unless statement groups have been defined that override this setting for certain statements.
            </summary>
            <value>The statement interval.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationMetricsReporting.StatementGroups">
            <summary>Returns a map of statement group and metrics configuration for the statement group. </summary>
            <returns>map of statement group and metrics configuration</returns>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationMetricsReporting.StmtGroupMetrics">
            <summary>
            Class to configure statement metrics reporting for a group of one or more statements.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationMetricsReporting.StmtGroupMetrics.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationMetricsReporting.StmtGroupMetrics.AddIncludeLike(System.String)">
            <summary>
            Include all statements in the statement group that match the SQL like-expression by statement name.
            </summary>
            <param name="likeExpression">to match</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationMetricsReporting.StmtGroupMetrics.AddExcludeLike(System.String)">
            <summary>
            Exclude all statements from the statement group that match the SQL like-expression by statement name.
            </summary>
            <param name="likeExpression">to match</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationMetricsReporting.StmtGroupMetrics.AddIncludeRegex(System.String)">
            <summary>
            Include all statements in the statement group that match the regular expression by statement name.
            </summary>
            <param name="regexExpression">to match</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationMetricsReporting.StmtGroupMetrics.AddExcludeRegEx(System.String)">
            <summary>
            Exclude all statements in the statement group that match the regular expression by statement name.
            </summary>
            <param name="regexExpression">to match</param>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationMetricsReporting.StmtGroupMetrics.Interval">
            <summary>
            Gets or sets the reporting interval for statement metrics for statements in the statement group.
            </summary>
            <value>The interval.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationMetricsReporting.StmtGroupMetrics.Patterns">
            <summary>
            Returns a list of patterns that indicate whether a statement, by the statement name matching or not matching 
            each pattern, falls within the statement group.
            <para/>
            Include-patterns are bool true in the pair of pattern and bool. Exclude-patterns are bool false.
            </summary>
            <value>The patterns.</value>
            <returns>list of include and exclude pattern</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationMetricsReporting.StmtGroupMetrics.NumStatements">
            <summary>
            Gets or sets the initial capacity number of statements held by the statement group.
            </summary>
            <value>The num statements.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationMetricsReporting.StmtGroupMetrics.IsReportInactive">
            <summary>
            Gets or sets a value to indicate that inactive statements (statements without events or timer activity) 
            are also reported, or false to omit reporting for inactive statements.
            </summary>
            <value>
            	<c>true</c> if this instance is report inactive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationMetricsReporting.StmtGroupMetrics.IsDefaultInclude">
            <summary>
            If this flag is set then all statement names are automatically included in this statement group, 
            and through exclude-pattern certain statement names can be omitted 
            <para/>
            If this flag is not set then all statement names are automatically excluded in this statement group, 
            and through include-pattern certain statement names can be included. 
            <para/>
            The default is false, i.e. statements must be explicitly included.
            </summary>
            <value>
            	<c>true</c> if this instance is default include; otherwise, <c>false</c>.
            </value>
            <returns>true for include all statements, false for explicitly include</returns>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationParser">
            <summary>
            Parser for configuration XML.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationParser.#cctor">
            <summary>
            Initializes the <see cref="T:com.espertech.esper.client.ConfigurationParser"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationParser.DoConfigure(com.espertech.esper.client.Configuration,System.IO.Stream,System.String)">
            <summary>
            Use the configuration specified in the given input stream.
            </summary>
            <param name="configuration">is the configuration object to populate</param>
            <param name="stream">The stream.</param>
            <param name="resourceName">The name to use in warning/error messages</param>
            <throws>  com.espertech.esper.client.EPException </throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationParser.DoConfigure(com.espertech.esper.client.Configuration,System.Xml.XmlDocument)">
            <summary>
            Parse the W3C DOM document.
            </summary>
            <param name="configuration">is the configuration object to populate</param>
            <param name="doc">to parse</param>
            <throws>  com.espertech.esper.client.EPException </throws>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationParser.DoConfigure(com.espertech.esper.client.Configuration,System.Xml.XmlNode)">
            <summary>
            Parse the configuration starting at the specified root node.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="rootNode">The root node.</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationParser.GetResourceAsStream(System.String)">
            <summary>
            Returns an input stream from an application resource in the classpath.
            </summary>
            <param name="resource">to get input stream for</param>
            <returns>input stream for resource</returns>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationPlugInAggregationFunction">
            <summary>Configuration information for plugging in a custom aggregation function. </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationPlugInAggregationFunction.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationPlugInAggregationFunction.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.ConfigurationPlugInAggregationFunction"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="functionClassName">Name of the function class.</param>
            <param name="factoryClassName">Name of the factory class.</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationPlugInAggregationFunction.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationPlugInAggregationFunction.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInAggregationFunction.Name">
            <summary>Returns the aggregation function name. </summary>
            <value>aggregation function name</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInAggregationFunction.FunctionClassName">
            <summary>Returns the aggregation function name.
            <para/>
             Use the factory class name instead.  </summary>
            <value>name</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInAggregationFunction.FactoryClassName">
            <summary>Returns the class name of the aggregation function factory class. </summary>
            <value>class name</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationPlugInEventRepresentation">
            <summary>
            Configuration object for plug-in event representations.
             </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInEventRepresentation.EventRepresentationTypeName">
            <summary>
            Gets or sets the class name of the class providing the pluggable event representation.
            </summary>
            <value>The name of the event representation type.</value>
            <returns>class name of class implementing <see cref="T:com.espertech.esper.plugin.PlugInEventRepresentation"/></returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInEventRepresentation.Initializer">
            <summary>
            Gets or sets the optional initialization or configuration information for the plug-in event
            representation.
            </summary>
            <value>The initializer.</value>
            <returns>
            any configuration object specific to the event representation, or a XML string
            if supplied via configuration XML file, or null if none supplied
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationPlugInEventType">
            <summary>
            Configuration for a plug-in event type, which is an event type resolved via
            plug-in event representation.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInEventType.EventRepresentationResolutionURIs">
            <summary>
            Gets or sets the URIs to use to resolve the new event type against the plug-in event representations registered.
            </summary>
            <value>The event representation resolution URI is.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInEventType.Initializer">
            <summary>
            Gets or sets the optional initialization information that the plug-in event representation may use to set up the event type.
            </summary>
            <value>The initializer.</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationPluginLoader">
            <summary>
            Holds configuration for a plugin such as an input/output
            adapter loader.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationPluginLoader.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPluginLoader.TypeName">
            <summary>
            Gets or sets the loader class name.
            </summary>
            <value>The name of the class.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPluginLoader.ConfigProperties">
            <summary>
            Gets or sets the config properties.
            </summary>
            <value>The config properties.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPluginLoader.ConfigurationXML">
            <summary>
            Gets or sets the configuration XML.
            </summary>
            <value>The configuration XML.</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPluginLoader.LoaderName">
            <summary>
            Gets or sets the name of the loader.
            </summary>
            <value>The name of the loader.</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationPlugInPatternObject">
            <summary>
            Configuration information for plugging in a custom view.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInPatternObject.Namespace">
            <summary>
            Gets or sets the view namespace
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInPatternObject.Name">
            <summary>
            Gets or sets the view name.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInPatternObject.FactoryClassName">
            <summary>
            Gets or sets the view factory class name.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInPatternObject.PatternObjectType">
            <summary>
            Gets or sets the type of the pattern object for the plug-in.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationPlugInPatternObject.PatternObjectTypeEnum">
            <summary>Choice for type of pattern object.</summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationPlugInPatternObject.PatternObjectTypeEnum.OBSERVER">
            <summary>Observer observes externally-supplied events.</summary>
        </member>
        <member name="F:com.espertech.esper.client.ConfigurationPlugInPatternObject.PatternObjectTypeEnum.GUARD">
            <summary>Guard allows or disallows events from child expressions to pass.</summary>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationPlugInSingleRowFunction">
            <summary>Configuration information for plugging in a custom single-row function. </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationPlugInSingleRowFunction.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInSingleRowFunction.Name">
            <summary>Returns the single-row function name for use in EPL. </summary>
            <value>single-row function name</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInSingleRowFunction.FunctionClassName">
            <summary>Returns the single-row function name. </summary>
            <value>name</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInSingleRowFunction.FunctionMethodName">
            <summary>Returns the name of the single-row function. </summary>
            <value>function name</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInSingleRowFunction.ValueCache">
            <summary>Returns the setting for the cache behavior. </summary>
            <value>cache behavior</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInSingleRowFunction.RethrowExceptions">
            <summary>
            Gets or sets a value indicating whether the engine re-throws exceptions
            thrown by the single-row function.  The default is false, therefore the
            engine by default does not rethrow exceptions.
            </summary>
            <value><c>true</c> if [rethrow exceptions]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:com.espertech.esper.client.ValueCache">
            <summary>Enum for single-row function value cache setting. </summary>
        </member>
        <member name="F:com.espertech.esper.client.ValueCache.DISABLED">
            <summary>The default, the result of a single-row function is always computed anew. </summary>
        </member>
        <member name="F:com.espertech.esper.client.ValueCache.ENABLED">
            <summary>Causes the engine to not actually invoke the single-row function and instead return a cached precomputed value when all parameters are constants or there are no parameters. </summary>
        </member>
        <member name="F:com.espertech.esper.client.ValueCache.CONFIGURED">
            <summary>Causes the engine to follow the engine-wide policy as configured for user-defined functions. </summary>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationPlugInView">
            <summary>
            Configuration information for plugging in a custom view.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInView.Namespace">
            <summary>Gets or sets  the namespace</summary>
            <returns>namespace</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInView.Name">
            <summary>Gets or sets  the view name.</summary>
            <returns>view name</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInView.FactoryClassName">
            <summary>Gets or sets the view factory class name.</summary>
            <returns>factory class name</returns>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationPlugInVirtualDataWindow">
            <summary>
            Configuration information for plugging in a custom view.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInVirtualDataWindow.Namespace">
            <summary>Returns the namespace </summary>
            <value>namespace</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInVirtualDataWindow.Name">
            <summary>Returns the view name. </summary>
            <value>view name</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInVirtualDataWindow.FactoryClassName">
            <summary>Returns the view factory class name. </summary>
            <value>factory class name</value>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationPlugInVirtualDataWindow.Config">
            <summary>
            Returns any additional configuration passed to the factory as part of the context.
            </summary>
            <value>The config.</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationRevisionEventType">
            <summary>
            Configuration information for revision event types.
            <para/>
            The configuration information consists of the names of the base event type and
            the delta event types, as well as the names of properties that supply key values,
            and a strategy.
            <para/>
            Events of the base event type arrive before delta events; Delta events arriving
            before the base event for the same key value are not processed, as delta events
            as well as base events represent new versions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationRevisionEventType.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationRevisionEventType.AddNameBaseEventType(System.String)">
            <summary>
            Add a base event type by it's name.
            </summary>
            <param name="nameBaseEventType">the name of the base event type to add</param>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationRevisionEventType.AddNameDeltaEventType(System.String)">
            <summary>
            Add a delta event type by it's name.
            </summary>
            <param name="nameDeltaEventType">the name of the delta event type to add</param>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationRevisionEventType.NameBaseEventTypes">
            <summary>
            Returns the set of event type names that are base event types.
            </summary>
            <returns>
            names of base event types
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationRevisionEventType.NameDeltaEventTypes">
            <summary>
            Returns the set of names of delta event types.
            </summary>
            <returns>
            names of delta event types
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationRevisionEventType.PropertyRevision">
            <summary>
            Returns the enumeration value defining the strategy to use for overlay or
            merging multiple versions of an event (instances of base and delta events).
            </summary>
            <returns>
            strategy enumerator
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationRevisionEventType.KeyPropertyNames">
            <summary>
            Returns the key property names, which are the names of the properties that
            supply key values for relating base and delta events.
            </summary>
            <value>
            	array of names of key properties
            </value>
        </member>
        <member name="T:com.espertech.esper.client.PropertyRevisionEnum">
            <summary>
            Enumeration for specifying a strategy to use to merge or overlay properties.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.PropertyRevisionEnum.OVERLAY_DECLARED">
            <summary>
            A fast strategy for revising events that groups properties provided by base and
            delta events and overlays contributed properties to compute a revision.
            <para/>
            For use when there is a limited number of combinations of properties that
            change on an event, and such combinations are known in advance.
            <para/>
            The properties available on the output revision events are all properties of
            the base event type. Delta event types do not add any additional properties that
            are not present on the base event type.
            <para/>
            Any null values or non-existing property on a delta (or base) event results in
            a null values for the same property on the output revision event.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.PropertyRevisionEnum.MERGE_DECLARED">
            <summary>
            A strategy for revising events by merging properties provided by base and delta
            events, considering null values and non-existing (dynamic) properties as well.
            <para/>
            For use when there is a limited number of combinations of properties that
            change on an event, and such combinations are known in advance.
            <para/>
            The properties available on the output revision events are all properties of
            the base event type plus all additional properties that any of the delta event
            types provide.
            <para/>
            Any null values or non-existing property on a delta (or base) event results in
            a null values for the same property on the output revision event.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.PropertyRevisionEnum.MERGE_NON_NULL">
            <summary>
            A strategy for revising events by merging properties provided by base and delta
            events, considering only non-null values.
            <para/>
            For use when there is an unlimited number of combinations of properties that
            change on an event, or combinations are not known in advance.
            <para/>
            The properties available on the output revision events are all properties of
            the base event type plus all additional properties that any of the delta event
            types provide.
            <para/>
            Null values returned by delta (or base) event properties provide no value to
            output revision events, i.e. null values are not merged.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.PropertyRevisionEnum.MERGE_EXISTS">
            <summary>
            A strategy for revising events by merging properties provided by base and delta
            events, considering only values supplied by event properties that exist.
            <para/>
            For use when there is an unlimited number of combinations of properties that
            change on an event, or combinations are not known in advance.
            <para/>
            The properties available on the output revision events are all properties of
            the base event type plus all additional properties that any of the delta event
            types provide.
            <para/>
            All properties are treated as dynamic properties: If an event property does not
            exist on a delta event (or base) event the property provides no value to output
            revision events, i.e. non-existing property values are not merged.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationVariable">
            <summary>
            Provides variable configuration.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationVariable.VariableType">
            <summary>
            Gets or sets the variable type.
            </summary>
            <returns>variable type</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationVariable.InitializationValue">
            <summary>
            Gets or sets the initialization value, or null if none was supplied.
            String-type initialization values for numeric or bool types are allowed and are parsed.
            Variables are scalar values and primitive or boxed builtin types are accepted.
            </summary>
            <returns>default value</returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationVariable.IsConstant">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:com.espertech.esper.client.ConfigurationVariable"/> is constant.
            </summary>
            <value><c>true</c> if constant; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:com.espertech.esper.client.ConfigurationVariantStream">
            <summary>
            Configures a variant stream.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationVariantStream.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ConfigurationVariantStream.AddEventTypeName(System.String)">
            <summary>
            Adds names of an event types that is one of the predefined event typs allowed
            for the variant stream.
            </summary>
            <param name="eventTypeName">name of the event type to allow in the variant stream</param>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationVariantStream.TypeVariance">
            <summary>
            Returns the type variance setting specifying whether the variant stream accepts
            event of only the predefined types or any type.
            </summary>
            <returns>
            type variance setting
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ConfigurationVariantStream.VariantTypeNames">
            <summary>
            Returns the names of event types that a predefined for the variant stream.
            </summary>
            <returns>
            predefined types in the variant stream
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.TypeVarianceEnum">
            <summary>
            Enumeration specifying whether only the predefine types or any type of event is
            accepted by the variant stream.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.TypeVarianceEnum.PREDEFINED">
            <summary>
            Allow only the predefined types to be inserted into the stream.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.TypeVarianceEnum.ANY">
            <summary>
            Allow any types to be inserted into the stream.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.ConnectionFactoryDesc">
            <summary>
            Marker for different connection factory settings.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.ConnectionLifecycleEnum">
            <summary>
            Enum controlling connection lifecycle.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.ConnectionLifecycleEnum.RETAIN">
            <summary>Retain connection between lookups, not getting a new connection each lookup.</summary>
        </member>
        <member name="F:com.espertech.esper.client.ConnectionLifecycleEnum.POOLED">
            <summary>Obtain a new connection each lookup closing the connection when done.</summary>
        </member>
        <member name="T:com.espertech.esper.client.ConnectionSettings">
            <summary>
            Supplies connection-level settings for a given database name.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.ConnectionSettings.AutoCommit">
            <summary> Returns a bool indicating auto-commit, or null if not set and default accepted.</summary>
            <returns> true for auto-commit on, false for auto-commit off, or null to accept the default
            </returns>
            <summary> Indicates whether to set any new connections for this database to auto-commit.</summary>
        </member>
        <member name="P:com.espertech.esper.client.ConnectionSettings.Catalog">
            <summary> Gets the name of the catalog to set on new database connections, or null for default.</summary>
            <returns> name of the catalog to set, or null to accept the default
            </returns>
            <summary> Sets the name of the catalog on new database connections.</summary>
        </member>
        <member name="P:com.espertech.esper.client.ConnectionSettings.TransactionIsolation">
            <summary> Returns the connection settings for transaction isolation level.</summary>
            <returns> transaction isolation level
            </returns>
            <summary>
            Sets the transaction isolation level for new database connections,
            can be null to accept the default.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.context.ContextPartitionIdentifier">
            <summary>
            Context partition identifiers are provided by the API when interrogating context 
            partitions for a given statement.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.context.ContextPartitionIdentifier.ContextPartitionId">
            <summary>Returns the context partition id. </summary>
            <value>context partition id</value>
        </member>
        <member name="T:com.espertech.esper.client.context.ContextPartitionIdentifierCategory">
            <summary>Context partition identifier for category context. </summary>
        </member>
        <member name="P:com.espertech.esper.client.context.ContextPartitionIdentifierCategory.Label">
            <summary>Returns the category label. </summary>
            <value>label</value>
        </member>
        <member name="T:com.espertech.esper.client.context.ContextPartitionIdentifierHash">
            <summary>Context partition identifier for hash context. </summary>
        </member>
        <member name="P:com.espertech.esper.client.context.ContextPartitionIdentifierHash.Hash">
            <summary>Returns the hash code. </summary>
            <value>hash code</value>
        </member>
        <member name="T:com.espertech.esper.client.context.ContextPartitionIdentifierInitiatedTerminated">
            <summary>Context partition identifier for overlapping and non-overlapping contexts. </summary>
        </member>
        <member name="P:com.espertech.esper.client.context.ContextPartitionIdentifierInitiatedTerminated.Properties">
            <summary>Event or pattern information. </summary>
            <value>starting or initiating information</value>
        </member>
        <member name="P:com.espertech.esper.client.context.ContextPartitionIdentifierInitiatedTerminated.StartTime">
            <summary>Returns the start time of the context partition. </summary>
            <value>start time</value>
        </member>
        <member name="P:com.espertech.esper.client.context.ContextPartitionIdentifierInitiatedTerminated.EndTime">
            <summary>Returns the end time of the context partition, if it can be computed </summary>
            <value>end time</value>
        </member>
        <member name="T:com.espertech.esper.client.context.ContextPartitionIdentifierNested">
            <summary>Context partition identifier for nested contexts. </summary>
        </member>
        <member name="P:com.espertech.esper.client.context.ContextPartitionIdentifierNested.Identifiers">
            <summary>Returns nested partition identifiers. </summary>
            <value>identifiers</value>
        </member>
        <member name="T:com.espertech.esper.client.context.ContextPartitionIdentifierPartitioned">
            <summary>Context partition identifier for segmented contexts. </summary>
        </member>
        <member name="P:com.espertech.esper.client.context.ContextPartitionIdentifierPartitioned.Keys">
            <summary>Returns the partition keys. </summary>
            <value>keys</value>
        </member>
        <member name="T:com.espertech.esper.client.context.ContextPartitionSelector">
            <summary>Interface for classes representing a selector for navigating, querying or selecting among context partitions. </summary>
        </member>
        <member name="T:com.espertech.esper.client.context.ContextPartitionSelectorAll">
            <summary>Selects all context paritions. </summary>
        </member>
        <member name="F:com.espertech.esper.client.context.ContextPartitionSelectorAll.INSTANCE">
            <summary>Instance for selecting all context partitions. </summary>
        </member>
        <member name="T:com.espertech.esper.client.context.ContextPartitionSelectorById">
            <summary>Selects a context partition by providing the context partition Id(s). </summary>
        </member>
        <member name="P:com.espertech.esper.client.context.ContextPartitionSelectorById.ContextPartitionIds">
            <summary>Return the context partition ids to select. </summary>
            <value>id set</value>
        </member>
        <member name="T:com.espertech.esper.client.context.ContextPartitionSelectorCategory">
            <summary>
            Selects context partitions for use with a category context by providing a set of labels.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.context.ContextPartitionSelectorCategory.Labels">
            <summary>Returns a set of category label names. </summary>
            <value>label names</value>
        </member>
        <member name="T:com.espertech.esper.client.context.ContextPartitionSelectorFiltered">
            <summary>Selects context partitions by receiving a context partition identifier for interrogation. </summary>
        </member>
        <member name="M:com.espertech.esper.client.context.ContextPartitionSelectorFiltered.Filter(com.espertech.esper.client.context.ContextPartitionIdentifier)">
            <summary>
            Filter function should return true or false to indicate interest in this context partition.
            <para />
            Do not hold on to ContextIdentifier instance between calls. The engine may reused an reassing values to this object.
            </summary>
            <param name="contextPartitionIdentifier">provides context partition information, may</param>
            <returns>true to pass filter, false to reject</returns>
        </member>
        <member name="T:com.espertech.esper.client.context.ContextPartitionSelectorHash">
            <summary>
            Selects context partitions based on hash codes, for use with hashed context.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.context.ContextPartitionSelectorHash.Hashes">
            <summary>
            Returns a set of hashes.
            </summary>
            <value>hashes</value>
        </member>
        <member name="T:com.espertech.esper.client.context.ContextPartitionSelectorNested">
            <summary>Selects context partitions of a nested context by providing selector according to the nested contexts. </summary>
        </member>
        <member name="P:com.espertech.esper.client.context.ContextPartitionSelectorNested.Selectors">
            <summary>Selectors for each level of the nested context. </summary>
            <value>selectors</value>
        </member>
        <member name="T:com.espertech.esper.client.context.ContextPartitionSelectorSegmented">
            <summary>
            Selector of context partitions for use with segmented contexts, provides a set
            of partition keys to select.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.context.ContextPartitionSelectorSegmented.PartitionKeys">
            <summary>Returns the partition keys. </summary>
            <value>key set</value>
        </member>
        <member name="T:com.espertech.esper.client.context.InvalidContextPartitionSelector">
            <summary>Indicates an invalid combination of context declaration and context partition selector, i.e. cageory context with hash context partition selector. </summary>
        </member>
        <member name="M:com.espertech.esper.client.context.InvalidContextPartitionSelector.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="message">exception message</param>
        </member>
        <member name="M:com.espertech.esper.client.context.InvalidContextPartitionSelector.#ctor(System.String,System.Exception)">
            <summary>Ctor. </summary>
            <param name="message">exception message</param>
            <param name="cause">inner exception</param>
        </member>
        <member name="M:com.espertech.esper.client.context.InvalidContextPartitionSelector.#ctor(System.Exception)">
            <summary>Ctor. </summary>
            <param name="cause">inner exception</param>
        </member>
        <member name="T:com.espertech.esper.client.DataCacheDesc">
            <summary>
             Marker for different cache settings.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.LRUCacheDesc">
            <summary>
            LRU cache settings.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.LRUCacheDesc.#ctor(System.Int32)">
            <summary> Ctor.</summary>
            <param name="size">is the maximum cache size
            </param>
        </member>
        <member name="M:com.espertech.esper.client.LRUCacheDesc.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.LRUCacheDesc.Size">
            <summary> Returns the maximum cache size.</summary>
            <returns> max cache size
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.ExpiryTimeCacheDesc">
            <summary>
             Expiring cache settings.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ExpiryTimeCacheDesc.#ctor(System.Double,System.Double,com.espertech.esper.client.ConfigurationCacheReferenceType)">
            <summary>
            Ctor.
            </summary>
            <param name="maxAgeSeconds">is the maximum age in seconds</param>
            <param name="purgeIntervalSeconds">is the purge interval</param>
            <param name="configurationCacheReferenceType">cacheReferenceType the reference type may allow garbage collection to remove entries from
            cache unless HARD reference type indicates otherwise</param>
        </member>
        <member name="M:com.espertech.esper.client.ExpiryTimeCacheDesc.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ExpiryTimeCacheDesc.MaxAgeSeconds">
            <summary> Returns the maximum age in seconds.</summary>
            <returns> number of seconds
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ExpiryTimeCacheDesc.PurgeIntervalSeconds">
            <summary> Returns the purge interval length.</summary>
            <returns> purge interval in seconds
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.ExpiryTimeCacheDesc.ConfigurationCacheReferenceType">
            <summary>
            Returns the enumeration whether hard, soft or weak reference type are used
            to control whether the garbage collection can remove entries from cache.
            </summary>
            <value>The type of the cache reference.</value>
        </member>
        <member name="T:com.espertech.esper.client.dataflow.EPDataFlowAlreadyExistsException">
            <summary>
            Thrown to indicate a data flow saved configuration already exists.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowAlreadyExistsException.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="message">error message</param>
        </member>
        <member name="T:com.espertech.esper.client.dataflow.EPDataFlowCancellationException">
            <summary>Indicates cancellation of a data flow instance. </summary>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowCancellationException.#ctor(System.String,System.String)">
            <summary>Ctor. </summary>
            <param name="message">cancel message</param>
            <param name="dataFlowName">data flow name</param>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowCancellationException.#ctor(System.String,System.Exception,System.String)">
            <summary>Ctor. </summary>
            <param name="message">cancel message</param>
            <param name="cause">cause</param>
            <param name="dataFlowName">data flow name</param>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowCancellationException.#ctor(System.Exception,System.String)">
            <summary>Ctor. </summary>
            <param name="cause">cause</param>
            <param name="dataFlowName">data flow name</param>
        </member>
        <member name="T:com.espertech.esper.client.dataflow.EPDataFlowDescriptor">
            <summary>Data flow descriptor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowDescriptor.#ctor(System.String,com.espertech.esper.client.EPStatementState,System.String)">
            <summary>Ctor. </summary>
            <param name="dataFlowName">data flow name</param>
            <param name="statementState">statement state</param>
            <param name="statementName">statement name</param>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowDescriptor.DataFlowName">
            <summary>Returns the data flow name. </summary>
            <value>name</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowDescriptor.StatementState">
            <summary>Returns the statement state. </summary>
            <value>statement state</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowDescriptor.StatementName">
            <summary>Returns the statement name. </summary>
            <value>statement name.</value>
        </member>
        <member name="T:com.espertech.esper.client.dataflow.EPDataFlowEPStatementFilter">
            <summary>Filter for use with {@link com.espertech.esper.dataflow.ops.EPStatementSource} operator. </summary>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowEPStatementFilter.Pass(com.espertech.esper.client.EPStatement)">
            <summary>Pass or skip the statement. </summary>
            <param name="statement">to test</param>
            <returns>indicator whether to include (true) or exclude (false) the statement.</returns>
        </member>
        <member name="T:com.espertech.esper.client.dataflow.EPDataFlowEventBeanCollector">
            <summary>
            Collector for use with the {@link com.espertech.esper.dataflow.ops.EventBusSource} operator.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowEventBeanCollector.Collect(com.espertech.esper.client.dataflow.EPDataFlowEventBeanCollectorContext)">
            <summary>
            Collect: use the context to transform an event bean to a data flow event.
            </summary>
            <param name="context">contains event bean, emitter and related information</param>
        </member>
        <member name="T:com.espertech.esper.client.dataflow.EPDataFlowEventBeanCollectorContext">
            <summary>
            For use with {@link EPDataFlowEventBeanCollector} provides collection context. &lt;p&gt; Do not retain handles to this instance as its contents may change. &lt;/p&gt;
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowEventBeanCollectorContext.#ctor(com.espertech.esper.dataflow.interfaces.EPDataFlowEmitter,System.Boolean,com.espertech.esper.client.EventBean)">
            <summary>Ctor. </summary>
            <param name="emitter">to emit into the data flow</param>
            <param name="submitEventBean">indicator whether to submit EventBean or underlying events</param>
            <param name="theEvent">to process</param>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowEventBeanCollectorContext.Event">
            <summary>Returns the event to process. </summary>
            <value>event</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowEventBeanCollectorContext.Emitter">
            <summary>Returns the emitter. </summary>
            <value>emitter</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowEventBeanCollectorContext.IsSubmitEventBean">
            <summary>Returns true to submit EventBean instances, false to submit underlying event. </summary>
            <value>indicator whether wrapper required or not</value>
        </member>
        <member name="T:com.espertech.esper.client.dataflow.EPDataFlowEventCollector">
            <summary>
            Collector for use with the {@link com.espertech.esper.dataflow.ops.EventBusSink} operator.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowEventCollector.Collect(com.espertech.esper.client.dataflow.EPDataFlowEventCollectorContext)">
            <summary>
            Collect: use the context to transform insert and remove stream events to data flow events.
            </summary>
            <param name="context">contains event beans, emitter and related information</param>
        </member>
        <member name="T:com.espertech.esper.client.dataflow.EPDataFlowEventCollectorContext">
            <summary>
            For use with {@link EPDataFlowEventCollector} provides collection context. 
            <para />
            Do not retain handles to this instance as its contents may change.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowEventCollectorContext.#ctor(com.espertech.esper.client.dataflow.EventBusCollector,System.Object)">
            <summary>Ctor. </summary>
            <param name="eventBusCollector">for sending events to the event bus</param>
            <param name="theEvent">to process</param>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowEventCollectorContext.Event">
            <summary>Returns the event. </summary>
            <value>event</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowEventCollectorContext.EventBusCollector">
            <summary>Returns the emitter for the event bus. </summary>
            <value>emitter</value>
        </member>
        <member name="T:com.espertech.esper.client.dataflow.EPDataFlowExceptionContext">
            <summary>
            Context for use with <seealso cref="T:com.espertech.esper.client.dataflow.EPDataFlowExceptionHandler"/>
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowExceptionContext.#ctor(System.String,System.String,System.Object,System.Object,System.Exception)">
            <summary>Ctor. </summary>
            <param name="dataFlowName">data flow name</param>
            <param name="operatorName">operator name</param>
            <param name="operatorNumber">operator number</param>
            <param name="operatorPrettyPrint">pretty-print of operator</param>
            <param name="throwable">cause</param>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowExceptionContext.DataFlowName">
            <summary>Returns the data flow name. </summary>
            <value>data flow name</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowExceptionContext.OperatorName">
            <summary>Returns the operator name. </summary>
            <value>operator name</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowExceptionContext.Exception">
            <summary>Returns the cause. </summary>
            <value>cause</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowExceptionContext.OperatorNumber">
            <summary>Returns the operator number. </summary>
            <value>operator num</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowExceptionContext.OperatorPrettyPrint">
            <summary>Returns the pretty-print for the operator. </summary>
            <value>operator string</value>
        </member>
        <member name="T:com.espertech.esper.client.dataflow.EPDataFlowExceptionHandler">
            <summary>
            Handler for exceptions thrown by data flow operators.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowExceptionHandler.Handle(com.espertech.esper.client.dataflow.EPDataFlowExceptionContext)">
            <summary>
            Handle exception.
            </summary>
            <param name="context">provides all exception information</param>
        </member>
        <member name="T:com.espertech.esper.client.dataflow.EPDataFlowExecutionException">
            <summary>
            Thrown to indicate a data flow execution exception.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowExecutionException.#ctor(System.String,System.String)">
            <summary>Ctor. </summary>
            <param name="message">error message</param>
            <param name="dataFlowName">data flow name</param>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowExecutionException.#ctor(System.String,System.Exception,System.String)">
            <summary>Ctor. </summary>
            <param name="message">error message</param>
            <param name="cause">cuase</param>
            <param name="dataFlowName">data flow name</param>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowExecutionException.#ctor(System.Exception,System.String)">
            <summary>Ctor. </summary>
            <param name="cause">cuase</param>
            <param name="dataFlowName">data flow name</param>
        </member>
        <member name="T:com.espertech.esper.client.dataflow.EPDataFlowInstance">
            <summary>Data flow instanve. </summary>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstance.Run">
            <summary>Blocking execution of the data flow instance. </summary>
            <throws>IllegalStateException thrown to indicate that the state is not instantiated.</throws>
            <throws>EPDataFlowExecutionException thrown when an execution exception occurs</throws>
            <throws>EPDataFlowCancellationException throw to indicate the data flow was cancelled.</throws>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstance.Start">
            <summary>Non-Blocking execution of the data flow instance. </summary>
            <throws>IllegalStateException thrown to indicate that the state is not instantiated.</throws>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstance.StartCaptive">
            <summary>Captive execution of the data flow instance. </summary>
            <returns>runnables and emitters</returns>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstance.Join">
            <summary>Join an executing data flow instance. </summary>
            <throws>IllegalStateException thrown if it cannot be joined</throws>
            <throws>InterruptedException thrown if interrupted</throws>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstance.Cancel">
            <summary>Cancel execution. </summary>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowInstance.DataFlowName">
            <summary>Returns the data flow name. </summary>
            <value>name</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowInstance.State">
            <summary>Returns the state. </summary>
            <value>state</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowInstance.Statistics">
            <summary>Get data flow instance statistics, required instantiation with statistics option, use {@link EPDataFlowInstantiationOptions} to turn on stats. </summary>
            <value>stats</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowInstance.UserObject">
            <summary>Returns the user object associated, if any. Use {@link EPDataFlowInstantiationOptions} to associate. </summary>
            <value>user object</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowInstance.InstanceId">
            <summary>
            Returns the instance id associated, if any. Use {@link EPDataFlowInstantiationOptions} to associate.
            </summary>
            <value>instance if</value>
        </member>
        <member name="T:com.espertech.esper.client.dataflow.EPDataFlowInstanceCaptive">
            <summary>Holder for captive data flow execution. </summary>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstanceCaptive.#ctor(System.Collections.Generic.IDictionary{System.String,com.espertech.esper.dataflow.ops.Emitter},System.Collections.Generic.IList{com.espertech.esper.dataflow.runnables.GraphSourceRunnable})">
            <summary>Ctor. </summary>
            <param name="emitters">any emitters that are part of the data flow</param>
            <param name="runnables">any runnables that represent source operators</param>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowInstanceCaptive.Emitters">
            <summary>Map of named emitters. </summary>
            <value>emitters</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowInstanceCaptive.Runnables">
            <summary>List of operator source runnables. </summary>
            <value>runnables</value>
        </member>
        <member name="T:com.espertech.esper.client.dataflow.EPDataFlowInstanceOperatorStat">
            <summary>Statistics holder for data flow instances. </summary>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstanceOperatorStat.#ctor(System.String,System.String,System.Int32,System.Int64,System.Int64[],System.Int64,System.Int64[])">
            <summary>Ctor. </summary>
            <param name="operatorName">operator name</param>
            <param name="operatorPrettyPrint">operator pretty print</param>
            <param name="operatorNumber">operator number</param>
            <param name="submittedOverallCount">count of submitted events</param>
            <param name="submittedPerPortCount">count of events submitted per port</param>
            <param name="timeOverall">time spent submitting events</param>
            <param name="timePerPort">time spent submitting events per port</param>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowInstanceOperatorStat.OperatorName">
            <summary>Returns operator name. </summary>
            <value>op name</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowInstanceOperatorStat.SubmittedOverallCount">
            <summary>Returns count of submitted events. </summary>
            <value>count</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowInstanceOperatorStat.SubmittedPerPortCount">
            <summary>Returns count of submitted events per port. </summary>
            <value>count per port</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowInstanceOperatorStat.OperatorPrettyPrint">
            <summary>Returns operator pretty print </summary>
            <value>textual representation of op</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowInstanceOperatorStat.OperatorNumber">
            <summary>Returns the operator number. </summary>
            <value>op number</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowInstanceOperatorStat.TimeOverall">
            <summary>Returns total time spent submitting events </summary>
            <value>time</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowInstanceOperatorStat.TimePerPort">
            <summary>Returns total time spent submitting events per port </summary>
            <value>time per port</value>
        </member>
        <member name="T:com.espertech.esper.client.dataflow.EPDataFlowInstanceStatistics">
            <summary>Interface for statictics of data flow instance. </summary>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowInstanceStatistics.OperatorStatistics">
            <summary>Returns operator stats. </summary>
            <value>stats</value>
        </member>
        <member name="T:com.espertech.esper.client.dataflow.EPDataFlowInstantiationException">
            <summary>Indicates an exception instantiating a data flow. </summary>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstantiationException.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="message">the message</param>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstantiationException.#ctor(System.String,System.Exception)">
            <summary>Ctor. </summary>
            <param name="message">the message</param>
            <param name="cause">the inner exception</param>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstantiationException.#ctor(System.Exception)">
            <summary>Ctor. </summary>
            <param name="cause">the inner exception</param>
        </member>
        <member name="T:com.espertech.esper.client.dataflow.EPDataFlowInstantiationOptions">
            <summary>
            Options for use when instantiating a data flow in <seealso cref="T:com.espertech.esper.client.dataflow.EPDataFlowRuntime"/>
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstantiationOptions.GetOperatorProvider">
            <summary>Returns the operator provider. </summary>
            <returns>operator provider</returns>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstantiationOptions.OperatorProvider(com.espertech.esper.client.dataflow.EPDataFlowOperatorProvider)">
            <summary>Sets the the operator provider. </summary>
            <param name="operatorProvider">operator provider</param>
            <returns>this options object</returns>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstantiationOptions.SetOperatorProvider(com.espertech.esper.client.dataflow.EPDataFlowOperatorProvider)">
            <summary>Sets the the operator provider. </summary>
            <param name="operatorProvider">operator provider</param>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstantiationOptions.ParameterProvider(com.espertech.esper.client.dataflow.EPDataFlowOperatorParameterProvider)">
            <summary>Sets the parameter provider. </summary>
            <param name="parameterProvider">parameter provider</param>
            <returns>this options object</returns>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstantiationOptions.GetParameterProvider">
            <summary>Returns the parameter provider. </summary>
            <returns>parameter provider</returns>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstantiationOptions.SetParameterProvider(com.espertech.esper.client.dataflow.EPDataFlowOperatorParameterProvider)">
            <summary>Sets the parameter provider. </summary>
            <param name="parameterProvider">parameter provider</param>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstantiationOptions.GetExceptionHandler">
            <summary>Returns the exception handler. </summary>
            <returns>exception handler.</returns>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstantiationOptions.ExceptionHandler(com.espertech.esper.client.dataflow.EPDataFlowExceptionHandler)">
            <summary>Sets the exception handler. </summary>
            <param name="exceptionHandler">exception handler.</param>
            <returns>this options object</returns>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstantiationOptions.SetExceptionHandler(com.espertech.esper.client.dataflow.EPDataFlowExceptionHandler)">
            <summary>Sets the exception handler. </summary>
            <param name="exceptionHandler">exception handler.</param>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstantiationOptions.GetDataFlowInstanceId">
            <summary>Returns the instance id assigned. </summary>
            <returns>instance if</returns>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstantiationOptions.DataFlowInstanceId(System.String)">
            <summary>Sets the data flow instance id </summary>
            <param name="dataFlowInstanceId">instance id</param>
            <returns>this options object</returns>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstantiationOptions.SetDataFlowInstanceId(System.String)">
            <summary>Sets the data flow instance id </summary>
            <param name="dataFlowInstanceId">instance id</param>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstantiationOptions.GetDataFlowInstanceUserObject">
            <summary>Returns the user object associated to the data flow instance. </summary>
            <returns>user object</returns>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstantiationOptions.DataFlowInstanceUserObject(System.Object)">
            <summary>Sets the user object associated to the data flow instance. </summary>
            <param name="dataFlowInstanceUserObject">user object</param>
            <returns>this options object</returns>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstantiationOptions.SetDataFlowInstanceUserObject(System.Object)">
            <summary>Sets the user object associated to the data flow instance. </summary>
            <param name="dataFlowInstanceUserObject">this options object</param>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstantiationOptions.IsOperatorStatistics">
            <summary>Returns indicator whether to collect operator statistics. </summary>
            <returns>operator stats indicator</returns>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstantiationOptions.OperatorStatistics(System.Boolean)">
            <summary>Sets indicator whether to collect operator statistics. </summary>
            <param name="statistics">operator stats indicator</param>
            <returns>this options object</returns>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstantiationOptions.SetOperatorStatistics(System.Boolean)">
            <summary>Sets indicator whether to collect operator statistics. </summary>
            <param name="operatorStatistics">operator stats indicator</param>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstantiationOptions.IsCpuStatistics">
            <summary>Returns indicator whether to collect CPU statistics. </summary>
            <returns>CPU stats</returns>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstantiationOptions.SetCpuStatistics(System.Boolean)">
            <summary>Sets indicator whether to collect CPU statistics. </summary>
            <param name="cpuStatistics">CPU stats</param>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstantiationOptions.CpuStatistics(System.Boolean)">
            <summary>Sets indicator whether to collect CPU statistics. </summary>
            <param name="cpuStatistics">CPU stats</param>
            <returns>this options object</returns>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowInstantiationOptions.AddParameterURI(System.String,System.Object)">
            <summary>
            Adds the parameter URI.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowInstantiationOptions.SurrogateEventSender">
            <summary>
            Gets or sets the event sender /runtime to use
            </summary>
            <value>The surrogate event sender.</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowInstantiationOptions.ParametersURIs">
            <summary>
            Gets or sets the parameters.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.dataflow.EPDataFlowIRStreamCollector">
            <summary>
            Collector for use with the {@link com.espertech.esper.dataflow.ops.EPStatementSource} operator.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowIRStreamCollector.Collect(com.espertech.esper.client.dataflow.EPDataFlowIRStreamCollectorContext)">
            <summary>
            Collect: use the context to transform statement output Event(s) to data flow Event(s).
            </summary>
            <param name="context">contains event bean, emitter and related information</param>
        </member>
        <member name="T:com.espertech.esper.client.dataflow.EPDataFlowIRStreamCollectorContext">
            <summary>
            Context for use with {@link EPDataFlowIRStreamCollector}. &lt;p&gt; Do not retain a handle of this object as its contents are subject to change. &lt;/p&gt;
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowIRStreamCollectorContext.#ctor(com.espertech.esper.dataflow.interfaces.EPDataFlowEmitter,System.Boolean,com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean[],com.espertech.esper.client.EPStatement,com.espertech.esper.client.EPServiceProvider)">
            <summary>
            Ctor.
            </summary>
            <param name="emitter">data flow emitter</param>
            <param name="submitEventBean">indicator whether the EventBean or the underlying event object must be submmitted</param>
            <param name="newEvents">insert stream events</param>
            <param name="oldEvents">remove stream events</param>
            <param name="statement">statement posting events</param>
            <param name="epServiceProvider">engine instances</param>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowIRStreamCollectorContext.Emitter">
            <summary>Returns the emitter. </summary>
            <value>emitter</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowIRStreamCollectorContext.NewEvents">
            <summary>Returns insert stream. </summary>
            <value>events</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowIRStreamCollectorContext.OldEvents">
            <summary>Returns remove stream. </summary>
            <value>events</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowIRStreamCollectorContext.Statement">
            <summary>Returns the statement. </summary>
            <value>statement</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowIRStreamCollectorContext.ServiceProvider">
            <summary>Returns the engine instance. </summary>
            <value>engine instance</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowIRStreamCollectorContext.IsSubmitEventBean">
            <summary>
            Returns indicator whether to submit wrapped events (EventBean) or underlying events
            </summary>
            <value>wrapped event indicator</value>
        </member>
        <member name="T:com.espertech.esper.client.dataflow.EPDataFlowNotFoundException">
            <summary>Thrown to indicate a data flow is not found. </summary>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowNotFoundException.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="message">error message</param>
        </member>
        <member name="T:com.espertech.esper.client.dataflow.EPDataFlowOperatorParameterProvider">
            <summary>
            Handles setting or overriding properties for operators in a data flow.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowOperatorParameterProvider.Provide(com.espertech.esper.client.dataflow.EPDataFlowOperatorParameterProviderContext)">
            <summary>
            Return new value for operator
            </summary>
            <param name="context">operator and parameter information</param>
            <returns>value</returns>
        </member>
        <member name="T:com.espertech.esper.client.dataflow.EPDataFlowOperatorParameterProviderContext">
            <summary>
            Context for use with {@link EPDataFlowOperatorParameterProvider} describes the operator and parameters to provide.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowOperatorParameterProviderContext.#ctor(System.String,System.String,System.Object,System.Int32,System.Object,System.String)">
            <summary>Ctor. </summary>
            <param name="operatorName">operator name</param>
            <param name="parameterName">parameter name</param>
            <param name="operatorInstance">operator instance</param>
            <param name="operatorNum">operator number</param>
            <param name="providedValue">value if any was provided as part of the declaration</param>
            <param name="dataFlowName">data flow name</param>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowOperatorParameterProviderContext.OperatorName">
            <summary>Returns the operator name. </summary>
            <value>operator name</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowOperatorParameterProviderContext.ParameterName">
            <summary>Returns the parameter name. </summary>
            <value>parameter name</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowOperatorParameterProviderContext.OperatorInstance">
            <summary>Returns the operator instance. </summary>
            <value>operator instance</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowOperatorParameterProviderContext.OperatorNum">
            <summary>Returns the operator number </summary>
            <value>operator num</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowOperatorParameterProviderContext.ProvidedValue">
            <summary>Returns the parameters declared value, if any </summary>
            <value>value</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowOperatorParameterProviderContext.DataFlowName">
            <summary>Returns the data flow name. </summary>
            <value>data flow name</value>
        </member>
        <member name="T:com.espertech.esper.client.dataflow.EPDataFlowOperatorProvider">
            <summary>
            For use in data flow instantiation, may provide operator instances.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowOperatorProvider.Provide(com.espertech.esper.client.dataflow.EPDataFlowOperatorProviderContext)">
            <summary>
            Called to see if the provider would like to provide the operator instance as described in the context.
            </summary>
            <param name="context">operator instance requested</param>
            <returns>
            operator instance, or null if the default empty construct instantiation for the operator class should be used
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.dataflow.EPDataFlowOperatorProviderContext">
            <summary>Context for use with {@link EPDataFlowOperatorProvider}. </summary>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowOperatorProviderContext.#ctor(System.String,System.String,com.espertech.esper.epl.spec.GraphOperatorSpec)">
            <summary>Ctor. </summary>
            <param name="dataFlowName">data flow name</param>
            <param name="operatorName">operator name</param>
            <param name="spec">specification</param>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowOperatorProviderContext.OperatorName">
            <summary>Operator name. </summary>
            <value>name</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowOperatorProviderContext.DataFlowName">
            <summary>Data flow name </summary>
            <value>name</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowOperatorProviderContext.Spec">
            <summary>Operator specification </summary>
            <value>spec</value>
        </member>
        <member name="T:com.espertech.esper.client.dataflow.EPDataFlowRuntime">
            <summary>
            Data flow runtime for instantiating data flows.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowRuntime.GetDataFlow(System.String)">
            <summary>Returns a descriptor for the given data flow, or null if the data flow has not been declared. </summary>
            <param name="dataFlowName">data flow name</param>
            <returns>data flow descriptor</returns>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowRuntime.GetDataFlows">
            <summary>Returns the names of all declared data flows. </summary>
            <returns>data flow names</returns>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowRuntime.Instantiate(System.String)">
            <summary>Instantiate a data flow. </summary>
            <param name="dataFlowName">name of data flow to instantiate</param>
            <returns>data flow instance</returns>
            <throws>EPDataFlowInstantiationException when the instantiation failed</throws>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowRuntime.Instantiate(System.String,com.espertech.esper.client.dataflow.EPDataFlowInstantiationOptions)">
            <summary>Instantiate a data flow, with options. </summary>
            <param name="dataFlowName">name of data flow to instantiate</param>
            <param name="options">populate options to control parameterization, instantiation etc.</param>
            <returns>data flow instance</returns>
            <throws>EPDataFlowInstantiationException when the instantiation failed</throws>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowRuntime.SaveConfiguration(System.String,System.String,com.espertech.esper.client.dataflow.EPDataFlowInstantiationOptions)">
            <summary>Save an existing data flow configuration (data flow name and its options) for later retrieval. </summary>
            <param name="dataflowConfigName">configuration name to save, must be unique</param>
            <param name="dataFlowName">data flow name</param>
            <param name="options">options object</param>
            <throws>EPDataFlowAlreadyExistsException if the configuration name is already used</throws>
            <throws>EPDataFlowNotFoundException if the data flow by this name does not exist</throws>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowRuntime.GetSavedConfiguration(System.String)">
            <summary>Returns a saved dataflow configuration or null if it is not found. </summary>
            <param name="configurationName">name to find</param>
            <returns>data flow configuration</returns>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowRuntime.InstantiateSavedConfiguration(System.String)">
            <summary>Instantiate a data flow from a saved configuration. </summary>
            <param name="configurationName">configuration name</param>
            <returns>instance</returns>
            <throws>EPDataFlowInstantiationException if the configuration name could not be found</throws>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowRuntime.RemoveSavedConfiguration(System.String)">
            <summary>Remove a previously saved data flow configuration. </summary>
            <param name="configurationName">to remove</param>
            <returns>indicator whether found and removed</returns>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowRuntime.SaveInstance(System.String,com.espertech.esper.client.dataflow.EPDataFlowInstance)">
            <summary>Save an existing instance with the runtime, for later retrieval. </summary>
            <param name="instanceName">name to use to save, must be unique among currently saved instances</param>
            <param name="instance">saved</param>
            <throws>EPDataFlowAlreadyExistsException if an instance by this name already exists</throws>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowRuntime.GetSavedInstance(System.String)">
            <summary>Returns a specific saved data flow instance, or null if it has not been found </summary>
            <param name="instanceName">to look for</param>
            <returns>instance</returns>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowRuntime.RemoveSavedInstance(System.String)">
            <summary>Remove an instance previously saved. </summary>
            <param name="instanceName">to be removed</param>
            <returns>indicator whether found or not</returns>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowRuntime.SavedConfigurations">
            <summary>Returns the names of a saved data flow configurations. </summary>
            <value>data flow configuration names</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowRuntime.SavedInstances">
            <summary>Returns the instance names of a saved data flow instances. </summary>
            <value>data flow instance names</value>
        </member>
        <member name="T:com.espertech.esper.client.dataflow.EPDataFlowSavedConfiguration">
            <summary>A data flow configuration is just a configuration name, a data flow name and an instantiation options object. </summary>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EPDataFlowSavedConfiguration.#ctor(System.String,System.String,com.espertech.esper.client.dataflow.EPDataFlowInstantiationOptions)">
            <summary>Ctor. </summary>
            <param name="savedConfigurationName">name of saved configuration</param>
            <param name="dataflowName">data flow name</param>
            <param name="options">options object</param>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowSavedConfiguration.SavedConfigurationName">
            <summary>Configuation name. </summary>
            <value>name</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowSavedConfiguration.DataflowName">
            <summary>Data flow name. </summary>
            <value>data flow name</value>
        </member>
        <member name="P:com.espertech.esper.client.dataflow.EPDataFlowSavedConfiguration.Options">
            <summary>Data flow instantiation options. </summary>
            <value>options</value>
        </member>
        <member name="T:com.espertech.esper.client.dataflow.EPDataFlowSignal">
            <summary>Base marker interface for data flow signals. </summary>
        </member>
        <member name="T:com.espertech.esper.client.dataflow.EPDataFlowSignalFinalMarker">
            <summary>Final marker for data flows. </summary>
        </member>
        <member name="T:com.espertech.esper.client.dataflow.EPDataFlowSignalWindowMarker">
            <summary>Window marker for data flows. </summary>
        </member>
        <member name="T:com.espertech.esper.client.dataflow.EPDataFlowState">
            <summary>Data flow instance states. </summary>
        </member>
        <member name="F:com.espertech.esper.client.dataflow.EPDataFlowState.INSTANTIATED">
            <summary>Start state: the state a data flow instance is in when it gets instantiated. </summary>
        </member>
        <member name="F:com.espertech.esper.client.dataflow.EPDataFlowState.RUNNING">
            <summary>Running means the data flow instance is currently executing. </summary>
        </member>
        <member name="F:com.espertech.esper.client.dataflow.EPDataFlowState.COMPLETE">
            <summary>Complete means the data flow instance completed. </summary>
        </member>
        <member name="F:com.espertech.esper.client.dataflow.EPDataFlowState.CANCELLED">
            <summary>Cancelled means the data flow instance was cancelled. </summary>
        </member>
        <member name="T:com.espertech.esper.client.dataflow.EventBusCollector">
            <summary>
            Collector for send events into the event bus.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EventBusCollector.SendEvent(System.Object)">
            <summary>
            Send an event represented by a plain Java object to the event stream processing runtime. &lt;p&gt; Use the route method for sending events into the runtime from within UpdateListener code, to avoid the possibility of a stack overflow due to nested calls to sendEvent.
            </summary>
            <param name="object">is the event to sent to the runtime</param>
            <throws>com.espertech.esper.client.EPException is thrown when the processing of the event lead to an error</throws>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EventBusCollector.SendEvent(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Send a map containing event property values to the event stream processing runtime. &lt;p&gt; Use the route method for sending events into the runtime from within UpdateListener code. to avoid the possibility of a stack overflow due to nested calls to sendEvent.
            </summary>
            <param name="map">map that contains event property values. Keys are expected to be of type String while valuescan be of any type. Keys and values should match those declared via Configuration for the given eventTypeName.</param>
            <param name="eventTypeName">the name for the Map event type that was previously configured</param>
            <throws>EPException - when the processing of the event leads to an error</throws>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EventBusCollector.SendEvent(System.Object[],System.String)">
            <summary>
            Send an object array containing event property values as array elements to the event stream processing runtime. &lt;p&gt; Use the route method for sending events into the runtime from within UpdateListener code. to avoid the possibility of a stack overflow due to nested calls to sendEvent.
            </summary>
            <param name="objectArray">object array that contains event property values.Your application must ensure that property values match the exact same order that the property names and types have been declared, and that the array length matches the number of properties declared.</param>
            <param name="eventTypeName">the name for the Object-array event type that was previously configured</param>
            <throws>EPException - when the processing of the event leads to an error</throws>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EventBusCollector.SendEvent(System.Xml.XmlNode)">
            <summary>
            Send an event represented by a DOM node to the event stream processing runtime. &lt;p&gt; Use the route method for sending events into the runtime from within UpdateListener code. to avoid the possibility of a stack overflow due to nested calls to sendEvent.
            </summary>
            <param name="node">is the DOM node as an event</param>
            <throws>EPException is thrown when the processing of the event lead to an error</throws>
        </member>
        <member name="M:com.espertech.esper.client.dataflow.EventBusCollector.SendEvent(System.Xml.Linq.XElement)">
            <summary>
            Send an event represented by a DOM node to the event stream processing runtime. &lt;p&gt; Use the route method for sending events into the runtime from within UpdateListener code. to avoid the possibility of a stack overflow due to nested calls to sendEvent.
            </summary>
            <param name="node">is the DOM node as an event</param>
            <throws>EPException is thrown when the processing of the event lead to an error</throws>
        </member>
        <member name="M:com.espertech.esper.client.DbDriverConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.DbDriverConfiguration"/> class.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.DbDriverConfiguration.DriverName">
            <summary>
            Gets or sets the name of the driver.
            </summary>
            <value>The name of the driver.</value>
        </member>
        <member name="P:com.espertech.esper.client.DbDriverConfiguration.Properties">
            <summary>
            Gets or sets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="T:com.espertech.esper.client.DbDriverFactoryConnection">
            <summary>
            Connection factory settings for using a DbDriverFactory.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.DbDriverFactoryConnection.driverNamespace">
            <summary>
            Where do drivers in the default search path reside
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.DbDriverFactoryConnection._driver">
            <summary>
            Database driver.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.DbDriverFactoryConnection.ResolveDriverTypeFromName(System.String)">
            <summary>
            Resolves the driver type from the name provided.  If the driver can not be
            resolved, the method throws an exception to indicate that one could not
            be found.  The method first looks for a class that matches the name of
            the driver.  If one can not be found, it checks in the com.espertech.esper.epl.drivers
            namespace to see if one can be found.  Lastly, if checks in the
            com.espertech.espers.eql.drivers namespace with a variation of the given driver name.
            </summary>
            <param name="driverName">Name of the driver.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.DbDriverFactoryConnection.ResolveDriverFromName(System.String)">
            <summary>
            Resolves the driver from the name.
            </summary>
            <param name="driverName">Name of the driver.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.DbDriverFactoryConnection.ResolveDriverFromType(System.Type)">
            <summary>
            Resolves the driver from the type.
            </summary>
            <param name="driverType">Type of the driver.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.DbDriverFactoryConnection.#ctor(System.Type,com.espertech.esper.compat.Properties)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.DbDriverFactoryConnection"/> class.
            </summary>
            <param name="driverType">Type of the driver.</param>
            <param name="properties">The properties.</param>
        </member>
        <member name="M:com.espertech.esper.client.DbDriverFactoryConnection.#ctor(System.String,com.espertech.esper.compat.Properties)">
            <summary>
            Ctor.
            </summary>
            <param name="driverName">Name of the driver.</param>
            <param name="properties">Properties that should be applied to the connection.</param>
        </member>
        <member name="M:com.espertech.esper.client.DbDriverFactoryConnection.#ctor(com.espertech.esper.client.DbDriverConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.DbDriverFactoryConnection"/> class.
            </summary>
            <param name="dbSpecification">The db specification.</param>
        </member>
        <member name="P:com.espertech.esper.client.DbDriverFactoryConnection.Driver">
            <summary>
            Gets the database driver.
            </summary>
            <value>The database driver.</value>
        </member>
        <member name="T:com.espertech.esper.client.deploy.DeploymentActionException">
            <summary>
            Exception list populated in a deployment operation.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.deploy.DeploymentException">
            <summary>
            Base deployment exception.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.deploy.DeploymentException.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:com.espertech.esper.client.deploy.DeploymentException.#ctor(System.String,System.Exception)">
            <summary>Ctor. </summary>
            <param name="message">error message</param>
            <param name="cause">cause</param>
        </member>
        <member name="M:com.espertech.esper.client.deploy.DeploymentException.#ctor(System.Exception)">
            <summary>Ctor. </summary>
            <param name="cause">cause</param>
        </member>
        <member name="M:com.espertech.esper.client.deploy.DeploymentActionException.#ctor(System.String,System.Collections.Generic.IList{com.espertech.esper.client.deploy.DeploymentItemException})">
            <summary>Ctor. </summary>
            <param name="message">deployment error message</param>
            <param name="exceptions">that occured deploying</param>
        </member>
        <member name="M:com.espertech.esper.client.deploy.DeploymentActionException.GetDetail">
            <summary>Returns a detail print of all exceptions and messages line-separated. </summary>
            <returns>exception list</returns>
        </member>
        <member name="P:com.espertech.esper.client.deploy.DeploymentActionException.Exceptions">
            <summary>Returns the exception list. </summary>
            <value>exceptions</value>
        </member>
        <member name="T:com.espertech.esper.client.deploy.DeploymentInformation">
            <summary>
            Available information about deployment made.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.deploy.DeploymentInformation.#ctor(System.String,com.espertech.esper.client.deploy.Module,System.DateTime,System.DateTime,com.espertech.esper.client.deploy.DeploymentInformationItem[],com.espertech.esper.client.deploy.DeploymentState)">
            <summary>Ctor. </summary>
            <param name="deploymentId">deployment id</param>
            <param name="addedDate">date the deployment was added</param>
            <param name="lastUpdateDate">date of last update to state</param>
            <param name="items">module statement-level details</param>
            <param name="state">current state</param>
            <param name="module">the module</param>
        </member>
        <member name="P:com.espertech.esper.client.deploy.DeploymentInformation.DeploymentId">
            <summary>Returns the deployment id. </summary>
            <value>deployment id</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.DeploymentInformation.LastUpdateDate">
            <summary>Returns the last update date, i.e. date the information was last updated with new state. </summary>
            <value>last update date</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.DeploymentInformation.Items">
            <summary>Returns deployment statement-level details: Note that for an newly-added undeployed modules not all statement-level information is available and therefore returns an empty array. </summary>
            <value>statement details or empty array for newly added deployments</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.DeploymentInformation.State">
            <summary>Returns current deployment state. </summary>
            <value>state</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.DeploymentInformation.AddedDate">
            <summary>Returns date the deployment was added. </summary>
            <value>added-date</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.DeploymentInformation.Module">
            <summary>Returns the module. </summary>
            <value>module</value>
        </member>
        <member name="T:com.espertech.esper.client.deploy.DeploymentInformationItem">
            <summary>
            Statement level information for deployed modules.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.deploy.DeploymentInformationItem.#ctor(System.String,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="statementName">name of statement</param>
            <param name="expression">EPL text</param>
        </member>
        <member name="P:com.espertech.esper.client.deploy.DeploymentInformationItem.StatementName">
            <summary>
            Returns statement name.
            </summary>
            <value>name</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.DeploymentInformationItem.Expression">
            <summary>
            Returns EPL text.
            </summary>
            <value>expression</value>
        </member>
        <member name="T:com.espertech.esper.client.deploy.DeploymentItemException">
            <summary>Inner exception to <seealso cref="T:com.espertech.esper.client.deploy.DeploymentActionException"/> available on statement level. </summary>
        </member>
        <member name="M:com.espertech.esper.client.deploy.DeploymentItemException.#ctor(System.String,System.String,System.Exception,System.Int32)">
            <summary>Ctor. </summary>
            <param name="message">exception text</param>
            <param name="expression">EPL</param>
            <param name="inner">compile or start exception</param>
            <param name="lineNumber">line number</param>
        </member>
        <member name="P:com.espertech.esper.client.deploy.DeploymentItemException.Expression">
            <summary>Returns EPL expression. </summary>
            <value>expression</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.DeploymentItemException.Inner">
            <summary>Returns EPL compile or start exception. </summary>
            <value>exception</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.DeploymentItemException.LineNumber">
            <summary>Returns line number. </summary>
            <value>line number</value>
        </member>
        <member name="T:com.espertech.esper.client.deploy.DeploymentNotFoundException">
            <summary>
            Inner exception to <seealso cref="T:com.espertech.esper.client.deploy.DeploymentActionException"/> available on statement level.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.deploy.DeploymentNotFoundException.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="message">error message</param>
        </member>
        <member name="T:com.espertech.esper.client.deploy.DeploymentOptions">
            <summary>
            Options for use in deployment of a module to control the behavior of the deploy operation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.deploy.DeploymentOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.deploy.DeploymentOptions"/> class.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.deploy.DeploymentOptions.IsCompile">
            <summary>Returns true (the default) to indicate that the deploy operation first performs a compile step for each statement before attempting to start a statement. </summary>
            <value>true for compile before start, false for start-only</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.DeploymentOptions.IsFailFast">
            <summary>Returns true (the default) to indicate that the first statement to fail starting will fail the complete module deployment, or set to false to indicate that the operation should attempt to start all statements regardless of any failures. </summary>
            <value>indicator</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.DeploymentOptions.IsRollbackOnFail">
            <summary>Returns true (the default) to indicate that the engine destroys any started statement when a subsequent statement fails to start, or false if the engine should leave any started statement as-is even when exceptions occur for one or more statements. </summary>
            <value>indicator</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.DeploymentOptions.IsCompileOnly">
            <summary>Returns true to indicate to compile only and not start any statements, or false (the default) to indicate that statements are started as part of the deploy. </summary>
            <value>indicator</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.DeploymentOptions.IsolatedServiceProvider">
            <summary>Returns the isolated service provider to deploy to, if specified. </summary>
            <value>isolated service provider name</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.DeploymentOptions.IsValidateOnly">
            <summary>Returns true to validate the module syntax and EPL syntax only. Use this option to not deploy any EPL statement, performing only syntax checking. </summary>
            <value>validate flag</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.DeploymentOptions.StatementNameResolver">
            <summary>
            Gets or sets the statement name resolver.
            </summary>
            <value>The statement name resolver.</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.DeploymentOptions.StatementUserObjectResolver">
            <summary>
            Gets or sets the statement user object resolver.
            </summary>
            <value>The statement user object resolver.</value>
        </member>
        <member name="T:com.espertech.esper.client.deploy.DeploymentOrder">
            <summary>
            Returned by the <seealso cref="M:com.espertech.esper.client.deploy.EPDeploymentAdmin.GetDeploymentOrder(System.Collections.Generic.ICollection{com.espertech.esper.client.deploy.Module},com.espertech.esper.client.deploy.DeploymentOrderOptions)"/> 
            operation to holds an ordered list of modules considering each module's 
            uses-dependencies on other modules.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.deploy.DeploymentOrder.#ctor(System.Collections.Generic.IList{com.espertech.esper.client.deploy.Module})">
            <summary>Cotr. </summary>
            <param name="ordered">list of modules</param>
        </member>
        <member name="P:com.espertech.esper.client.deploy.DeploymentOrder.Ordered">
            <summary>Returns the list of modules. </summary>
            <value>modules</value>
        </member>
        <member name="T:com.espertech.esper.client.deploy.DeploymentOrderException">
            <summary>
            Exception indicates a problem when determining delpoyment order and uses-dependency checking.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.deploy.DeploymentOrderException.#ctor(System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="T:com.espertech.esper.client.deploy.DeploymentOrderOptions">
            <summary>
            Options class passed to <seealso cref="M:com.espertech.esper.client.deploy.EPDeploymentAdmin.GetDeploymentOrder(System.Collections.Generic.ICollection{com.espertech.esper.client.deploy.Module},com.espertech.esper.client.deploy.DeploymentOrderOptions)"/>
            for controlling the behavior of ordering and dependency checking logic.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.deploy.DeploymentOrderOptions.IsCheckCircularDependency">
            <summary>Returns true (the default) to indicate that the algorithm checks for circular dependencies among the uses-dependency graph, or false to not perform this check. </summary>
            <value>indicator.</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.DeploymentOrderOptions.IsCheckUses">
            <summary>Returns true (the default) to cause the algorithm to check uses-dependencies ensuring all dependencies are satisfied i.e. all dependent modules are either deployed or are part of the modules passed in, or false to not perform the checking. </summary>
            <value>indicator</value>
        </member>
        <member name="T:com.espertech.esper.client.deploy.DeploymentResult">
            <summary>
            Result of a deployment operation carries a deployment id for use in undeploy and 
            statement-level information.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.deploy.DeploymentResult.#ctor(System.String,System.Collections.Generic.IList{com.espertech.esper.client.EPStatement},System.Collections.Generic.IList{System.String})">
            <summary>Ctor. </summary>
            <param name="deploymentId">deployment id</param>
            <param name="statements">statements deployed and started</param>
            <param name="imports">the imports that are part of the deployment</param>
        </member>
        <member name="P:com.espertech.esper.client.deploy.DeploymentResult.DeploymentId">
            <summary>Returns the deployment id. </summary>
            <value>id</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.DeploymentResult.Statements">
            <summary>Returns the statements. </summary>
            <value>statements</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.DeploymentResult.Imports">
            <summary>Returns a list of imports that were declared in the deployment. </summary>
            <value>imports</value>
        </member>
        <member name="T:com.espertech.esper.client.deploy.DeploymentState">
            <summary>Deployment state. </summary>
        </member>
        <member name="F:com.espertech.esper.client.deploy.DeploymentState.UNDEPLOYED">
            <summary>In undeployed state a deployment is added but not currently deployed. </summary>
        </member>
        <member name="F:com.espertech.esper.client.deploy.DeploymentState.DEPLOYED">
            <summary>In deployed state a deployment is added and it is deployed, i.e. has zero to many active EPL statements associated. </summary>
        </member>
        <member name="T:com.espertech.esper.client.deploy.DeploymentStateException">
            <summary>
            Inner exception to <seealso cref="T:com.espertech.esper.client.deploy.DeploymentActionException"/> available on statement level.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.deploy.DeploymentStateException.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="message">error message</param>
        </member>
        <member name="T:com.espertech.esper.client.deploy.EngineInitializerAttribute">
            <summary>
            For use with server environments that support dynamic engine initialization
            (enterprise edition server), indicates that this method should be called after 
            the engine instance is initialized and the initial set of EPL statements have 
            been deployed, for example to set up listeners and subscribers.
            <para/>
            Apply this attribute to any method that accepts a single string parameter providing 
            the engine name.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.deploy.EPDeploymentAdmin">
            <summary>
            Service to package and deploy EPL statements organized into an EPL module.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.deploy.EPDeploymentAdmin.Read(System.IO.Stream,System.String)">
            <summary>Read the input stream and return the module. It is up to the calling method to close the stream when done. </summary>
            <param name="stream">to read</param>
            <param name="moduleUri">uri of the module</param>
            <returns>module</returns>
            <throws>IOException when the io operation failed</throws>
            <throws>ParseException when parsing of the module failed</throws>
        </member>
        <member name="M:com.espertech.esper.client.deploy.EPDeploymentAdmin.Read(System.String)">
            <summary>Read the resource by opening from classpath and return the module. </summary>
            <param name="resource">name of the classpath resource</param>
            <returns>module</returns>
            <throws>IOException when the resource could not be read</throws>
            <throws>ParseException when parsing of the module failed</throws>
        </member>
        <member name="M:com.espertech.esper.client.deploy.EPDeploymentAdmin.Read(System.IO.FileInfo)">
            <summary>Read the module by reading the text file and return the module. </summary>
            <param name="file">the file to read</param>
            <returns>module</returns>
            <throws>IOException when the file could not be read</throws>
            <throws>ParseException when parsing of the module failed</throws>
        </member>
        <member name="M:com.espertech.esper.client.deploy.EPDeploymentAdmin.Read(System.Uri)">
            <summary>Read the module by reading from the URL provided and return the module. </summary>
            <param name="url">the URL to read</param>
            <returns>module</returns>
            <throws>IOException when the url input stream could not be read</throws>
            <throws>ParseException when parsing of the module failed</throws>
        </member>
        <member name="M:com.espertech.esper.client.deploy.EPDeploymentAdmin.Parse(System.String)">
            <summary>Parse the module text passed in, returning the module. </summary>
            <param name="eplModuleText">to parse</param>
            <returns>module</returns>
            <throws>IOException when the parser failed to read the string buffer</throws>
            <throws>ParseException when parsing of the module failed</throws>
        </member>
        <member name="M:com.espertech.esper.client.deploy.EPDeploymentAdmin.GetDeploymentOrder(System.Collections.Generic.ICollection{com.espertech.esper.client.deploy.Module},com.espertech.esper.client.deploy.DeploymentOrderOptions)">
            <summary>Compute a deployment order among the modules passed in considering their uses-dependency declarations and considering the already-deployed modules. <para /> The operation also checks and reports circular dependencies. <para /> Pass in @{link DeploymentOrderOptions} to customize the behavior if this method. When passing no options or passing default options, the default behavior checks uses-dependencies and circular dependencies. </summary>
            <param name="modules">to determine ordering for</param>
            <param name="options">operation options or null for default options</param>
            <returns>ordered modules</returns>
            <throws>DeploymentOrderException when any module dependencies are not satisfied</throws>
        </member>
        <member name="M:com.espertech.esper.client.deploy.EPDeploymentAdmin.Deploy(com.espertech.esper.client.deploy.Module,com.espertech.esper.client.deploy.DeploymentOptions)">
            <summary>Deploy a single module returning a generated deployment id to use when undeploying statements as well as additional statement-level information. <para /> Pass in @{link DeploymentOptions} to customize the behavior. When passing no options or passing default options, the operation first compiles all EPL statements before starting each statement, fails-fast on the first statement that fails to start and rolls back (destroys) any started statement on a failure. <para /> When setting validate-only in the deployment options, the method returns a null-value on success. </summary>
            <param name="module">to deploy</param>
            <param name="options">operation options or null for default options</param>
            <returns>result object with statement detail, or null for pass on validate-only</returns>
            <throws>DeploymentActionException when the deployment fails, contains a list of deployment failures</throws>
        </member>
        <member name="M:com.espertech.esper.client.deploy.EPDeploymentAdmin.Deploy(com.espertech.esper.client.deploy.Module,com.espertech.esper.client.deploy.DeploymentOptions,System.String)">
            <summary>Deploy a single module using the deployment id provided as a parameter. <para /> Pass in @{link DeploymentOptions} to customize the behavior. When passing no options or passing default options, the operation first compiles all EPL statements before starting each statement, fails-fast on the first statement that fails to start and rolls back (destroys) any started statement on a failure. <para /> When setting validate-only in the deployment options, the method returns a null-value on success. </summary>
            <param name="module">to deploy</param>
            <param name="options">operation options or null for default options</param>
            <param name="assignedDeploymentId">the deployment id to assign</param>
            <returns>result object with statement detail, or null for pass on validate-only</returns>
            <throws>DeploymentActionException when the deployment fails, contains a list of deployment failures</throws>
        </member>
        <member name="M:com.espertech.esper.client.deploy.EPDeploymentAdmin.UndeployRemove(System.String)">
            <summary>Undeploy a single module, if its in deployed state, and removes it from the known modules. <para /> This operation destroys all statements previously associated to the deployed module and also removes this module from the list deployments list. </summary>
            <param name="deploymentId">of the deployment to undeploy.</param>
            <returns>result object with statement-level detail</returns>
            <throws>DeploymentNotFoundException when the deployment id could not be resolved to a deployment</throws>
        </member>
        <member name="M:com.espertech.esper.client.deploy.EPDeploymentAdmin.GetDeployment(System.String)">
            <summary>Returns the deployment information for a given deployment. </summary>
            <param name="deploymentId">to return the deployment information for.</param>
            <returns>deployment info</returns>
        </member>
        <member name="M:com.espertech.esper.client.deploy.EPDeploymentAdmin.IsDeployed(System.String)">
            <summary>Determine if a named module is already deployed (in deployed state), returns true if one or more modules of the same name are deployed or false when no module of that name is deployed. </summary>
            <param name="moduleName">to look up</param>
            <returns>indicator</returns>
        </member>
        <member name="M:com.espertech.esper.client.deploy.EPDeploymentAdmin.ReadDeploy(System.String,System.String,System.String,System.Object)">
            <summary>Shortcut method to read and deploy a single module from a classpath resource. <para /> Uses default options for performing deployment dependency checking and deployment. </summary>
            <param name="resource">to read</param>
            <param name="moduleURI">uri of module to assign or null if not applicable</param>
            <param name="moduleArchive">archive name of module to assign or null if not applicable</param>
            <param name="userObject">user object to assign to module, passed along unused as part of deployment information, or null if not applicable</param>
            <returns>deployment result object</returns>
            <throws>IOException when the file could not be read</throws>
            <throws>ParseException when parsing of the module failed</throws>
            <throws>DeploymentOrderException when any module dependencies are not satisfied</throws>
            <throws>DeploymentActionException when the deployment fails, contains a list of deployment failures</throws>
        </member>
        <member name="M:com.espertech.esper.client.deploy.EPDeploymentAdmin.ReadDeploy(System.IO.Stream,System.String,System.String,System.Object)">
            <summary>Shortcut method to read and deploy a single module from an input stream. <para /> Uses default options for performing deployment dependency checking and deployment. <para /> Leaves the stream unclosed. </summary>
            <param name="stream">to read</param>
            <param name="moduleURI">uri of module to assign or null if not applicable</param>
            <param name="moduleArchive">archive name of module to assign or null if not applicable</param>
            <param name="userObject">user object to assign to module, passed along unused as part of deployment information, or null if not applicable</param>
            <returns>deployment result object</returns>
            <throws>IOException when the file could not be read</throws>
            <throws>ParseException when parsing of the module failed</throws>
            <throws>DeploymentOrderException when any module dependencies are not satisfied</throws>
            <throws>DeploymentActionException when the deployment fails, contains a list of deployment failures</throws>
        </member>
        <member name="M:com.espertech.esper.client.deploy.EPDeploymentAdmin.ParseDeploy(System.String,System.String,System.String,System.Object)">
            <summary>Shortcut method to parse and deploy a single module from a string text buffer. <para /> Uses default options for performing deployment dependency checking and deployment. </summary>
            <param name="eplModuleText">to parse</param>
            <param name="moduleURI">uri of module to assign or null if not applicable</param>
            <param name="moduleArchive">archive name of module to assign or null if not applicable</param>
            <param name="userObject">user object to assign to module, passed along unused as part of deployment information, or null if not applicable</param>
            <returns>deployment result object</returns>
            <throws>IOException when the file could not be read</throws>
            <throws>ParseException when parsing of the module failed</throws>
            <throws>DeploymentOrderException when any module dependencies are not satisfied</throws>
            <throws>DeploymentActionException when the deployment fails, contains a list of deployment failures</throws>
        </member>
        <member name="M:com.espertech.esper.client.deploy.EPDeploymentAdmin.ParseDeploy(System.String)">
            <summary>Shortcut method to parse and deploy a single module from a string text buffer, without providing a module URI name or archive name or user object. The module URI, archive name and user object are defaulted to null. <para /> Uses default options for performing deployment dependency checking and deployment. </summary>
            <param name="eplModuleText">to parse</param>
            <returns>deployment result object</returns>
            <throws>IOException when the file could not be read</throws>
            <throws>ParseException when parsing of the module failed</throws>
            <throws>DeploymentOrderException when any module dependencies are not satisfied</throws>
            <throws>DeploymentActionException when the deployment fails, contains a list of deployment failures</throws>
        </member>
        <member name="M:com.espertech.esper.client.deploy.EPDeploymentAdmin.Add(com.espertech.esper.client.deploy.Module)">
            <summary>Adds a module in undeployed state, generating a deployment id and returning the generated deployment id of the module. </summary>
            <param name="module">to add</param>
            <returns>The deployment id assigned to the module</returns>
        </member>
        <member name="M:com.espertech.esper.client.deploy.EPDeploymentAdmin.Add(com.espertech.esper.client.deploy.Module,System.String)">
            <summary>Adds a module in undeployed state, using the provided deployment id as a unique identifier for the module. </summary>
            <param name="module">to add</param>
            <param name="assignedDeploymentId">deployment id to assign</param>
        </member>
        <member name="M:com.espertech.esper.client.deploy.EPDeploymentAdmin.Remove(System.String)">
            <summary>Remove a module that is currently in undeployed state. <para /> This call may only be used on undeployed modules. </summary>
            <param name="deploymentId">of the module to remove</param>
            <throws>DeploymentStateException when attempting to remove a module that does not exist or a module that is not in undeployed state</throws>
            <throws>DeploymentNotFoundException if no such deployment id is known</throws>
        </member>
        <member name="M:com.espertech.esper.client.deploy.EPDeploymentAdmin.Deploy(System.String,com.espertech.esper.client.deploy.DeploymentOptions)">
            <summary>Deploy a previously undeployed module. </summary>
            <param name="deploymentId">of the module to deploy</param>
            <param name="options">deployment options</param>
            <returns>deployment result</returns>
            <throws>DeploymentStateException when attempting to deploy a module that does not exist is already deployed</throws>
            <throws>DeploymentOrderException when deployment dependencies are not satisfied</throws>
            <throws>DeploymentActionException when the deployment (or validation when setting validate-only) failed</throws>
            <throws>DeploymentNotFoundException if no such deployment id is known</throws>
        </member>
        <member name="M:com.espertech.esper.client.deploy.EPDeploymentAdmin.Undeploy(System.String)">
            <summary>Undeploy a previously deployed module. </summary>
            <param name="deploymentId">of the module to undeploy</param>
            <returns>undeployment result</returns>
            <throws>DeploymentStateException when attempting to undeploy a module that does not exist is already undeployed</throws>
            <throws>DeploymentNotFoundException when the deployment id could not be resolved</throws>
        </member>
        <member name="P:com.espertech.esper.client.deploy.EPDeploymentAdmin.Deployments">
            <summary>Return deployment ids of all currently known modules. </summary>
            <value>array of deployment ids</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.EPDeploymentAdmin.DeploymentInformation">
            <summary>Returns deployment information for all known modules. </summary>
            <value>deployment information.</value>
        </member>
        <member name="T:com.espertech.esper.client.deploy.Module">
            <summary>
            Represent a deployment unit consisting of deployment declarative information
            (module name, uses and imports) as well as EPL statements represented by
            <see cref="T:com.espertech.esper.client.deploy.ModuleItem"/>. May have an additional user object and archive name 
            and uri pointing to the module source attached.
            <para/>
            The module URI gets initialized with the filename, resource or URL being read,
            however may be overridden and has not further meaning to the deployment.
            <para/>
            The archive name and user object are opportunities to attach additional deployment
            information.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.deploy.Module.#ctor(System.String,System.String,System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String},System.Collections.Generic.IList{com.espertech.esper.client.deploy.ModuleItem},System.String)">
            <summary>Ctor. </summary>
            <param name="name">module name</param>
            <param name="uri">module uri</param>
            <param name="uses">names of modules that this module depends on</param>
            <param name="imports">the Java class imports</param>
            <param name="items">EPL statements</param>
            <param name="moduleText">text of module</param>
        </member>
        <member name="P:com.espertech.esper.client.deploy.Module.ArchiveName">
            <summary>Returns the name of the archive this module originated from, or null if not applicable. </summary>
            <value>archive name</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.Module.UserObject">
            <summary>Returns the optional user object that may be attached to the module. </summary>
            <value>user object</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.Module.Name">
            <summary>Returns the module name, if provided. </summary>
            <value>module name</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.Module.Uri">
            <summary>Returns the module URI if provided. </summary>
            <value>module URI</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.Module.Uses">
            <summary>Returns the dependencies the module may have on other modules. </summary>
            <value>module dependencies</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.Module.Items">
            <summary>Returns a list of statements (some may be comments only) that make up the module. </summary>
            <value>statements</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.Module.Imports">
            <summary>Returns the imports defined by the module. </summary>
            <value>module imports</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.Module.ModuleText">
            <summary>Returns module text. </summary>
            <value>text</value>
        </member>
        <member name="T:com.espertech.esper.client.deploy.ModuleItem">
            <summary>
            Represents an EPL statement as part of a <see cref="T:com.espertech.esper.client.deploy.Module"/>.
            <para/>
            Character position start and end are only available for non-comment only.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.deploy.ModuleItem.#ctor(System.String,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>Ctor. </summary>
            <param name="expression">EPL</param>
            <param name="commentOnly">true if the statement consists only of comments or whitespace</param>
            <param name="lineNumber">line number</param>
            <param name="charPosStart">character position of start of segment</param>
            <param name="charPosEnd">character position of end of segment</param>
        </member>
        <member name="P:com.espertech.esper.client.deploy.ModuleItem.Expression">
            <summary>Returns the EPL. </summary>
            <value>expression</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.ModuleItem.IsCommentOnly">
            <summary>Returns true to indicate comments-only expression. </summary>
            <value>comments-only indicator</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.ModuleItem.LineNumber">
            <summary>Returns the line number of item. </summary>
            <value>item line num</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.ModuleItem.CharPosStart">
            <summary>Returns item char position in line. </summary>
            <value>char position</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.ModuleItem.CharPosEnd">
            <summary>Returns end position of character on line for the item. </summary>
            <value>position</value>
        </member>
        <member name="T:com.espertech.esper.client.deploy.ParseException">
            <summary>
            Exception thrown when an EPL text could not be parsed.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.deploy.ParseException.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="message">error message</param>
        </member>
        <member name="T:com.espertech.esper.client.deploy.SingleRowFunctionAttribute">
            <summary>
            For use with server environments that support dynamic engine initialization 
            (enterprise edition server), indicates that this method provide a single-row 
            function and should be registered as such so it becomes callable from EPL
            statements using the name specified.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.deploy.SingleRowFunctionAttribute.Name">
            <summary>
            Single-row function name for use in EPL statements.
            </summary>
            <value>The name.</value>
            <returns>function name.</returns>
        </member>
        <member name="T:com.espertech.esper.client.deploy.StatementDeploymentContext">
            <summary>
            Context object passed to <seealso cref="T:com.espertech.esper.client.deploy.StatementNameResolver"/> or 
            <seealso cref="T:com.espertech.esper.client.deploy.StatementUserObjectResolver"/> to help in determining the 
            right statement name or user object for a statement deployed via the 
            deployment admin API.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.deploy.StatementDeploymentContext.#ctor(System.String,com.espertech.esper.client.deploy.Module,com.espertech.esper.client.deploy.ModuleItem,System.String)">
            <summary>Ctor. </summary>
            <param name="epl">EPL expression</param>
            <param name="module">encapsulating module</param>
            <param name="moduleItem">item in module</param>
            <param name="deploymentId">deployment id</param>
        </member>
        <member name="P:com.espertech.esper.client.deploy.StatementDeploymentContext.Epl">
            <summary>Returns the EPL expression. </summary>
            <value>EPL</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.StatementDeploymentContext.Module">
            <summary>Returns the module. </summary>
            <value>module</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.StatementDeploymentContext.DeploymentId">
            <summary>Returns the deployment id. </summary>
            <value>deployment id</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.StatementDeploymentContext.ModuleItem">
            <summary>Returns the module item. </summary>
            <value>module item</value>
        </member>
        <member name="T:com.espertech.esper.client.deploy.StatementNameResolver">
            <summary>
            Implement this interface to provide a custom statement name for the statements deployed 
            via the deployment API. 
            <para />
            Statement names provided by the resolver override the statement name provided via the @Name annotation. 
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.deploy.StatementNameResolver.GetStatementName(com.espertech.esper.client.deploy.StatementDeploymentContext)">
            <summary>
            Returns the statement name to assign to a newly-deployed statement. 
            <para />
            Implementations would typically interrogate the context object EPL expression or module and module 
            item information and determine the right statement name to assign.
            </summary>
            <param name="context">the statement's deployment context</param>
            <returns>
            statement name or null if none needs to be assigned and the default or @Name annotated name should be used
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.deploy.StatementUserObjectResolver">
            <summary>
            Implement this interface to provide a custom user object for the statements deployed via the deployment API.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.deploy.StatementUserObjectResolver.GetUserObject(com.espertech.esper.client.deploy.StatementDeploymentContext)">
            <summary>
            Returns the user object to assign to a newly-deployed statement.
            <para />
            Implementations would typically interrogate the context object EPL expression or module and module 
            item information and determine the right user object to assign.
            </summary>
            <param name="context">the statement's deployment context</param>
            <returns>
            user object or null if none needs to be assigned
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.deploy.UndeploymentResult">
            <summary>
            Result object of an undeployment operation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.deploy.UndeploymentResult.#ctor(System.String,System.Collections.Generic.IList{com.espertech.esper.client.deploy.DeploymentInformationItem})">
            <summary>Ctor. </summary>
            <param name="deploymentId">id generated by deployment operation</param>
            <param name="statementInfo">statement-level deployment information</param>
        </member>
        <member name="P:com.espertech.esper.client.deploy.UndeploymentResult.DeploymentId">
            <summary>Returns the deployment id. </summary>
            <value>id</value>
        </member>
        <member name="P:com.espertech.esper.client.deploy.UndeploymentResult.StatementInfo">
            <summary>Statement-level undeploy information. </summary>
            <value>statement info</value>
        </member>
        <member name="T:com.espertech.esper.client.EPAdministratorIsolated">
            <summary>
            Administrative interfae
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministratorIsolated.CreateEPL(System.String,System.String,System.Object)">
            <summary>
            Create and starts an EPL statement.
            <para/>
            The statement name is optimally a unique name. If a statement of the same name
            has already been created, the engine assigns a postfix to create a unique
            statement name.
            <para/>
            Accepts an application defined user data object associated with the statement.
            The <em>user object</em> is a single, unnamed field that is stored with every
            statement. Applications may put arbitrary objects in this field or a null value.
            </summary>
            <param name="eplStatement">is the query language statement</param>
            <param name="statementName">is the statement name or null if not provided or provided via annotation instead</param>
            <param name="userObject">is the application-defined user object, or null if none provided</param>
            <returns>
            EPStatement to poll data from or to add listeners to, or null if provided via
            annotation
            </returns>
            <throws>com.espertech.esper.client.EPException when the expression was not valid</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministratorIsolated.AddStatement(com.espertech.esper.client.EPStatement)">
            <summary>
            Add a statement to the isolated service.
            </summary>
            <param name="statement">to add</param>
            <throws>EPServiceIsolationException if the statement cannot be isolated, typically because it already is isolated</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministratorIsolated.RemoveStatement(com.espertech.esper.client.EPStatement)">
            <summary>
            Remove a statement from the isolated service. This does not change engine state.
            </summary>
            <param name="statement">to remove</param>
            <throws>EPServiceIsolationException if the statement was not isolated herein</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministratorIsolated.AddStatement(com.espertech.esper.client.EPStatement[])">
            <summary>
            Add statements to the isolated service.
            </summary>
            <param name="statements">to add</param>
            <throws>EPServiceIsolationException if the statement cannot be isolated, typically because it already is isolated</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministratorIsolated.RemoveStatement(System.Collections.Generic.IList{com.espertech.esper.client.EPStatement})">
            <summary>
            Remove statements from the isolated service. This does not change engine state.
            </summary>
            <param name="statements">to remove</param>
            <throws>EPServiceIsolationException if the statement was not isolated herein</throws>
        </member>
        <member name="P:com.espertech.esper.client.EPAdministratorIsolated.StatementNames">
            <summary>
            Returns the statement names of all started and stopped statements.
            <para/>
            This excludes the name of destroyed statements.
            </summary>
            <returns>
            statement names
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.EPStatement">
            <summary>
            Statement interface that provides methods to start, stop and destroy a statement as well as
            get statement information such as statement name, expression text and current state.
            <para>
            Statements have 3 states: STARTED, STOPPED and DESTROYED.
            </para>
            <para>
            In started state, statements are actively evaluating event streams according to the statement expression. Started
            statements can be stopped and destroyed.
            </para>
            <para>
            In stopped state, statements are inactive. Stopped statements can either be started, in which case
            they begin to actively evaluate event streams, or destroyed.
            </para>
            <para>
            Destroyed statements have relinguished all statement resources and cannot be started or stopped.
            </para>
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.EPListenable">
            <summary>
            Interface to add and remove update listeners.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPListenable.RemoveAllEventHandlers">
            <summary>
            Removes all event handlers.
            </summary>
        </member>
        <member name="E:com.espertech.esper.client.EPListenable.Events">
            <summary>
            Occurs whenever new events are available or old events are removed.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.EPIterable">
            <summary>
            Interface to iterate over events.
            <para>
            A concurrency-unsafe iterator over events representing statement results (pull API).
            </para>
            <para>
            The iterator is useful for applications that are single-threaded, or that coordinate the iterating thread
            with event processing threads that use the sendEvent method using application code locks or synchronization.
            </para>
            <para>
            The iterator returned by this method does not make any guarantees towards correctness of
            results and fail-behavior, if your application processes events into the engine instance
            using the sendEvent method by multiple threads.
            </para>
            <para>
            Use the safeIterator method for concurrency-safe iteration. Note the safe iterator requires
            applications to explicitly close the safe iterator when done iterating.
            </para>
            </summary>
            <returns>event iterator</returns>
        </member>
        <member name="M:com.espertech.esper.client.EPIterable.GetSafeEnumerator">
            <summary>
            Returns a concurrency-safe iterator that iterates over events representing statement results (pull API)
            in the face of concurrent event processing by further threads.
            <para>
            In comparison to the regular iterator, the safe iterator guarantees correct results even
            as events are being processed by other threads. The cost is that the iterator holds
            one or more locks that must be released. Any locks are acquired at the time this method
            is called.
            </para>
            <para>
            This method is a blocking method. It may block until statement processing locks are released
            such that the safe iterator can acquire any required locks.
            </para>
            <para>
            An application MUST explicitly close the safe iterator instance using the close method, to release locks held by the
            iterator. The call to the close method should be done in a finally block to make sure
            the iterator gets closed.
            </para>
            <para>
            Multiple safe iterators may be not be used at the same time by different application threads.
            A single application thread may hold and use multiple safe iterators however this is discouraged.
            </para>
            </summary>
            <returns>
            safe iterator;
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.EPIterable.EventType">
            <summary> Returns the type of events the iterable returns.</summary>
            <returns> event type of events the iterator returns
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.EPStatement.Start">
            <summary> Start the statement.</summary>
        </member>
        <member name="M:com.espertech.esper.client.EPStatement.Stop">
            <summary> Stop the statement.</summary>
        </member>
        <member name="M:com.espertech.esper.client.EPStatement.AddEventHandlerWithReplay(com.espertech.esper.client.UpdateEventHandler)">
            <summary>
            Add an event handler to the current statement and replays current statement 
            results to the handler.
            <para/>
            The handler receives current statement results as the first call to the update
            method of the event handler, passing in the newEvents parameter the current statement
            results as an array of zero or more events. Subsequent calls to the update
            method of the event handler are statement results.
            <para/>
            Current statement results are the events returned by the GetEnumerator or
            GetSafeEnumerator methods.
            <para/>
            Delivery of current statement results in the first call is performed by the
            same thread invoking this method, while subsequent calls to the event handler may
            deliver statement results by the same or other threads.
            <para/>
            Note: this is a blocking call, delivery is atomic: Events occurring during
            iteration and delivery to the event handler are guaranteed to be delivered in a separate
            call and not lost. The event handler implementation should minimize long-running or
            blocking operations.
            <para/>
            Delivery is only atomic relative to the current statement. If the same event handler
            instance is registered with other statements it may receive other statement
            result s simultaneously.
            <para/>
            If a statement is not started an therefore does not have current results, the
            event handler receives a single invocation with a null value in newEvents.
            </summary>
            <param name="eventHandler">eventHandler that will receive events</param>
        </member>
        <member name="M:com.espertech.esper.client.EPStatement.GetEnumerator(com.espertech.esper.client.context.ContextPartitionSelector)">
            <summary>
            For use with statements that have a context declared and that may therefore have
            multiple context partitions, allows to iterate over context partitions selectively.
            </summary>
            <param name="selector">selects context partitions to consider</param>
            <returns>iterator</returns>
        </member>
        <member name="M:com.espertech.esper.client.EPStatement.GetSafeEnumerator(com.espertech.esper.client.context.ContextPartitionSelector)">
            <summary>
            For use with statements that have a context declared and that may therefore have 
            multiple context partitions, allows to safe-iterate over context partitions selectively.
            </summary>
            <param name="selector">selects context partitions to consider</param>
            <returns>safe iterator</returns>
        </member>
        <member name="P:com.espertech.esper.client.EPStatement.Name">
            <summary> Returns the statement name.</summary>
            <returns> statement name</returns>
        </member>
        <member name="P:com.espertech.esper.client.EPStatement.Text">
            <summary> Returns the underlying expression text or XML.</summary>
            <returns> expression text</returns>
        </member>
        <member name="P:com.espertech.esper.client.EPStatement.State">
            <summary>Gets the statement's current state</summary>
        </member>
        <member name="P:com.espertech.esper.client.EPStatement.IsStarted">
            <summary>Returns true if the statement state is started.</summary>
            <returns>
            true for started statements, false for stopped or destroyed statements.
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.EPStatement.IsStopped">
            <summary>Returns true if the statement state is stopped.</summary>
            <returns>
            true for stopped statements, false for started or destroyed statements.
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.EPStatement.IsDisposed">
            <summary>Returns true if the statement state is destroyed.</summary>
            <returns>
            true for destroyed statements, false for started or stopped statements.
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.EPStatement.TimeLastStateChange">
            <summary>
            Returns the system time in milliseconds of when the statement last change state.
            </summary>
            <returns>time in milliseconds of last statement state change</returns>
        </member>
        <member name="P:com.espertech.esper.client.EPStatement.Subscriber">
            <summary>
            Gets or sets the current subscriber instance that receives statement results.
            <para/>
            Only a single subscriber may be set for a statement. If this method is invoked twice
            any previously-set subscriber is no longer used. 
            </summary>
            <value>The subscriber.</value>
        </member>
        <member name="P:com.espertech.esper.client.EPStatement.IsPattern">
            <summary>Returns true if statement is a pattern</summary>
            <returns>true if statement is a pattern</returns>
        </member>
        <member name="P:com.espertech.esper.client.EPStatement.UserObject">
            <summary>
            Returns the application defined user data object associated with the statement,
            or null if none was supplied at time of statement creation.
            <para/>
            The <em>user object</em> is a single, unnamed field that is stored with every
            statement. Applications may put arbitrary objects in this field or a null value.
            <para/>
            User objects are passed at time of statement creation as a parameter the create
            method.
            </summary>
            <returns>
            user object or null if none defined
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.EPStatement.Annotations">
            <summary>
            Returns EPL or pattern statement attributes provided in the statement text, if any.
            <para/>
            See the annotation <seealso cref="N:com.espertech.esper.client.annotation"/> namespace
            for additional attributes / annotations.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.EPStatement.ServiceIsolated">
            <summary>
            Returns the name of the isolated service provided is the statement is currently
            isolated in terms of event visibility and scheduling, or returns null if the
            statement is live in the engine.
            </summary>
            <returns>
            isolated service name or null for statements that are not currently isolated
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.EPManagedStatement.ClearEventHandlers">
            <summary>
            Clears the event handlers and statement aware event handlers.  Should be
            used with caution since this clears anyone who has registered a handler.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.EPOnDemandPreparedQuery">
            <summary>
            Interface for a prepared on-demand query that can be executed multiple times.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPOnDemandPreparedQuery.Execute">
            <summary>
            Execute the prepared query returning query results.
            </summary>
            <returns>query result</returns>
        </member>
        <member name="M:com.espertech.esper.client.EPOnDemandPreparedQuery.Execute(com.espertech.esper.client.context.ContextPartitionSelector[])">
            <summary>
            For use with named windows that have a context declared and that may therefore have multiple context 
            partitions, allows to target context partitions for query execution selectively.
            </summary>
            <param name="contextPartitionSelectors">selects context partitions to consider</param>
            <returns>query result</returns>
        </member>
        <member name="P:com.espertech.esper.client.EPOnDemandPreparedQuery.EventType">
            <summary>Returns the event type, representing the columns of the select-clause. </summary>
            <returns>event type</returns>
        </member>
        <member name="T:com.espertech.esper.client.EPOnDemandQueryResult">
            <summary>Results of an on-demand (fire-and-forget non-continuous) query. </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPOnDemandQueryResult.GetEnumerator">
            <summary>Returns an enumerator representing query result rows. </summary>
            <returns>result row enumerator</returns>
        </member>
        <member name="P:com.espertech.esper.client.EPOnDemandQueryResult.Array">
            <summary>Returns an array representing query result rows, may return a null value or empty array to indicate an empty result set.</summary>
            <returns>result array</returns>
        </member>
        <member name="P:com.espertech.esper.client.EPOnDemandQueryResult.EventType">
            <summary>Returns the event type of the result. </summary>
            <returns>event type of result row</returns>
        </member>
        <member name="M:com.espertech.esper.client.annotation.PropertyNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.annotation.PropertyNameAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:com.espertech.esper.client.annotation.PropertyNameAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.annotation.PropertyNameAttribute"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.annotation.PropertyNameAttribute.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.annotation.PropertyNameAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:com.espertech.esper.client.EPPreparedStatementImpl">
            <summary>
            Prepared statement implementation that stores the statement object model and a list
            of substitution parameters, to be mapped into an internal representation upon creation.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.EPPreparedStatement">
            <summary>
            Precompiled statement that is prepared with substitution parameters and that
            can be created and started efficiently multiple times with different actual values for parameters.
            <para>
            When a precompiled statement is prepared via the prepare method on <see cref="T:com.espertech.esper.client.EPAdministrator"/>,
            it typically has one or more substitution parameters in the statement text,
            for which the placeholder character is the question mark. This class provides methods to set
            the actual value for the substitution parameter.
            </para>
            <para>
            A precompiled statement can only be created and started when actual values for all
            substitution parameters are set.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPPreparedStatement.SetObject(System.Int32,System.Object)">
            <summary>Sets the value of the designated parameter using the given object.</summary>
            <param name="parameterIndex">the first parameter is 1, the second is 2, ...</param>
            <param name="value">the object containing the input parameter value</param>
            <exception name="EPException">if the substitution parameter could not be located</exception>
        </member>
        <member name="M:com.espertech.esper.client.EPPreparedStatementImpl.#ctor(com.espertech.esper.client.soda.EPStatementObjectModel,System.Collections.Generic.IDictionary{System.Int32,com.espertech.esper.epl.spec.SubstitutionParameterExpression})">
            <summary>Ctor. </summary>
            <param name="model">is the statement object model</param>
            <param name="subParams">is the substitution parameter list</param>
        </member>
        <member name="M:com.espertech.esper.client.EPPreparedStatementImpl.GetSubParams">
            <summary>Returns the indexed substitution parameters. </summary>
            <returns>map of index and parameter</returns>
        </member>
        <member name="P:com.espertech.esper.client.EPPreparedStatementImpl.Model">
            <summary>Returns the statement object model for the prepared statement </summary>
            <value>object model</value>
        </member>
        <member name="T:com.espertech.esper.client.EPRuntimeIsolated">
            <summary>
            Runtime interface for the isolated service provider, for controlling event
            visibility and scheduling for the statements contained within the isolated service.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntimeIsolated.SendEvent(System.Object)">
            <summary>
            Send an event represented by a plain object to the event stream processing
            runtime.
            <para/>
            Use the route method for sending events into the runtime from within
            UpdateListener code, to avoid the possibility of a stack overflow due to nested calls to
            sendEvent.
            </summary>
            <param name="object">is the event to sent to the runtime</param>
            <throws>com.espertech.esper.client.EPException is thrown when the processing of the event lead to an error</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntimeIsolated.SendEvent(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Send a map containing event property values to the event stream processing
            runtime.
            <para/>
            Use the route method for sending events into the runtime from within
            UpdateListener code. to avoid the possibility of a stack overflow due to nested calls to
            sendEvent.
            </summary>
            <param name="map">map that contains event property values. Keys are expected to be of type String while value scan be of any type. Keys and values should match those declared via Configuration for the given eventTypeName.</param>
            <param name="eventTypeName">the name for the Map event type that was previously configured</param>
            <throws>com.espertech.esper.client.EPException - when the processing of the event leads to an error</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntimeIsolated.SendEvent(System.Object[],System.String)">
            <summary>Send an object array containing event property values to the event stream processing runtime. &lt;p&gt; Use the route method for sending events into the runtime from within UpdateListener code. to avoid the possibility of a stack overflow due to nested calls to sendEvent.  </summary>
            <param name="objectarray">array that contains event property values. Your application must ensure that property valuesmatch the exact same order that the property names and types have been declared, and that the array length matches the number of properties declared. </param>
            <param name="objectArrayEventTypeName">the name for the Object-array event type that was previously configured</param>
            <throws>EPException - when the processing of the event leads to an error</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntimeIsolated.SendEvent(System.Xml.Linq.XElement)">
            <summary>
            Send an event represented by a LINQ element to the event stream processing runtime.
            <para/>
            Use the route method for sending events into the runtime from within
            event handler code. to avoid the possibility of a stack overflow due to nested calls to
            SendEvent.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntimeIsolated.SendEvent(System.Xml.XmlNode)">
            <summary>
            Send an event represented by a DOM node to the event stream processing runtime.
            <para/>
            Use the route method for sending events into the runtime from within
            UpdateListener code. to avoid the possibility of a stack overflow due to nested calls to
            sendEvent.
            </summary>
            <param name="node">is the DOM node as an event</param>
            <throws>com.espertech.esper.client.EPException is thrown when the processing of the event lead to an error</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntimeIsolated.GetEventSender(System.String)">
            <summary>
            Returns a facility to process event objects that are of a known type.
            <para>
            Given an event type name this method returns a sender that allows to send in event objects of that type. The 
            event objects send in via the event sender are expected to match the event type, thus the event sender does 
            not inspect the event object other then perform basic checking.
            </para>
            <para>
            For events backed by a class, the sender ensures that the object send in matches in class, or implements or 
            extends the class underlying the event type for the given event type name.
            </para>
            <para>
            For events backed by a Object[] (Object-array events), the sender does not perform any checking other then checking 
            that the event object indeed is an array of object.
            </para>
            <para>
            For events backed by a DataMap (Map events), the sender does not perform any checking other then checking that the 
            event object indeed implements Map. 
            </para>
            <para>
            For events backed by a XmlNode (XML DOM events), the sender checks that the root element name indeed does match the 
            root element name for the event type name. 
            </para>
            </summary>
            <param name="eventTypeName">is the name of the event type</param>
            <returns>sender for fast-access processing of event objects of known type (and content)</returns>
            <throws>EventTypeException thrown to indicate that the name does not exist</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntimeIsolated.GetEventSender(System.Uri[])">
            <summary>
            For use with plug-in event representations, returns a facility to process event objects that are of one of a number 
            of types that one or more of the registered plug-in event representation extensions can reflect upon and provide an event for. 
            </summary>
            <param name="uris">
            is the URIs that specify which plug-in event representations may process an event object.
            <para>
            URIs do not need to match event representation URIs exactly, a child (hierarchical) match is enough for an event representation to participate.
            </para>
            <para>
            The order of URIs is relevant as each event representation's factory is asked in turn to process the event, until the first factory processes the event.
            </para>
            </param>
            <returns>sender for processing of event objects of one of the plug-in event representations</returns>
            <throws>EventTypeException thrown to indicate that the URI list was invalid</throws>
        </member>
        <member name="P:com.espertech.esper.client.EPRuntimeIsolated.CurrentTime">
            <summary>
            Returns current engine time.
            <para/>
            If time is provided externally via timer events, the function returns current
            time as externally provided.
            </summary>
            <returns>
            current engine time
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.EPRuntimeIsolated.NextScheduledTime">
            <summary>
            Returns the time at which the next schedule execution is expected, returns null if no schedule execution is
            outstanding.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.EPServiceDestroyedException">
            <summary>
            This exception is thrown to indicate that the EPServiceProvider (engine) instance has been destroyed. 
            <para/> 
            This exception applies to destroyed engine instances when a client attempts to receive the runtime or administrative interfaces from a destroyed engine instance.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPServiceDestroyedException.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="engineURI">engine URI</param>
        </member>
        <member name="T:com.espertech.esper.client.EPServiceIsolationException">
            <summary>
            This exception is thrown to indicate a problem isolating statements.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPServiceIsolationException.#ctor(System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:com.espertech.esper.client.EPServiceIsolationException.#ctor(System.String,System.Exception)">
            <summary>
            Ctor for an inner exception and message.
            </summary>
            <param name="message">error message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="T:com.espertech.esper.client.EPServiceProviderIsolated">
            <summary>
            Isolated service provider for controlling event visibility and scheduling on a
            statement level.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.EPServiceProviderIsolated.EPRuntime">
            <summary>
            Returns a class instance of EPRuntime.
            </summary>
            <returns>
            an instance of EPRuntime
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.EPServiceProviderIsolated.EPAdministrator">
            <summary>
            Returns a class instance of EPAdministrator.
            </summary>
            <returns>
            an instance of EPAdministrator
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.EPServiceProviderIsolated.Name">
            <summary>
            Name of isolated service.
            </summary>
            <returns>
            isolated service name
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.EPServiceProviderManager">
            <summary>
            Factory for instances of <seealso cref="T:com.espertech.esper.core.service.EPServiceProviderSPI"/>.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPServiceProviderManager.GetDefaultProvider">
            <summary> 
            Returns the default EPServiceProvider.
            The URI value for the service returned is "default".
            </summary>
            <returns> default instance of the service.
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.EPServiceProviderManager.GetDefaultProvider(com.espertech.esper.client.Configuration)">
            <summary> 
            Returns the default EPServiceProvider.
            The URI value for the service returned is "default".
            </summary>
            <param name="configuration">is the configuration for the service
            </param>
            <returns> default instance of the service.
            </returns>
            <throws>  ConfigurationException to indicate a configuration problem </throws>
        </member>
        <member name="M:com.espertech.esper.client.EPServiceProviderManager.GetProvider(System.String)">
            <summary>
            Returns an EPServiceProvider for a given provider URI.
            Use the URI of "default" or null to return the default service provider.
            </summary>
            <param name="providerURI">the provider URI</param>
            <returns>EPServiceProvider for the given provider URI.</returns>
        </member>
        <member name="M:com.espertech.esper.client.EPServiceProviderManager.GetProvider(System.String,com.espertech.esper.client.Configuration)">
            <summary>
            Returns an EPServiceProvider for a given provider URI.
            Use the URI of "default" or null to return the default service provider.
            </summary>
            <param name="providerURI">the provider URI.  If null provided it assumes "default".</param>
            <param name="configuration">is the configuration for the service</param>
            <returns>EPServiceProvider for the given provider URI.</returns>
            <throws>ConfigurationException to indicate a configuration problem</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPServiceProviderManager.PurgeProvider(System.String)">
            <summary>
            Clears references to the provider.
            </summary>
            <param name="providerURI"></param>
        </member>
        <member name="M:com.espertech.esper.client.EPServiceProviderManager.PurgeDefaultProvider">
            <summary>
            Clears references to the default provider.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPServiceProviderManager.PurgeAllProviders">
            <summary>
            Purges all providers.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.EPServiceProviderManager.ProviderURIs">
            <summary>
            Returns a collection of known provider URIs.
            <para/>
            Returns a the value "default" for the default provider.
            <para/>
            Returns URIs for all engine instances including destroyed instances.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.EPStatementStateListener">
            <summary>
            Interface for receiving callback events pertaining to statement creation and
            statement state transitions.
            <para/>
            Implementations must not block the operation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPStatementStateListener.OnStatementCreate(com.espertech.esper.client.EPServiceProvider,com.espertech.esper.client.EPStatement)">
            <summary>
            Called to indicate that a new statement has been created in stopped state.
            <para/>
            The #onStatementStateChange method is also invoked upon statement start.
            </summary>
            <param name="serviceProvider">the service provider instance under which the statement has been created</param>
            <param name="statement">the new statement</param>
        </member>
        <member name="M:com.espertech.esper.client.EPStatementStateListener.OnStatementStateChange(com.espertech.esper.client.EPServiceProvider,com.espertech.esper.client.EPStatement)">
            <summary>
            Called to indicate that a statement has changed state.
            </summary>
            <param name="serviceProvider">the service provider instance under which the statement has been created</param>
            <param name="statement">the statement that changed state</param>
        </member>
        <member name="M:com.espertech.esper.client.StatementStateEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.StatementStateEventArgs"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.StatementStateEventArgs.#ctor(com.espertech.esper.client.EPServiceProvider,com.espertech.esper.client.EPStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.StatementStateEventArgs"/> class.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="statement">The statement.</param>
        </member>
        <member name="T:com.espertech.esper.client.EPStatementSyntaxException">
            <summary>
            This exception is thrown to indicate a problem in statement creation.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.EPStatementException">
            <summary>
            This exception is thrown to indicate a problem in statement creation, such as syntax error or type
            checking problem etc.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPStatementException.#ctor(System.String,System.String)">
            <summary> Ctor.</summary>
            <param name="message">error message
            </param>
            <param name="expression">expression text
            </param>
        </member>
        <member name="M:com.espertech.esper.client.EPStatementException.#ctor(System.String,System.Exception,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="message">error message</param>
            <param name="cause">The inner cause.</param>
            <param name="expression">expression text</param>
        </member>
        <member name="M:com.espertech.esper.client.EPStatementException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Ctor.
            </summary>
            <param name="message">error message</param>
            <param name="expression">expression text</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:com.espertech.esper.client.EPStatementException.Expression">
            <summary>
            Gets or sets the expression text for statement.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="P:com.espertech.esper.client.EPStatementException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value></value>
            <returns>The error message that explains the reason for the exception, or an empty string("").</returns>
        </member>
        <member name="M:com.espertech.esper.client.EPStatementSyntaxException.#ctor(System.String,System.String)">
            <summary>Ctor. </summary>
            <param name="message">error message</param>
            <param name="expression">expression text</param>
        </member>
        <member name="T:com.espertech.esper.client.EPSubscriberException">
            <summary>
            This exception is thrown to indicate that a subscriber registration failed
            such as when the subscribe does not expose an acceptable method to receive
            statement results.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPSubscriberException.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="message">error message</param>
        </member>
        <member name="T:com.espertech.esper.client.EventBean">
            <summary>
            Interface for event representation. All events have an <seealso cref="P:com.espertech.esper.client.EventBean.EventType"/>. Events also usually have one or more event properties. This interface allows the querying of event type, event property values and the underlying event object.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EventBean.Get(System.String)">
            <summary>
            Returns the value of an event property for the given property name or property expression. <para/> Returns null if the property value is null. Throws an exception if the expression is not valid against the event type. <para/> The method takes a property name or property expression as a parameter. Property expressions may include indexed properties via the syntax "name[index]", mapped properties via the syntax "name('key')", nested properties via the syntax "outer.inner" or combinations thereof.
            </summary>
            <param name="propertyExpression">name or expression of the property whose value is to be retrieved</param>
            <returns>
            the value of a property with the specified name.
            </returns>
            <throws>PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed</throws>
        </member>
        <member name="M:com.espertech.esper.client.EventBean.GetFragment(System.String)">
            <summary>
            Returns event beans or array of event bean for a property name or property expression.
            <para/>
            For use with properties whose value is itself an event or whose value can be represented as
            an event by the underlying event representation.
            <para/>
            The <seealso cref="P:com.espertech.esper.client.EventBean.EventType"/> of the event bean Instance(s) returned by this method can be
            determined by <seealso cref="!:EventType.GetFragmentType"/>
            	. Use 
            <seealso cref="T:com.espertech.esper.client.EventPropertyDescriptor"/> to obtain a list of properties that return fragments from an event type.
            <para/> 
            Returns null if the property value is null or the property value cannot be represented as a 
            fragment by the underlying representation.
            <para/> 
            The method takes a property name or property expression as a parameter. Property expressions may 
            include indexed properties via the syntax "name[index]", mapped properties via the syntax "name('key')", 
            nested properties via the syntax "outer.inner" or combinations thereof.
            </summary>
            <param name="propertyExpression">name or expression of the property whose value is to be presented as an EventBean or array of EventBean</param>
            <returns>
            the value of a property as an EventBean or array of EventBean
            </returns>
            <throws>PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed</throws>
        </member>
        <member name="P:com.espertech.esper.client.EventBean.EventType">
            <summary>
            Return the <seealso cref="P:com.espertech.esper.client.EventBean.EventType"/> instance that describes the set of properties available for this event.
            </summary>
            <value>event type</value>
        </member>
        <member name="P:com.espertech.esper.client.EventBean.Item(System.String)">
            <summary>
            Returns the value of an event property for the given property name or property expression.
            <para/> Returns null if the property value is null. Throws an exception if the expression is not valid against the event type.
            <para/> The method takes a property name or property expression as a parameter. Property expressions may include indexed properties
            via the syntax "name[index]", mapped properties via the syntax "name('key')", nested properties via the syntax "outer.inner" or
            combinations thereof.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.EventBean.Underlying">
            <summary>
            Get the underlying data object to this event wrapper.
            </summary>
            <value>
            	underlying data object, usually either a Map or a bean instance.
            </value>
        </member>
        <member name="T:com.espertech.esper.client.EventBeanFactory">
            <summary>
            Factory for <see cref="T:com.espertech.esper.client.EventBean"/> instances given an underlying event object. 
            <para/>
            Not transferable between engine instances.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EventBeanFactory.Wrap(System.Object)">
            <summary>Wraps the underlying event object. </summary>
            <param name="underlying">event to wrap</param>
            <returns>event bean</returns>
        </member>
        <member name="M:com.espertech.esper.client.EventExtensions.ToUpdateEventArgs(System.Xml.Linq.XElement,System.Func{System.Xml.Linq.XElement,com.espertech.esper.client.EventBean})">
            <summary>
            Converts the element to update event args.
            </summary>
            <param name="eventElement">The event element.</param>
            <param name="eventBeanFactory">The event bean factory.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.EventExtensions.ToXElement(com.espertech.esper.client.EventBean)">
            <summary>
            Converts the event bean into a contract event.
            </summary>
            <param name="eventBean">The event bean.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.EventExtensions.ToXElement(com.espertech.esper.client.EventBean[],System.String)">
            <summary>
            Converts the array of even beans into an XElement.
            </summary>
            <param name="eventBeans">The event beans.</param>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.EventExtensions.ToXElement(com.espertech.esper.client.UpdateEventArgs,System.String)">
            <summary>
            Converts the update events args into an XElement.
            </summary>
            <param name="updateEventArgs">The <see cref="T:com.espertech.esper.client.UpdateEventArgs"/> instance containing the event data.</param>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.EventExtensions.ToXElement(com.espertech.esper.client.UpdateEventArgs)">
            <summary>
            Converts the update events args into an XElement.
            </summary>
            <param name="updateEventArgs">The <see cref="T:com.espertech.esper.client.UpdateEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.client.EventPropertyDescriptor">
            <summary>
            Descriptor for event property names, property types and access metadata.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EventPropertyDescriptor.#ctor(System.String,System.Type,System.Type,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="propertyName">name of the property</param>
            <param name="propertyType">the property type</param>
            <param name="propertyComponentType">is the component type if the property is an indexed property</param>
            <param name="requiresIndex">true if the access to property value access requires an integer index value</param>
            <param name="requiresMapkey">true if the access to property value access requires a string map key</param>
            <param name="indexed">true if the property is an indexed property, i.e. type is an array or the property value access requires an integer index value</param>
            <param name="mapped">true if the property is a mapped property, i.e. type is an Map or the property value access requires an string map key</param>
            <param name="fragment">true if the property value can be represented as an EventBean and property type can be represented as an EventType</param>
        </member>
        <member name="M:com.espertech.esper.client.EventPropertyDescriptor.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.EventPropertyDescriptor.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:com.espertech.esper.client.EventPropertyDescriptor.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.EventPropertyDescriptor.PropertyName">
            <summary>
            Returns the property name.
            </summary>
            <returns>
            property name
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.EventPropertyDescriptor.PropertyType">
            <summary>
            Returns the property underlying type.
            <para/>
            Note that a null values is possible as null values can be selected.
            </summary>
            <returns>
            underlying property type
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.EventPropertyDescriptor.PropertyComponentType">
            <summary>
            Gets property component type.
            </summary>
            <value>The type of the property component.</value>
        </member>
        <member name="P:com.espertech.esper.client.EventPropertyDescriptor.RequiresIndex">
            <summary>
            Returns true to indicate that the property is an indexed property and requires
            an index to access elements of the indexed property. Returns false to indicate
            that the property is not an indexed property or does not require an index for
            property value access.
            <para/>
            For object events, a getter-method that takes a single integer
            parameter is considered an indexed property that requires an index for access.
            <para/>
            A getter-method that returns an array is considered an index property but does
            not require an index for access.
            </summary>
            <returns>
            true to indicate that property value access requires an index value
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.EventPropertyDescriptor.RequiresMapKey">
            <summary>
            Returns true to indicate that the property is a mapped property and requires a
            map key to access elements of the mapped property. Returns false to indicate that
            the property is not a mapped property or does not require a map key for property
            value access.
            <para/>
            For object events, a getter-method that takes a single string parameter
            is considered a mapped property that requires a map key for access.
            <para/>
            A getter-method that returns a Map is considered a mapped property but does not
            require a map key for access.
            </summary>
            <returns>
            true to indicate that property value access requires an index value
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.EventPropertyDescriptor.IsIndexed">
            <summary>
            Returns true for indexed properties, returns false for all other property
            styles.
            <para/>
            An indexed property is a property returning an array value or a getter-method
            taking a single integer parameter.
            </summary>
            <returns>
            indicator whether this property is an index property
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.EventPropertyDescriptor.IsMapped">
            <summary>
            Returns true for mapped properties, returns false for all other property styles.
            <para/>
            A mapped property is a property returning a Map value or a getter-method taking
            a single string (key) parameter.
            </summary>
            <returns>
            indicator whether this property is a mapped property
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.EventPropertyDescriptor.IsFragment">
            <summary>
            Returns true to indicate that the property value can itself be represented as an
            <seealso cref="T:com.espertech.esper.client.EventBean"/> and that the property type can be represented as an
            <seealso cref="T:com.espertech.esper.client.EventType"/>.
            </summary>
            <returns>
            indicator whether property is itself a complex data structure representable as a
            nested <seealso cref="T:com.espertech.esper.client.EventType"/>
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.EventPropertyGetter">
            <summary>
            Get property values from an event instance for a given event property. Instances that implement this interface
            are usually bound to a particular <seealso cref="T:com.espertech.esper.client.EventType"/> and cannot be used to
            access <seealso cref="T:com.espertech.esper.client.EventBean"/> instances of a different type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EventPropertyGetter.Get(com.espertech.esper.client.EventBean)">
            <summary>
            Return the value for the property in the event object specified when the instance was obtained. Useful for 
            fast access to event properties. Throws a PropertyAccessException if the getter instance doesn't match the 
            EventType it was obtained from, and to indicate other property access problems.
            </summary>
            <param name="eventBean">is the event to get the value of a property from</param>
            <returns>value of property in event</returns>
            <throws>PropertyAccessException to indicate that property access failed</throws>
        </member>
        <member name="M:com.espertech.esper.client.EventPropertyGetter.IsExistsProperty(com.espertech.esper.client.EventBean)">
            <summary>
            Returns true if the property exists, or false if the type does not have such a property.
            <para/>
            Useful for dynamic properties of the syntax "property?" and the dynamic nested/indexed/mapped versions.
            Dynamic nested properties follow the syntax "property?.nested" which is equivalent to "property?.nested?". 
            If any of the properties in the path of a dynamic nested property return null, the dynamic nested property 
            does not exists and the method returns false. <para/> For non-dynamic properties, this method always returns
            true since a getter would not be available unless
            </summary>
            <param name="eventBean">is the event to check if the dynamic property exists</param>
            <returns>
            indictor whether the property exists, always true for non-dynamic (default) properties
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.EventPropertyGetter.GetFragment(com.espertech.esper.client.EventBean)">
            <summary>
            Returns <seealso cref="T:com.espertech.esper.client.EventBean"/> or array of <seealso cref="T:com.espertech.esper.client.EventBean"/> for a property name or
            property expression. <para/> For use with properties whose value is itself an event or whose value can
            be represented as an event by the underlying event representation. <para/> The <seealso cref="T:com.espertech.esper.client.EventType"/> of
            the <seealso cref="T:com.espertech.esper.client.EventBean"/> Instance(s) returned by this method can be determined by
            <seealso cref="M:com.espertech.esper.client.EventType.GetFragmentType(System.String)"/>.  Use <seealso cref="T:com.espertech.esper.client.EventPropertyDescriptor"/> to obtain a list of
            properties that return fragments from an event type. <para/> Returns null if the property value is null or the
            property value cannot be represented as a fragment by the underlying representation.
            </summary>
            <param name="eventBean">is the event to get the fragment value of a property</param>
            <returns>
            the value of a property as an EventBean or array of EventBean
            </returns>
            <throws>PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed</throws>
        </member>
        <member name="M:com.espertech.esper.client.ProxyEventPropertyGetter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.ProxyEventPropertyGetter"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ProxyEventPropertyGetter.#ctor(System.Func{com.espertech.esper.client.EventBean,System.Object},System.Func{com.espertech.esper.client.EventBean,System.Object},System.Func{com.espertech.esper.client.EventBean,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.ProxyEventPropertyGetter"/> class.
            </summary>
            <param name="pMethodGet">The _p method get.</param>
            <param name="pMethodGetFragment">The _p method get fragment.</param>
            <param name="pMethodIsExistsProperty">The _p method is exists property.</param>
        </member>
        <member name="M:com.espertech.esper.client.ProxyEventPropertyGetter.Get(com.espertech.esper.client.EventBean)">
            <summary>
            Return the value for the property in the event object specified when the
            instance was obtained. Useful for fast access to event properties. Throws a
            PropertyAccessException if the getter instance doesn't match the EventType it was obtained
            from, and to indicate other property access problems.
            </summary>
            <param name="eventBean">is the event to get the value of a property from</param>
            <returns>
            value of property in event
            </returns>
            <throws>PropertyAccessException to indicate that property access failed</throws>
        </member>
        <member name="M:com.espertech.esper.client.ProxyEventPropertyGetter.IsExistsProperty(com.espertech.esper.client.EventBean)">
            <summary>
            Returns true if the property exists, or false if the type does not have such a
            property.
            <para/>
            Useful for dynamic properties of the syntax "property?" and the dynamic
            nested/indexed/mapped versions. Dynamic nested properties follow the syntax
            "property?.nested" which is equivalent to "property?.nested?". If any of the properties in
            the path of a dynamic nested property return null, the dynamic nested property does
            not exists and the method returns false.
            <para/>
            For non-dynamic properties, this method always returns true since a getter
            would not be available unless
            </summary>
            <param name="eventBean">is the event to check if the dynamic property exists</param>
            <returns>
            indictor whether the property exists, always true for non-dynamic (default)
            properties
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.ProxyEventPropertyGetter.GetFragment(com.espertech.esper.client.EventBean)">
            <summary>
            Returns <seealso cref="T:com.espertech.esper.client.EventBean"/> or array of <seealso cref="T:com.espertech.esper.client.EventBean"/> for
            a property name or property expression.
            <para/>
            For use with properties whose value is itself an event or whose value can be
            represented as an event by the underlying event representation.
            <para/>
            The <seealso cref="T:com.espertech.esper.client.EventType"/> of the <seealso cref="T:com.espertech.esper.client.EventBean"/> Instance(s)
            returned by this method can be determined by<seealso cref="M:com.espertech.esper.client.EventType.GetFragmentType(System.String)"/>.
            Use <seealso cref="T:com.espertech.esper.client.EventPropertyDescriptor"/> to obtain a list of
            properties that return fragments from an event type.
            <para/>
            Returns null if the property value is null or the property value cannot be
            represented as a fragment by the underlying representation.
            </summary>
            <param name="eventBean">is the event to get the fragment value of a property</param>
            <returns>
            the value of a property as an EventBean or array of EventBean
            </returns>
            <throws>PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed</throws>
        </member>
        <member name="T:com.espertech.esper.client.EventPropertyGetterIndexed">
            <summary>
            Get property values from an event instance for a given indexed event property by passing the array index.
            Instances that implement this interface are usually bound to a particular 
            <see cref="T:com.espertech.esper.client.EventType"/> and cannot be used to access 
            <see cref="T:com.espertech.esper.client.EventBean"/> instances of a different type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EventPropertyGetterIndexed.Get(com.espertech.esper.client.EventBean,System.Int32)">
            <summary>
            Return the value for the property in the event object specified when the instance was obtained. 
            Useful for fast access to event properties. Throws a PropertyAccessException if the getter instance 
            doesn't match the EventType it was obtained from, and to indicate other property access problems.
            </summary>
            <param name="eventBean">is the event to get the value of a property from</param>
            <param name="index">the index value</param>
            <returns>value of indexed property in event</returns>
            <throws>PropertyAccessException to indicate that property access failed</throws>
        </member>
        <member name="M:com.espertech.esper.client.ProxyEventPropertyGetterIndexed.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.ProxyEventPropertyGetterIndexed"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ProxyEventPropertyGetterIndexed.#ctor(System.Func{com.espertech.esper.client.EventBean,System.Int32,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.ProxyEventPropertyGetterIndexed"/> class.
            </summary>
            <param name="procGet">The method get delegate.</param>
        </member>
        <member name="M:com.espertech.esper.client.ProxyEventPropertyGetterIndexed.Get(com.espertech.esper.client.EventBean,System.Int32)">
            <summary>
            Return the value for the property in the event object specified when the instance was obtained.
            Useful for fast access to event properties. Throws a PropertyAccessException if the getter instance
            doesn't match the EventType it was obtained from, and to indicate other property access problems.
            </summary>
            <param name="eventBean">is the event to get the value of a property from</param>
            <param name="index">the index value</param>
            <returns>value of indexed property in event</returns>
            <throws>PropertyAccessException to indicate that property access failed</throws>
        </member>
        <member name="T:com.espertech.esper.client.EventPropertyGetterMapped">
            <summary>
            Get property values from an event instance for a given mapped event property by passing 
            the map string key. Instances that implement this interface are usually bound to a particular 
            <see cref="T:com.espertech.esper.client.EventType"/> and cannot be used to access <see cref="T:com.espertech.esper.client.EventBean"/>
            instances of a different type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EventPropertyGetterMapped.Get(com.espertech.esper.client.EventBean,System.String)">
            <summary>
            Return the value for the property in the event object specified when the instance was obtained.
            Useful for fast access to event properties. Throws a PropertyAccessException if the getter instance
            doesn't match the EventType it was obtained from, and to indicate other property access problems.
            </summary>
            <param name="eventBean">is the event to get the value of a property from</param>
            <param name="mapKey">the map key value</param>
            <returns>value of property in event</returns>
            <throws>com.espertech.esper.client.PropertyAccessException to indicate that property access failed</throws>
        </member>
        <member name="M:com.espertech.esper.client.ProxyEventPropertyGetterMapped.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.ProxyEventPropertyGetterMapped"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ProxyEventPropertyGetterMapped.#ctor(System.Func{com.espertech.esper.client.EventBean,System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.ProxyEventPropertyGetter"/> class.
            </summary>
            <param name="procGet">The method get delegate.</param>
        </member>
        <member name="M:com.espertech.esper.client.ProxyEventPropertyGetterMapped.Get(com.espertech.esper.client.EventBean,System.String)">
            <summary>
            Return the value for the property in the event object specified when the instance was obtained.
            Useful for fast access to event properties. Throws a PropertyAccessException if the getter instance
            doesn't match the EventType it was obtained from, and to indicate other property access problems.
            </summary>
            <param name="eventBean">is the event to get the value of a property from</param>
            <param name="mapKey">the map key value</param>
            <returns>value of property in event</returns>
            <throws>com.espertech.esper.client.PropertyAccessException to indicate that property access failed</throws>
        </member>
        <member name="T:com.espertech.esper.client.EventSender">
            <summary>
            Returns a facility to process event objects that are of a known type.
            <para/>
            Obtained via the method <seealso cref="M:com.espertech.esper.client.EPRuntime.GetEventSender(System.String)"/> the sender is 
            specific to a given event type and may not process event objects of any other event 
            type; See the method documentatiom for more details.
            <para/> 
            Obtained via the method <seealso cref="M:com.espertech.esper.client.EPRuntime.GetEventSender(System.Uri[])"/> the sender cooperates 
            with plug-in event representations to reflect upon the event object to determine an 
            appropriate event type to process the event.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EventSender.SendEvent(System.Object)">
            <summary>
            Processes the event object.
            <para />
            Use the route method for sending events into the runtime from within event code. 
            to avoid the possibility of a stack overflow due to nested calls to SendEvent.
            </summary>
            <param name="theEvent">to process</param>
            <throws>EPException if a runtime error occured.</throws>
        </member>
        <member name="M:com.espertech.esper.client.EventSender.Route(System.Object)">
            <summary>
            Route the event object back to the event stream processing runtime for internal 
            dispatching, to avoid the possibility of a stack overflow due to nested calls to 
            SendEvent. The route event is processed just like it was sent to the runtime,
            that is any active expressions seeking that event receive it. The routed event 
            has priority over other events sent to the runtime. In a single-threaded application 
            the routed event is processed before the next event is sent to the runtime through 
            the EPRuntime.SendEvent method.
            </summary>
            <param name="theEvent">to process</param>
            <throws>EPException is thrown when the processing of the event lead to an error</throws>
        </member>
        <member name="T:com.espertech.esper.client.EventSenderDelegate">
            <summary>
            Returns a facility to process event objects that are of a known type.
            Obtained via the method <see cref="M:com.espertech.esper.client.EPRuntime.GetEventSender(System.String)"/> the sender 
            is specific to a given event type and may not process event objects of any
            other event type; See the method documentatiom for more details.
            <para/>
            Obtained via the method <see cref="M:com.espertech.esper.client.EPRuntime.GetEventSender(System.Uri[])"/> the
            sender cooperates with plug-in event representations to reflect upon the event
            object to determine an appropriate event type to process the event. 
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.hook.AggregationFunctionFactory">
            <summary>
            Interface to implement for factories of aggregation functions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.hook.AggregationFunctionFactory.SetFunctionName(System.String)">
            <summary>
            Sets the EPL function name assigned to the factory.
            </summary>
            <param name="functionName">Name of the function.</param>
        </member>
        <member name="M:com.espertech.esper.client.hook.AggregationFunctionFactory.Validate(com.espertech.esper.epl.agg.service.AggregationValidationContext)">
            <summary>Implemented by plug-in aggregation functions to allow such functions to validate the type of values passed to the function at statement compile time and to generally interrogate parameter expressions. </summary>
            <param name="validationContext">expression information</param>
        </member>
        <member name="M:com.espertech.esper.client.hook.AggregationFunctionFactory.NewAggregator">
            <summary>Make a new, initalized aggregation state. </summary>
            <returns>initialized aggregator</returns>
        </member>
        <member name="P:com.espertech.esper.client.hook.AggregationFunctionFactory.ValueType">
            <summary>Returns the type of the current value. </summary>
            <value>type of value returned by the aggregation methods</value>
        </member>
        <member name="T:com.espertech.esper.client.hook.BaseCondition">
            <summary>
            Marker interface for conditions reported.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.hook.ConditionHandler">
            <summary>
            Interface for a handler registered with an engine instance to receive reported 
            engine conditions.
            <para/>
            Handle the engine condition as contained in the context object passed.
            </summary>
            <param name="context">the condition information</param>
        </member>
        <member name="T:com.espertech.esper.client.hook.ConditionHandlerContext">
            <summary>
            Context provided to <see cref="T:com.espertech.esper.client.hook.ConditionHandler"/> implementations providing 
            engine-condition-contextual information. 
            <para/>
            Statement information pertains to the statement currently being processed when 
            the condition occured.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.hook.ConditionHandlerContext.#ctor(System.String,System.String,System.String,com.espertech.esper.client.hook.BaseCondition)">
            <summary>Ctor. </summary>
            <param name="engineURI">engine URI</param>
            <param name="statementName">statement name</param>
            <param name="epl">statement EPL expression text</param>
            <param name="engineCondition">condition reported</param>
        </member>
        <member name="P:com.espertech.esper.client.hook.ConditionHandlerContext.EngineURI">
            <summary>Returns the engine URI. </summary>
            <value>engine URI</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.ConditionHandlerContext.StatementName">
            <summary>Returns the statement name, if provided, or the statement id assigned to the statement if no name was provided. </summary>
            <value>statement name or id</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.ConditionHandlerContext.Epl">
            <summary>Returns the expression text of the statement. </summary>
            <value>statement.</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.ConditionHandlerContext.EngineCondition">
            <summary>Returns the condition reported. </summary>
            <value>condition reported</value>
        </member>
        <member name="T:com.espertech.esper.client.hook.ConditionHandlerFactory">
            <summary>
            Factory for engine condition handler Instance(s).
            <para/>
            Receives CEP engine contextual information and should return an implementation 
            of the <see cref="T:com.espertech.esper.client.hook.ConditionHandler"/> interface.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.hook.ConditionHandlerFactory.GetHandler(com.espertech.esper.client.hook.ConditionHandlerFactoryContext)">
            <summary>
            Returns an exception handler instances, or null if the factory decided not 
            to contribute an exception handler.
            </summary>
            <param name="context">contains the engine URI</param>
            <returns>exception handler</returns>
        </member>
        <member name="T:com.espertech.esper.client.hook.ConditionHandlerFactoryContext">
            <summary>
            Context provided to <see cref="T:com.espertech.esper.client.hook.ConditionHandlerFactory"/> implementations 
            providing engine contextual information. </summary>
        </member>
        <member name="M:com.espertech.esper.client.hook.ConditionHandlerFactoryContext.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="engineURI">engine URI</param>
        </member>
        <member name="P:com.espertech.esper.client.hook.ConditionHandlerFactoryContext.EngineURI">
            <summary>Returns the engine URI. </summary>
            <value>engine URI</value>
        </member>
        <member name="T:com.espertech.esper.client.hook.ConditionPatternEngineSubexpressionMax">
            <summary>
            Indicates that on the engine level the followed-by pattern operator, regardless 
            whether parameterized with a max number of sub-expressions or not, has reached 
            the configured engine-wide limit at runtime.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.hook.ConditionPatternEngineSubexpressionMax.#ctor(System.Int64,System.Collections.Generic.IDictionary{System.String,System.Nullable{System.Int64}})">
            <summary>Ctor. </summary>
            <param name="max">limit reached</param>
            <param name="counts">the number of subexpression counts per statement</param>
        </member>
        <member name="P:com.espertech.esper.client.hook.ConditionPatternEngineSubexpressionMax.Max">
            <summary>Returns the limit reached. </summary>
            <value>limit</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.ConditionPatternEngineSubexpressionMax.Counts">
            <summary>Returns the per-statement count. </summary>
            <value>count</value>
        </member>
        <member name="T:com.espertech.esper.client.hook.ConditionPatternSubexpressionMax">
            <summary>
            Indicates that the followed-by pattern operator, when parameterized with a 
            max number of sub-expressions, has reached that limit at runtime. 
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.hook.ConditionPatternSubexpressionMax.#ctor(System.Int32)">
            <summary>Ctor. </summary>
            <param name="max">limit reached</param>
        </member>
        <member name="P:com.espertech.esper.client.hook.ConditionPatternSubexpressionMax.Max">
            <summary>Returns the limit reached. </summary>
            <value>limit</value>
        </member>
        <member name="T:com.espertech.esper.client.hook.EPLScriptContext">
            <summary>Available when using JSR-223 scripts or MVEL, for access of script attributes. </summary>
        </member>
        <member name="M:com.espertech.esper.client.hook.EPLScriptContext.SetScriptAttribute(System.String,System.Object)">
            <summary>
            Set a script attributed.
            </summary>
            <param name="attribute">name to use</param>
            <param name="value">value to set</param>
        </member>
        <member name="M:com.espertech.esper.client.hook.EPLScriptContext.GetScriptAttribute(System.String)">
            <summary>
            Return a script attribute value.
            </summary>
            <param name="attribute">name to retrieve value for</param>
            <returns>attribute value or null if undefined</returns>
        </member>
        <member name="T:com.espertech.esper.client.hook.ExceptionHandler">
            <summary>
            Interface for an exception handler.
            <para/>
            When the engine encounters an unchecked exception processing a continous-query
            statement it allows any exception handler that is registered with the engine to
            handle the exception, in the order any handlers are registered.
            <para/>
            On-demand queries as well as any exceptions thrown by static method invocations
            or event method invocations or the API other then the sendEvent method are not
            provided to an exception handler.
            <para/>
            An application may throw a runtime exception in the @handle method to cancel further 
            processing of an event against
            statements.
            <para/>
            Handle the exception as contained in the context object passed.
            </summary>
            <param name="context">the exception information</param>
        </member>
        <member name="T:com.espertech.esper.client.hook.ExceptionHandlerContext">
            <summary>
            Context provided to <see cref="T:com.espertech.esper.client.hook.ExceptionHandler"/> implementations providing 
            exception-contextual information as well as the exception itself.
            <para/>
            Statement information pertains to the statement currently being processed when 
            the unchecked exception occured.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.hook.ExceptionHandlerContext.#ctor(System.String,System.Exception,System.String,System.String)">
            <summary>Ctor. </summary>
            <param name="engineURI">engine URI</param>
            <param name="exception">exception</param>
            <param name="statementName">statement name</param>
            <param name="epl">statement EPL expression text</param>
        </member>
        <member name="P:com.espertech.esper.client.hook.ExceptionHandlerContext.EngineURI">
            <summary>Returns the engine URI. </summary>
            <value>engine URI</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.ExceptionHandlerContext.Exception">
            <summary>Returns the exception. </summary>
            <value>exception</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.ExceptionHandlerContext.StatementName">
            <summary>Returns the statement name, if provided, or the statement id assigned to the statement if no name was provided. </summary>
            <value>statement name or id</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.ExceptionHandlerContext.Epl">
            <summary>Returns the expression text of the statement. </summary>
            <value>statement.</value>
        </member>
        <member name="T:com.espertech.esper.client.hook.ExceptionHandlerFactory">
            <summary>
            Factory for exception handler Instance(s).
            <para/>
            Receives CEP engine contextual information and should return an implementation
            of the <see cref="T:com.espertech.esper.client.hook.ExceptionHandler"/> interface.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.hook.ExceptionHandlerFactory.GetHandler(com.espertech.esper.client.hook.ExceptionHandlerFactoryContext)">
            <summary>Returns an exception handler instances, or null if the factory decided not to contribute an exception handler. </summary>
            <param name="context">contains the engine URI</param>
            <returns>exception handler</returns>
        </member>
        <member name="T:com.espertech.esper.client.hook.ExceptionHandlerFactoryContext">
            <summary>
            Context provided to <see cref="T:com.espertech.esper.client.hook.ExceptionHandlerFactory"/> implementations 
            providing engine contextual information.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.hook.ExceptionHandlerFactoryContext.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="engineURI">engine URI</param>
        </member>
        <member name="P:com.espertech.esper.client.hook.ExceptionHandlerFactoryContext.EngineURI">
            <summary>Returns the engine URI. </summary>
            <value>engine URI</value>
        </member>
        <member name="T:com.espertech.esper.client.hook.SQLColumnTypeContext">
            <summary>
            For use with <seealso cref="T:com.espertech.esper.client.hook.SQLColumnTypeConversion"/>, context of column conversion.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.hook.SQLColumnTypeContext.#ctor(System.String,System.String,System.String,System.Type,System.String,System.Int32)">
            <summary>Ctor. </summary>
            <param name="db">database</param>
            <param name="sql">sql</param>
            <param name="columnName">column name</param>
            <param name="columnClassType">column type</param>
            <param name="columnSqlType">sql type</param>
            <param name="columnNumber">column number starting at 1</param>
        </member>
        <member name="P:com.espertech.esper.client.hook.SQLColumnTypeContext.Db">
            <summary>Get database name. </summary>
            <returns>db name</returns>
        </member>
        <member name="P:com.espertech.esper.client.hook.SQLColumnTypeContext.Sql">
            <summary>Returns sql. </summary>
            <returns>sql</returns>
        </member>
        <member name="P:com.espertech.esper.client.hook.SQLColumnTypeContext.ColumnName">
            <summary>Returns column name. </summary>
            <returns>name</returns>
        </member>
        <member name="P:com.espertech.esper.client.hook.SQLColumnTypeContext.ColumnClassType">
            <summary>Returns column type. </summary>
            <returns>column type</returns>
        </member>
        <member name="P:com.espertech.esper.client.hook.SQLColumnTypeContext.ColumnSqlType">
            <summary>Returns column sql type. </summary>
            <returns>sql type</returns>
        </member>
        <member name="P:com.espertech.esper.client.hook.SQLColumnTypeContext.ColumnNumber">
            <summary>Returns column number starting at 1. </summary>
            <returns>column number</returns>
        </member>
        <member name="T:com.espertech.esper.client.hook.SQLColumnTypeConversion">
            <summary>
            Implement this interface when providing a callback for SQL input parameter and column result processing for a 
            statement, converting an input parameter or converting an output column value into any other value.
            <para/>
            An instance of the class implementating this interface exists typically per statement that the callback has
            been registered for by means of EPL statement annotation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.hook.SQLColumnTypeConversion.GetColumnType(com.espertech.esper.client.hook.SQLColumnTypeContext)">
            <summary>
            Return the new type of the column. To leave the type unchanged, return 
            <seealso cref="P:com.espertech.esper.client.hook.SQLColumnTypeContext.ColumnClassType"/> or null.
            </summary>
            <param name="context">contains the database name, query fired, column name, column type and column number</param>
            <returns>type of column after conversion</returns>
        </member>
        <member name="M:com.espertech.esper.client.hook.SQLColumnTypeConversion.GetColumnValue(com.espertech.esper.client.hook.SQLColumnValueContext)">
            <summary>
            Return the new value of the column. To leave the value unchanged, 
            return <seealso cref="P:com.espertech.esper.client.hook.SQLColumnValueContext.ColumnValue"/>.
            </summary>
            <param name="context">contains the column name, column value and column number</param>
            <returns>value of column after conversion</returns>
        </member>
        <member name="M:com.espertech.esper.client.hook.SQLColumnTypeConversion.GetParameterValue(com.espertech.esper.client.hook.SQLInputParameterContext)">
            <summary>
            Return the new value of the input parameter. To leave the value unchanged, 
            return <seealso cref="P:com.espertech.esper.client.hook.SQLInputParameterContext.ParameterValue"/>.
            </summary>
            <param name="context">contains the parameter name and number</param>
            <returns>value of parameter after conversion</returns>
        </member>
        <member name="T:com.espertech.esper.client.hook.SQLColumnValueContext">
            <summary>
            For use with <see cref="T:com.espertech.esper.client.hook.SQLColumnTypeConversion"/>, context of column conversion. 
            Contains the columns information as well as the column result value after reading 
            the value and the result set itself for direct access, if required.
            <para/>
            Applications should not retain instances of this class as the engine may change 
            and reuse values here.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.hook.SQLColumnValueContext.ColumnName">
            <summary>
            Returns column name.
            </summary>
            <value>The name of the column.</value>
            <returns>name</returns>
        </member>
        <member name="P:com.espertech.esper.client.hook.SQLColumnValueContext.ColumnNumber">
            <summary>
            Returns column number.
            </summary>
            <value>The column number.</value>
            <returns>column number</returns>
        </member>
        <member name="P:com.espertech.esper.client.hook.SQLColumnValueContext.ColumnValue">
            <summary>
            Returns column value
            </summary>
            <value>The column value.</value>
            <returns>value</returns>
        </member>
        <member name="P:com.espertech.esper.client.hook.SQLColumnValueContext.ResultSet">
            <summary>
            Returns the result set.
            </summary>
            <value>result set</value>
        </member>
        <member name="T:com.espertech.esper.client.hook.SQLInputParameterContext">
            <summary>
            For use with <seealso cref="T:com.espertech.esper.client.hook.SQLColumnTypeConversion"/>, context of parameter conversion.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.hook.SQLInputParameterContext.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="P:com.espertech.esper.client.hook.SQLInputParameterContext.ParameterNumber">
            <summary>Returns the parameter number. </summary>
            <returns>number of parameter</returns>
        </member>
        <member name="P:com.espertech.esper.client.hook.SQLInputParameterContext.ParameterValue">
            <summary>Returns the parameter value. </summary>
            <returns>parameter value</returns>
        </member>
        <member name="T:com.espertech.esper.client.hook.SQLOutputRowConversion">
            <summary>
            Implement this interface when providing a callback for SQL row result processing for a statement,
            converting each row's values into a POCO.
            <para/>
            Rows can also be skipped via this callback, determined by the implementation returning a null value 
            for a row.
            <para/>
            An instance of the class implementating this interface exists typically per statement that the 
            callback has been registered for by means of EPL statement annotation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.hook.SQLOutputRowConversion.GetOutputRowType(com.espertech.esper.client.hook.SQLOutputRowTypeContext)">
            <summary>Return the POCO class that represents a row of the SQL query result. </summary>
            <param name="context">receives the context information such as database name, query fired and types returned by query</param>
            <returns>class that represents a result row</returns>
        </member>
        <member name="M:com.espertech.esper.client.hook.SQLOutputRowConversion.GetOutputRow(com.espertech.esper.client.hook.SQLOutputRowValueContext)">
            <summary>Returns the POCO object that represents a row of the SQL query result, or null to indicate to skip this row. </summary>
            <param name="context">receives row result information</param>
            <returns>POCO or null value to skip the row</returns>
        </member>
        <member name="T:com.espertech.esper.client.hook.SQLOutputRowTypeContext">
            <summary>
            For use with <seealso cref="T:com.espertech.esper.client.hook.SQLOutputRowConversion"/>, context of row conversion.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.hook.SQLOutputRowTypeContext.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Ctor. </summary>
            <param name="db">database</param>
            <param name="sql">sql</param>
            <param name="fields">columns and their types</param>
        </member>
        <member name="P:com.espertech.esper.client.hook.SQLOutputRowTypeContext.Db">
            <summary>Returns the database name. </summary>
            <returns>database name</returns>
        </member>
        <member name="P:com.espertech.esper.client.hook.SQLOutputRowTypeContext.Sql">
            <summary>Returns the sql. </summary>
            <returns>sql</returns>
        </member>
        <member name="P:com.espertech.esper.client.hook.SQLOutputRowTypeContext.Fields">
            <summary>Returns the column names and types. </summary>
            <returns>columns</returns>
        </member>
        <member name="T:com.espertech.esper.client.hook.SQLOutputRowValueContext">
            <summary>
            For use with <see cref="T:com.espertech.esper.client.hook.SQLOutputRowConversion"/>, context of row conversion. Provides
            row number, column values after reading the row as well as the result set itself for direct
            access.
            <para/>
            Applications should not retain instances of this class as the engine may change and reuse
            values here.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.hook.SQLOutputRowValueContext.RowNum">
            <summary>Return row number, the number of the current output row. </summary>
            <returns>row number</returns>
        </member>
        <member name="P:com.espertech.esper.client.hook.SQLOutputRowValueContext.Values">
            <summary>Returns column values. </summary>
            <returns>values for all columns</returns>
        </member>
        <member name="P:com.espertech.esper.client.hook.SQLOutputRowValueContext.ResultSet">
            <summary>
            Returns the result set.
            </summary>
            <value>result set</value>
        </member>
        <member name="T:com.espertech.esper.client.hook.VirtualDataWindow">
            <summary>
            A virtual data window exposes externally-managed data transparently as a named window without 
            the need to retain any data in memory.
            <para/>
            An instance is associated to each named window that is backed by a virtual data window.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.hook.VirtualDataWindow.GetLookup(com.espertech.esper.client.hook.VirtualDataWindowLookupContext)">
            <summary>
            Returns the lookup strategy for use by an EPL statement to obtain data.
            <para/>
            This method is invoked one or more times at the time an EPL statement is created that performs
            a subquery, join, on-action or fire-and-forget query against the virtual data window.
            <para/>
            The lookup strategy returned is used when the EPL statement for which it was created performs a
            read-operation against the managed data. Multiple lookup strategies for the same EPL statement
            are possible for join statements.
            <para/>
            The context object passed in is derived from an analysis of the where-clause and lists the 
            unique property names of the event type that are index fields, i.e. fields against which the
            lookup occurs.
            <para/>
            The order of hash and btree properties provided by the context matches the order that lookup
            values are provided to the lookup strategy.
            </summary>
            <param name="desc">hash and binary tree (sorted access for ranges) index fields</param>
            <returns>
            lookup strategy, or null to veto the statement
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.hook.VirtualDataWindow.HandleEvent(com.espertech.esper.client.hook.VirtualDataWindowEvent)">
            <summary>
            Handle a management event.
            <p>
            Management events indicate:
            <ul>
            			<li>Create/Start of an index on a virtual data window.</li>
            			<li>Stop/Destroy of an index.</li>
            			<li>Destroy of the virtual data window.</li>
            		</ul>
            	</p>
            </summary>
            <param name="theEvent">The event to handle</param>
        </member>
        <member name="M:com.espertech.esper.client.hook.VirtualDataWindow.Update(com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean[])">
            <summary>
            This method is invoked when events are inserted-into or removed-from the virtual data window. 
            <para/>
            When a statement uses insert-into to insert events into the virtual data window the newData 
            parameter carries the inserted event. 
            <para/> 
            When a statement uses on-delete to delete events from the virtual data window the oldData 
            parameter carries the deleted event. 
            <para/> 
            When a statement uses on-merge to merge events with the virtual data window the events passed 
            depends on the action: 
                For then-delete the oldData carries the removed event, for then-update the newData carries 
                the after-update event and the oldData carries the before-update event, for then-insert the 
                newData carries the inserted event. 
            <para/>
            When a statement uses on-update to update events in the virtual data window the newData carries 
            the after-update event and the oldData parameter carries the before-update event. 
            <para/>
            Implement as follows to post all inserted or removed events to consuming statements: 
                context.OutputStream.Update(newData, oldData); 
            <para/>
            For data originating from the virtual data window use the SendEvent() method with "insert-into" 
            statement to insert events. 
            </summary>
            <param name="newData">the insert stream</param>
            <param name="oldData">the remove stream</param>
        </member>
        <member name="T:com.espertech.esper.client.hook.VirtualDataWindowContext">
            <summary>
            Context for use with virtual data window factory <seealso cref="T:com.espertech.esper.client.hook.VirtualDataWindowFactory"/> provides contextual 
            information about the named window and the type of events held, handle for posting insert and remove streams and 
            factory for event bean instances.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.hook.VirtualDataWindowContext.#ctor(com.espertech.esper.core.context.util.AgentInstanceContext,com.espertech.esper.client.EventType,System.Object[],com.espertech.esper.epl.expression.ExprNode[],com.espertech.esper.client.EventBeanFactory,com.espertech.esper.client.hook.VirtualDataWindowOutStream,System.String,com.espertech.esper.view.ViewFactoryContext,System.Object)">
            <summary>
            Ctor.
            </summary>
            <param name="agentInstanceContext">statement services and statement information such as statement name, statement id, EPL expression</param>
            <param name="eventType">the event type that the named window is declared to hold.</param>
            <param name="parameters">the parameters passed when declaring the named window, for example "create window ABC.my:vdw("10.0.0.1")" passes one paramater here.</param>
            <param name="parameterExpressions">parameter expressions passed to the virtual data window</param>
            <param name="eventFactory">factory for converting row objects to EventBean instances</param>
            <param name="outputStream">forward the input and output stream received from the update method here</param>
            <param name="namedWindowName">the name of the named window</param>
            <param name="viewFactoryContext">context of services</param>
            <param name="customConfiguration">additional configuration</param>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowContext.StatementContext">
            <summary>Returns the statement context which holds statement information (name, expression, id) and statement-level services. </summary>
            <value>statement context</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowContext.EventType">
            <summary>Returns the event type of the events held in the virtual data window as per declaration of the named window. </summary>
            <value>event type</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowContext.Parameters">
            <summary>Returns the parameters passed; for example "create window ABC.my:vdw("10.0.0.1")" passes one paramater here. </summary>
            <value>parameters</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowContext.EventFactory">
            <summary>Returns the factory for creating instances of EventBean from rows. </summary>
            <value>event bean factory</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowContext.OutputStream">
            <summary>Returns a handle for use to send insert and remove stream data to consuming statements. <para /> Typically use "context.getOutputStream().update(newData, oldData);" in the update method of the virtual data window. </summary>
            <value>handle for posting insert and remove stream</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowContext.NamedWindowName">
            <summary>Returns the name of the named window used in connection with the virtual data window. </summary>
            <value>named window</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowContext.ParameterExpressions">
            <summary>Returns the expressions passed as parameters to the virtual data window. </summary>
            <value>parameter expressions</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowContext.ViewFactoryContext">
            <summary>Returns the engine services context. </summary>
            <value>engine services context</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowContext.CustomConfiguration">
            <summary>Returns any additional configuration provided. </summary>
            <value>additional config</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowContext.AgentInstanceContext">
            <summary>Returns the agent instance (context partition) context. </summary>
            <value>context</value>
        </member>
        <member name="T:com.espertech.esper.client.hook.VirtualDataWindowEvent">
            <summary>Base class for events related to virtual data windows. </summary>
        </member>
        <member name="T:com.espertech.esper.client.hook.VirtualDataWindowEventStartIndex">
            <summary>Event raised when an index gets created or started via the "create index" syntax. </summary>
        </member>
        <member name="M:com.espertech.esper.client.hook.VirtualDataWindowEventStartIndex.#ctor(System.String,System.String,System.Collections.Generic.IList{com.espertech.esper.client.hook.VirtualDataWindowEventStartIndex.VDWCreateIndexField},System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="namedWindowName">named window name</param>
            <param name="indexName">index name</param>
            <param name="fields">index fields</param>
            <param name="isUnique">if set to <c>true</c> [is unique].</param>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowEventStartIndex.IndexName">
            <summary>Returns the index name. </summary>
            <value>index name</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowEventStartIndex.Fields">
            <summary>Returns a list of fields that are part of the index. </summary>
            <value>list of index fields</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowEventStartIndex.NamedWindowName">
            <summary>Returns the named window name. </summary>
            <value>named window name</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowEventStartIndex.IsUnique">
            <summary>
            Gets or sets a value indicating whether the index is unique.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.hook.VirtualDataWindowEventStartIndex.VDWCreateIndexField">
            <summary>Captures virtual data window indexed field informaion. </summary>
        </member>
        <member name="M:com.espertech.esper.client.hook.VirtualDataWindowEventStartIndex.VDWCreateIndexField.#ctor(System.String,System.Boolean)">
            <summary>Ctor. </summary>
            <param name="name">named window name</param>
            <param name="hash">true for hash-based index, false for btree index</param>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowEventStartIndex.VDWCreateIndexField.Name">
            <summary>Name of the indexed field. </summary>
            <value>field name</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowEventStartIndex.VDWCreateIndexField.IsHash">
            <summary>Indicate whether the index is hash or btree, true for hash. </summary>
            <value>index type indicator</value>
        </member>
        <member name="T:com.espertech.esper.client.hook.VirtualDataWindowEventStopIndex">
            <summary>
            Event to indicate that for a virtual data window an exitsing index is being stopped or destroyed.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.hook.VirtualDataWindowEventStopIndex.#ctor(System.String,System.String)">
            <summary>Ctor. </summary>
            <param name="namedWindowName">named window name</param>
            <param name="indexName">index name</param>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowEventStopIndex.IndexName">
            <summary>Returns the index name. </summary>
            <value>index name</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowEventStopIndex.NamedWindowName">
            <summary>Returns the named window name. </summary>
            <value>named window name</value>
        </member>
        <member name="T:com.espertech.esper.client.hook.VirtualDataWindowEventStopWindow">
            <summary>This event is raised when a virtual data window is stopped. </summary>
        </member>
        <member name="M:com.espertech.esper.client.hook.VirtualDataWindowEventStopWindow.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="namedWindowName">named window name</param>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowEventStopWindow.NamedWindowName">
            <summary>Returns the named window name. </summary>
            <value>named window name</value>
        </member>
        <member name="T:com.espertech.esper.client.hook.VirtualDataWindowFactory">
            <summary>
            Factory for <see cref="T:com.espertech.esper.client.hook.VirtualDataWindow"/>.
            <para/>
            Register an implementation of this interface with the engine before use:
                configuration.AddPlugInVirtualDataWindow("test", "vdw", typeof(SupportVirtualDWFactory).FullName);
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.hook.VirtualDataWindowFactory.Initialize(com.espertech.esper.client.hook.VirtualDataWindowFactoryContext)">
            <summary>
            Invoked once after instantiation of the factory, exactly once per named window.
            </summary>
            <param name="factoryContext">factory context provides contextual information such as event type, named window name and parameters.</param>
        </member>
        <member name="M:com.espertech.esper.client.hook.VirtualDataWindowFactory.Create(com.espertech.esper.client.hook.VirtualDataWindowContext)">
            <summary>
            Invoked for each context partition (or once if not using contexts),
            return a virtual data window to handle the specific event type, named window or paramaters
            as provided in the context.
            <p>
                 This method is invoked for each named window instance after the initialize method.
                 If using context partitions, the method is invoked once per context partition per named window.
             </p>
            </summary>
            <param name="context">provides contextual information such as event type, named window name and parameters and including context partition information</param>
            <returns>virtual data window</returns>
        </member>
        <member name="M:com.espertech.esper.client.hook.VirtualDataWindowFactory.DestroyAllContextPartitions">
            <summary>
            Invoked to indicate the named window is destroyed.
            <p>
                This method is invoked once per named window (and not once per context partition).
            </p>
            <p>
                For reference, the VirtualDataWindow destroy method is called once per context partition,
                before this method is invoked.
            </p>
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowFactory.UniqueKeyPropertyNames">
            <summary>
            Return the names of properties that taken together (combined, composed, not individually) are the unique keys of a row,
            return null if there are no unique keys that can be identified.
            </summary>
            <returns>set of unique key property names</returns>
        </member>
        <member name="T:com.espertech.esper.client.hook.VirtualDataWindowFactoryContext">
            <summary>
            Context for use with virtual data window factory <seealso cref="T:com.espertech.esper.client.hook.VirtualDataWindowFactory"/>
            provides contextual information about the named window and the type of events held, handle 
            for posting insert and remove streams and factory for event bean instances. 
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.hook.VirtualDataWindowFactoryContext.#ctor(com.espertech.esper.client.EventType,System.Object[],com.espertech.esper.epl.expression.ExprNode[],com.espertech.esper.client.EventBeanFactory,System.String,com.espertech.esper.view.ViewFactoryContext,System.Object)">
            <summary>Ctor. </summary>
            <param name="eventType">the event type that the named window is declared to hold.</param>
            <param name="parameters">the parameters passed when declaring the named window, for example "create window ABC.my:vdw("10.0.0.1")" passes one paramater here.</param>
            <param name="eventFactory">factory for converting row objects to EventBean instances</param>
            <param name="namedWindowName">the name of the named window</param>
            <param name="parameterExpressions">parameter expressions passed to the virtual data window</param>
            <param name="viewFactoryContext">context of services</param>
            <param name="customConfiguration">additional configuration</param>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowFactoryContext.EventType">
            <summary>Returns the event type of the events held in the virtual data window as per declaration of the named window. </summary>
            <value>event type</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowFactoryContext.Parameters">
            <summary>Returns the parameters passed; for example "create window ABC.my:vdw("10.0.0.1")" passes one paramater here. </summary>
            <value>parameters</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowFactoryContext.EventFactory">
            <summary>Returns the factory for creating instances of EventBean from rows. </summary>
            <value>event bean factory</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowFactoryContext.NamedWindowName">
            <summary>Returns the name of the named window used in connection with the virtual data window. </summary>
            <value>named window</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowFactoryContext.ParameterExpressions">
            <summary>Returns the expressions passed as parameters to the virtual data window. </summary>
            <value>parameter expressions</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowFactoryContext.ViewFactoryContext">
            <summary>Returns the engine services context. </summary>
            <value>engine services context</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowFactoryContext.CustomConfiguration">
            <summary>Returns any additional configuration provided. </summary>
            <value>additional config</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowFactoryContext.StatementContext">
            <summary>Returns the statement contextual information and services. </summary>
            <value>statement context</value>
        </member>
        <member name="T:com.espertech.esper.client.hook.VirtualDataWindowKeyRange">
            <summary>
            Provides a range as a start and end value, for use as a paramater to the lookup values passed to the
            <see cref="T:com.espertech.esper.client.hook.VirtualDataWindowLookup"/> lookup method. 
            <para/>
            Consult <see cref="T:com.espertech.esper.client.hook.VirtualDataWindowLookupOp"/> for information on the type of range represented (open, closed, inverted etc.) .
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.hook.VirtualDataWindowKeyRange.#ctor(System.Object,System.Object)">
            <summary>Ctor. </summary>
            <param name="start">range start</param>
            <param name="end">range end</param>
        </member>
        <member name="M:com.espertech.esper.client.hook.VirtualDataWindowKeyRange.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:com.espertech.esper.client.hook.VirtualDataWindowKeyRange.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.hook.VirtualDataWindowKeyRange.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowKeyRange.Start">
            <summary>Returns the start value of the range. </summary>
            <value>start value</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowKeyRange.End">
            <summary>Returns the end value of the range. </summary>
            <value>end value</value>
        </member>
        <member name="T:com.espertech.esper.client.hook.VirtualDataWindowLookup">
            <summary>
            Represents a lookup strategy object that an EPL statement that queries a virtual data window obtains 
            to perform read operations into the virtual data window.
            <para/>
            An instance is associated to each EPL statement querying (join, subquery, on-action etc.) the virtual data window. 
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.hook.VirtualDataWindowLookup.Lookup(System.Object[],com.espertech.esper.client.EventBean[])">
            <summary>
            Invoked by an EPL statement that queries a virtual data window to perform a lookup.
            <para/>
            Keys passed are the actual query lookup values.
            </summary>
            <param name="keys">lookup values</param>
            <param name="eventsPerStream">input events for the lookup</param>
            <returns>set of events</returns>
        </member>
        <member name="T:com.espertech.esper.client.hook.VirtualDataWindowLookupContext">
            <summary>
            Context passed to <see cref="T:com.espertech.esper.client.hook.VirtualDataWindow"/> upon obtaining a lookup strategy for use by 
            an EPL statement that queries the virtual data window. 
            <para/>
            Represents an analysis of correlation information provided in the where-clause of the querying 
            EPL statement (join, subquery etc.). Hash-fields are always operator-equals semantics. Btree fields 
            require sorted access as the operator is always a range or 
            Relational(&gt;, &lt;, &gt;=, &lt;=) operator. 
            <para/>
            For example, the query 
                "select * from MyVirtualDataWindow, MyTrigger where prop = trigger and prop2 between trigger1 and trigger2" 
            indicates a single hash-field "prop" and a single btree field "prop2" with a range operator.
             </summary>
        </member>
        <member name="M:com.espertech.esper.client.hook.VirtualDataWindowLookupContext.#ctor(System.String,System.String,System.Attribute[],System.Boolean,System.String,System.Collections.Generic.IList{com.espertech.esper.client.hook.VirtualDataWindowLookupFieldDesc},System.Collections.Generic.IList{com.espertech.esper.client.hook.VirtualDataWindowLookupFieldDesc})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.hook.VirtualDataWindowLookupContext"/> class.
            </summary>
            <param name="statementName">Name of the statement.</param>
            <param name="statementId">The statement id.</param>
            <param name="statementAnnotations">The statement annotations.</param>
            <param name="fireAndForget">if set to <c>true</c> [fire and forget].</param>
            <param name="namedWindowName">Name of the named window.</param>
            <param name="hashFields">The hash fields.</param>
            <param name="btreeFields">The btree fields.</param>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowLookupContext.NamedWindowName">
            <summary>
            Gets or sets the named window name.
            </summary>
            <value>The name of the named window.</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowLookupContext.HashFields">
            <summary>Returns the list of hash field descriptors. </summary>
            <value>hash fields</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowLookupContext.BtreeFields">
            <summary>Returns the list of btree field descriptors. </summary>
            <value>btree fields</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowLookupContext.StatementName">
            <summary>
            Returns the statement name of the statement to be performing the lookup, or null for fire-and-forget statements.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowLookupContext.StatementId">
            <summary>
            Returns the statement id of the statement to be performing the lookup, or null for fire-and-forget statements.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowLookupContext.StatementAnnotations">
            <summary>
            Returns the statement annotations of the statement to be performing the lookup, or null for fire-and-forget statements.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowLookupContext.IsFireAndForget">
            <summary>
            Returns true for fire-and-forget queries.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.hook.VirtualDataWindowLookupFieldDesc">
            <summary>
            As part of a lookup context, see <see cref="T:com.espertech.esper.client.hook.VirtualDataWindowLookupContext"/>, this object 
            encapsulates information about a single property in a correlated where-clause.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.hook.VirtualDataWindowLookupFieldDesc.#ctor(System.String,System.Nullable{com.espertech.esper.client.hook.VirtualDataWindowLookupOp},System.Type)">
            <summary>Ctor. </summary>
            <param name="propertyName">property name queried in where-clause</param>
            <param name="operator">operator</param>
            <param name="lookupValueType">lookup key type</param>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowLookupFieldDesc.PropertyName">
            <summary>Returns the property name queried in the where-clause. </summary>
            <value>property name.</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowLookupFieldDesc.LookupValueType">
            <summary>Returns the type of lookup value provided. </summary>
            <value>lookup value type (aka. key type)</value>
        </member>
        <member name="P:com.espertech.esper.client.hook.VirtualDataWindowLookupFieldDesc.Operator">
            <summary>Returns the operator. </summary>
            <value>operator</value>
        </member>
        <member name="T:com.espertech.esper.client.hook.VirtualDataWindowLookupOp">
            <summary>
            Enumeration for indicating the type of operator for a lookup against a virtual data window,
            see <see cref="T:com.espertech.esper.client.hook.VirtualDataWindowLookupContext"/>.
             </summary>
        </member>
        <member name="F:com.espertech.esper.client.hook.VirtualDataWindowLookupOp.EQUALS">
            <summary>Equals (=). </summary>
        </member>
        <member name="F:com.espertech.esper.client.hook.VirtualDataWindowLookupOp.LESS">
            <summary>Less (&lt;). </summary>
        </member>
        <member name="F:com.espertech.esper.client.hook.VirtualDataWindowLookupOp.LESS_OR_EQUAL">
            <summary>Less or equal (&lt;=). </summary>
        </member>
        <member name="F:com.espertech.esper.client.hook.VirtualDataWindowLookupOp.GREATER_OR_EQUAL">
            <summary>Greater or equal (&gt;=). </summary>
        </member>
        <member name="F:com.espertech.esper.client.hook.VirtualDataWindowLookupOp.GREATER">
            <summary>Greater (&gt;). </summary>
        </member>
        <member name="F:com.espertech.esper.client.hook.VirtualDataWindowLookupOp.RANGE_OPEN">
            <summary>Range contains neither endpoint, i.e. (a,b) </summary>
        </member>
        <member name="F:com.espertech.esper.client.hook.VirtualDataWindowLookupOp.RANGE_CLOSED">
            <summary>Range contains low and high endpoint, i.e. [a,b] </summary>
        </member>
        <member name="F:com.espertech.esper.client.hook.VirtualDataWindowLookupOp.RANGE_HALF_OPEN">
            <summary>Range includes low endpoint but not high endpoint, i.e. [a,b) </summary>
        </member>
        <member name="F:com.espertech.esper.client.hook.VirtualDataWindowLookupOp.RANGE_HALF_CLOSED">
            <summary>Range includes high endpoint but not low endpoint, i.e. (a,b] </summary>
        </member>
        <member name="F:com.espertech.esper.client.hook.VirtualDataWindowLookupOp.NOT_RANGE_OPEN">
            <summary>Inverted-Range contains neither endpoint, i.e. (a,b) </summary>
        </member>
        <member name="F:com.espertech.esper.client.hook.VirtualDataWindowLookupOp.NOT_RANGE_CLOSED">
            <summary>Inverted-Range contains low and high endpoint, i.e. [a,b] </summary>
        </member>
        <member name="F:com.espertech.esper.client.hook.VirtualDataWindowLookupOp.NOT_RANGE_HALF_OPEN">
            <summary>Inverted-Range includes low endpoint but not high endpoint, i.e. [a,b) </summary>
        </member>
        <member name="F:com.espertech.esper.client.hook.VirtualDataWindowLookupOp.NOT_RANGE_HALF_CLOSED">
            <summary>Inverted-Range includes high endpoint but not low endpoint, i.e. (a,b] </summary>
        </member>
        <member name="M:com.espertech.esper.client.hook.VirtualDataWindowLookupOpExtensions.FromOpString(System.String)">
            <summary>Map the operator from a string-value. </summary>
            <param name="stringOp">to map from</param>
            <returns>operator</returns>
            <throws>ArgumentException if the string operator cannot be understood</throws>
        </member>
        <member name="T:com.espertech.esper.client.hook.VirtualDataWindowOutStream">
            <summary>
            For use with virtual data windows, handles any insert stream and remove stream events that a virtual data window may post to consuming statements.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.hook.VirtualDataWindowOutStream.Update(com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean[])">
            <summary>
            Post insert stream (new data) and remove stream (old data) events.
            </summary>
            <param name="newData">insert stream, or null if no insert stream events</param>
            <param name="oldData">remove stream, or null if no remove stream events</param>
        </member>
        <member name="T:com.espertech.esper.client.EventType">
            <summary>
            This interface provides metadata on events.
            <para/>
            The interface exposes events as organizations of named values. The contract is that any event in the system must have a 
            name-based way of accessing sub-data within its event type. A simple example is an object: the names can be property names,
            and those properties can have still more properties beneath them. Another example is a Map structure. Here string names 
            can referto data objects.
            <para/> 
            The interface presents an immutable view of events. There are no methods to change property values. Events by definition are
            an observation of a past occurrance or state change and may not be modified.
            <para/>
            Information on the super-types (superclass and interfaces implemented by events) is also available, for PONO events as well
            as for Map event types that has supertypes.
            <para/>
            Implementations provide metadata on the properties that an implementation itself provides.
            <para/>
            Implementations also allow property expressioms that may use nested, indexed, mapped or a combination of these as a syntax
            to access property types and values.
            <para/>
            Implementations in addition may provide a means to access property values as event fragments, which are typed events themselves.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EventType.GetPropertyType(System.String)">
            <summary>
            Get the type of an event property.
            <para/>
            Returns null if the property name or property expression is not valid against the event type. Can also return null
            if a select-clause selects a constant null value. <para/> The method takes a property name or property expression as
            a parameter. Property expressions may include indexed properties via the syntax "name[index]", mapped properties via the syntax
            "name('key')", nested properties via the syntax "outer.inner" or combinations thereof.
            <para/>
            Returns unboxed (such as 'typeof(int)') as well as boxed 'typeof(int?)' type.
            </summary>
            <param name="propertyExpression">is the property name or property expression</param>
            <returns>
            type of the property, the unboxed or the boxed type.
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.EventType.IsProperty(System.String)">
            <summary>
            Check that the given property name or property expression is valid for this event type, ie. that the property exists
            on the event type.
            <para/> 
            The method takes a property name or property expression as a parameter. Property expressions may include indexed
            properties via the syntax "name[index]", mapped properties via the syntax "name('key')", nested properties via the
            syntax "outer.inner" or combinations thereof.
            </summary>
            <param name="propertyExpression">is the property name or property expression to check</param>
            <returns>true if exists, false if not</returns>
        </member>
        <member name="M:com.espertech.esper.client.EventType.GetGetter(System.String)">
            <summary>
            Get the getter of an event property or property expression:
            Getters are useful when an application receives events of the same event type multiple times and requires fast access
            to an event property or nested, indexed or mapped property.
            <para/>
            Returns null if the property name or property expression is not valid against the event type.
            <para/> 
            The method takes a property name or property expression as a parameter. Property expressions may include indexed 
            properties via the syntax "name[index]", mapped properties via the syntax "name('key')", nested properties via the
            syntax "outer.inner" or combinations thereof.
            </summary>
            <param name="propertyExpression">is the property name or property expression</param>
            <returns>
            a getter that can be used to obtain property values for event instances of the same event type
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.EventType.GetFragmentType(System.String)">
            <summary>
            Returns the event type of the fragment that is the value of a property name or property expression.
            <para/>
            Returns null if the property name or property expression is not valid or does not return a fragment for the event type.
            <para/>
            The <seealso cref="T:com.espertech.esper.client.EventPropertyDescriptor"/> provides a flag that indicates which properties provide fragment events.
            <para/>
            This is useful for navigating properties that are itself events or other well-defined types that the underlying event
            representation may represent as an event type. It is up to each event representation to determine what properties can
            be represented as event types themselves.
            <para/>
            The method takes a property name or property expression as a parameter. Property expressions may include indexed properties
            via the syntax "name[index]", mapped properties via the syntax "name('key')", nested properties via the syntax "outer.inner"
            or combinations thereof.
            <para/>
            The underlying event representation may not support providing fragments or therefore fragment event types for any or all
            properties, in which case the method returns null.
            <para/>
            Use the <seealso cref="P:com.espertech.esper.client.EventType.PropertyDescriptors"/> method to obtain a list of properties for which a fragment event type may be
            retrieved by this method.
            </summary>
            <param name="propertyExpression">is the name of the property to return the fragment event type</param>
            <returns>fragment event type of the property</returns>
        </member>
        <member name="M:com.espertech.esper.client.EventType.GetPropertyDescriptor(System.String)">
            <summary>
            Get the property descriptor for a given property of the event, or null if a property by that name was not found.
            <para>
            The property name parameter does accept a property expression. It therefore does not allow the indexed,
            mapped or nested property expression syntax and only returns the descriptor for the event type's known
            properties.
            </para>
            <para> 
            The method does not return property information of inner or nested types.
            </para>
            <para>
            For returning a property descriptor for nested, indexed or mapped properties 
            <seealso cref="T:com.espertech.esper.events.EventTypeUtility"/>
            </para>
            </summary>
            <param name="propertyName">property name</param>
            <returns>descriptor for the named property</returns>
        </member>
        <member name="M:com.espertech.esper.client.EventType.GetGetterMapped(System.String)">
            <summary>Get the getter of an event property that is a mapped event property: Getters are useful when an application receives events of the same event type multiple times and requires fast access to a mapped property. <para /> Returns null if the property name is not valid against the event type or the property is not a mapped property. <para /> The method takes a mapped property name (and not a property expression) as a parameter. </summary>
            <param name="mappedPropertyName">is the property name</param>
            <returns>a getter that can be used to obtain property values for event instances of the same event type</returns>
        </member>
        <member name="M:com.espertech.esper.client.EventType.GetGetterIndexed(System.String)">
            <summary>Get the getter of an event property that is a indexed event property: Getters are useful when an application receives events of the same event type multiple times and requires fast access to a indexed property. <para /> Returns null if the property name is not valid against the event type or the property is not an indexed property. <para /> The method takes a indexed property name (and not a property expression) as a parameter. </summary>
            <param name="indexedPropertyName">is the property name</param>
            <returns>a getter that can be used to obtain property values for event instances of the same event type</returns>
        </member>
        <member name="P:com.espertech.esper.client.EventType.UnderlyingType">
            <summary>
            Get the class that represents the type of the event type.
            Returns an event class if the schema represents a POCO event type.
            Returns IDictionary is the schema represents a collection of values in a Map.
            </summary>
            <returns>type of the event object</returns>
        </member>
        <member name="P:com.espertech.esper.client.EventType.PropertyNames">
            <summary>
            Get the property names for the event type.
            <para>
            Note that properties do not have a defined order. Your application should not rely on the order of properties returned by this method.
            </para>
            <para>
            The method does not return property names of inner or nested types.
            </para>
            </summary>
            <returns>
            A string array containing the property names of this typed event data object.
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.EventType.PropertyDescriptors">
            <summary>Get property descriptors for the event type.
            <para>
            Note that properties do not have a defined order. Your application should not rely 
            on the order of properties returned by this method.
            </para>
            <para>
            The method does not return property information of inner or nested types.
            </para>
             </summary>
            <returns>descriptors for all known properties of the event type.</returns>
        </member>
        <member name="P:com.espertech.esper.client.EventType.SuperTypes">
            <summary>
            Returns an enumeration of event types that are super to this event type, from which this event type inherited event properties.
            <para/>
            For POCO instances underlying the event this method returns the event types for all superclasses extended by
            the POCO and all interfaces implemented by the POCO.
            </summary>
            <value>The super types.</value>
            <returns>an array of event types</returns>
        </member>
        <member name="P:com.espertech.esper.client.EventType.DeepSuperTypes">
            <summary>
            Returns enumerator over all super types to event type, going up the hierarchy and including all interfaces (and their
            extended interfaces) and superclasses as EventType instances.
            </summary>
            <value>The deep super types.</value>
        </member>
        <member name="P:com.espertech.esper.client.EventType.Name">
            <summary>
            Returns the type name or null if no type name is assigned.
            <para/> A type name is available for application-configured event types and for event types that represent events of a stream populated by insert-into.
            <para/> No type name is available for anonymous statement-specific event type.
            </summary>
            <value>The name.</value>
            <returns>type name or null if none assigned</returns>
        </member>
        <member name="P:com.espertech.esper.client.EventType.EventTypeId">
            <summary>Returns the event type id assigned to the event type. </summary>
            <value>event type id</value>
        </member>
        <member name="P:com.espertech.esper.client.EventType.StartTimestampPropertyName">
            <summary>Returns the property name of the property providing the start timestamp value. </summary>
            <value>start timestamp property name</value>
        </member>
        <member name="P:com.espertech.esper.client.EventType.EndTimestampPropertyName">
            <summary>Returns the property name of the property providing the end timestamp value. </summary>
            <value>end timestamp property name</value>
        </member>
        <member name="T:com.espertech.esper.client.EventTypeException">
            <summary>
            Indicates that a problem occurred looking up, assigning or creating and event type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EventTypeException.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="message">supplies exception details</param>
        </member>
        <member name="T:com.espertech.esper.client.FragmentEventType">
            <summary>
            Provides an event type for a property of an event.
            <para />
            A fragment is a property value that is itself an event, or that can be represented
            as an event. Thereby a fragment comes with event type metadata and means of querying
            the fragment's properties.
            <para />
            A array or collection of property values that is an array of events or that can be
            represented as an array of events has the indexed flag set.
            <para />
            A map of property values that is an map of events or that can be represented as a map
            of events has the mapped flag set.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.FragmentEventType.#ctor(com.espertech.esper.client.EventType,System.Boolean,System.Boolean)">
            <summary>Ctor. </summary>
            <param name="fragmentType">the event type for a property value for an event.</param>
            <param name="indexed">true to indicate that property value is an array of events</param>
            <param name="isNative">true</param>
        </member>
        <member name="P:com.espertech.esper.client.FragmentEventType.IsIndexed">
            <summary>
            Returns true if the fragment type is an array.
            <para/> If a property value is an array and thereby a fragment array, this flag is set to true.
            </summary>
            <value>indicator if array fragment</value>
        </member>
        <member name="P:com.espertech.esper.client.FragmentEventType.FragmentType">
            <summary>
            Returns the type of the fragment.
            </summary>
            <value>fragment type</value>
        </member>
        <member name="P:com.espertech.esper.client.FragmentEventType.IsNative">
            <summary>
            Returns true if the fragment is a native representation, i.e. a type.
            </summary>
            <value>indicator whether fragment is a type.</value>
        </member>
        <member name="M:com.espertech.esper.client.linq.DisposableObservableCollection`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.linq.CascadeObservableCollection`2.#ctor(System.Collections.ObjectModel.ObservableCollection{`0},System.Func{`0,`1},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.linq.CascadeObservableCollection`2"/> class.
            </summary>
            <param name="sourceCollection">The source collection.</param>
            <param name="transform">The transform.</param>
            <param name="disposeSource">if set to <c>true</c> [dispose source].</param>
        </member>
        <member name="M:com.espertech.esper.client.linq.CascadeObservableCollection`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.linq.CascadeObservableCollection`2.OnSourceCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when [source collection changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:com.espertech.esper.client.linq.CascadeObservableCollection`2.DisposeSource">
            <summary>
            Gets or sets a value indicating whether [dispose source].
            </summary>
            <value><c>true</c> if [dispose source]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:com.espertech.esper.client.linq.CascadeObservableCollection`2.SourceCollection">
            <summary>
            Gets or sets the source collection.
            </summary>
            <value>The source collection.</value>
        </member>
        <member name="P:com.espertech.esper.client.linq.CascadeObservableCollection`2.Transform">
            <summary>
            Gets or sets the transform.
            </summary>
            <value>The transform.</value>
        </member>
        <member name="M:com.espertech.esper.client.linq.EsperQueryExtensions.Select``1(com.espertech.esper.client.linq.EsperQuery{``0})">
            <summary>
            Selects the specified "item" from the esper query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="esperQuery">The esper query.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.EsperQueryExtensions.Select``2(com.espertech.esper.client.linq.EsperQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Selects the specified "item" from the esper query.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <param name="esperQuery">The esper query.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.EsperQueryExtensions.AddProperty``1(com.espertech.esper.client.linq.EsperQuery{``0},System.String)">
            <summary>
            Add a property / column to the query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="esperQuery">The esper query.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.EsperQueryExtensions.AddProperty``1(com.espertech.esper.client.linq.EsperQuery{``0},System.String,System.String)">
            <summary>
            Add a property / column to the query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="esperQuery">The esper query.</param>
            <param name="property">The property.</param>
            <param name="asPropertyName">Name of as property.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.EsperQueryExtensions.AddProperty``1(com.espertech.esper.client.linq.EsperQuery{``0},System.String,System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            Adds the property.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="esperQuery">The esper query.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.EsperQueryExtensions.Join``4(com.espertech.esper.client.linq.EsperQuery{``0},com.espertech.esper.client.linq.EsperQuery{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
            <summary>
            Joins the specified outer.
            </summary>
            <typeparam name="TOuter">The type of the outer.</typeparam>
            <typeparam name="TInner">The type of the inner.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="outer">The outer.</param>
            <param name="inner">The inner.</param>
            <param name="outerKeySelector">The outer key selector.</param>
            <param name="innerKeySelector">The inner key selector.</param>
            <param name="resultSelector">The result selector.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.EsperQueryExtensions.Where``1(com.espertech.esper.client.linq.EsperQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Constrains the specified esper query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="esperQuery">The esper query.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.EsperQueryExtensions.Having``1(com.espertech.esper.client.linq.EsperQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Constrains the specified esper query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="esperQuery">The esper query.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.EsperQueryExtensions.OutputLimit``1(com.espertech.esper.client.linq.EsperQuery{``0},com.espertech.esper.client.soda.TimePeriodExpression)">
            <summary>
            Limit the output of the query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="esperQuery">The esper query.</param>
            <param name="timePeriodExpression">The time period expression.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.EsperQueryExtensions.OutputLimit``1(com.espertech.esper.client.linq.EsperQuery{``0},com.espertech.esper.client.soda.OutputLimitSelector,com.espertech.esper.client.soda.TimePeriodExpression)">
            <summary>
            Limit the output of the query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="esperQuery">The esper query.</param>
            <param name="selector">The selector.</param>
            <param name="timePeriodExpression">The time period expression.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.EsperQueryExtensions.OutputLimit``1(com.espertech.esper.client.linq.EsperQuery{``0},com.espertech.esper.client.soda.OutputLimitSelector,System.Double)">
            <summary>
            Limit the output of the query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="esperQuery">The esper query.</param>
            <param name="selector">The selector.</param>
            <param name="frequency">The frequency.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.EsperQueryExtensions.OutputLimit``1(com.espertech.esper.client.linq.EsperQuery{``0},com.espertech.esper.client.soda.OutputLimitSelector,System.String)">
            <summary>
            Limit the output of the query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="esperQuery">The esper query.</param>
            <param name="selector">is the events to select</param>
            <param name="frequencyVariable">is the variable providing the output limit frequency</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.EsperQueryExtensions.OutputLimit``1(com.espertech.esper.client.linq.EsperQuery{``0},System.Double)">
            <summary>
            Limit the output of the query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="esperQuery">The esper query.</param>
            <param name="frequency">a frequency to output at</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.EsperQueryExtensions.OutputLimit``1(com.espertech.esper.client.linq.EsperQuery{``0},System.String)">
            <summary>
            Limit the output of the query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="esperQuery">The esper query.</param>
            <param name="frequencyVariable">is the variable name providing output rate frequency values</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.EsperQueryExtensions.OutputLimit``1(com.espertech.esper.client.linq.EsperQuery{``0},com.espertech.esper.client.soda.Expression)">
            <summary>
            Limit the output of the query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="esperQuery">The esper query.</param>
            <param name="whenExpression">the expression that returns true to trigger output</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.EsperQueryExtensions.OutputLimit``1(com.espertech.esper.client.linq.EsperQuery{``0},com.espertech.esper.client.soda.Expression[])">
            <summary>
            Limit the output of the query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="esperQuery">The esper query.</param>
            <param name="scheduleParameters">the crontab schedule parameters</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.EsperQueryExtensions.RowLimit``1(com.espertech.esper.client.linq.EsperQuery{``0},System.String)">
            <summary>
            Limits the number of rows.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="esperQuery">The esper query.</param>
            <param name="numRowsVariable">The num rows variable.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.EsperQueryExtensions.RowLimit``1(com.espertech.esper.client.linq.EsperQuery{``0},System.String,System.String)">
            <summary>
            Limits the number of rows.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="esperQuery">The esper query.</param>
            <param name="numRowsVariable">The num rows variable.</param>
            <param name="offsetVariable">The offset variable.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.EsperQueryExtensions.RowLimit``1(com.espertech.esper.client.linq.EsperQuery{``0},System.Int32)">
            <summary>
            Limits the number of rows.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="esperQuery">The esper query.</param>
            <param name="numRows">The num rows.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.EsperQueryExtensions.RowLimit``1(com.espertech.esper.client.linq.EsperQuery{``0},System.Int32,System.Int32)">
            <summary>
            Limits the number of rows.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="esperQuery">The esper query.</param>
            <param name="numRows">The num rows.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.EsperQueryExtensions.OrderBy``2(com.espertech.esper.client.linq.EsperQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Orders the results of the expression.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="esperQuery">The esper query.</param>
            <param name="keySelectionExpression">The key selection expression.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.EsperQueryExtensions.OrderByDescending``2(com.espertech.esper.client.linq.EsperQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Orders the results of the expression.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="esperQuery">The esper query.</param>
            <param name="keySelectionExpression">The key selection expression.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.EsperQueryExtensions.GroupBy``2(com.espertech.esper.client.linq.EsperQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Groups the results of the expression.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="esperQuery">The esper query.</param>
            <param name="keySelectionExpression">The key selection expression.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.EsperQueryExtensions.FromTypeAs``1(com.espertech.esper.client.EPServiceProvider,System.String)">
            <summary>
            Creates a query view from the service provider.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serviceProvider">The service provider.</param>
            <param name="asName">As name.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.EsperQueryExtensions.FromStreamAs``1(com.espertech.esper.client.EPServiceProvider,System.String,System.String)">
            <summary>
            Creates a query view from the service provider.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serviceProvider">The service provider.</param>
            <param name="stream">The stream.</param>
            <param name="asName">The name of the stream.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.EsperQueryExtensions.From``1(com.espertech.esper.client.EPServiceProvider)">
            <summary>
            Creates a query view from the service provider.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serviceProvider">The service provider.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.EsperQueryExtensions.From``1(com.espertech.esper.client.EPServiceProvider,System.Type[])">
            <summary>
            Creates a query view from the service provider.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="typeList">The type list.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.EsperQueryExtensions.From``1(com.espertech.esper.client.EPServiceProvider,System.String[])">
            <summary>
            Creates a query view from the service provider.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serviceProvider">The service provider.</param>
            <param name="streamNames">The stream names.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.client.linq.EventTransformationFactory">
            <summary>
            Creates event transformation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.linq.EventTransformationFactory.DefaultTransformation``1">
            <summary>
            Returns the defaults the transformation from an eventBean to a type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.EventTransformationFactory.DefaultTransformation``1(com.espertech.esper.compat.magic.MagicType,com.espertech.esper.client.EventBean)">
            <summary>
            Defaults the transformation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="magicType">Type of the magic.</param>
            <param name="eventBean">The event bean.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.client.linq.EsperQuery`1">
            <summary>
            Each variation of the EsperQuery must result in a statement that can be submitted
            to the administrator for compilation and execution.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.linq.EsperQuery`1.Compile">
            <summary>
            Compiles the statement object model into a true statement.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.linq.EsperQuery`1.#ctor(com.espertech.esper.client.EPServiceProvider,com.espertech.esper.client.soda.EPStatementObjectModel)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.linq.EsperQuery`1"/> class.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="objectModel">The object model.</param>
        </member>
        <member name="M:com.espertech.esper.client.linq.EsperQuery`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.linq.EsperQuery`1.ServiceProvider">
            <summary>
            Gets the service provider associated with this request.
            </summary>
            <value>The service provider.</value>
        </member>
        <member name="P:com.espertech.esper.client.linq.EsperQuery`1.Statement">
            <summary>
            Gets the statement associated with this request.
            </summary>
            <value>The statement.</value>
        </member>
        <member name="P:com.espertech.esper.client.linq.EsperQuery`1.ObjectModel">
            <summary>
            Gets the statement object model.
            </summary>
            <value>The object model.</value>
        </member>
        <member name="P:com.espertech.esper.client.linq.EsperQuery`1.IsCompiled">
            <summary>
            Returns true if the query has been compiled into a statement.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.linq.LinqToSoda.LinqToSodaExpression(System.Linq.Expressions.Expression)">
            <summary>
            Converts a LINQ expression to a SODA expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.LinqToSoda.LambdaToSoda(System.Linq.Expressions.Expression)">
            <summary>
            Converts a lambda expression to a soda expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.LinqToSoda.MemberToSoda(System.Linq.Expressions.Expression)">
            <summary>
            Converts a member expression to a soda expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.LinqToSoda.CallToSoda(System.Linq.Expressions.Expression)">
            <summary>
            Converts a call expression to soda expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.LinqToSoda.UnmasqProperty(System.Linq.Expressions.Expression)">
            <summary>
            Unmasqs a property.
            </summary>
            <param name="propertyNameExpr">The property name expr.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.LinqToSoda.NewToSelectClause(System.Linq.Expressions.NewExpression)">
            <summary>
            Converts the new invocation call into a select clause.
            </summary>
            <param name="newExpression">The new expression.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.LinqToSoda.LinqToSelectClause(System.Linq.Expressions.Expression)">
            <summary>
            Converts a LINQ expression to a select clause expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.client.linq.ServiceProviderExtensions">
            <summary>
            Set of extensions for use with NEsper EPServiceProviders.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.linq.ServiceProviderExtensions.CreateVariable(com.espertech.esper.client.EPServiceProvider,System.String,System.Type)">
            <summary>
            Creates the variable.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="variableName">Name of the variable.</param>
            <param name="variableType">Type of the variable.</param>
        </member>
        <member name="M:com.espertech.esper.client.linq.ServiceProviderExtensions.CreateVariable(com.espertech.esper.client.EPServiceProvider,System.String,System.String)">
            <summary>
            Creates the variable.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="variableName">Name of the variable.</param>
            <param name="variableType">Type of the variable.</param>
        </member>
        <member name="M:com.espertech.esper.client.linq.ServiceProviderExtensions.CreateVariable(com.espertech.esper.client.EPServiceProvider,System.String,System.Type,System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            Creates the variable.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="variableName">Name of the variable.</param>
            <param name="variableType">Type of the variable.</param>
            <param name="assignment">The assignment.</param>
        </member>
        <member name="M:com.espertech.esper.client.linq.ServiceProviderExtensions.CreateVariable(com.espertech.esper.client.EPServiceProvider,System.String,System.String,System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            Creates the variable.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="variableName">Name of the variable.</param>
            <param name="variableType">Type of the variable.</param>
            <param name="assignment">The assignment.</param>
        </member>
        <member name="M:com.espertech.esper.client.linq.ServiceProviderExtensions.CreateSelectTrigger``1(com.espertech.esper.client.EPServiceProvider,System.String,System.String,com.espertech.esper.client.linq.EsperQuery{``0})">
            <summary>
            Creates the select trigger.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serviceProvider">The service provider.</param>
            <param name="windowName">Name of the window.</param>
            <param name="asName">As name.</param>
            <param name="fromClause">From clause.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.ServiceProviderExtensions.CreateSelectTrigger``1(com.espertech.esper.client.EPServiceProvider,System.String,System.String,com.espertech.esper.client.linq.EsperQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates the select trigger with one stream expression capability.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serviceProvider">The service provider.</param>
            <param name="windowName">Name of the window.</param>
            <param name="asName">As name.</param>
            <param name="fromClause">From clause.</param>
            <param name="whereClause">The where clause.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.ServiceProviderExtensions.CreateSelectTrigger``2(com.espertech.esper.client.EPServiceProvider,System.String,System.String,com.espertech.esper.client.linq.EsperQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Creates a select trigger with two stream expression capability.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <param name="serviceProvider">The service provider.</param>
            <param name="windowName">Name of the window.</param>
            <param name="asName">As name.</param>
            <param name="fromClause">From clause.</param>
            <param name="whereClause">The where clause.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.ServiceProviderExtensions.CreateSelectTrigger``1(com.espertech.esper.client.EPServiceProvider,System.String,System.String,com.espertech.esper.client.linq.EsperQuery{``0},System.Func{com.espertech.esper.client.soda.Expression})">
            <summary>
            Creates the select trigger.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serviceProvider">The service provider.</param>
            <param name="windowName">Name of the window.</param>
            <param name="asName">As name.</param>
            <param name="fromClause">From clause.</param>
            <param name="deferredWhereClause">The deferred where clause.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.ServiceProviderExtensions.CreateDeleteTrigger``1(com.espertech.esper.client.EPServiceProvider,System.String,System.String,com.espertech.esper.client.linq.EsperQuery{``0})">
            <summary>
            Creates the delete trigger with no where clause.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serviceProvider">The service provider.</param>
            <param name="windowName">Name of the window.</param>
            <param name="asName">As name.</param>
            <param name="fromClause">From clause.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.ServiceProviderExtensions.CreateDeleteTrigger``1(com.espertech.esper.client.EPServiceProvider,System.String,System.String,com.espertech.esper.client.linq.EsperQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates the delete trigger with one stream expression capability.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serviceProvider">The service provider.</param>
            <param name="windowName">Name of the window.</param>
            <param name="asName">As name.</param>
            <param name="fromClause">From clause.</param>
            <param name="whereClause">The where clause.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.ServiceProviderExtensions.CreateDeleteTrigger``2(com.espertech.esper.client.EPServiceProvider,System.String,System.String,com.espertech.esper.client.linq.EsperQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Creates a delete trigger with two stream expression capability.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <param name="serviceProvider">The service provider.</param>
            <param name="windowName">Name of the window.</param>
            <param name="asName">As name.</param>
            <param name="fromClause">From clause.</param>
            <param name="whereClause">The where clause.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.ServiceProviderExtensions.CreateDeleteTrigger``1(com.espertech.esper.client.EPServiceProvider,System.String,System.String,com.espertech.esper.client.linq.EsperQuery{``0},System.Func{com.espertech.esper.client.soda.Expression})">
            <summary>
            Creates the delete trigger.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serviceProvider">The service provider.</param>
            <param name="windowName">Name of the window.</param>
            <param name="asName">As name.</param>
            <param name="fromClause">From clause.</param>
            <param name="deferredWhereClause">The deferred where clause.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.ServiceProviderExtensions.CreateWindow``1(com.espertech.esper.client.EPServiceProvider,System.String,com.espertech.esper.client.soda.View,com.espertech.esper.client.linq.EsperQuery{``0})">
            <summary>
            Creates a window.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serviceProvider">The service provider.</param>
            <param name="windowName">Name of the window.</param>
            <param name="view">The view.</param>
            <param name="esperQuery">The esper query.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.ServiceProviderExtensions.CreateWindow``1(com.espertech.esper.client.EPServiceProvider,System.String,com.espertech.esper.client.soda.View,com.espertech.esper.client.linq.EsperQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a window.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serviceProvider">The service provider.</param>
            <param name="windowName">Name of the window.</param>
            <param name="view">The view.</param>
            <param name="esperQuery">The esper query.</param>
            <param name="insertWhereExpression">The insert where expression.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.ServiceProviderExtensions.CreateWindowAsObjectModel``1(com.espertech.esper.client.EPServiceProvider,System.String,com.espertech.esper.client.soda.View,com.espertech.esper.client.linq.EsperQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a window.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serviceProvider">The service provider.</param>
            <param name="windowName">Name of the window.</param>
            <param name="view">The view.</param>
            <param name="esperQuery">The esper query.</param>
            <param name="insertWhereExpression">The insert where expression.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.StatementExtensions.AsObservableCollection``1(com.espertech.esper.client.EPStatement)">
            <summary>
            Creates a typed observable collection from the statement.  All events are forwarded to
            the observerable collection and are transformed into the typed class using the default
            event transformer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="statement">The statement.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.StatementExtensions.AsObservableCollection``1(com.espertech.esper.client.EPStatement,System.Boolean)">
            <summary>
            Creates a typed observable collection from the statement.  All events are forwarded to
            the observerable collection and are transformed into the typed class using the default
            event transformer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="statement">The statement.</param>
            <param name="disposeStatement">if set to <c>true</c> [dispose statement].</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.StatementExtensions.AsObservableCollection``1(com.espertech.esper.client.EPStatement,System.Func{com.espertech.esper.client.EventBean,``0},System.Boolean)">
            <summary>
            Creates a typed observable collection from the statement.  All events are forwarded to
            the observerable collection and are transformed into the typed class using the provided
            event transformer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="statement">The statement.</param>
            <param name="eventTransformer">The event transformer.</param>
            <param name="disposeStatement">if set to <c>true</c> [dispose statement].</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.StatementObjectModelExtensions.ShallowCopy(com.espertech.esper.client.soda.EPStatementObjectModel)">
            <summary>
            Creates a shallow copy of the object model.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.linq.StatementObservableCollection`1.#ctor(com.espertech.esper.client.EPStatement,System.Func{com.espertech.esper.client.EventBean,`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.linq.StatementObservableCollection`1"/> class.
            </summary>
            <param name="statement">The statement.</param>
            <param name="eventTransform">The event transform.</param>
            <param name="disposeStatement">if set to <c>true</c> [dispose statement].</param>
        </member>
        <member name="M:com.espertech.esper.client.linq.StatementObservableCollection`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.linq.StatementObservableCollection`1.OnEvent(System.Object,com.espertech.esper.client.UpdateEventArgs)">
            <summary>
            Called when an update [event] occurs on the statement.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:com.espertech.esper.client.UpdateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:com.espertech.esper.client.linq.StatementObservableCollection`1.SetItems(System.Collections.Generic.List{`0})">
            <summary>
            Sets the items.
            </summary>
            <param name="itemList">The item list.</param>
        </member>
        <member name="M:com.espertech.esper.client.linq.StatementObservableCollection`1.SetItemsWhenSingleOccupant(System.Collections.Generic.IList{`0})">
            <summary>
            Sets the items when there is only a single item currently in the list.
            </summary>
            <param name="itemList">The item list.</param>
        </member>
        <member name="M:com.espertech.esper.client.linq.StatementObservableCollection`1.SetItemsWhenEmpty(System.Collections.Generic.IList{`0})">
            <summary>
            Sets the items when there are no occupants in the list.
            </summary>
            <param name="itemList">The item list.</param>
        </member>
        <member name="M:com.espertech.esper.client.linq.StatementObservableCollection`1.CreateTypedEventList(System.Collections.Generic.IEnumerable{com.espertech.esper.client.EventBean})">
            <summary>
            Creates the typed event list.
            </summary>
            <param name="eventList">The event list.</param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.client.linq.StatementObservableCollection`1.EventTransform">
            <summary>
            Gets the function that converts the event bean into a properly formed object.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.linq.StatementObservableCollection`1.Statement">
            <summary>
            Gets the statement the collection is bound to.
            </summary>
            <value>The statement.</value>
        </member>
        <member name="P:com.espertech.esper.client.linq.StatementObservableCollection`1.DisposeStatement">
            <summary>
            Gets or sets a value indicating whether [dispose statement].
            </summary>
            <value><c>true</c> if [dispose statement]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:com.espertech.esper.client.metric.EngineMetric">
            <summary>Reports engine-level instrumentation values. </summary>
        </member>
        <member name="T:com.espertech.esper.client.metric.MetricEvent">
            <summary>
            Base metric event.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.metric.MetricEvent.#ctor(System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="engineURI">the engine URI</param>
        </member>
        <member name="P:com.espertech.esper.client.metric.MetricEvent.EngineURI">
            <summary>
            Returns the engine URI.
            </summary>
            <value>The engine URI.</value>
            <returns>uri</returns>
        </member>
        <member name="M:com.espertech.esper.client.metric.EngineMetric.#ctor(System.String,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>Ctor. </summary>
            <param name="engineURI">engine URI</param>
            <param name="timestamp">engine timestamp</param>
            <param name="inputCount">number of input events</param>
            <param name="inputCountDelta">number of input events since last</param>
            <param name="scheduleDepth">schedule depth</param>
        </member>
        <member name="P:com.espertech.esper.client.metric.EngineMetric.InputCount">
            <summary>Returns input count since engine initialization cumulative. </summary>
            <value>input count</value>
        </member>
        <member name="P:com.espertech.esper.client.metric.EngineMetric.ScheduleDepth">
            <summary>Returns schedule depth. </summary>
            <value>schedule depth</value>
        </member>
        <member name="P:com.espertech.esper.client.metric.EngineMetric.Timestamp">
            <summary>Returns engine timestamp. </summary>
            <value>timestamp</value>
        </member>
        <member name="P:com.espertech.esper.client.metric.EngineMetric.InputCountDelta">
            <summary>Returns input count since last reporting period. </summary>
            <value>input count</value>
        </member>
        <member name="T:com.espertech.esper.client.metric.StatementMetric">
            <summary>
            Reports statement-level instrumentation values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.metric.StatementMetric.#ctor(System.String,System.String)">
            <summary>Ctor. </summary>
            <param name="engineURI">engine URI</param>
            <param name="statementName">statement name</param>
        </member>
        <member name="M:com.espertech.esper.client.metric.StatementMetric.AddNumOutputIStream(System.Int32)">
            <summary>Adds number of output rows in insert stream. </summary>
            <param name="numIStream">to add</param>
        </member>
        <member name="M:com.espertech.esper.client.metric.StatementMetric.AddNumOutputRStream(System.Int32)">
            <summary>Adds number of output rows in remove stream. </summary>
            <param name="numRStream">to add</param>
        </member>
        <member name="P:com.espertech.esper.client.metric.StatementMetric.Timestamp">
            <summary>
            Gets or sets engine timestamp.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.metric.StatementMetric.StatementName">
            <summary>Returns statement name. </summary>
            <returns>statement name</returns>
        </member>
        <member name="P:com.espertech.esper.client.metric.StatementMetric.OutputRStreamCount">
            <summary>Returns number of output rows in remove stream. </summary>
            <returns>number of output rows in remove stream</returns>
        </member>
        <member name="P:com.espertech.esper.client.metric.StatementMetric.OutputIStreamCount">
            <summary>Returns number of output rows in insert stream. </summary>
            <returns>number of output rows in insert stream</returns>
        </member>
        <member name="T:com.espertech.esper.client.ParameterModel">
            <summary>
            ParameterModel lets the user specify the way that the parameter
            model works for backend repositories.  ADO.NET allows providers
            to specify the manner in which parameters work.  This causes a
            great deal of ambiguity in how to deal with them in code.  This
            class allows the client to determine how to bind parameters to
            the ADO.NET provider.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ParameterModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.ParameterModel"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.ParameterModel.#ctor(System.String,com.espertech.esper.client.ParameterStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.ParameterModel"/> class.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="style">The style.</param>
        </member>
        <member name="M:com.espertech.esper.client.ParameterModel.GetNamedParameter(System.Int32)">
            <summary>
            Gets the formatted version of the named paramter.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.ParameterModel.CreateDbCommand(System.Collections.Generic.IEnumerable{com.espertech.esper.util.PlaceholderParser.Fragment})">
            <summary>
            Creates the db command.
            </summary>
            <param name="parseFragments">The parse fragments.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.ParameterModel.CreatePseudoCommand(System.Collections.Generic.IEnumerable{com.espertech.esper.util.PlaceholderParser.Fragment})">
            <summary>
            Creates the a pseudo sql command that replaces parameters with
            question marks.  The question marks can then be parsed at the
            cache and converted back into native ADO.NET parameters.
            </summary>
            <param name="parseFragments">The parse fragments.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.ParameterModel.CreateDbParameters(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates the db parameters.
            </summary>
            <param name="command">The command.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:com.espertech.esper.client.ParameterModel.CreateDbParameters(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{com.espertech.esper.util.PlaceholderParser.Fragment})">
            <summary>
            Creates the db parameters.
            </summary>
            <param name="command">The command.</param>
            <param name="parseFragments">The parse fragments.</param>
        </member>
        <member name="P:com.espertech.esper.client.ParameterModel.Prefix">
            <summary>
            Gets or sets the prefix used before a parameter.
            </summary>
            <value>The parameter prefix.</value>
        </member>
        <member name="P:com.espertech.esper.client.ParameterModel.Style">
            <summary>
            Gets or sets the parameter style.
            </summary>
            <value>The parameter style.</value>
        </member>
        <member name="F:com.espertech.esper.client.ParameterStyle.Named">
            <summary>
            Provider expects parameters to be named.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.ParameterStyle.Positional">
            <summary>
            Provider expects parameters to be positional.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.PropertyAccessException">
            <summary>
            This exception is thrown to indicate a problem with a accessing a property of an
            <seealso cref="T:com.espertech.esper.client.EventBean"/>.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.PropertyAccessException.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">is the error message</param>
            <param name="propertyExpression">property expression</param>
        </member>
        <member name="M:com.espertech.esper.client.PropertyAccessException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for an inner exception and message.
            </summary>
            <param name="message">is the error message</param>
            <param name="cause">is the inner exception</param>
        </member>
        <member name="M:com.espertech.esper.client.PropertyAccessException.#ctor(System.String)">
            <summary>
            Constructor for an inner exception and message.
            </summary>
            <param name="message">is the error message</param>
        </member>
        <member name="M:com.espertech.esper.client.PropertyAccessException.#ctor(System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="cause">is the inner exception</param>
        </member>
        <member name="T:com.espertech.esper.client.scopetest.EPAssertionUtil">
            <summary>
            Assertion methods for event processing applications.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertEqualsExactOrder(System.String[][],System.String[][])">
            <summary>Deep compare two 2-dimensional string arrays for the exact same length of arrays and order. </summary>
            <param name="expected">is the expected values</param>
            <param name="actual">is the actual values</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertEqualsExactOrder(System.Object[][],System.String[],System.Object[][])">
            <summary>Compare two 2-dimensional arrays, and using property names for messages, against expected values. </summary>
            <param name="actual">array of objects</param>
            <param name="propertyNames">property names</param>
            <param name="expected">expected values</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertEqualsExactOrder(System.Collections.Generic.ICollection{System.Object[]},System.String[],System.Object[][])">
            <summary>Compare the collection of object arrays, and using property names for messages, against expected values. </summary>
            <param name="actual">colleciton of array of objects</param>
            <param name="propertyNames">property names</param>
            <param name="expected">expected values</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertEqualsExactOrder(System.Object[],System.Collections.ICollection)">
            <summary>Compare the objects in the expected arrays and actual collection assuming the exact same order. </summary>
            <param name="expected">is the expected values</param>
            <param name="actual">is the actual values</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertEqualsExactOrder(com.espertech.esper.client.EventBean[],System.Collections.Generic.IEnumerator{com.espertech.esper.client.EventBean})">
            <summary>Compare the enumerator-returned events against the expected events </summary>
            <param name="expected">is the expected values</param>
            <param name="actual">is the actual values</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertEqualsExactOrderUnderlying(System.Object[],System.Collections.Generic.IEnumerator{com.espertech.esper.client.EventBean})">
            <summary>Compare the underlying events returned by the enumerator to the expected values. </summary>
            <param name="expected">is the expected values</param>
            <param name="actual">is the actual values</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertEqualsExactOrderUnderlying(System.Object[],com.espertech.esper.client.EventBean[])">
            <summary>Comparing the underlying events to the expected events using equals-semantics. </summary>
            <param name="expected">is the expected values</param>
            <param name="actual">is the actual values</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.ToObjectCollection``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Converts to an object collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertEqualsExactOrder(System.Object[][],System.Collections.Generic.IList{System.Object[]})">
            <summary>Compare the objects in the 2-dimension object arrays assuming the exact same order. </summary>
            <param name="expected">is the expected values</param>
            <param name="actual">is the actual values</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertEqualsExactOrder(System.Object[],System.Object[])">
            <summary>Compare the objects in the two object arrays assuming the exact same order. </summary>
            <param name="expected">is the expected values</param>
            <param name="actual">is the actual values</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertSameExactOrder(System.Object[],System.Object[])">
            <summary>Reference-equals the objects in the two object arrays assuming the exact same order. </summary>
            <param name="expected">is the expected values</param>
            <param name="actual">is the actual values</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertEqualsExactOrder``1(``0[],``0[])">
            <summary>Compare the short values in the two  arrays assuming the exact same order. </summary>
            <param name="expected">is the expected values</param>
            <param name="actual">is the actual values</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertEqualsExactOrder``1(``0[],System.Nullable{``0}[])">
            <summary>Compare the short values in the two  arrays assuming the exact same order. </summary>
            <param name="expected">is the expected values</param>
            <param name="actual">is the actual values</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertEqualsExactOrder``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>Compare the objects returned by the enumerable to the an object array. </summary>
            <param name="expected">is the expected values</param>
            <param name="actual">is the actual values</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertEqualsExactOrder``1(``0[],System.Collections.Generic.IEnumerator{``0})">
            <summary>Compare the objects returned by the enumerator to the an object array. </summary>
            <param name="expected">is the expected values</param>
            <param name="actual">is the actual values</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertEqualsAnyOrder``1(``0[],System.Collections.Generic.ICollection{``0})">
            <summary>Assert that each integer value in the expected array is contained in the actual array. </summary>
            <param name="expected">is the expected values</param>
            <param name="actual">is the actual values</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.SmartEquals``1(``0,``0)">
            <summary>
            Performs an intelligent equality test.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="valueA">The value A.</param>
            <param name="valueB">The value B.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertEqualsAnyOrder``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>Compare the two object arrays allowing any order. </summary>
            <param name="expected">is the expected values</param>
            <param name="actual">is the actual values</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertPropsPerRow(System.Collections.Generic.IEnumerator{com.espertech.esper.client.EventBean},System.Collections.Generic.IEnumerator{com.espertech.esper.client.EventBean},System.String[],System.Object[][])">
            <summary>Compare the property values returned by events of both iterators with the expected values, using exact-order semantics. </summary>
            <param name="enumerator">provides events</param>
            <param name="safeEnumerator">provides events</param>
            <param name="propertyNames">array of property names</param>
            <param name="expected">expected values</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertPropsPerRowAnyOrder(System.Collections.Generic.IEnumerator{com.espertech.esper.client.EventBean},System.Collections.Generic.IEnumerator{com.espertech.esper.client.EventBean},System.String[],System.Object[][])">
            <summary>Compare the property values returned by events of both iterators with the expected values, using any-order semantics. </summary>
            <param name="enumerator">provides events</param>
            <param name="safeEnumerator">provides events</param>
            <param name="propertyNames">array of property names</param>
            <param name="expected">expected values</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertPropsPerRowAnyOrder(System.Collections.Generic.IEnumerator{com.espertech.esper.client.EventBean},System.String[],System.Object[][])">
            <summary>Compare the property values returned by events of the enumerator with the expected values, using any-order semantics. </summary>
            <param name="enumerator">provides events</param>
            <param name="propertyNames">array of property names</param>
            <param name="expected">expected values</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertPropsPerRow(System.Collections.Generic.IEnumerator{com.espertech.esper.client.EventBean},System.String[],System.Object[][])">
            <summary>Compare the property values returned by events of both iterators with the expected values, using exact-order semantics. </summary>
            <param name="enumerator">provides events</param>
            <param name="propertyNames">array of property names</param>
            <param name="expected">expected values</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertPropsPerRow(System.Collections.Generic.IList{System.Object[]},System.String[],System.Object[][])">
            <summary>Assert that property values of rows, wherein each row can either be Map or PONO objects, matches the expected values. </summary>
            <param name="received">array of objects may contain Map and PONO events</param>
            <param name="propertyNames">property names</param>
            <param name="expected">expected value</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertPropsPerRow(System.Collections.Generic.IDictionary{System.String,System.Object}[],System.String[],System.Object[][])">
            <summary>Compare the Map values identified by property names against expected values. </summary>
            <param name="actual">array of Maps, one for each row</param>
            <param name="propertyNames">property names</param>
            <param name="expected">expected values</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertPropsPerRow(com.espertech.esper.client.EventBean[],System.String[],System.Object[][])">
            <summary>Compare the property values of events with the expected values, using exact-order semantics. </summary>
            <param name="received">provides events</param>
            <param name="propertyNames">array of property names</param>
            <param name="expected">expected values</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertPropsPerRow(com.espertech.esper.client.EventBean[],System.String[],System.Object[][],System.String)">
            <summary>Compare the property values of events with the expected values, using exact-order semantics. </summary>
            <param name="actual">provides events</param>
            <param name="propertyNames">array of property names</param>
            <param name="expected">expected values</param>
            <param name="streamName">an optional name for the stream for use in messages</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertPropsPerRowAnyOrder(com.espertech.esper.client.EventBean[],System.String[],System.Object[][])">
            <summary>Compare the property values of events with the expected values, using any-order semantics. </summary>
            <param name="actual">provides events</param>
            <param name="propertyNames">array of property names</param>
            <param name="expected">expected values</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertProps(com.espertech.esper.client.EventBean,System.String[],System.Object[])">
            <summary>Assert that the property values of a single event match the expected values. </summary>
            <param name="received">provides events</param>
            <param name="propertyNames">array of property names</param>
            <param name="expected">expected values</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertProps(com.espertech.esper.collection.UniformPair{com.espertech.esper.client.EventBean},System.String[],System.Object[],System.Object[])">
            <summary>Assert that the property values of a new event and a removed event match the expected insert and removed values. </summary>
            <param name="received">provides events</param>
            <param name="propertyNames">array of property names</param>
            <param name="expectedInsert">expected values insert stream</param>
            <param name="expectedRemoved">expected values remove stream</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertPropsPerRow(com.espertech.esper.collection.UniformPair{com.espertech.esper.client.EventBean[]},System.String[],System.Object[][],System.Object[][])">
            <summary>Assert that the property values of a new event and a removed event match the expected insert and removed values. </summary>
            <param name="received">provides events</param>
            <param name="propertyNames">array of property names</param>
            <param name="expectedInsert">expected values insert stream</param>
            <param name="expectedRemoved">expected values remove stream</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertPropsPerRow(com.espertech.esper.collection.UniformPair{com.espertech.esper.client.EventBean[]},System.String,System.Object[],System.Object[])">
            <summary>Assert that the property values of the events (insert and remove pair) match the expected insert and removed values for a single property. </summary>
            <param name="received">provides events</param>
            <param name="propertyName">property name</param>
            <param name="expectedInsert">expected values insert stream</param>
            <param name="expectedRemoved">expected values remove stream</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertUnderlyingPerRow(com.espertech.esper.collection.UniformPair{com.espertech.esper.client.EventBean[]},System.Object[],System.Object[])">
            <summary>Assert that the underlying objects of the events (insert and remove pair) match the expected insert and removed objects.  </summary>
            <param name="received">provides events</param>
            <param name="expectedUnderlyingInsert">expected underlying object insert stream</param>
            <param name="expectedUnderlyingRemove">expected underlying object remove stream</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertAllPropsSortedByName(com.espertech.esper.client.EventBean,System.Object[])">
            <summary>Asserts that the property values of a single event, using property names as provided by the event type in sorted order by property name, match against the expected values. </summary>
            <param name="received">provides events</param>
            <param name="expected">expected values</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertPropsMap(System.Collections.Generic.IDictionary{System.String,System.Object},System.String[],System.Object[])">
            <summary>Compare the values of a Map against the expected values. </summary>
            <param name="received">provides events</param>
            <param name="expected">expected values</param>
            <param name="propertyNames">property names to assert</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertPropsObjectArray(System.Object[],System.String[],System.Object[])">
            <summary>Compare the values of a object array (single row) against the expected values. </summary>
            <param name="received">provides properties</param>
            <param name="expected">expected values</param>
            <param name="propertyNames">property names to assert</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertPropsPONO(System.Object,System.String[],System.Object[])">
            <summary>Compare the properties of an object against the expected values. </summary>
            <param name="propertyNames">property names</param>
            <param name="received">provides events</param>
            <param name="expected">expected values</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertEqualsAnyOrder(com.espertech.esper.client.EventBean[][],com.espertech.esper.client.EventBean[][])">
            <summary>Compare two 2-dimensional event arrays. </summary>
            <param name="expected">expected values</param>
            <param name="actual">actual values</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertSameAnyOrder(System.Object[][],System.Object[][])">
            <summary>Compare two 2-dimensional object arrays using reference-equals semantics. </summary>
            <param name="expected">expected values</param>
            <param name="actual">actual values</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertAllBooleanTrue(System.Object[])">
            <summary>Asserts that all values in the given object array are bool-typed values and are true </summary>
            <param name="objects">values to assert that they are all true</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertTypeEqualsAnyOrder(System.Type[],System.Object[])">
            <summary>Assert the class of the objects in the object array matches the expected classes in the classes array. </summary>
            <param name="classes">is the expected class</param>
            <param name="objects">is the objects to check the class for</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.EnumeratorToArray(System.Collections.Generic.IEnumerator{com.espertech.esper.client.EventBean})">
            <summary>Convert an enumerator of event beans to an array of event beans. </summary>
            <param name="enumerator">to convert</param>
            <returns>array of events</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.EnumeratorToArrayUnderlying(System.Collections.Generic.IEnumerator{com.espertech.esper.client.EventBean})">
            <summary>Convert an enumerator of event beans to an array of underlying objects. </summary>
            <param name="enumerator">to convert</param>
            <returns>array of event underlying objects</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.EnumeratorCount``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>Count the number of object provided by an enumerator. </summary>
            <param name="enumerator">to count</param>
            <param name="&lt;T&gt;">type</param>
            <returns>count</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertPropsPerRow(com.espertech.esper.client.EventBean[],System.Collections.Generic.IList{System.Collections.Generic.IDictionary{System.String,System.Object}})">
            <summary>Compare properties of events against a list of maps. </summary>
            <param name="received">actual events</param>
            <param name="expected">expected values</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertPropsPerRow(System.Collections.Generic.IEnumerator{com.espertech.esper.client.EventBean},System.Collections.Generic.IList{System.Collections.Generic.IDictionary{System.String,System.Object}})">
            <summary>Compare properties of events against a list of maps. </summary>
            <param name="enumerator">actual events</param>
            <param name="expected">expected values</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.ConcatenateArray(System.Object[],System.Object[])">
            <summary>Concatenate two arrays. </summary>
            <param name="srcOne">array to concatenate</param>
            <param name="srcTwo">array to concatenate</param>
            <returns>concatenated array</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.ConcatenateArray2Dim(System.Object[][],System.Object[][][])">
            <summary>Concatenate two arrays. </summary>
            <param name="first">array to concatenate</param>
            <param name="more">array to concatenate</param>
            <returns>concatenated array</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.ConcatenateArray(System.Object[][])">
            <summary>Concatenate multiple arrays. </summary>
            <param name="more">arrays to concatenate</param>
            <returns>concatenated array</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.Sort(System.Collections.Generic.IEnumerator{com.espertech.esper.client.EventBean},System.String)">
            <summary>Sort events according to natural ordering of the values or a property. </summary>
            <param name="events">to sort</param>
            <param name="property">name of property providing sort values</param>
            <returns>sorted array</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.Sort(com.espertech.esper.client.EventBean[],System.String)">
            <summary>Sort events according to natural ordering of the values or a property. </summary>
            <param name="events">to sort</param>
            <param name="property">name of property providing sort values</param>
            <returns>sorted array</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertNotContains(System.String[],System.String[])">
            <summary>Assert that a string set does not contain one or more values. </summary>
            <param name="stringSet">to compare against</param>
            <param name="values">to find</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertContains(System.String[],System.String[])">
            <summary>Assert that a string set does contain each of one or more values. </summary>
            <param name="stringSet">to compare against</param>
            <param name="values">to find</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.GetUnderlying(com.espertech.esper.client.EventBean[])">
            <summary>Return an array of underlying objects for an array of events. </summary>
            <param name="events">to return underlying objects</param>
            <returns>events</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertPropsAllValuesSame(com.espertech.esper.client.EventBean,System.String[],System.Object)">
            <summary>Assert that all properties of an event have the same value as passed in. </summary>
            <param name="received">to inspect</param>
            <param name="propertyNames">property names</param>
            <param name="expected">value</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.EventsToObjectArr(com.espertech.esper.client.EventBean[],System.String)">
            <summary>Extract the property value of the event property for the given events and return an object array of values. </summary>
            <param name="events">to extract value from</param>
            <param name="propertyName">name of property to extract values for</param>
            <returns>value object array</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.EventsToObjectArr(com.espertech.esper.client.EventBean[],System.String[])">
            <summary>Extract the property value of the event properties for the given events and return an object array of values. </summary>
            <param name="events">to extract value from</param>
            <param name="propertyNames">names of properties to extract values for</param>
            <returns>value object array</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.EnumeratorToObjectArr(System.Collections.Generic.IEnumerator{com.espertech.esper.client.EventBean},System.String)">
            <summary>Extract the property value of the event property for the given events and return an object array of values. </summary>
            <param name="enumerator">events to extract value from</param>
            <param name="propertyName">name of property to extract values for</param>
            <returns>value object array</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.EnumeratorToObjectArr(System.Collections.Generic.IEnumerator{com.espertech.esper.client.EventBean},System.String[])">
            <summary>Extract the property value of the event properties for the given events and return an object array of values. </summary>
            <param name="enumerator">events to extract value from</param>
            <param name="propertyNames">names of properties to extract values for</param>
            <returns>value object array</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.CompareEqualsExactOrder(com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean[])">
            <summary>Compare the events in the two object arrays assuming the exact same order. </summary>
            <param name="actual">is the actual results</param>
            <param name="expected">is the expected values</param>
            <returns>indicate whether compared successfully</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.CompareRefExactOrder(System.Object[],System.Object[])">
            <summary>Reference-compare the objects in the two object arrays assuming the exact same order. </summary>
            <param name="actual">is the actual results</param>
            <param name="expected">is the expected values</param>
            <returns>indicate whether compared successfully</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertPropsPerRow(System.Object[],System.String[],System.Object[][])">
            <summary>Assert that property values of rows, wherein each row can either be Map or PONO objects, matches the expected values. </summary>
            <param name="received">array of objects may contain Map and PONO events</param>
            <param name="propertyNames">property names</param>
            <param name="expected">expected value</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertProps(System.Object,System.String[],System.Object[])">
            <summary>Assert that property values, wherein the row can either be a Map or a PONO object, matches the expected values. </summary>
            <param name="received">Map or PONO</param>
            <param name="propertyNames">property names</param>
            <param name="expected">expected value</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.ToObjectArray(System.Object)">
            <summary>For a given array, copy the array elements into a new array of Object[] type. </summary>
            <param name="array">input array</param>
            <returns>object array</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertEqualsAllowArray(System.String,System.Object,System.Object)">
            <summary>Assert that two property values are the same, allowing arrays as properties. </summary>
            <param name="message">to use</param>
            <param name="expected">expected value</param>
            <param name="actual">actual value</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertProps(com.espertech.esper.client.EventBean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Assert that the event properties of the event match the properties provided by the map, taking the map properties as the comparison source. </summary>
            <param name="received">event</param>
            <param name="expected">expected values</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertEqualsIgnoreNewline(System.String,System.String)">
            <summary>Compare two strings removing all newline characters. </summary>
            <param name="expected">expected value</param>
            <param name="received">received value</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertMapOfCollection``1(System.Collections.Generic.IDictionary{System.Object,``0},System.String[],System.String[],com.espertech.esper.client.scopetest.EPAssertionUtil.AssertionCollectionValueString)">
            <summary>Assert that a map of collections (IDictionary&lt;String, ICollection&gt;) has expected keys and values. </summary>
            <param name="map">of string keys and collection-type values</param>
            <param name="keys">array of key values</param>
            <param name="expectedList">for each key a string that is a comma-separated list of values</param>
            <param name="collectionValue">the function to apply to each collection value to convert to a string</param>
        </member>
        <member name="T:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertionCollectionValueString">
            <summary>Callback for extracting individual collection items for assertion. </summary>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.EPAssertionUtil.AssertionCollectionValueString.ExtractValue(System.Object)">
            <summary>Extract value. </summary>
            <param name="collectionItem">to extract from</param>
            <returns>extracted value</returns>
        </member>
        <member name="T:com.espertech.esper.client.scopetest.ScopeTestHelper">
            <summary>
            Helper for asserting conditions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.ScopeTestHelper.AssertFalse(System.Boolean)">
            <summary>Assert a condition is false. </summary>
            <param name="condition">to assert</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.ScopeTestHelper.AssertFalse(System.String,System.Boolean)">
            <summary>Assert a condition is false. </summary>
            <param name="message">an optional message</param>
            <param name="condition">to assert</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.ScopeTestHelper.AssertTrue(System.Boolean)">
            <summary>Assert a condition is true. </summary>
            <param name="condition">to assert</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.ScopeTestHelper.AssertTrue(System.String,System.Boolean)">
            <summary>Assert a condition is true. </summary>
            <param name="message">an optional message</param>
            <param name="condition">to assert</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.ScopeTestHelper.AssertEquals(System.String,System.Object,System.Object)">
            <summary>Assert that two values equal. </summary>
            <param name="message">an optional message</param>
            <param name="expected">expected value</param>
            <param name="actual">actual value</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.ScopeTestHelper.AssertEquals(System.Object,System.Object)">
            <summary>Assert that two values equal. </summary>
            <param name="expected">expected value</param>
            <param name="actual">actual value</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.ScopeTestHelper.Fail">
            <summary>Fail assertion. </summary>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.ScopeTestHelper.AssertSame(System.String,System.Object,System.Object)">
            <summary>Assert that two values are the same. </summary>
            <param name="message">an optional message</param>
            <param name="expected">expected value</param>
            <param name="actual">actual value</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.ScopeTestHelper.AssertSame(System.Object,System.Object)">
            <summary>Assert that two values are the same. </summary>
            <param name="expected">expected value</param>
            <param name="actual">actual value</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.ScopeTestHelper.AssertNull(System.String,System.Object)">
            <summary>Assert that a value is null. </summary>
            <param name="message">an optional message</param>
            <param name="object">the object to check</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.ScopeTestHelper.AssertNotNull(System.Object)">
            <summary>Assert that a value is not null. </summary>
            <param name="object">the object to check</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.ScopeTestHelper.AssertNull(System.Object)">
            <summary>Assert that a value is null. </summary>
            <param name="object">the object to check</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.ScopeTestHelper.FailNotSame(System.String,System.Object,System.Object)">
            <summary>Fail assertion formatting a message for not-same. </summary>
            <param name="message">an optional message</param>
            <param name="expected">expected value</param>
            <param name="actual">actual value</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.ScopeTestHelper.FailNotEquals(System.String,System.Object,System.Object)">
            <summary>Fail assertion formatting a message for not-equals. </summary>
            <param name="message">an optional message</param>
            <param name="expected">expected value</param>
            <param name="actual">actual value</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.ScopeTestHelper.Fail(System.String)">
            <summary>Fail assertion. </summary>
            <param name="message">an optional message</param>
        </member>
        <member name="T:com.espertech.esper.client.scopetest.SupportSubscriber">
            <summary>
            Subscriber for that retains the events it receives for use in assertions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportSubscriber.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportSubscriber.Update(System.Object[],System.Object[])">
            <summary>Receive events. </summary>
            <param name="newData">insert stream</param>
            <param name="oldData">remove stream</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportSubscriber.Reset">
            <summary>
            Reset subscriber, clearing all associated state.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportSubscriber.GetLastNewData">
            <summary>Returns the last array of events (insert stream) that were received. </summary>
            <returns>insert stream events or null if either a null value was received or when no events have been received since the last reset</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportSubscriber.GetAndResetLastNewData">
            <summary>Returns the last array of events (insert stream) that were received and resets the subscriber. </summary>
            <returns>insert stream events or null if either a null value was received or when no events have been received since the last reset</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportSubscriber.AssertOneGetNewAndReset">
            <summary>Asserts that exactly one insert stream event was received and no remove stream events, resets the listener clearing all state and returns the received event. </summary>
            <returns>single insert-stream event</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportSubscriber.AssertOneGetOldAndReset">
            <summary>Asserts that exactly one remove stream event was received and no insert stream events, resets the listener clearing all state and returns the received event. </summary>
            <returns>single remove-stream event</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportSubscriber.GetLastOldData">
            <summary>Returns the last array of remove-stream events that were received. </summary>
            <returns>remove stream events or null if either a null value was received or when no events have been received since the last reset</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportSubscriber.GetNewDataList">
            <summary>Get a list of all insert-stream event arrays received. </summary>
            <returns>list of event arrays</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportSubscriber.GetOldDataList">
            <summary>Get a list of all remove-stream event arrays received. </summary>
            <returns>list of event arrays</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportSubscriber.IsInvoked">
            <summary>Returns true if the subscriber was invoked at least once. </summary>
            <returns>invoked flag</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportSubscriber.GetAndClearIsInvoked">
            <summary>Returns true if the subscriber was invoked at least once and clears the invocation flag. </summary>
            <returns>invoked flag</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportSubscriber.GetNewDataListFlattened">
            <summary>Returns an event array that represents all insert-stream events received so far. </summary>
            <returns>event array</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportSubscriber.GetOldDataListFlattened">
            <summary>Returns an event array that represents all remove-stream events received so far. </summary>
            <returns>event array</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportSubscriber.GetDataListsFlattened">
            <summary>Returns a pair of insert and remove stream event arrays considering the all invocations. </summary>
            <returns>pair of event arrays, the first in the pair is the insert stream data, the second in the pair is the remove stream data</returns>
        </member>
        <member name="T:com.espertech.esper.client.scopetest.SupportSubscriberMRD">
            <summary>Subscriber for multi-row delivery that retains the events it receives for use in assertions. </summary>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportSubscriberMRD.Update(System.Object[][],System.Object[][])">
            <summary>
            Receive multi-row subscriber data through this methods.
            </summary>
            <param name="insertStream">new data</param>
            <param name="removeStream">removed data</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportSubscriberMRD.Reset">
            <summary>
            Reset subscriber, clearing all associated state.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportSubscriberMRD.IsInvoked">
            <summary>
            Returns true if the subscriber was invoked at least once.
            </summary>
            <returns>invoked flag</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportSubscriberMRD.GetAndClearIsInvoked">
            <summary>
            Returns true if the subscriber  was invoked at least once and clears the invocation flag.
            </summary>
            <returns>invoked flag</returns>
        </member>
        <member name="P:com.espertech.esper.client.scopetest.SupportSubscriberMRD.InsertStreamList">
            <summary>
            Returns all insert-stream events received so far.
            <para/> 
            The list contains an item for each delivery. Each item contains a row with the event and each event is itself a tuple (object array).
            </summary>
            <value>list of Object array-array</value>
        </member>
        <member name="P:com.espertech.esper.client.scopetest.SupportSubscriberMRD.RemoveStreamList">
            <summary>
            Returns all removed-stream events received so far. 
            <para/> 
            The list contains an item for each delivery. Each item contains a row with the event and each event is itself a tuple (object array).
            </summary>
            <value>list of Object array-array</value>
        </member>
        <member name="T:com.espertech.esper.client.scopetest.SupportUpdateListener">
            <summary>
            Update listener that retains the events it receives for use in assertions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportUpdateListener.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportUpdateListener.WaitForInvocation(System.Int64)">
            <summary>Wait for the listener invocation for up to the given number of milliseconds. </summary>
            <param name="msecWait">to wait</param>
            <throws>RuntimeException when no results were received</throws>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportUpdateListener.WaitForInvocation(System.Int64,System.Int32)">
            <summary>
            Wait for the listener invocation for up to the given number of milliseconds.
            </summary>
            <param name="msecWait">to wait</param>
            <param name="numberOfNewEvents">in any number of separate invocations required before returning</param>
            <throws>RuntimeException when no results or insufficient number of events were received</throws>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportUpdateListener.Reset">
            <summary>Reset listener, clearing all associated state. </summary>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportUpdateListener.GetLastNewData">
            <summary>Returns the last array of events (insert stream) that were received. </summary>
            <returns>insert stream events or null if either a null value was received or when no events have been received since the last reset</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportUpdateListener.GetLastOldData">
            <summary>Returns the last array of remove-stream events that were received. </summary>
            <returns>remove stream events or null if either a null value was received or when no events have been received since the last reset</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportUpdateListener.GetAndResetLastNewData">
            <summary>Returns the last array of events (insert stream) that were received and resets the listener. </summary>
            <returns>insert stream events or null if either a null value was received or when no events have been received since the last reset</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportUpdateListener.GetAndResetLastOldData">
            <summary>Returns the last array of events (insert stream) that were received and resets the listener. </summary>
            <returns>insert stream events or null if either a null value was received or when no events have been received since the last reset</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportUpdateListener.AssertOneGetNewAndReset">
            <summary>Asserts that exactly one insert stream event was received and no remove stream events, resets the listener clearing all state and returns the received event. </summary>
            <returns>single insert-stream event</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportUpdateListener.AssertOneGetOldAndReset">
            <summary>Asserts that exactly one remove stream event was received and no insert stream events, resets the listener clearing all state and returns the received event. </summary>
            <returns>single remove-stream event</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportUpdateListener.AssertPairGetIRAndReset">
            <summary>Asserts that exactly one insert stream event and exactly one remove stream event was received, resets the listener clearing all state and returns the received events as a pair. </summary>
            <returns>pair of insert-stream and remove-stream events</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportUpdateListener.AssertOneGetNew">
            <summary>Asserts that exactly one insert stream event was received not checking remove stream data, and returns the received event. </summary>
            <returns>single insert-stream event</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportUpdateListener.AssertOneGetOld">
            <summary>Asserts that exactly one remove stream event was received not checking insert stream data, and returns the received event. </summary>
            <returns>single remove-stream event</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportUpdateListener.GetNewDataList">
            <summary>Get a list of all insert-stream event arrays received. </summary>
            <returns>list of event arrays</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportUpdateListener.GetOldDataList">
            <summary>Get a list of all remove-stream event arrays received. </summary>
            <returns>list of event arrays</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportUpdateListener.GetAndClearIsInvoked">
            <summary>Returns true if the listener was invoked at least once and clears the invocation flag. </summary>
            <returns>invoked flag</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportUpdateListener.SetLastNewData(com.espertech.esper.client.EventBean[])">
            <summary>Set an array of events as the last insert-stream events received. </summary>
            <param name="lastNewData">to store</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportUpdateListener.SetLastOldData(com.espertech.esper.client.EventBean[])">
            <summary>Set an array of events as the last remove-stream events received. </summary>
            <param name="lastOldData">to store</param>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportUpdateListener.GetNewDataListFlattened">
            <summary>Returns an event array that represents all insert-stream events received so far. </summary>
            <returns>event array</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportUpdateListener.GetOldDataListFlattened">
            <summary>Returns an event array that represents all remove-stream events received so far. </summary>
            <returns>event array</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportUpdateListener.AssertInvokedAndReset">
            <summary>Returns a pair of insert and remove stream event arrays considering the last invocation only, asserting that only a single invocation occured, and resetting the listener. </summary>
            <returns>pair of event arrays, the first in the pair is the insert stream data, the second in the pair is the remove stream data</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportUpdateListener.GetDataListsFlattened">
            <summary>Returns a pair of insert and remove stream event arrays considering the all invocations. </summary>
            <returns>pair of event arrays, the first in the pair is the insert stream data, the second in the pair is the remove stream data</returns>
        </member>
        <member name="M:com.espertech.esper.client.scopetest.SupportUpdateListener.GetAndResetDataListsFlattened">
            <summary>Returns a pair of insert and remove stream event arrays considering the all invocations, and resets the listener. </summary>
            <returns>pair of event arrays, the first in the pair is the insert stream data, the second in the pair is the remove stream data</returns>
        </member>
        <member name="P:com.espertech.esper.client.scopetest.SupportUpdateListener.IsInvoked">
            <summary>Returns true if the listener was invoked at least once. </summary>
            <value>invoked flag</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.AccessProjectionExpressionBase">
            <summary>
            Represents the base expression for "first", "last" and "window" aggregation functions.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.ExpressionBase">
            <summary>
            Base expression.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.Expression">
            <summary>
            Interface representing an expression for use in select-clauses, where-clauses, having-clauses, order-by clauses and
            streams based on filters and pattern filter expressions.
            <para>
            Expressions are organized into a tree-like structure with nodes representing sub-expressions.
            </para>
            <para>
            Certain types of nodes have certain requirements towards the number or types of nodes that
            are expected as sub-expressions to an expression.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expression.ToEPL(System.IO.TextWriter,com.espertech.esper.client.soda.ExpressionPrecedenceEnum)">
            <summary>
            Renders the expressions and all it's child expression, in full tree depth, as a string in
            language syntax.
            </summary>
            <param name="writer">is the output to use</param>
            <param name="parentPrecedence">The parent precedence.</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.Expression.Children">
            <summary>
            Returns the list of sub-expressions (child expressions) to the current expression node.
            </summary>
            <returns>child expressions or empty list if there are no child expressions</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.Expression.TreeObjectName">
            <summary>
            Gets or sets the name of the tree object.
            </summary>
            <value>The name of the tree object.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.Expression.Precedence">
            <summary>
            Gets the precedence.
            </summary>
            <value>The precedence.</value>
        </member>
        <member name="M:com.espertech.esper.client.soda.ExpressionBase.#ctor">
            <summary>Ctor.</summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ExpressionBase.AddChild(com.espertech.esper.client.soda.Expression)">
            <summary>Adds a new child expression to the current expression.</summary>
            <param name="expression">to add</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.ExpressionBase.ToEPL(System.IO.TextWriter,com.espertech.esper.client.soda.ExpressionPrecedenceEnum)">
            <summary>
            Renders the expressions and all it's child expression, in full tree depth, as a string in
            language syntax.
            </summary>
            <param name="writer">is the output to use</param>
            <param name="parentPrecedence">The parent precedence.</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.ExpressionBase.ToPrecedenceFreeEPL(System.IO.TextWriter)">
            <summary>Renders the expressions and all it's child expression, in full tree depth, as a string in language syntax. </summary>
            <param name="writer">is the output to use</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.ExpressionBase.Children">
            <summary>Gets or sets the list of sub-expressions to the current expression.</summary>
            <returns>list of child expressions</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.ExpressionBase.Precedence">
            <summary>
            Gets the precedence.
            </summary>
            <value>The precedence.</value>
        </member>
        <member name="M:com.espertech.esper.client.soda.AccessProjectionExpressionBase.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.AccessProjectionExpressionBase.#ctor(com.espertech.esper.client.soda.Expression)">
            <summary>Ctor. </summary>
            <param name="expression">to aggregate</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.AccessProjectionExpressionBase.AggregationFunctionName">
            <summary>Returns the function name of the aggregation function. </summary>
            <value>function name</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.AccessProjectionExpressionBase.IsWildcard">
            <summary>Returns true for wildcard parameter. </summary>
            <value>wildcard indicator</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.AccessProjectionExpressionBase.StreamWildcard">
            <summary>Return stream name for stream-wild, if any. </summary>
            <value>stream wildcard</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.AnnotationAttribute">
            <summary>
            Represents a single annotation attribute, the value of which may itself be a single
            value, array or further annotations. 
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.AnnotationAttribute.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.AnnotationAttribute.#ctor(System.String,System.Object)">
            <summary>Ctor. </summary>
            <param name="name">annotation name</param>
            <param name="value">annotation value, could be a primitive, array or another annotation</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.AnnotationAttribute.Name">
            <summary>Returns annotation name. </summary>
            <returns>name</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.AnnotationAttribute.Value">
            <summary>Returns annotation value. </summary>
            <returns>value</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.AssignmentPair">
            <summary>
            An assignment to a variable or property name of an expression value.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.AssignmentPair.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.AssignmentPair.#ctor(System.String,com.espertech.esper.client.soda.Expression)">
            <summary>Ctor. </summary>
            <param name="name">property or variable</param>
            <param name="value">value to assign</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.AssignmentPair.Name">
            <summary>Returns property or variable name. </summary>
            <returns>name</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.AssignmentPair.Value">
            <summary>Returns expression to eval. </summary>
            <returns>eval expression</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.AttributePart">
            <summary>
            Represents a single annotation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.AttributePart.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.AttributePart.Copy(com.espertech.esper.client.soda.AttributePart)">
            <summary>Copy annotation values. </summary>
            <param name="other">to copy</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.AttributePart.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="name">of annotation</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.AttributePart.#ctor(System.String,System.Collections.Generic.IList{com.espertech.esper.client.soda.AnnotationAttribute})">
            <summary>Ctor. </summary>
            <param name="name">name of annotation</param>
            <param name="attributes">are the attribute values</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.AttributePart.AddValue(System.Object)">
            <summary>Add value. </summary>
            <param name="value">to add</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.AttributePart.AddValue(System.String,System.Object)">
            <summary>Add named value. </summary>
            <param name="name">name</param>
            <param name="value">value</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.AttributePart.ToEPL(System.IO.TextWriter,System.Collections.Generic.IList{com.espertech.esper.client.soda.AttributePart},com.espertech.esper.client.soda.EPStatementFormatter)">
            <summary>
            Print.
            </summary>
            <param name="writer">to print to</param>
            <param name="attributes">annotations</param>
            <param name="formatter">The formatter.</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.AttributePart.ToEPL(System.IO.TextWriter)">
            <summary>Print part. </summary>
            <param name="writer">to write to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.AttributePart.TreeObjectName">
            <summary>Returns the internal expression id assigned for tools to identify the expression. </summary>
            <returns>object name</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.AttributePart.Name">
            <summary>Returns annotation interface class name. </summary>
            <returns>name of class, can be fully qualified</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.AttributePart.Attributes">
            <summary>Returns annotation attributes. </summary>
            <returns>the attribute values</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.CompareListExpression">
            <summary>
            Represents a list-compare of the format "expression operator all/any (expressions)".
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CompareListExpression.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CompareListExpression.#ctor(System.Boolean,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="all">is all, false if any</param>
            <param name="operator">=, !=, &lt;, &gt;, &lt;=, &gt;=, &lt;&gt;</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.CompareListExpression.IsAll">
            <summary>
            Returns all flag, true for ALL and false for ANY.
            </summary>
            <value>indicator if all or any</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.CompareListExpression.Operator">
            <summary>Returns the operator. </summary>
            <value>operator</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.ContainedEventSelect">
            <summary>Represents a contained-event selection. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ContainedEventSelect.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ContainedEventSelect.#ctor(com.espertech.esper.client.soda.Expression)">
            <summary>Ctor. </summary>
            <param name="splitExpression">the property expression or other expression for splitting the event</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.ContainedEventSelect.ToEPL(System.IO.TextWriter,com.espertech.esper.client.soda.EPStatementFormatter)">
            <summary>Returns the EPL. </summary>
            <param name="writer">to write to</param>
            <param name="formatter">for newline-whitespace formatting</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.ContainedEventSelect.OptionalAsName">
            <summary>Returns the property alias. </summary>
            <value>alias</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.ContainedEventSelect.SelectClause">
            <summary>Returns the select clause. </summary>
            <value>select clause</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.ContainedEventSelect.WhereClause">
            <summary>Returns the where clause. </summary>
            <value>where clause</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.ContainedEventSelect.OptionalSplitExpressionTypeName">
            <summary>Returns the event type name assigned to events that result by applying the split (contained event) expression. </summary>
            <value>type name, or null if none assigned</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.ContainedEventSelect.SplitExpression">
            <summary>Returns the expression that returns the contained events. </summary>
            <value>contained event expression</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.ContextDescriptor">
            <summary>Interface for context dimension descriptors. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ContextDescriptor.ToEPL(System.IO.TextWriter,com.espertech.esper.client.soda.EPStatementFormatter)">
            <summary>Format as EPL. </summary>
            <param name="writer">output</param>
            <param name="formatter">formatter</param>
        </member>
        <member name="T:com.espertech.esper.client.soda.ContextDescriptorCategory">
            <summary>
            Category-segmented context.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ContextDescriptorCategory.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ContextDescriptorCategory.#ctor(System.Collections.Generic.IList{com.espertech.esper.client.soda.ContextDescriptorCategoryItem},com.espertech.esper.client.soda.Filter)">
            <summary>Ctor. </summary>
            <param name="items">categories</param>
            <param name="filter">event type and predicate</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.ContextDescriptorCategory.Items">
            <summary>Returns categories. </summary>
            <value>categories</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.ContextDescriptorCategory.Filter">
            <summary>Returns type name and predicate expressions (filter) </summary>
            <value>filter</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.ContextDescriptorCategoryItem">
            <summary>
            Context descriptor for categories.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ContextDescriptorCategoryItem.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ContextDescriptorCategoryItem.#ctor(com.espertech.esper.client.soda.Expression,System.String)">
            <summary>Ctor. </summary>
            <param name="expression">category expression</param>
            <param name="label">category label</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.ContextDescriptorCategoryItem.Expression">
            <summary>Returns the category expression. </summary>
            <value>expression</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.ContextDescriptorCategoryItem.Label">
            <summary>Returns the category label </summary>
            <value>category label</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.ContextDescriptorCondition">
            <summary>
            For use with overlapping or non-overlapping contexts, implementations represents a 
            condition for starting/initiating or ending/terminating a context.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ContextDescriptorCondition.ToEPL(System.IO.TextWriter,com.espertech.esper.client.soda.EPStatementFormatter)">
            <summary>Populate the EPL. </summary>
            <param name="writer">output</param>
            <param name="formatter">formatter</param>
        </member>
        <member name="T:com.espertech.esper.client.soda.ContextDescriptorConditionCrontab">
            <summary>
            Context condition that start/initiated or ends/terminates context partitions based on a crontab expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ContextDescriptorConditionCrontab.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ContextDescriptorConditionCrontab.#ctor(System.Collections.Generic.IList{com.espertech.esper.client.soda.Expression})">
            <summary>Ctor. </summary>
            <param name="crontabExpressions">crontab expressions returning number sets for each crontab position</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.ContextDescriptorConditionCrontab.CrontabExpressions">
            <summary>Returns the crontab expressions. </summary>
            <value>crontab</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.ContextDescriptorConditionFilter">
            <summary>
            Context condition that start/initiated or ends/terminates context partitions based on a filter expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ContextDescriptorConditionFilter.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ContextDescriptorConditionFilter.#ctor(com.espertech.esper.client.soda.Filter,System.String)">
            <summary>Ctor. </summary>
            <param name="filter">event filter</param>
            <param name="optionalAsName">tag name of the filtered events</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.ContextDescriptorConditionFilter.Filter">
            <summary>Returns the event stream filter. </summary>
            <value>filter</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.ContextDescriptorConditionFilter.OptionalAsName">
            <summary>Returns the tag name assigned, if any. </summary>
            <value>tag name</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.ContextDescriptorConditionPattern">
            <summary>
            Context condition that start/initiated or ends/terminates context partitions based on a pattern.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ContextDescriptorConditionPattern.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ContextDescriptorConditionPattern.#ctor(com.espertech.esper.client.soda.PatternExpr,System.Boolean)">
            <summary>Ctor. </summary>
            <param name="pattern">pattern expression</param>
            <param name="inclusive">if the events of the pattern should be included in the contextual statements</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.ContextDescriptorConditionPattern.Pattern">
            <summary>Returns the pattern expression. </summary>
            <value>pattern</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.ContextDescriptorConditionPattern.IsInclusive">
            <summary>
            Return the inclusive flag, meaning events that constitute the pattern match should be considered for 
            context-associated statements.
            </summary>
            <value>inclusive flag</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.ContextDescriptorConditionTimePeriod">
            <summary>
            Context condition that start/initiated or ends/terminates context partitions based on a time period.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ContextDescriptorConditionTimePeriod.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ContextDescriptorConditionTimePeriod.#ctor(com.espertech.esper.client.soda.Expression)">
            <summary>Ctor. </summary>
            <param name="timePeriod">time period expression</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.ContextDescriptorConditionTimePeriod.TimePeriod">
            <summary>Returns the time period expression </summary>
            <value>time period expression</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.ContextDescriptorHashSegmented">
            <summary>Hash-segmented context. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ContextDescriptorHashSegmented.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ContextDescriptorHashSegmented.#ctor(System.Collections.Generic.IList{com.espertech.esper.client.soda.ContextDescriptorHashSegmentedItem},System.Int32,System.Boolean)">
            <summary>Ctor. </summary>
            <param name="items">list of hash code functions and event types to apply to</param>
            <param name="granularity">a number between 1 and Integer.MAX for parallelism</param>
            <param name="preallocate">true to allocate each context partition at time of statement creation</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.ContextDescriptorHashSegmented.Items">
            <summary>Returns hash items. </summary>
            <value>hash items</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.ContextDescriptorHashSegmented.Granularity">
            <summary>Returns the granularity. </summary>
            <value>granularity</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.ContextDescriptorHashSegmented.IsPreallocate">
            <summary>Returns flag indicating whether to allocate context partitions upon statement creation, or only when actually referred to </summary>
            <value>preallocation flag</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.ContextDescriptorHashSegmentedItem">
            <summary>Context detail for a library-func and filter pair for the hash segmented context. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ContextDescriptorHashSegmentedItem.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ContextDescriptorHashSegmentedItem.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Filter)">
            <summary>Ctor. </summary>
            <param name="hashFunction">the hash function, expecting SingleRowMethodExpression</param>
            <param name="filter">the event types to apply to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.ContextDescriptorHashSegmentedItem.Filter">
            <summary>Returns the filter. </summary>
            <value>filter</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.ContextDescriptorHashSegmentedItem.HashFunction">
            <summary>Returns the hash function. </summary>
            <value>hash function</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.ContextDescriptorInitiatedTerminated">
            <summary>
            Context dimension descriptor for a start-and-end temporal (single instance) or 
            initiated-terminated (overlapping) context 
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ContextDescriptorInitiatedTerminated.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ContextDescriptorInitiatedTerminated.#ctor(com.espertech.esper.client.soda.ContextDescriptorCondition,com.espertech.esper.client.soda.ContextDescriptorCondition,System.Boolean)">
            <summary>Ctor. </summary>
            <param name="startCondition">the condition that starts/initiates a context partition</param>
            <param name="endCondition">the condition that ends/terminates a context partition</param>
            <param name="overlapping">true for overlapping contexts</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.ContextDescriptorInitiatedTerminated.StartCondition">
            <summary>Returns the condition that starts/initiates a context partition </summary>
            <value>start condition</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.ContextDescriptorInitiatedTerminated.EndCondition">
            <summary>Returns the condition that ends/terminates a context partition </summary>
            <value>end condition</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.ContextDescriptorInitiatedTerminated.IsOverlapping">
            <summary>Returns true for overlapping context, false for non-overlapping. </summary>
            <value>overlap indicator</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.ContextDescriptorKeyedSegmented">
            <summary>
            Context dimension information for keyed segmented context.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ContextDescriptorKeyedSegmented.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ContextDescriptorKeyedSegmented.#ctor(System.Collections.Generic.IList{com.espertech.esper.client.soda.ContextDescriptorKeyedSegmentedItem})">
            <summary>Ctor. </summary>
            <param name="items">key set descriptions</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.ContextDescriptorKeyedSegmented.Items">
            <summary>Returns the key set descriptions </summary>
            <value>list</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.ContextDescriptorKeyedSegmentedItem">
            <summary>Context detail for a key-filter pair for the keyed segmented context. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ContextDescriptorKeyedSegmentedItem.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ContextDescriptorKeyedSegmentedItem.#ctor(System.Collections.Generic.IList{System.String},com.espertech.esper.client.soda.Filter)">
            <summary>Ctor. </summary>
            <param name="propertyNames">list of property names</param>
            <param name="filter">event type name and optional filter predicates</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.ContextDescriptorKeyedSegmentedItem.Filter">
            <summary>Returns the filter. </summary>
            <value>filter</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.ContextDescriptorKeyedSegmentedItem.PropertyNames">
            <summary>Returns the property names. </summary>
            <value>list</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.ContextDescriptorNested">
            <summary>Nested context. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ContextDescriptorNested.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ContextDescriptorNested.#ctor(System.Collections.Generic.IList{com.espertech.esper.client.soda.CreateContextClause})">
            <summary>Ctor. </summary>
            <param name="contexts">the nested contexts</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.ContextDescriptorNested.Contexts">
            <summary>Returns the list of nested contexts </summary>
            <value>contexts</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.CreateContextClause">
            <summary>Create a context. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateContextClause.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateContextClause.#ctor(System.String,com.espertech.esper.client.soda.ContextDescriptor)">
            <summary>Ctor. </summary>
            <param name="contextName">context name</param>
            <param name="descriptor">context dimension descriptor</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateContextClause.ToEPL(System.IO.TextWriter,com.espertech.esper.client.soda.EPStatementFormatter)">
            <summary>Render as EPL. </summary>
            <param name="writer">to output to</param>
            <param name="formatter">formatter</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateContextClause.ContextName">
            <summary>Returns the context name </summary>
            <value>context name</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateContextClause.Descriptor">
            <summary>Returns the context dimension informatin </summary>
            <value>context descriptor</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.CreateDataFlowClause">
            <summary>Represents a create-variable syntax for creating a new variable. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateDataFlowClause.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateDataFlowClause.#ctor(System.String,System.Collections.Generic.IList{com.espertech.esper.client.soda.CreateSchemaClause},System.Collections.Generic.IList{com.espertech.esper.client.soda.DataFlowOperator})">
            <summary>Ctor. </summary>
            <param name="dataFlowName">data flow name</param>
            <param name="schemas">schemas</param>
            <param name="operators">operators</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateDataFlowClause.ToEPL(System.IO.TextWriter,com.espertech.esper.client.soda.EPStatementFormatter)">
            <summary>Render as EPL. </summary>
            <param name="writer">to output to</param>
            <param name="formatter">to use</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateDataFlowClause.DataFlowName">
            <summary>Returns the data flow name. </summary>
            <value>name</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateDataFlowClause.Schemas">
            <summary>Returns schemas. </summary>
            <value>schemas</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateDataFlowClause.Operators">
            <summary>Returns operators. </summary>
            <value>operator definitions</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.CreateExpressionClause">
            <summary>
            Clause for creating an expression for use across one or more statements.
            <para/>
            Both expressions and scripts can be created using this clause.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateExpressionClause.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateExpressionClause.#ctor(com.espertech.esper.client.soda.ExpressionDeclaration)">
            <summary>Ctor. </summary>
            <param name="expressionDeclaration">expression</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateExpressionClause.#ctor(com.espertech.esper.client.soda.ScriptExpression)">
            <summary>Ctor. </summary>
            <param name="scriptExpression">script</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateExpressionClause.ToEPL(System.IO.TextWriter)">
            <summary>EPL output </summary>
            <param name="writer">to write to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateExpressionClause.ExpressionDeclaration">
            <summary>Returns the expression declaration or null if script instead. </summary>
            <value>expression declaration</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateExpressionClause.ScriptExpression">
            <summary>Returns the script expression or null if declaring an EPL expression. </summary>
            <value>script expression</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.CreateIndexClause">
            <summary>Create an index on a named window. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateIndexClause.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateIndexClause.#ctor(System.String,System.String,System.Collections.Generic.List{com.espertech.esper.client.soda.CreateIndexColumn})">
            <summary>Ctor. </summary>
            <param name="indexName">index name</param>
            <param name="windowName">named window name</param>
            <param name="columns">columns indexed</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateIndexClause.#ctor(System.String,System.String,System.Collections.Generic.List{com.espertech.esper.client.soda.CreateIndexColumn},System.Boolean)">
            <summary>Ctor. </summary>
            <param name="indexName">index name</param>
            <param name="windowName">named window name</param>
            <param name="columns">columns indexed</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateIndexClause.#ctor(System.String,System.String,System.String[])">
            <summary>Ctor. </summary>
            <param name="windowName">is the name of the window to create</param>
            <param name="indexName">index name</param>
            <param name="properties">properties to index</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateIndexClause.#ctor(System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.soda.CreateIndexClause"/> class.
            </summary>
            <param name="windowName">is the name of the window to create</param>
            <param name="indexName">index name</param>
            <param name="properties">properties to index</param>
            <param name="isUnique">if set to <c>true</c> [is unique].</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateIndexClause.Create(System.String,System.String,System.String[])">
            <summary>Creates a clause to create a named window. </summary>
            <param name="windowName">is the name of the named window</param>
            <param name="properties">properties to index</param>
            <param name="indexName">name of index</param>
            <returns>create variable clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateIndexClause.Create(System.Boolean,System.String,System.String,System.String[])">
            <summary>Creates a clause to create a named window. </summary>
            <param name="windowName">is the name of the named window</param>
            <param name="properties">properties to index</param>
            <param name="indexName">name of index</param>
            <param name="unique">for unique index</param>
            <returns>create variable clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateIndexClause.ToEPL(System.IO.TextWriter)">
            <summary>Renders the clause in textual representation. </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateIndexClause.IndexName">
            <summary>Returns index name. </summary>
            <value>name of index</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateIndexClause.WindowName">
            <summary>Returns window name. </summary>
            <value>name of window</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateIndexClause.Columns">
            <summary>Returns columns. </summary>
            <value>columns</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateIndexClause.IsUnique">
            <summary>
            Gets or sets a value indicating whether this instance is unique.
            </summary>
            <value><c>true</c> if this instance is unique; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.CreateIndexColumn">
            <summary>
            Create an index on a named window.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateIndexColumn.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateIndexColumn.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="columnName">column name</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateIndexColumn.#ctor(System.String,com.espertech.esper.client.soda.CreateIndexColumnType)">
            <summary>Ctor. </summary>
            <param name="columnName">colum name</param>
            <param name="type">index type</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateIndexColumn.ToEPL(System.IO.TextWriter)">
            <summary>Renders the clause in textual representation. </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateIndexColumn.ColumnName">
            <summary>
            Gets or sets the column name.
            </summary>
            <value>The name of the column.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateIndexColumn.IndexColumnType">
            <summary>Returns the index type. </summary>
            <value>index type</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.CreateIndexColumnType">
            <summary>Enumeration to represents the index type. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.CreateIndexColumnType.HASH">
            <summary>Hash-index. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.CreateIndexColumnType.BTREE">
            <summary>Binary-tree (sorted) index. </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.CreateSchemaClause">
            <summary>Represents a create-schema syntax for creating a new event type. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateSchemaClause.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateSchemaClause.#ctor(System.String,System.Collections.Generic.ICollection{System.String},com.espertech.esper.client.soda.CreateSchemaClauseTypeDef)">
            <summary>Ctor. </summary>
            <param name="schemaName">name of type</param>
            <param name="types">are for model-after, could be multiple when declaring a variant stream, or a single fully-qualified class name</param>
            <param name="typeDefinition">type definition</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateSchemaClause.#ctor(System.String,System.Collections.Generic.IList{com.espertech.esper.client.soda.SchemaColumnDesc},System.Collections.Generic.ICollection{System.String})">
            <summary>Ctor. </summary>
            <param name="schemaName">name of type</param>
            <param name="columns">column definition</param>
            <param name="inherits">inherited types, if any</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateSchemaClause.#ctor(System.String,System.Collections.Generic.ICollection{System.String},System.Collections.Generic.IList{com.espertech.esper.client.soda.SchemaColumnDesc},System.Collections.Generic.ICollection{System.String},com.espertech.esper.client.soda.CreateSchemaClauseTypeDef)">
            <summary>Ctor. </summary>
            <param name="schemaName">name of type</param>
            <param name="types">are for model-after, could be multiple when declaring a variant stream, or a single fully-qualified class name</param>
            <param name="typeDefinition">for variant streams, map or object array</param>
            <param name="columns">column definition</param>
            <param name="inherits">inherited types, if any</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateSchemaClause.ToEPL(System.IO.TextWriter)">
            <summary>Render as EPL. </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateSchemaClause.SchemaName">
            <summary>Returns the type name, aka. schema name. </summary>
            <value>type name</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateSchemaClause.Types">
            <summary>Returns model-after types, i.e. (fully-qualified) class name or event type Name(s), multiple for variant types. </summary>
            <value>type names or class names</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateSchemaClause.Columns">
            <summary>Returns the column definition. </summary>
            <value>column def</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateSchemaClause.Inherits">
            <summary>Returns the names of event types inherited from, if any </summary>
            <value>types inherited</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateSchemaClause.TypeDefinition">
            <summary>
            Gets or sets the type definition.
            </summary>
            <value>The type definition.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateSchemaClause.StartTimestampPropertyName">
            <summary>Returns the property name of the property providing the start timestamp value. </summary>
            <value>start timestamp property name</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateSchemaClause.EndTimestampPropertyName">
            <summary>Returns the property name of the property providing the end timestamp value. </summary>
            <value>end timestamp property name</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateSchemaClause.CopyFrom">
            <summary>Returns the optional set of event type names that properties are copied from. </summary>
            <value>copy-from event types</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateSchemaClause.TreeObjectName">
            <summary>
            Gets or sets the id of expression assigned by tools.
            </summary>
            <value>The name of the tree object.</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.CreateSchemaClauseTypeDef">
            <summary>Represents a type definition for use with the create-schema syntax for creating a new event type. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.CreateSchemaClauseTypeDef.VARIANT">
            <summary>Variant type. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.CreateSchemaClauseTypeDef.MAP">
            <summary>Map underlying type. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.CreateSchemaClauseTypeDef.OBJECTARRAY">
            <summary>Object-array underlying type. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.CreateSchemaClauseTypeDef.NONE">
            <summary>Undefined (system default) underlying type. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateSchemaClauseTypeDefExtensions.Write(com.espertech.esper.client.soda.CreateSchemaClauseTypeDef,System.IO.TextWriter)">
            <summary>Write keyword according to type def. </summary>
            <param name="writer">to write to</param>
        </member>
        <member name="T:com.espertech.esper.client.soda.CreateVariableClause">
            <summary>Represents a create-variable syntax for creating a new variable. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateVariableClause.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateVariableClause.Create(System.String,System.String)">
            <summary>Creates a create-variable syntax for declaring a variable. </summary>
            <param name="variableType">is the variable type name</param>
            <param name="variableName">is the name of the variable</param>
            <returns>create-variable clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateVariableClause.Create(System.String,System.String,com.espertech.esper.client.soda.Expression)">
            <summary>Creates a create-variable syntax for declaring a variable. </summary>
            <param name="variableType">is the variable type name</param>
            <param name="variableName">is the name of the variable</param>
            <param name="expression">is the assignment expression supplying the initial value</param>
            <returns>create-variable clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateVariableClause.#ctor(System.String,System.String,com.espertech.esper.client.soda.Expression,System.Boolean)">
            <summary>Ctor. </summary>
            <param name="variableType">is the variable type name</param>
            <param name="variableName">is the name of the variable</param>
            <param name="optionalAssignment">is the optional assignment expression supplying the initial value, or null if theinitial value is null </param>
            <param name="constant">true for constant, false for regular variable</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateVariableClause.ToEPL(System.IO.TextWriter)">
            <summary>Render as EPL. </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateVariableClause.VariableType">
            <summary>Returns the variable type name. </summary>
            <value>type of the variable</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateVariableClause.VariableName">
            <summary>Returns the variable name. </summary>
            <value>name of the variable</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateVariableClause.OptionalAssignment">
            <summary>Returns the optional assignment expression, or null to initialize to a null value </summary>
            <value>assignment expression, if present</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateVariableClause.IsConstant">
            <summary>Returns indicator whether the variable is a constant. </summary>
            <value>constant false</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateVariableClause.IsArray">
            <summary>
            Gets or sets a value indicating whether this instance is array.
            </summary>
            <value><c>true</c> if this instance is array; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.CreateWindowClause">
            <summary>
            Create a named window, defining the parameter of the named window such as
            window name and data window view Name(s).
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateWindowClause.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateWindowClause.Create(System.String,com.espertech.esper.client.soda.View)">
            <summary>Creates a clause to create a named window. </summary>
            <param name="windowName">is the name of the named window</param>
            <param name="view">is a data window view</param>
            <returns>create window clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateWindowClause.Create(System.String,com.espertech.esper.client.soda.View[])">
            <summary>Creates a clause to create a named window. </summary>
            <param name="windowName">is the name of the named window</param>
            <param name="views">is the data window views</param>
            <returns>create window clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateWindowClause.AddView(System.String,System.String)">
            <summary>Adds an un-parameterized view to the named window. </summary>
            <param name="namespace">is the view namespace, for example "win" for most data windows</param>
            <param name="name">is the view name, for example "length" for a length window</param>
            <returns>named window creation clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateWindowClause.AddView(System.String,System.String,System.Collections.Generic.List{com.espertech.esper.client.soda.Expression})">
            <summary>Adds a parameterized view to the named window. </summary>
            <param name="namespace">is the view namespace, for example "win" for most data windows</param>
            <param name="name">is the view name, for example "length" for a length window</param>
            <param name="parameters">is a list of view parameters</param>
            <returns>named window creation clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateWindowClause.AddView(System.String,System.String,com.espertech.esper.client.soda.Expression[])">
            <summary>Adds a parameterized view to the named window. </summary>
            <param name="namespace">is the view namespace, for example "win" for most data windows</param>
            <param name="name">is the view name, for example "length" for a length window</param>
            <param name="parameters">is a list of view parameters</param>
            <returns>named window creation clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateWindowClause.#ctor(System.String,com.espertech.esper.client.soda.View[])">
            <summary>Ctor. </summary>
            <param name="windowName">is the name of the window to create</param>
            <param name="viewArr">is the list of data window views</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateWindowClause.#ctor(System.String,System.Collections.Generic.IList{com.espertech.esper.client.soda.View})">
            <summary>Ctor. </summary>
            <param name="windowName">is the name of the window to create</param>
            <param name="views">is a list of data window views</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateWindowClause.ToEPL(System.IO.TextWriter)">
            <summary>Renders the clause in textual representation. </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateWindowClause.ToEPLInsertPart(System.IO.TextWriter)">
            <summary>Renders the clause in textual representation. </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateWindowClause.SetInsert(System.Boolean)">
            <summary>
            Sets flag indicating that an insert from another named window should take place at the time of window creation.
            </summary>
            <param name="insert">true for insert from another named window</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateWindowClause.AddColumn(com.espertech.esper.client.soda.SchemaColumnDesc)">
            <summary>
            Adds a column for use when create-table syntax is used to define the named window type.
            </summary>
            <param name="col">column to add</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CreateWindowClause.ToEPLCreateTablePart(System.IO.TextWriter)">
            <summary>
            To-EPL for create-table syntax.
            </summary>
            <param name="writer">to use</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateWindowClause.WindowName">
            <summary>
            Returns the window name.
            </summary>
            <value>window name</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateWindowClause.Views">
            <summary>
            Returns the views onto the named window.
            </summary>
            <value>named window data views</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateWindowClause.IsInsert">
            <summary>
            Returns true if inserting from another named window, false if not.
            </summary>
            <value>insert from named window</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateWindowClause.Columns">
            <summary>
            Returns all columns for use when create-table syntax is used to define the named window type.
            </summary>
            <value>columns</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.CreateWindowClause.InsertWhereClause">
            <summary>
            Filter expression for inserting from another named window, or null if not inserting from another named window.
            </summary>
            <value>filter expression</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.CrontabFrequencyExpression">
            <summary>Frequency expression for use in crontab expressions. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CrontabFrequencyExpression.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CrontabFrequencyExpression.#ctor(com.espertech.esper.client.soda.Expression)">
            <summary>Ctor. </summary>
            <param name="numericParameter">the frequency value</param>
        </member>
        <member name="T:com.espertech.esper.client.soda.CrontabParameterExpression">
            <summary>
            Parameter expression such as last/lastweek/weekday/wildcard for use in crontab expressions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CrontabParameterExpression.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CrontabParameterExpression.#ctor(com.espertech.esper.client.soda.ScheduleItemType)">
            <summary>Ctor. </summary>
            <param name="type">of crontab parameter</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.CrontabParameterExpression.ItemType">
            <summary>Returns crontab parameter type. </summary>
            <value>crontab parameter type</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.CrontabParameterSetExpression">
            <summary>
            An expression for use in crontab provides all child expression as part of a parameter list.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.CrontabRangeExpression">
            <summary>
            Parameter expression for use in crontab expressions and representing a range.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CrontabRangeExpression.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CrontabRangeExpression.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Ctor. </summary>
            <param name="lowerBounds">provides lower bounds</param>
            <param name="upperBounds">provides upper bounds</param>
        </member>
        <member name="T:com.espertech.esper.client.soda.DataFlowOperator">
            <summary>Object model of a data flow operator declaration. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.DataFlowOperator.#ctor(System.Collections.Generic.IList{com.espertech.esper.client.soda.AttributePart},System.String,System.Collections.Generic.IList{com.espertech.esper.client.soda.DataFlowOperatorInput},System.Collections.Generic.IList{com.espertech.esper.client.soda.DataFlowOperatorOutput},System.Collections.Generic.IList{com.espertech.esper.client.soda.DataFlowOperatorParameter})">
            <summary>Ctor </summary>
            <param name="annotations">annotations</param>
            <param name="operatorName">operator name</param>
            <param name="input">input stream definitions</param>
            <param name="output">output stream definitions</param>
            <param name="parameters">parameters</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.DataFlowOperator.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.DataFlowOperator.ToEPL(System.IO.TextWriter,com.espertech.esper.client.soda.EPStatementFormatter)">
            <summary>Render to string. </summary>
            <param name="writer">to render</param>
            <param name="formatter">for formatting</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.DataFlowOperator.Annotations">
            <summary>Returns the annotations. </summary>
            <value>annotations</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.DataFlowOperator.OperatorName">
            <summary>Returns the operator name. </summary>
            <value>operator name</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.DataFlowOperator.Input">
            <summary>Returns the input stream definitions, if any. </summary>
            <value>input streams</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.DataFlowOperator.Output">
            <summary>Returns the output stream definitions, if any. </summary>
            <value>output streams</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.DataFlowOperator.Parameters">
            <summary>
            Returns operator parameters. <para> Object values may be expressions, constants, JSON values or EPL statements. </para>
            </summary>
            <value>map of parameters</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.DataFlowOperatorInput">
            <summary>Represents an input port of an operator. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.DataFlowOperatorInput.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.DataFlowOperatorInput.#ctor(System.Collections.Generic.IList{System.String},System.String)">
            <summary>Ctor. </summary>
            <param name="inputStreamNames">names of input streams for the same port</param>
            <param name="optionalAsName">optional alias</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.DataFlowOperatorInput.InputStreamNames">
            <summary>Returns the input stream names. </summary>
            <value>input stream names</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.DataFlowOperatorInput.OptionalAsName">
            <summary>Returns the alias name. </summary>
            <value>alias</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.DataFlowOperatorOutput">
            <summary>Represents an output port of an operator. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.DataFlowOperatorOutput.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.DataFlowOperatorOutput.#ctor(System.String,System.Collections.Generic.IList{com.espertech.esper.client.soda.DataFlowOperatorOutputType})">
            <summary>Ctor. </summary>
            <param name="streamName">output stream name</param>
            <param name="typeInfo">type information</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.DataFlowOperatorOutput.StreamName">
            <summary>Returns the output stream name. </summary>
            <value>stream name.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.DataFlowOperatorOutput.TypeInfo">
            <summary>Returns output port type information </summary>
            <value>type info</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.DataFlowOperatorOutputType">
            <summary>Represents type information for data flow operators. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.DataFlowOperatorOutputType.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.DataFlowOperatorOutputType.#ctor(System.Boolean,System.String,System.Collections.Generic.IList{com.espertech.esper.client.soda.DataFlowOperatorOutputType})">
            <summary>Ctor. </summary>
            <param name="wildcard">true for wildcard type</param>
            <param name="typeOrClassname">type name</param>
            <param name="typeParameters">optional additional type parameters</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.DataFlowOperatorOutputType.IsWildcard">
            <summary>Returns true for wildcard type. </summary>
            <value>wildcard type indicator</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.DataFlowOperatorOutputType.TypeOrClassname">
            <summary>Returns the type name or class name. </summary>
            <value>name</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.DataFlowOperatorOutputType.TypeParameters">
            <summary>Returns optional additional type parameters </summary>
            <value>type params</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.DataFlowOperatorParameter">
            <summary>
            Object model of a data flow operator parameter.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.DataFlowOperatorParameter.#ctor(System.String,System.Object)">
            <summary>Ctor. </summary>
            <param name="parameterName">parameter name</param>
            <param name="parameterValue">parameter value</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.DataFlowOperatorParameter.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.DataFlowOperatorParameter.ToEPL(System.IO.TextWriter)">
            <summary>Render parameter. </summary>
            <param name="writer">to write to</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.DataFlowOperatorParameter.RenderValue(System.IO.TextWriter,System.Object)">
            <summary>Render prameter. </summary>
            <param name="writer">to render to</param>
            <param name="parameterValue">value</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.DataFlowOperatorParameter.ParameterName">
            <summary>
            Get the parameter name.
            </summary>
            <value>parameter name</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.DataFlowOperatorParameter.ParameterValue">
            <summary>
            Get the parameter value, which can be either a constant, an <seealso cref="T:com.espertech.esper.client.soda.Expression"/> 
            or a JSON object or a <seealso cref="T:com.espertech.esper.client.soda.EPStatementObjectModel"/>.
            </summary>
            <value>parameter value</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.DotExpression">
            <summary>
            Dot-expresson is for use in "(inner_expression).dot_expression".
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.DotExpression.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.DotExpression.#ctor(com.espertech.esper.client.soda.Expression)">
            <summary>Ctor. </summary>
            <param name="innerExpression">the expression in parenthesis</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.DotExpression.Add(System.String,System.Collections.Generic.IList{com.espertech.esper.client.soda.Expression})">
            <summary>Add a method to the chain of methods after the dot. </summary>
            <param name="methodName">to add</param>
            <param name="parameters">parameters to method</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.DotExpression.Add(System.String,System.Collections.Generic.IList{com.espertech.esper.client.soda.Expression},System.Boolean)">
            <summary>Add a method to the chain of methods after the dot, indicating the this segment is a property and does not need parenthesis and won't have paramaters. </summary>
            <param name="methodName">method name</param>
            <param name="parameters">parameter expressions</param>
            <param name="isProperty">property flag</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.DotExpression.Chain">
            <summary>Returns the method chain of all methods after the dot. </summary>
            <value>method name ane list of parameters</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.DotExpressionItem">
            <summary>
            Dot-expresson item is for use in "(inner_expression).dot_expression".
            <para/>
            Each item represent an individual chain item and may either be a method name with method parameters,
            or a (nested) property name typically with an empty list of parameters or for mapped properties a
            non-empty list of parameters.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.DotExpressionItem.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.DotExpressionItem.#ctor(System.String,System.Collections.Generic.IList{com.espertech.esper.client.soda.Expression},System.Boolean)">
            <summary>Ctor. </summary>
            <param name="name">the property (or nested property) or method name</param>
            <param name="parameters">are optional and should only be provided if this chain item is a method;Parameters are expressions for parameters to the method (use only for methods and not for properties unless mapped property). </param>
            <param name="isProperty">true if this is a nested property name</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.DotExpressionItem.Render(System.Collections.Generic.IList{com.espertech.esper.client.soda.DotExpressionItem},System.IO.TextWriter,System.Boolean)">
            <summary>Render to EPL. </summary>
            <param name="chain">chain to render</param>
            <param name="writer">writer to output to</param>
            <param name="prefixDot">indicator whether to prefix with "."</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.DotExpressionItem.Name">
            <summary>Gets or sets the method name or nested property name. </summary>
            <value>method name or nested property name</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.DotExpressionItem.Parameters">
            <summary>
            Gets or sets method parameters or parameters for mapped properties or empty list if this item represents a simple nested property.
            </summary>
            <value>parameter expressions</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.DotExpressionItem.IsProperty">
            <summary>Returns true if this dot-item is a property name. </summary>
            <value>true for property, false for method</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.ExpressionDeclaration">
            <summary>
            Represents a single expression declaration that applies to a given statement.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ExpressionDeclaration.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ExpressionDeclaration.#ctor(System.String,System.Collections.Generic.IList{System.String},com.espertech.esper.client.soda.Expression)">
            <summary>Ctor. </summary>
            <param name="name">of expression</param>
            <param name="parameterNames">expression paramater names</param>
            <param name="expression">the expression body</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.ExpressionDeclaration.ToEPL(System.IO.TextWriter,System.Collections.Generic.IEnumerable{com.espertech.esper.client.soda.ExpressionDeclaration},System.Action{System.IO.TextWriter})">
            <summary>Print. </summary>
            <param name="writer">to print to</param>
            <param name="expressionDeclarations">expression declarations</param>
            <param name="formatter">for newline-whitespace formatting</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.ExpressionDeclaration.ToEPL(System.IO.TextWriter)">
            <summary>Print part. </summary>
            <param name="writer">to write to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.ExpressionDeclaration.Name">
            <summary>Returns expression name. </summary>
            <value>name</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.ExpressionDeclaration.Expression">
            <summary>Returns the expression body. </summary>
            <value>expression body</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.ExpressionDeclaration.ParameterNames">
            <summary>Returns the paramater names. </summary>
            <value>paramater names</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.ExpressionPlaceholder">
            <summary>
            For use in expression as a placeholder to represent its child nodes.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.ExpressionPrecedenceEnum">
            <summary>Precendence levels for expressions. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.ExpressionPrecedenceEnum.UNARY">
            <summary>Precedence. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.ExpressionPrecedenceEnum.MULTIPLY">
            <summary>Precedence. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.ExpressionPrecedenceEnum.ADDITIVE">
            <summary>Precedence. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.ExpressionPrecedenceEnum.CONCAT">
            <summary>Precedence. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.ExpressionPrecedenceEnum.RELATIONAL_BETWEEN_IN">
            <summary>Precedence. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.ExpressionPrecedenceEnum.EQUALS">
            <summary>Precedence. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.ExpressionPrecedenceEnum.NEGATED">
            <summary>Precedence. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.ExpressionPrecedenceEnum.BITWISE">
            <summary>Precedence. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.ExpressionPrecedenceEnum.AND">
            <summary>Precedence. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.ExpressionPrecedenceEnum.OR">
            <summary>Precedence. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.ExpressionPrecedenceEnum.CASE">
            <summary>Precedence. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.ExpressionPrecedenceEnum.MINIMUM">
            <summary>Precedence. </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.FirstEverProjectionExpression">
            <summary>
            Represents the "firstever" aggregation function.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.FirstEverProjectionExpression.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.FirstEverProjectionExpression.#ctor(System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="isDistinct">true for distinct</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.FirstEverProjectionExpression.#ctor(com.espertech.esper.client.soda.Expression,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="expression">to aggregate</param>
            <param name="isDistinct">true for distinct</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.FirstEverProjectionExpression.IsDistinct">
            <summary>
            Returns true for distinct.
            </summary>
            <value>bool indicating distinct or not</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.FirstProjectionExpression">
            <summary>
            Represents the "first" aggregation function.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.FirstProjectionExpression.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.FirstProjectionExpression.#ctor(com.espertech.esper.client.soda.Expression)">
            <summary>
            Ctor.
            </summary>
            <param name="expression">to aggregate</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.FirstProjectionExpression.AggregationFunctionName">
            <summary>
            Returns the function name of the aggregation function.
            </summary>
            <value>function name</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.ForClause">
            <summary>
            A for-clause is a means to specify listener and observer delivery.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ForClause.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.soda.ForClause"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ForClause.Create">
            <summary>Creates an empty group-by clause, to add to via add methods. </summary>
            <returns>group-by clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.ForClause.ToEPL(System.IO.TextWriter)">
            <summary>Renders the clause in textual representation. </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.ForClause.Items">
            <summary>Returns for-clause items. </summary>
            <value>items</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.ForClauseItem">
            <summary>
            An item in a for-clause for controlling delivery of result events to listeners and subscribers.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ForClauseItem.#ctor">
            <summary>Ctor. <para /> Must set a keyword and optionally add expressions. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ForClauseItem.#ctor(com.espertech.esper.client.soda.ForClauseKeyword)">
            <summary>Ctor. </summary>
            <param name="keyword">the delivery keyword</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.ForClauseItem.Create(com.espertech.esper.client.soda.ForClauseKeyword)">
            <summary>Creates a for-clause with no expressions. </summary>
            <param name="keyword">keyword to use</param>
            <returns>for-clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.ForClauseItem.ToEPL(System.IO.TextWriter)">
            <summary>Renders the clause in textual representation. </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.ForClauseItem.Keyword">
            <summary>Returns the for-clause keyword. </summary>
            <value>keyword</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.ForClauseItem.Expressions">
            <summary>Returns for-clause expressions. </summary>
            <value>expressions</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.ForClauseKeyword">
            <summary>
            Keywords for use in the for-clause.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.ForClauseKeyword.GROUPED_DELIVERY">
            <summary>
            Grouped delivery - listener receives invocation per group.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.ForClauseKeyword.DISCRETE_DELIVERY">
            <summary>
            Discrete delivery - listener receives invocation per event.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ForClauseKeywordExtensions.GetName(com.espertech.esper.client.soda.ForClauseKeyword)">
            <summary>
            Returns for-keyword.
            </summary>
            <param name="keyword">The keyword.</param>
            <returns>keyword</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.IStreamBuiltinExpression">
            <summary>
            Returns true for insert stream and false for remove stream, same as the "istream()" builtin function.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.IStreamBuiltinExpression.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.LambdaExpression">
            <summary>
            Lambda-expression is an expression of the form "parameter =&gt; body" where-in the "=&gt;" reads as goes-to.
            <para/>
            The form "x =&gt; x * x" reads as "x goes to x times x", for an example expression that yields x multiplied by x.
            <para/>
            Used with expression declaration and with enumeration methods, for example, to parameterize by an expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.LambdaExpression.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.LambdaExpression.#ctor(System.Collections.Generic.IList{System.String})">
            <summary>Ctor. </summary>
            <param name="parameters">the lambda expression parameters</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.LambdaExpression.Parameters">
            <summary>Returns the lambda expression parameters. </summary>
            <value>lambda expression parameters</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.LastEverProjectionExpression">
            <summary>Represents the "lastever" aggregation function. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.LastEverProjectionExpression.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.LastEverProjectionExpression.#ctor(System.Boolean)">
            <summary>Ctor. </summary>
            <param name="isDistinct">true for distinct</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.LastEverProjectionExpression.#ctor(com.espertech.esper.client.soda.Expression,System.Boolean)">
            <summary>Ctor. </summary>
            <param name="expression">to aggregate</param>
            <param name="isDistinct">true for distinct</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.LastEverProjectionExpression.IsDistinct">
            <summary>Returns true for distinct. </summary>
            <value>bool indicating distinct or not</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.LastProjectionExpression">
            <summary>
            Represents the "last" aggregation function.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.LastProjectionExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.soda.LastProjectionExpression"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.LastProjectionExpression.#ctor(com.espertech.esper.client.soda.Expression)">
            <summary>
            Ctor.
            </summary>
            <param name="expression">to aggregate</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.LastProjectionExpression.AggregationFunctionName">
            <summary>
            Returns the function name of the aggregation function.
            </summary>
            <value>function name</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.MatchRecognizePatternElementType">
            <summary>Enum for match recognize pattern atom types. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.MatchRecognizePatternElementType.SINGLE">
            <summary>For single multiplicity. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.MatchRecognizePatternElementType.ZERO_TO_MANY">
            <summary>For greedy '*' multiplicity. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.MatchRecognizePatternElementType.ONE_TO_MANY">
            <summary>For greedy '+' multiplicity. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.MatchRecognizePatternElementType.ONE_OPTIONAL">
            <summary>For greedy '?' multiplicity. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.MatchRecognizePatternElementType.ZERO_TO_MANY_RELUCTANT">
            <summary>For reluctant '*' multiplicity. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.MatchRecognizePatternElementType.ONE_TO_MANY_RELUCTANT">
            <summary>For reluctant '+' multiplicity. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.MatchRecognizePatternElementType.ONE_OPTIONAL_RELUCTANT">
            <summary>For reluctant '?' multiplicity. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MatchRecognizePatternElementTypeExtensions.GetText(com.espertech.esper.client.soda.MatchRecognizePatternElementType)">
            <summary>Returns the multiplicity text. </summary>
            <returns>text</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.MatchRecognizeClause">
            <summary>Match-recognize clause. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MatchRecognizeClause.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MatchRecognizeClause.ToEPL(System.IO.TextWriter)">
            <summary>Renders the clause in textual representation. </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.MatchRecognizeClause.PartitionExpressions">
            <summary>Get partition expressions. </summary>
            <value>partition expressions</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.MatchRecognizeClause.Measures">
            <summary>Returns measures. </summary>
            <value>measures</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.MatchRecognizeClause.IsAll">
            <summary>Indicator whether all matches. </summary>
            <value>all matches</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.MatchRecognizeClause.SkipClause">
            <summary>Returns skip-clause. </summary>
            <value>skip-clause</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.MatchRecognizeClause.Defines">
            <summary>Returns the defines-clause </summary>
            <value>defines-clause</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.MatchRecognizeClause.IntervalClause">
            <summary>Returns the interval clause. </summary>
            <value>interval clause</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.MatchRecognizeClause.Pattern">
            <summary>Returns regex-pattern. </summary>
            <value>pattern</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.MatchRecognizeDefine">
            <summary>
            Define-clause in match-recognize expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MatchRecognizeDefine.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MatchRecognizeDefine.#ctor(System.String,com.espertech.esper.client.soda.Expression)">
            <summary>
            Ctor.
            </summary>
            <param name="name">variable name</param>
            <param name="expression">expression</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.MatchRecognizeDefine.Name">
            <summary>
            Returns the variable name.
            </summary>
            <value>variable name</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.MatchRecognizeDefine.Expression">
            <summary>
            Returns the expression.
            </summary>
            <value>expression</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.MatchRecognizeIntervalClause">
            <summary>Interval used within match recognize. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MatchRecognizeIntervalClause.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MatchRecognizeIntervalClause.#ctor(com.espertech.esper.client.soda.TimePeriodExpression)">
            <summary>Ctor. </summary>
            <param name="expression">interval expression</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.MatchRecognizeIntervalClause.Expression">
            <summary>Returns the interval expression. </summary>
            <value>expression</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.MatchRecognizeRegEx">
            <summary>
            Interface representing an expression for use in match-recognize.
            <para />
            Event row regular expressions are organized into a tree-like structure with nodes representing sub-expressions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MatchRecognizeRegEx.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MatchRecognizeRegEx.WriteEPL(System.IO.TextWriter)">
            <summary>Write EPL. </summary>
            <param name="writer">to use</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.MatchRecognizeRegEx.TreeObjectName">
            <summary>Returns id of expression assigned by tools. </summary>
            <value>id</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.MatchRecognizeRegEx.Children">
            <summary>Returns child nodes. </summary>
            <value>child nodes</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.MatchRecognizeRegExAlteration">
            <summary>
            Interface representing an expression for use in match-recognize.
            <para/>
            Event row regular expressions are organized into a tree-like structure
            with nodes representing sub-expressions. 
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.MatchRecognizeRegExAtom">
            <summary>
            Atom representing an expression for use in match-recognize.
            <para/>
            Event row regular expressions are organized into a tree-like structure with nodes
            representing sub-expressions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MatchRecognizeRegExAtom.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MatchRecognizeRegExAtom.#ctor(System.String,com.espertech.esper.client.soda.MatchRecognizePatternElementType)">
            <summary>Ctor. </summary>
            <param name="name">of variable</param>
            <param name="type">multiplicity</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.MatchRecognizeRegExAtom.Name">
            <summary>Returns variable name. </summary>
            <returns>name</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.MatchRecognizeRegExAtom.ElementType">
            <summary>Returns multiplicity. </summary>
            <returns>multiplicity</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.MatchRecognizeRegExConcatenation">
            <summary>
            Interface representing an expression for use in match-recognize.
            <para/>
            Event row regular expressions are organized into a tree-like structure with
            nodes representing sub-expressions. 
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.MatchRecognizeRegExNested">
            <summary>
            Atom representing an expression for use in match-recognize.
            <para/>
            Event row regular expressions are organized into a tree-like structure
            with nodes representing sub-expressions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MatchRecognizeRegExNested.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MatchRecognizeRegExNested.#ctor(com.espertech.esper.client.soda.MatchRecognizePatternElementType)">
            <summary>Ctor. </summary>
            <param name="type">multiplicity</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.MatchRecognizeRegExNested.ElementType">
            <summary>Returns multiplicity. </summary>
            <returns>multiplicity</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.MatchRecognizeRegExPlaceholder">
            <summary>
            For use in match recognize pattern expression as a placeholder to represent its child nodes.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.MatchRecognizeSkipClause">
            <summary>Skip clause enum for match recognize. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.MatchRecognizeSkipClause.TO_CURRENT_ROW">
            <summary>Skip to current row. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.MatchRecognizeSkipClause.TO_NEXT_ROW">
            <summary>Skip to next row. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.MatchRecognizeSkipClause.PAST_LAST_ROW">
            <summary>Skip past last row. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MatchRecognizeSkipClauseExtensions.GetText(com.espertech.esper.client.soda.MatchRecognizeSkipClause)">
            <summary>Returns clause text. </summary>
            <returns>textual</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.MethodInvocationStream">
            <summary>An stream that polls from a method. </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.Stream">
            <summary>
            An abstract base class for a named or unnamed stream.
            <para />
            Named streams provide an as-name for the stream, for example "select * from MyEvents(id=10) as StreamZero".
            Unnamed streams provide no as-name for the stream, for example "select * from MyEvents(id=10)".
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.Stream.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.Stream.ToEPLStream(System.IO.TextWriter,com.espertech.esper.client.soda.EPStatementFormatter)">
            <summary>Renders the stream in textual representation. </summary>
            <param name="writer">to output to</param>
            <param name="formatter">for newline-whitespace formatting</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.Stream.ToEPLStreamOptions(System.IO.TextWriter)">
            <summary>Renders the stream in textual representation any stream options, if present. </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.Stream.ToEPLStreamType(System.IO.TextWriter)">
            <summary>Renders the stream type under a non-complete textual representation for tool use </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.Stream.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="streamName">is null for unnamed streams, or a stream name for named streams.</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.Stream.ToEPL(System.IO.TextWriter,com.espertech.esper.client.soda.EPStatementFormatter)">
            <summary>Renders the clause in textual representation. </summary>
            <param name="writer">to output to</param>
            <param name="formatter">for newline-whitespace formatting</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.Stream.StreamName">
            <summary>Returns the stream name. </summary>
            <value>name of stream, or null if unnamed.</value>
        </member>
        <member name="M:com.espertech.esper.client.soda.MethodInvocationStream.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MethodInvocationStream.Create(System.String,System.String)">
            <summary>Creates a new method-invocation-based stream without parameters. </summary>
            <param name="className">is the name of the class providing the method</param>
            <param name="methodName">is the name of the public static method</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.MethodInvocationStream.Create(System.String,System.String,System.String)">
            <summary>Creates a new method-invocation-based stream without parameters. </summary>
            <param name="className">is the name of the class providing the method</param>
            <param name="methodName">is the name of the public static method</param>
            <param name="optStreamName">is the optional as-name of the stream, or null if unnamed</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.MethodInvocationStream.#ctor(System.String,System.String,System.String)">
            <summary>Ctor. </summary>
            <param name="className">is the name of the class providing the method</param>
            <param name="methodName">is the name of the public static method</param>
            <param name="optStreamName">is the optional as-name of the stream, or null if unnamed</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.MethodInvocationStream.AddParameter(com.espertech.esper.client.soda.Expression)">
            <summary>Adds a parameters to the method invocation. </summary>
            <param name="parameterExpression">is the expression to add</param>
            <returns>stream</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.MethodInvocationStream.ClassName">
            <summary>Returns the name of the class providing the method. </summary>
            <value>class name</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.MethodInvocationStream.MethodName">
            <summary>Returns the name of the static method to invoke in the from-clause. </summary>
            <value>method name</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.MethodInvocationStream.ParameterExpressions">
            <summary>Returns a list of expressions that are parameters to the method. </summary>
            <value>list of parameter expressions</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.NewOperatorExpression">
            <summary>
            The "new" operator is useful to format an event or event property from a list of column names and expressions.
            <para/>
            Useful with enumeration methods and with case-when clauses that return multiple result values, for example.
            <para/>
            Column names are part of the state and the number of column names must match the number of sub-expressions to the expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.NewOperatorExpression.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.NewOperatorExpression.#ctor(System.Collections.Generic.IList{System.String})">
            <summary>
            Ctor. The list of column names should match the number of expressions provided hereunder.
            </summary>
            <param name="columnNames">list of column names</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.NewOperatorExpression.ToPrecedenceFreeEPL(System.IO.TextWriter)">
            <summary>
            Renders the expressions and all it's child expression, in full tree depth, as a string in language syntax.
            </summary>
            <param name="writer">is the output to use</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.NewOperatorExpression.ColumnNames">
            <summary>Returns the column names. </summary>
            <value>colum names</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.NewOperatorExpression.Precedence">
            <summary>
            Gets the precedence.
            </summary>
            <value>The precedence.</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.OnClause">
            <summary>
            A clause to delete from a named window based on a triggering event arriving and
            correlated to the named window events to be deleted.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnClause.CreateOnDelete(System.String,System.String)">
            <summary>
            Creates an on-delete clause for deleting from a named window.
            </summary>
            <param name="windowName">is the named window name</param>
            <param name="asName">is the as-provided name of the named window</param>
            <returns>
            on-delete clause
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnClause.CreateOnInsertSplitStream">
            <summary>
            Creates a split-stream clause.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnClause.CreateOnSelect(System.String,System.String)">
            <summary>
            Creates an on-select clause for selecting from a named window.
            </summary>
            <param name="windowName">is the named window name</param>
            <param name="asName">is the as-provided name of the named window</param>
            <returns>
            on-select clause
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnClause.CreateOnUpdate(System.String,System.String,System.String,com.espertech.esper.client.soda.Expression)">
            <summary>Creates an on-update clause for updating a named window. </summary>
            <param name="windowName">is the named window name</param>
            <param name="asName">is the as-provided name of the named window</param>
            <param name="variableName">name of variable</param>
            <param name="expression">expression</param>
            <returns>on-update clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnClause.CreateOnSet(System.String,com.espertech.esper.client.soda.Expression)">
            <summary>
            Creates an on-set clause for setting variable values.
            </summary>
            <param name="variableName">is the name of the first variable to set, additional ones can be added to the clause itself</param>
            <param name="expression">is the assignment expression</param>
            <returns>
            on-set clause
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.OnDeleteClause">
            <summary>
            A clause to delete from a named window based on a triggering event arriving and
            correlated to the named window events to be deleted.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnDeleteClause.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.soda.OnDeleteClause"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnDeleteClause.Create(System.String,System.String)">
            <summary>
            Creates an on-delete clause.
            </summary>
            <param name="windowName">is the named window name</param>
            <param name="optionalAsName">is the optional as-provided name</param>
            <returns>
            on-delete clause
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnDeleteClause.#ctor(System.String,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="windowName">is the named window name</param>
            <param name="optionalAsName">is the as-provided name of the named window</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnDeleteClause.ToEPL(System.IO.TextWriter)">
            <summary>
            Renders the clause in textual representation.
            </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnDeleteClause.WindowName">
            <summary>
            Returns the name of the named window to delete from.
            </summary>
            <returns>
            named window name
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnDeleteClause.OptionalAsName">
            <summary>
            Returns the as-provided name for the named window.
            </summary>
            <returns>
            name or null
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.OnInsertSplitStreamClause">
            <summary>A clause to insert into zero, one or more streams based on criteria. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnInsertSplitStreamClause.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnInsertSplitStreamClause.Create(System.Boolean,System.Collections.Generic.List{com.espertech.esper.client.soda.OnInsertSplitStreamItem})">
            <summary>Creates a split-stream on-insert clause from an indicator whether to consider the first of all where-clauses, and a list of items. </summary>
            <param name="isFirst">true for first where-clause, false for all where-clauses fire</param>
            <param name="items">is a list of insert-into, select and optional where-clauses</param>
            <returns>split-stream on-insert clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnInsertSplitStreamClause.Create">
            <summary>Creates an split-stream on-insert clause considering only the first where-clause that matches. </summary>
            <returns>split-stream on-insert clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnInsertSplitStreamClause.#ctor(System.Boolean,System.Collections.Generic.List{com.espertech.esper.client.soda.OnInsertSplitStreamItem})">
            <summary>Ctor. </summary>
            <param name="isFirst">indicator whether only the first where-clause is to match or all where-clauses.</param>
            <param name="items">tuples of insert-into, select and where-clauses.</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnInsertSplitStreamClause.ToEPL(System.IO.TextWriter,com.espertech.esper.client.soda.EPStatementFormatter)">
            <summary>Renders the clause in textual representation. </summary>
            <param name="writer">to output to</param>
            <param name="formatter">for newline-whitespace formatting</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnInsertSplitStreamClause.AddItem(com.espertech.esper.client.soda.OnInsertSplitStreamItem)">
            <summary>
            Add a insert-into, select and where-clause.
            </summary>
            <param name="item">to add</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnInsertSplitStreamClause.IsFirst">
            <summary>
            Returns true for firing the insert-into for only the first where-clause that matches, or false for firing the insert-into for all where-clauses that match.
            </summary>
            <value>indicator first or all</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnInsertSplitStreamClause.Items">
            <summary>
            Returns a list of insert-into, select and where-clauses.
            </summary>
            <value>split-stream lines</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.OnInsertSplitStreamItem">
            <summary>
            Items within the split-stream syntax to contain a tuple of insert-into, select
            and where-clause.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnInsertSplitStreamItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.soda.OnInsertSplitStreamItem"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnInsertSplitStreamItem.#ctor(com.espertech.esper.client.soda.InsertIntoClause,com.espertech.esper.client.soda.SelectClause,com.espertech.esper.client.soda.Expression)">
            <summary>
            Ctor.
            </summary>
            <param name="insertInto">the insert-into clause</param>
            <param name="selectClause">the select-clause</param>
            <param name="whereClause">where-expression or null</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnInsertSplitStreamItem.Create(com.espertech.esper.client.soda.InsertIntoClause,com.espertech.esper.client.soda.SelectClause,com.espertech.esper.client.soda.Expression)">
            <summary>
            Factory method for split-stream items.
            </summary>
            <param name="insertInto">the insert-into clause</param>
            <param name="selectClause">the select-clause</param>
            <param name="whereClause">where-expression or null</param>
            <returns>
            split-stream item
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnInsertSplitStreamItem.InsertInto">
            <summary>
            Gets or sets the insert-into clause.
            </summary>
            <returns>
            insert-into clause
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnInsertSplitStreamItem.SelectClause">
            <summary>
            Gets or sets the select-clause.
            </summary>
            <returns>
            select-clause
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnInsertSplitStreamItem.WhereClause">
            <summary>
            Returns the optional where-clause.
            </summary>
            <returns>
            where-clause
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.OnMergeClause">
            <summary>A clause to insert, update or delete to/from a named window based on a triggering event arriving and correlated to the named window events to be updated. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnMergeClause.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnMergeClause.#ctor(System.String,System.String,System.Collections.Generic.IList{com.espertech.esper.client.soda.OnMergeMatchItem})">
            <summary>Ctor. </summary>
            <param name="windowName">is the named window name</param>
            <param name="optionalAsName">is the as-provided name of the named window</param>
            <param name="matchItems">is the matched and non-matched action items</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnMergeClause.Create(System.String,System.String,System.Collections.Generic.IList{com.espertech.esper.client.soda.OnMergeMatchItem})">
            <summary>Creates an on-update clause. </summary>
            <param name="windowName">is the named window name</param>
            <param name="optionalAsName">is the optional as-provided name</param>
            <param name="matchItems">is the matched and non-matched action items</param>
            <returns>on-update clause without assignments</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnMergeClause.ToEPL(System.IO.TextWriter,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.EPStatementFormatter)">
            <summary>Renders the clause in textual representation. </summary>
            <param name="writer">to output to</param>
            <param name="optionalWhereClause">where clause if present, or null</param>
            <param name="formatter">for newline-whitespace formatting</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnMergeClause.AddAction(com.espertech.esper.client.soda.OnMergeMatchItem)">
            <summary>Add a new action to the list of actions. </summary>
            <param name="action">to add</param>
            <returns>clause</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnMergeClause.WindowName">
            <summary>Returns the name of the named window to update. </summary>
            <value>named window name</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnMergeClause.OptionalAsName">
            <summary>Returns the as-provided name for the named window. </summary>
            <value>name or null</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnMergeClause.MatchItems">
            <summary>Returns all actions. </summary>
            <value>actions</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.OnMergeMatchedAction">
            <summary>
            Marker interface for an on-merge clause action item.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnMergeMatchedAction.ToEPL(System.IO.TextWriter)">
            <summary>
            Render to EPL.
            </summary>
            <param name="writer">to render to</param>
        </member>
        <member name="T:com.espertech.esper.client.soda.OnMergeMatchedDeleteAction">
            <summary>
            For use with on-merge clauses, deletes from a named window if matching rows are found.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnMergeMatchedDeleteAction.#ctor(com.espertech.esper.client.soda.Expression)">
            <summary>Ctor. </summary>
            <param name="whereClause">condition for action, or null if none required</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnMergeMatchedDeleteAction.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnMergeMatchedDeleteAction.WhereClause">
            <summary>Returns the action condition, or null if undefined. </summary>
            <value>condition</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.OnMergeMatchedInsertAction">
            <summary>For use with on-merge clauses, inserts into a named window if matching rows are not found. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnMergeMatchedInsertAction.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{com.espertech.esper.client.soda.SelectClauseElement},com.espertech.esper.client.soda.Expression,System.String)">
            <summary>Ctor. </summary>
            <param name="columnNames">insert-into column names, or empty list if none provided</param>
            <param name="selectList">select expression list</param>
            <param name="whereClause">optional condition or null</param>
            <param name="optionalStreamName">optionally a stream name for insert-into</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnMergeMatchedInsertAction.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnMergeMatchedInsertAction.WhereClause">
            <summary>Returns the action condition, or null if undefined. </summary>
            <value>condition</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnMergeMatchedInsertAction.ColumnNames">
            <summary>Returns the insert-into column names, if provided. </summary>
            <value>column names</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnMergeMatchedInsertAction.SelectList">
            <summary>Returns the select expressions. </summary>
            <value>expression list</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnMergeMatchedInsertAction.OptionalStreamName">
            <summary>Returns the insert-into stream name. </summary>
            <value>stream name</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.OnMergeMatchedUpdateAction">
            <summary>For use with on-merge clauses, updates rows in a named window if matching rows are found. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnMergeMatchedUpdateAction.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnMergeMatchedUpdateAction.#ctor(System.Collections.Generic.IList{com.espertech.esper.client.soda.AssignmentPair},com.espertech.esper.client.soda.Expression)">
            <summary>Ctor. </summary>
            <param name="assignments">assignments of values to columns</param>
            <param name="whereClause">optional condition or null</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnMergeMatchedUpdateAction.WhereClause">
            <summary>Returns the action condition, or null if undefined. </summary>
            <value>condition</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnMergeMatchedUpdateAction.Assignments">
            <summary>Returns the assignments to execute against any rows found in a named window </summary>
            <value>assignments</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.OnMergeMatchItem">
            <summary>As part of on-merge, this represents a single "matched" or "not matched" entry. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnMergeMatchItem.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnMergeMatchItem.#ctor(System.Boolean,com.espertech.esper.client.soda.Expression,System.Collections.Generic.IList{com.espertech.esper.client.soda.OnMergeMatchedAction})">
            <summary>Ctor. </summary>
            <param name="matched">true for matched, false for not-matched</param>
            <param name="optionalCondition">an optional additional filter</param>
            <param name="actions">one or more actions to take</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnMergeMatchItem.ToEPL(System.IO.TextWriter,com.espertech.esper.client.soda.EPStatementFormatter)">
            <summary>Renders the clause in textual representation. </summary>
            <param name="writer">to output to</param>
            <param name="formatter">for newline-whitespace formatting</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnMergeMatchItem.IsMatched">
            <summary>Returns true for matched, and false for not-matched. </summary>
            <value>matched or not-matched indicator</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnMergeMatchItem.OptionalCondition">
            <summary>Returns the condition to apply or null if none is provided. </summary>
            <value>condition</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnMergeMatchItem.Actions">
            <summary>Returns all actions. </summary>
            <value>actions</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.OnSelectClause">
            <summary>
            A clause to delete from a named window based on a triggering event arriving and
            correlated to the named window events to be deleted.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnSelectClause.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.soda.OnSelectClause"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnSelectClause.Create(System.String,System.String)">
            <summary>
            Creates an on-select clause.
            </summary>
            <param name="windowName">is the named window name</param>
            <param name="optionalAsName">is the optional name</param>
            <returns>
            on-select clause
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnSelectClause.#ctor(System.String,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="windowName">is the named window name</param>
            <param name="optionalAsName">is the name of the named window</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnSelectClause.ToEPL(System.IO.TextWriter)">
            <summary>
            Renders the clause in textual representation.
            </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnSelectClause.WindowName">
            <summary>
            Returns the name of the named window to delete from.
            </summary>
            <returns>
            named window name
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnSelectClause.OptionalAsName">
            <summary>
            Returns the as-provided name for the named window.
            </summary>
            <returns>
            name
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnSelectClause.IsDeleteAndSelect">
            <summary>
            Gets or sets a value indicating whether select-and-delete or just select.
            </summary>
            <value><c>true</c> if [select and delete]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.OnSetClause">
            <summary>A clause to assign new values to variables based on a triggering event arriving. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnSetClause.Create(System.String,com.espertech.esper.client.soda.Expression)">
            <summary>Creates a new on-set clause for setting variables, and adds a variable to set. </summary>
            <param name="variableName">is the variable name</param>
            <param name="expression">is the assignment expression providing the new variable value</param>
            <returns>on-set clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnSetClause.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnSetClause.AddAssignment(System.String,com.espertech.esper.client.soda.Expression)">
            <summary>Adds a variable to set to the clause. </summary>
            <param name="variable">to set</param>
            <param name="expression">expression providing the new variable value</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnSetClause.ToEPL(System.IO.TextWriter,com.espertech.esper.client.soda.EPStatementFormatter)">
            <summary>Renders the clause in EPL. </summary>
            <param name="writer">to output to</param>
            <param name="formatter">for newline-whitespace formatting</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnSetClause.Assignments">
            <summary>Returns the list of variable assignments. </summary>
            <value>pair of variable name and expression</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.OnUpdateClause">
            <summary>
            A clause to update a named window based on a triggering event arriving
            and correlated to the named window events to be updated.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnUpdateClause.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.soda.OnUpdateClause"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnUpdateClause.#ctor(System.String,System.String)">
            <summary>Ctor. </summary>
            <param name="windowName">is the named window name</param>
            <param name="optionalAsName">is the as-provided name of the named window</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnUpdateClause.Create(System.String,System.String)">
            <summary>Creates an on-update clause. </summary>
            <param name="windowName">is the named window name</param>
            <param name="optionalAsName">is the optional as-provided name</param>
            <returns>on-update clause without assignments</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnUpdateClause.ToEPL(System.IO.TextWriter)">
            <summary>Renders the clause in textual representation. </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OnUpdateClause.AddAssignment(System.String,com.espertech.esper.client.soda.Expression)">
            <summary>Adds a variable to set to the clause. </summary>
            <param name="variable">to set</param>
            <param name="expression">expression providing the new variable value</param>
            <returns>clause</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnUpdateClause.WindowName">
            <summary>Returns the name of the named window to update. </summary>
            <returns>named window name</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnUpdateClause.OptionalAsName">
            <summary>Returns the as-provided name for the named window. </summary>
            <returns>name or null</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.OnUpdateClause.Assignments">
            <summary>Returns the list of variable assignments. </summary>
            <returns>pair of variable name and expression</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.OrderedObjectParamExpression">
            <summary>
            For use in view parameter lists, this is a wrapper expression that adds an ascending or descending sort indicator to its single child expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OrderedObjectParamExpression.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OrderedObjectParamExpression.#ctor(System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="descending">to indicate a descending sort, or false for ascending</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.OrderedObjectParamExpression.IsDescending">
            <summary>
            Returns true for descending, false for ascending.
            </summary>
            <value>
            	<c>true</c> if this instance is descending; otherwise, <c>false</c>.
            </value>
            <returns>indicator for descending sort</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.OrderedObjectParamExpression.Precedence">
            <summary>
            Return precedence.
            </summary>
            <value>precedence</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.PatternEveryDistinctExpr">
            <summary>
            Every-Distinct construct for use in pattern expressions.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.PatternExprBase">
            <summary>
            Abstract base class for all pattern expressions.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.PatternExpr">
            <summary>
            Interface representing a pattern expression.
            <para />
            Pattern expressions are organized into a tree-like structure with nodes representing sub-expressions (composite).
            <para /> 
            Certain types of nodes have certain requirements towards the number or types of nodes that are expected as pattern
            sub-expressions to an pattern expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternExpr.ToEPL(System.IO.TextWriter,com.espertech.esper.client.soda.PatternExprPrecedenceEnum,com.espertech.esper.client.soda.EPStatementFormatter)">
            <summary>Renders the pattern expression and all it's child expressions, in full tree depth, as a string in language syntax. </summary>
            <param name="writer">is the output to use</param>
            <param name="parentPrecedence">precedence</param>
            <param name="formatter">formatter</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.PatternExpr.Children">
            <summary>Returns the list of pattern sub-expressions (child expressions) to the current pattern expression node. </summary>
            <value>pattern child expressions or empty list if there are no child expressions</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.PatternExpr.Precedence">
            <summary>Returns the precedence. </summary>
            <value>precedence</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.PatternExpr.TreeObjectName">
            <summary>Returns the id for the pattern expression, for use by tools. </summary>
            <value>id</value>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternExprBase.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternExprBase.AddChild(com.espertech.esper.client.soda.PatternExpr)">
            <summary>Adds a sub-expression to the pattern expression. </summary>
            <param name="expression">to add</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternExprBase.ToPrecedenceFreeEPL(System.IO.TextWriter,com.espertech.esper.client.soda.EPStatementFormatter)">
            <summary>Renders the expressions and all it's child expression, in full tree depth, as a string in language syntax. </summary>
            <param name="writer">is the output to use</param>
            <param name="formatter">for newline-whitespace formatting</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.PatternExprBase.Precedence">
            <summary>Returns the precedence. </summary>
            <value>precedence</value>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternEveryDistinctExpr.#ctor">
            <summary>
            Ctor - for use to create a pattern expression tree, without unique-criterial expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternEveryDistinctExpr.#ctor(System.Collections.Generic.IList{com.espertech.esper.client.soda.Expression})">
            <summary>
            Ctor - for use to create a pattern expression tree, without unique-criterial expression.
            </summary>
            <param name="expressions">distinct expressions</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.PatternEveryDistinctExpr.Expressions">
            <summary>Returns distinct expressions </summary>
            <value>expr</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.PatternExprPlaceholder">
            <summary>
            For use in pattern expression as a placeholder to represent its child nodes.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.PatternExprPrecedenceEnum">
            <summary>Pattern precendences. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.PatternExprPrecedenceEnum.MAXIMIM">
            <summary>Precedence. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.PatternExprPrecedenceEnum.ATOM">
            <summary>Precedence. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.PatternExprPrecedenceEnum.GUARD">
            <summary>Precedence. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.PatternExprPrecedenceEnum.EVERY_NOT">
            <summary>Precedence. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.PatternExprPrecedenceEnum.MATCH_UNTIL">
            <summary>Precedence. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.PatternExprPrecedenceEnum.AND">
            <summary>Precedence. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.PatternExprPrecedenceEnum.OR">
            <summary>Precedence. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.PatternExprPrecedenceEnum.FOLLOWED_BY">
            <summary>Precedence. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.PatternExprPrecedenceEnum.MINIMUM">
            <summary>Precedence. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternExprPrecedenceEnumExtensions.GetLevel(com.espertech.esper.client.soda.PatternExprPrecedenceEnum)">
            <summary>Returns precedence. </summary>
            <returns>precedence</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.PatternMatchUntilExpr">
            <summary>
            Match-Until construct for use in pattern expressions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternMatchUntilExpr.#ctor">
            <summary>
            Ctor - for use to create a pattern expression tree, without pattern child expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternMatchUntilExpr.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>
            Ctor - for use when adding required child nodes later.
            </summary>
            <param name="low">low number of matches, or null if no lower boundary</param>
            <param name="high">high number of matches, or null if no high boundary</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternMatchUntilExpr.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.PatternExpr,com.espertech.esper.client.soda.PatternExpr)">
            <summary>
            Ctor.
            </summary>
            <param name="low">low number of matches, or null if no lower boundary</param>
            <param name="high">high number of matches, or null if no high boundary</param>
            <param name="match">the pattern expression that is sought to match repeatedly</param>
            <param name="until">the pattern expression that ends matching (optional, can be null)</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.PatternMatchUntilExpr.Low">
            <summary>
            Returns the optional low endpoint for the repeat, or null if none supplied.
            </summary>
            <value>low endpoint</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.PatternMatchUntilExpr.High">
            <summary>
            Returns the optional high endpoint for the repeat, or null if none supplied.
            </summary>
            <value>high endpoint</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.PreviousExpressionType">
            <summary>
            Previous function type.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.PreviousExpressionType.PREV">
            <summary>
            Returns a previous event with the index counting from the last event
            towards the first event.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.PreviousExpressionType.PREVCOUNT">
            <summary>
            Returns the count of previous events.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.PreviousExpressionType.PREVTAIL">
            <summary>
            Returns a previous event with the index counting from the first event
            towards the last event.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.PreviousExpressionType.PREVWINDOW">
            <summary>
            Returns all previous events.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.PropertyValueExpressionPair">
            <summary>
            Pair of expressions with "equals" operator between.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PropertyValueExpressionPair.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PropertyValueExpressionPair.#ctor(com.espertech.esper.client.soda.PropertyValueExpression,com.espertech.esper.client.soda.PropertyValueExpression)">
            <summary>Ctor. </summary>
            <param name="left">expression</param>
            <param name="right">expression</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.PropertyValueExpressionPair.Left">
            <summary>Returns left expr. </summary>
            <returns>left</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.PropertyValueExpressionPair.Right">
            <summary>Returns right side. </summary>
            <returns>right side</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.RowLimitClause">
            <summary>
            Specification object for a row limit.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.RowLimitClause.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.soda.RowLimitClause"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.RowLimitClause.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="numRows">maximum number of rows</param>
            <param name="optionalOffsetRows">offset</param>
            <param name="numRowsVariable">name of the variable providing the maximum number of rows</param>
            <param name="optionalOffsetRowsVariable">name of the variable providing the offset</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.RowLimitClause.Create(System.String)">
            <summary>
            Creates a row limit clause.
            </summary>
            <param name="numRowsVariable">name of the variable providing the maximum number of rows</param>
            <returns>
            clause
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.RowLimitClause.Create(System.String,System.String)">
            <summary>
            Creates a row limit clause.
            </summary>
            <param name="numRowsVariable">name of the variable providing the maximum number of rows</param>
            <param name="offsetVariable">name of the variable providing the offset</param>
            <returns>
            clause
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.RowLimitClause.Create(System.Int32)">
            <summary>
            Creates a row limit clause.
            </summary>
            <param name="numRows">maximum number of rows</param>
            <returns>
            clause
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.RowLimitClause.Create(System.Int32,System.Int32)">
            <summary>
            Creates a row limit clause.
            </summary>
            <param name="numRows">maximum number of rows</param>
            <param name="offset">offset</param>
            <returns>
            clause
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.RowLimitClause.ToEPL(System.IO.TextWriter)">
            <summary>
            Renders the clause in textual representation.
            </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.RowLimitClause.NumRows">
            <summary>
            Returns the maximum number of rows, or null if using variable.
            </summary>
            <returns>
            max num rows
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.RowLimitClause.OptionalOffsetRows">
            <summary>
            Returns the offset, or null if using variable or not using offset.
            </summary>
            <returns>
            offset
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.RowLimitClause.NumRowsVariable">
            <summary>
            Returns the variable providing maximum number of rows, or null if using
            constant.
            </summary>
            <returns>
            max num rows variable
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.RowLimitClause.OptionalOffsetRowsVariable">
            <summary>
            Returns the name of the variable providing offset values.
            </summary>
            <returns>
            variable name for offset
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.ScheduleItemType">
            <summary>
            Type of schedule item.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.ScheduleItemType.WILDCARD">
            <summary>
            Wildcard means any value.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.ScheduleItemType.LASTDAY">
            <summary>
            Last day of week or month.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.ScheduleItemType.WEEKDAY">
            <summary>
            Weekday (nearest to a date)
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.ScheduleItemType.LASTWEEKDAY">
            <summary>
            Last weekday in a month
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ScheduleItemTypeExtensions.GetSyntax(com.espertech.esper.client.soda.ScheduleItemType)">
            <summary>
            Returns the syntax string.
            </summary>
            <returns>
            syntax
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.SchemaColumnDesc">
            <summary>
            Descriptor for use in create-schema syntax to define property name and type
            of an event property.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.SchemaColumnDesc.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.SchemaColumnDesc.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="name">property name</param>
            <param name="type">property type, can be any simple class name or fully-qualified class name or existing event type name</param>
            <param name="array">true for array property</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.SchemaColumnDesc.ToEPL(System.IO.TextWriter)">
            <summary>Render to EPL. </summary>
            <param name="writer">to render to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.SchemaColumnDesc.Name">
            <summary>
            Returns property name.
            </summary>
            <value>name</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.SchemaColumnDesc.Type">
            <summary>
            Returns property type.
            </summary>
            <value>type</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.SchemaColumnDesc.IsArray">
            <summary>
            Returns true for array properties.
            </summary>
            <value>indicator</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.ScriptExpression">
            <summary>
            Script-expression is external scripting language expression such as JavaScript, Groovy or MVEL, for example.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ScriptExpression.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ScriptExpression.#ctor(System.String,System.Collections.Generic.IList{System.String},System.String,System.String,System.String)">
            <summary>Ctor. </summary>
            <param name="name">script name</param>
            <param name="parameterNames">parameter list</param>
            <param name="expressionText">script text</param>
            <param name="optionalReturnType">return type</param>
            <param name="optionalDialect">dialect</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.ScriptExpression.ToEPL(System.IO.TextWriter,System.Collections.Generic.IList{com.espertech.esper.client.soda.ScriptExpression},com.espertech.esper.client.soda.EPStatementFormatter)">
            <summary>Print. </summary>
            <param name="writer">to print to</param>
            <param name="scripts">scripts</param>
            <param name="formatter">for newline-whitespace formatting</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.ScriptExpression.ToEPL(System.IO.TextWriter)">
            <summary>Print part. </summary>
            <param name="writer">to write to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.ScriptExpression.Name">
            <summary>Returns the script name. </summary>
            <value>script name</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.ScriptExpression.OptionalReturnType">
            <summary>Returns the return type, if any is specified. </summary>
            <value>return type</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.ScriptExpression.OptionalDialect">
            <summary>Returns a dialect name, or null if none is defined and the configured default applies </summary>
            <value>dialect name</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.ScriptExpression.ExpressionText">
            <summary>Returns the script body. </summary>
            <value>script body</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.ScriptExpression.ParameterNames">
            <summary>Returns the lambda expression parameters. </summary>
            <value>lambda expression parameters</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.SelectClauseExpression">
            <summary>
            Part of a select-clause to describe individual select-clause expressions.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.SelectClauseElement">
            <summary>
            Item in a select-clause to describe individual select-clause expressions or Wildcard(s).
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClauseElement.ToEPLElement(System.IO.TextWriter)">
            <summary>Output the string rendering of the select clause element. </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClauseExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.soda.SelectClauseExpression"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClauseExpression.#ctor(com.espertech.esper.client.soda.Expression)">
            <summary>Ctor.</summary>
            <param name="expression">is the selection expression</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClauseExpression.#ctor(com.espertech.esper.client.soda.Expression,System.String)">
            <summary>Ctor.</summary>
            <param name="expression">is the selection expression</param>
            <param name="optionalAsName">is the &quot;as&quot;-tag for the expression</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClauseExpression.ToEPLElement(System.IO.TextWriter)">
            <summary>Renders the element in textual representation.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.SelectClauseExpression.Expression">
            <summary>
            Gets or sets the selection expression.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.soda.SelectClauseExpression.AsName">
            <summary>
            Returns the optional &quot;as&quot;-name of the expression, or null if not defined
            </summary>
            <returns>tag or null for selection expression</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.SelectClauseStreamWildcard">
            <summary>
            For use in a select clause, this element in a select clause defines that for a
            given stream we want to select the underlying type. Most often used in joins to
            select wildcard from one of the joined streams.
            <para/>
            For example: <pre>select streamOne.* from StreamOne as streamOne, StreamTwo as
            streamTwo</pre>
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClauseStreamWildcard.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.soda.SelectClauseStreamWildcard"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClauseStreamWildcard.#ctor(System.String,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="streamName">is the name assigned to a stream</param>
            <param name="optionalColumnName">is the name to assign to the column carrying the streams generated events, ornull if the event should not appear in a column </param>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClauseStreamWildcard.ToEPLElement(System.IO.TextWriter)">
            <summary>
            Renders the element in textual representation.
            </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.SelectClauseStreamWildcard.StreamName">
            <summary>
            Returns the stream name (e.g. select streamName.* as colName from MyStream as
            streamName)
            </summary>
            <returns>
            name
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.SelectClauseStreamWildcard.OptionalColumnName">
            <summary>
            Returns the optional column name (e.g. select streamName.* as colName from
            MyStream as streamName)
            </summary>
            <returns>
            name of column, or null if none defined
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.SelectClauseWildcard">
            <summary>
            Represents a wildcard in the select-clause.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClauseWildcard.ToEPLElement(System.IO.TextWriter)">
            <summary>Renders the element in textual representation.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="T:com.espertech.esper.client.soda.SingleRowMethodExpression">
            <summary>
            Generic single-row method call consists of a method name and parameters, possibly chained.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.SingleRowMethodExpression.#ctor(System.String,System.Object[])">
            <summary>Ctor. </summary>
            <param name="method">method name</param>
            <param name="parameters">an optiona array of parameters</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.SingleRowMethodExpression.#ctor(System.Collections.Generic.IList{com.espertech.esper.client.soda.DotExpressionItem})">
            <summary>Ctor. </summary>
            <param name="chain">of method invocations with at least one element, each pair a method name and list of parameter expressions</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.SingleRowMethodExpression.Chain">
            <summary>Returns the optional method invocation chain for the single-row method consisting of pairs of method name and list of parameters. </summary>
            <value>chain of method invocations</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.SubqueryQualifiedExpression">
            <summary>
            Exists-expression for a set of values returned by a lookup.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.SubqueryQualifiedExpression.#ctor(com.espertech.esper.client.soda.EPStatementObjectModel,System.String,System.Boolean)">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            </summary>
            <param name="model">is the lookup statement object model</param>
            <param name="operator">the op</param>
            <param name="all">true for ALL, false for ANY</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.SubqueryQualifiedExpression.Model">
            <summary>
            Returns the lookup statement object model.
            </summary>
            <returns>
            lookup model
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.SubqueryQualifiedExpression.Operator">
            <summary>
            Gets or sets the operator.
            </summary>
            <value>The operator.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.SubqueryQualifiedExpression.IsAll">
            <summary>
            Returns true for ALL, false for ANY.
            </summary>
            <returns>
            all/any flag
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.TimePeriodExpression">
            <summary>
            Represent an expression
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.TimePeriodExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.soda.TimePeriodExpression"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.TimePeriodExpression.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Ctor. </summary>
            <param name="hasYears">flag to indicate that a year-part expression exists</param>
            <param name="hasMonths">flag to indicate that a month-part expression exists</param>
            <param name="hasWeeks">flag to indicate that a week-part expression exists</param>
            <param name="hasDays">flag to indicate that a day-part expression exists</param>
            <param name="hasHours">flag to indicate that a hour-part expression exists</param>
            <param name="hasMinutes">flag to indicate that a minute-part expression exists</param>
            <param name="hasSeconds">flag to indicate that a seconds-part expression exists</param>
            <param name="hasMilliseconds">flag to indicate that a millisec-part expression exists</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.TimePeriodExpression.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="hasDays">flag to indicate that a day-part expression exists</param>
            <param name="hasHours">flag to indicate that a hour-part expression exists</param>
            <param name="hasMinutes">flag to indicate that a minute-part expression exists</param>
            <param name="hasSeconds">flag to indicate that a seconds-part expression exists</param>
            <param name="hasMilliseconds">flag to indicate that a millisec-part expression exists</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.TimePeriodExpression.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Ctor. </summary>
            <param name="yearsExpr">expression returning years value, or null if no such part</param>
            <param name="monthsExpr">expression returning months value, or null if no such part</param>
            <param name="weeksExpr">expression returning weeks value, or null if no such part</param>
            <param name="daysExpr">expression returning days value, or null if no such part</param>
            <param name="hoursExpr">expression returning hours value, or null if no such part</param>
            <param name="minutesExpr">expression returning minutes value, or null if no such part</param>
            <param name="secondsExpr">expression returning seconds value, or null if no such part</param>
            <param name="millisecondsExpr">expression returning millisec value, or null if no such part</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.TimePeriodExpression.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>
            Ctor.
            </summary>
            <param name="daysExpr">expression returning days value, or null if no such part</param>
            <param name="hoursExpr">expression returning hours value, or null if no such part</param>
            <param name="minutesExpr">expression returning minutes value, or null if no such part</param>
            <param name="secondsExpr">expression returning seconds value, or null if no such part</param>
            <param name="millisecondsExpr">expression returning millisec value, or null if no such part</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.TimePeriodExpression.HasDays">
            <summary>
            Returns true if a subexpression exists that is a day-part.
            </summary>
            <returns>
            indicator for presence of part
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.TimePeriodExpression.HasHours">
            <summary>
            Returns true if a subexpression exists that is a hour-part.
            </summary>
            <returns>
            indicator for presence of part
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.TimePeriodExpression.HasMinutes">
            <summary>
            Returns true if a subexpression exists that is a minutes-part.
            </summary>
            <returns>
            indicator for presence of part
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.TimePeriodExpression.HasSeconds">
            <summary>
            Returns true if a subexpression exists that is a seconds-part.
            </summary>
            <returns>
            indicator for presence of part
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.TimePeriodExpression.HasMilliseconds">
            <summary>
            Returns true if a subexpression exists that is a milliseconds-part.
            </summary>
            <returns>
            indicator for presence of part
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.TimePeriodExpression.HasYears">
            <summary>
            Returns true if a subexpression exists that is a year-part.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.soda.TimePeriodExpression.HasMonths">
            <summary>
            Returns true if a subexpression exists that is a months-part.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.soda.TimePeriodExpression.HasWeeks">
            <summary>
            Returns true if a subexpression exists that is a weeks-part.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.TypeOfExpression">
            <summary>
            Type-of expression return the type name, as a string value, of the events in 
            the stream if passing a stream name or the fragment event type if passing a 
            property name that results in a fragment event otherwise the class simple name 
            of the expression result or null if the expression returns a null value.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.TypeOfExpression.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.TypeOfExpression.#ctor(com.espertech.esper.client.soda.Expression)">
            <summary>
            Ctor.
            </summary>
            <param name="expression">for which to return the result type or null if the result is null</param>
        </member>
        <member name="T:com.espertech.esper.client.soda.UpdateClause">
            <summary>Specification for the update clause. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.UpdateClause.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.UpdateClause.Create(System.String,System.String,com.espertech.esper.client.soda.Expression)">
            <summary>Ctor. </summary>
            <param name="eventType">the name of the type to update</param>
            <param name="propertyName">a property to write</param>
            <param name="expression">expression returning a value to write</param>
            <returns>update clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.UpdateClause.#ctor(System.String,System.String)">
            <summary>Ctor. </summary>
            <param name="eventType">the name of the type to update</param>
            <param name="optionalAsClauseStreamName">as-clause for update, if any</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.UpdateClause.AddAssignment(System.String,com.espertech.esper.client.soda.Expression)">
            <summary>Adds a property to set to the clause. </summary>
            <param name="property">to set</param>
            <param name="expression">expression providing the new property value</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.UpdateClause.ToEPL(System.IO.TextWriter)">
            <summary>Renders the clause in EPL. </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.UpdateClause.Assignments">
            <summary>Returns the list of property assignments. </summary>
            <value>pair of property name and expression</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.UpdateClause.EventType">
            <summary>Returns the name of the event type to update. </summary>
            <value>name of type</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.UpdateClause.OptionalWhereClause">
            <summary>Returns the where-clause if any. </summary>
            <value>where clause</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.UpdateClause.OptionalAsClauseStreamName">
            <summary>Returns the stream name. </summary>
            <value>stream name</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.WindowProjectionExpression">
            <summary>
            Represents the "window" aggregation function.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.WindowProjectionExpression.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.WindowProjectionExpression.#ctor(com.espertech.esper.client.soda.Expression)">
            <summary>Ctor. </summary>
            <param name="expression">to aggregate</param>
        </member>
        <member name="M:com.espertech.esper.client.StatementEventArgs.#ctor(com.espertech.esper.client.EPStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.StatementEventArgs"/> class.
            </summary>
            <param name="_statement">The _statement.</param>
        </member>
        <member name="P:com.espertech.esper.client.StatementEventArgs.Statement">
            <summary>
            Gets the statement.
            </summary>
            <value>The statement.</value>
        </member>
        <member name="T:com.espertech.esper.client.time.CurrentTimeSpanEvent">
            <summary>
            Event for externally controlling the time within an 
            <seealso cref="T:com.espertech.esper.client.EPRuntime"/> or
            <seealso cref="T:com.espertech.esper.client.EPRuntimeIsolated"/> instance, 
            advancing time over a span of time.
            <para/>
            The engine advances time according to the resolution passed in, completing at 
            the target time provided. 
            <para/>
            When used without a resolution or with a negative or zero value for resolution 
            the engine advances time according to any statement schedules that may be present. 
            If no statement schedules are present, the engine simply advances time to the 
            target time provided.
            <para/>
            External clocking must be enabled via <seealso cref="T:com.espertech.esper.client.time.TimerControlEvent"/> before 
            this class can be used to externally feed time.
            </summary>
        </member>
        <member name="T:TimerEvent">
            <summary>Abstract base class marker for events that control time keeping by an event stream processor instance. </summary>
        </member>
        <member name="M:com.espertech.esper.client.time.CurrentTimeSpanEvent.#ctor(System.Int64)">
            <summary>
            Constructor taking only a target time to advance to. 
            <para/>
            Use this constructor to have the engine decide the resolution at which time advances, 
            according to present statement schedules.
            </summary>
            <param name="targetTimeInMillis">target time</param>
        </member>
        <member name="M:com.espertech.esper.client.time.CurrentTimeSpanEvent.#ctor(System.Int64,System.Int64)">
            <summary>
            Constructor taking a target time to advance to and a resoultion to use to advance time.
            <para/>
            Use this constructor to dictate a resolution at which time advances.
            </summary>
            <param name="targetTimeInMillis">target time</param>
            <param name="optionalResolution">should be a positive value</param>
        </member>
        <member name="P:com.espertech.esper.client.time.CurrentTimeSpanEvent.TargetTimeInMillis">
            <summary>Returns the target time to advance engine time to. </summary>
            <value>target time</value>
        </member>
        <member name="P:com.espertech.esper.client.time.CurrentTimeSpanEvent.OptionalResolution">
            <summary>Returns the resolution for advancing time, or null if none provided. </summary>
            <value>resolution</value>
        </member>
        <member name="T:com.espertech.esper.client.UnmatchedListener">
            <summary>
            Receives notification from an engine that an event that has been sent into the engine or that
            has been generated via insert-into has not been matched to any statement, considering all started statement's
            event stream filter criteria (not considering where-clause and having-clauses).
            </summary>
            <see cref="T:com.espertech.esper.client.EPRuntime"/>
        </member>
        <member name="T:com.espertech.esper.client.UpdateEventHandler">
            <summary>
            Defines a delegate that is notified of new and old events.
            </summary>
            <param name="sender">The event sender</param>
            <param name="e">The update event arguments</param>
        </member>
        <member name="T:com.espertech.esper.client.util.EventPropertyRenderer">
            <summary>
            Interface for use with the JSON or XML event renderes to handle custom event property rendering.
            <para>Implementations of this interface are called for each event property and may utilize the context object provided to render the event property value to a string. </para>
            <para>The context itself contains a reference to the default renderer that can be delegated to for properties that use the default rendering.</para>
            <para>Do not retain a handle to the renderer context as the context object changes for each event property.</para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.util.EventPropertyRenderer.Render(com.espertech.esper.client.util.EventPropertyRendererContext)">
            <summary>Render an event property. </summary>
            <param name="context">provides information about the property</param>
        </member>
        <member name="T:com.espertech.esper.client.util.EventPropertyRendererContext">
            <summary>
            Context for use with the {@link EventPropertyRenderer} interface for use with the JSON 
            or XML event renderes to handle custom event property rendering. 
            <para>
            Do not retain a handle to the renderer context as this object changes for each event property.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.util.EventPropertyRendererContext.#ctor(com.espertech.esper.client.EventType,System.Boolean)">
            <summary>Ctor. </summary>
            <param name="eventType">event type</param>
            <param name="jsonFormatted">bool if JSON formatted</param>
        </member>
        <member name="M:com.espertech.esper.client.util.EventPropertyRendererContext.SetStringBuilderAndReset(System.Text.StringBuilder)">
            <summary>Sets the string builer </summary>
            <param name="stringBuilder">to set</param>
        </member>
        <member name="M:com.espertech.esper.client.util.EventPropertyRendererContext.Copy">
            <summary>Copies context. </summary>
            <returns>copy</returns>
        </member>
        <member name="P:com.espertech.esper.client.util.EventPropertyRendererContext.PropertyName">
            <summary>Returns the property name to be rendered. </summary>
            <value>property name</value>
        </member>
        <member name="P:com.espertech.esper.client.util.EventPropertyRendererContext.PropertyValue">
            <summary>Returns the property value. </summary>
            <value>value</value>
        </member>
        <member name="P:com.espertech.esper.client.util.EventPropertyRendererContext.DefaultRenderer">
            <summary>Returns the output value default renderer. </summary>
            <value>renderer</value>
        </member>
        <member name="P:com.espertech.esper.client.util.EventPropertyRendererContext.StringBuilder">
            <summary>Returns the string builder. </summary>
            <value>string builder to use</value>
        </member>
        <member name="P:com.espertech.esper.client.util.EventPropertyRendererContext.EventType">
            <summary>Returns the event type </summary>
            <value>event type</value>
        </member>
        <member name="P:com.espertech.esper.client.util.EventPropertyRendererContext.IndexedPropertyIndex">
            <summary>Returns the index for indexed properties. </summary>
            <value>property index</value>
        </member>
        <member name="P:com.espertech.esper.client.util.EventPropertyRendererContext.MappedPropertyKey">
            <summary>Returns the map key for mapped properties </summary>
            <value>map key</value>
        </member>
        <member name="P:com.espertech.esper.client.util.EventPropertyRendererContext.IsJsonFormatted">
            <summary>Returns true for JSON formatted. </summary>
            <value>indicator</value>
        </member>
        <member name="T:com.espertech.esper.client.util.EventRenderer">
            <summary>
            Provider for rendering services of <seealso cref="T:com.espertech.esper.client.EventBean"/> events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.util.EventRenderer.GetJSONRenderer(com.espertech.esper.client.EventType,com.espertech.esper.client.util.JSONRenderingOptions)">
            <summary>
            Returns a render for the JSON format, valid only for the given event type and
            its subtypes.
            </summary>
            <param name="eventType">to return renderer for</param>
            <param name="options">rendering options</param>
            <returns>
            JSON format renderer
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.util.EventRenderer.GetJSONRenderer(com.espertech.esper.client.EventType)">
            <summary>
            Returns a render for the JSON format, valid only for the given event type and
            its subtypes.
            </summary>
            <param name="eventType">to return renderer for</param>
            <returns>
            JSON format renderer
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.util.EventRenderer.RenderJSON(System.String,com.espertech.esper.client.EventBean)">
            <summary>
            Quick-access method to render a given event in the JSON format.
            <para/>
            Use the #getJSONRenderer to obtain a renderer instance that allows repeated
            rendering of the same type of event. For performance reasons obtaining a dedicated
            renderer instance is the preferred method compared to repeated rendering via this
            method.
            </summary>
            <param name="title">the JSON root title</param>
            <param name="theEvent">the event to render</param>
            <returns>
            JSON formatted text
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.util.EventRenderer.RenderJSON(System.String,com.espertech.esper.client.EventBean,com.espertech.esper.client.util.JSONRenderingOptions)">
            <summary>
            Quick-access method to render a given event in the JSON format.
            <para/>
            Use the #getJSONRenderer to obtain a renderer instance that allows repeated
            rendering of the same type of event. For performance reasons obtaining a dedicated
            renderer instance is the preferred method compared to repeated rendering via this
            method.
            </summary>
            <param name="title">the JSON root title</param>
            <param name="theEvent">the event to render</param>
            <param name="options">are JSON rendering options</param>
            <returns>
            JSON formatted text
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.util.EventRenderer.GetXMLRenderer(com.espertech.esper.client.EventType)">
            <summary>
            Returns a render for the XML format, valid only for the given event type and its
            subtypes.
            </summary>
            <param name="eventType">to return renderer for</param>
            <returns>
            XML format renderer
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.util.EventRenderer.GetXMLRenderer(com.espertech.esper.client.EventType,com.espertech.esper.client.util.XMLRenderingOptions)">
            <summary>
            Returns a render for the XML format, valid only for the given event type and its
            subtypes.
            </summary>
            <param name="eventType">to return renderer for</param>
            <param name="options">rendering options</param>
            <returns>
            XML format renderer
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.util.EventRenderer.RenderXML(System.String,com.espertech.esper.client.EventBean)">
            <summary>
            Quick-access method to render a given event in the XML format.
            <para/>
            Use the #getXMLRenderer to obtain a renderer instance that allows repeated
            rendering of the same type of event. For performance reasons obtaining a dedicated
            renderer instance is the preferred method compared to repeated rendering via this
            method.
            </summary>
            <param name="rootElementName">the root element name that may also include namespace information</param>
            <param name="theEvent">the event to render</param>
            <returns>
            XML formatted text
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.util.EventRenderer.RenderXML(System.String,com.espertech.esper.client.EventBean,com.espertech.esper.client.util.XMLRenderingOptions)">
            <summary>
            Quick-access method to render a given event in the XML format.
            <para/>
            Use the #getXMLRenderer to obtain a renderer instance that allows repeated
            rendering of the same type of event. For performance reasons obtaining a dedicated
            renderer instance is the preferred method compared to repeated rendering via this
            method.
            </summary>
            <param name="rootElementName">the root element name that may also include namespace information</param>
            <param name="theEvent">the event to render</param>
            <param name="options">are XML rendering options</param>
            <returns>
            XML formatted text
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.util.JSONEventRenderer">
            <summary>
            Renderer for an event into the JSON textual format.
            <para/>
            A renderer is dedicated to rendering only a certain type of events and subtypes
            of that type, as the render cache type metadata and prepares structures to
            enable fast rendering.
            <para/>
            For rendering events of different types, use a quick-access method in <seealso cref="!:IEventRenderer"/>.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.util.JSONEventRenderer.Render(System.String,com.espertech.esper.client.EventBean)">
            <summary>
            Render a given event in the JSON format.
            </summary>
            <param name="title">the JSON root title</param>
            <param name="theEvent">the event to render</param>
            <returns>
            JSON formatted text
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.util.JSONRenderingOptions">
            <summary>
            JSON rendering options.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.util.JSONRenderingOptions.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.util.JSONRenderingOptions.PreventLooping">
            <summary>
            Indicator whether to prevent looping, by default set to true. Set to false to
            allow looping in the case where nested properties may refer to themselves, for
            example.
            <para/>
            The algorithm to control looping considers the combination of event type and
            property name for each level of nested property.
            </summary>
            <returns>
            indicator whether the rendering algorithm prevents looping behavior
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.util.JSONRenderingOptions.Renderer">
            <summary>
            Gets or sets the event property renderer to use.
            </summary>
            <value>The renderer.</value>
        </member>
        <member name="T:com.espertech.esper.client.util.XMLEventRenderer">
            <summary>
            Renderer for an event into the XML textual format.
            <para/>
            A renderer is dedicated to rendering only a certain type of events and subtypes
            of that type, as the render cache type metadata and prepares structures to
            enable fast rendering.
            <para/>
            For rendering events of different types, use a quick-access method in <seealso cref="!:IEventRenderer"/>.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.util.XMLEventRenderer.Render(System.String,com.espertech.esper.client.EventBean)">
            <summary>
            Render a given event in the XML format.
            </summary>
            <param name="rootElementName">the name of the root element, may include namespace information</param>
            <param name="theEvent">the event to render</param>
            <returns>
            XML formatted text
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.util.XMLRenderingOptions">
            <summary>
            XML rendering options.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.util.XMLRenderingOptions.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.util.XMLRenderingOptions.PreventLooping">
            <summary>
            Indicator whether to prevent looping, by default set to true. Set to false to
            allow looping in the case where nested properties may refer to themselves, for
            example.
            <para/>
            The algorithm to control looping considers the combination of event type and
            property name for each level of nested property.
            </summary>
            <returns>
            indicator whether the rendering algorithm prevents looping behavior
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.util.XMLRenderingOptions.IsDefaultAsAttribute">
            <summary>
            Indicator whether simple properties are rendered as attributes, this setting is
            false by default thereby simple properties are rendered as elements.
            </summary>
            <returns>
            true for simple properties rendered as attributes
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.util.XMLRenderingOptions.Renderer">
            <summary>
            Gets or sets the event property renderer to use.
            </summary>
            <value>The renderer.</value>
        </member>
        <member name="T:com.espertech.esper.client.VariableConstantValueException">
            <summary>Indicates that a variable cannot be set. </summary>
        </member>
        <member name="M:com.espertech.esper.client.VariableConstantValueException.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="message">supplies exception details</param>
        </member>
        <member name="T:com.espertech.esper.client.VariableNotFoundException">
            <summary>
            Indicates that a variable was not found.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.VariableNotFoundException.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="message">supplies exception details</param>
        </member>
        <member name="T:com.espertech.esper.client.VariableValueException">
            <summary>
            Indicates that a variable value could not be assigned.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.VariableValueException.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="message">supplies exception details</param>
        </member>
        <member name="M:com.espertech.esper.collection.MixedEventBeanAndCollectionEnumeratorBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.MixedEventBeanAndCollectionEnumeratorBase.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:com.espertech.esper.collection.MixedEventBeanAndCollectionEnumeratorBase.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="P:com.espertech.esper.collection.MixedEventBeanAndCollectionEnumeratorBase.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current.
            </summary>
            <value>The current.</value>
        </member>
        <member name="P:com.espertech.esper.collection.MixedEventBeanAndCollectionEnumeratorBase.Current">
            <summary>
            Gets the current.
            </summary>
            <value>The current.</value>
        </member>
        <member name="F:com.espertech.esper.collection.NamedEntity`1.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="F:com.espertech.esper.collection.NamedEntity`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:com.espertech.esper.collection.NamedEntity`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.collection.NamedEntity`1"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.NamedEntity`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.collection.NamedEntity`1"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:com.espertech.esper.collection.NamedEntity`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.collection.NamedEntity`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.collection.NamedEntity`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:com.espertech.esper.collection.DualWorkQueue`1">
            <summary>
            Work queue wherein items can be added to the front and to the back, wherein both front
            and back have a given order, with the idea that all items of the front queue get processed 
            before any given single item of the back queue gets processed.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.collection.DualWorkQueue`1.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="P:com.espertech.esper.collection.DualWorkQueue`1.FrontQueue">
            <summary>
            Items to be processed first, in the order to be processed.
            </summary>
            <value>front queue</value>
        </member>
        <member name="P:com.espertech.esper.collection.DualWorkQueue`1.BackQueue">
            <summary>
            Items to be processed after front-queue is empty, in the order to be processed.
            </summary>
            <value>back queue</value>
        </member>
        <member name="T:com.espertech.esper.collection.FIFOHashSet`1">
            <summary>
            FIFOHashSet is a collection that implements "set" principals.  Members of a set
            are unique and can only occur once.  Additionally, iteration of the set is
            governed by first-in first-out principal.  This means that the order in which
            items are added to the set is preserved through iteration.
            </summary>
        </member>
        <member name="F:com.espertech.esper.collection.FIFOHashSet`1._nodeTable">
            <summary>
            NodeTable of nodes ...
            </summary>
        </member>
        <member name="F:com.espertech.esper.collection.FIFOHashSet`1._hashIndex">
            <summary>
            NodeTable that is indexed by hash code and points to the first node
            in the chain for that hash code.
            </summary>
        </member>
        <member name="F:com.espertech.esper.collection.FIFOHashSet`1._headIndex">
            <summary>
            Index that represents the first valid node in the ordered list.  Value should
            be -1 if there is no head value.
            </summary>
        </member>
        <member name="F:com.espertech.esper.collection.FIFOHashSet`1._tailIndex">
            <summary>
            Index that represents the last valid node in the ordered list.  Value should be
            -1 if there is no last value.
            </summary>
        </member>
        <member name="F:com.espertech.esper.collection.FIFOHashSet`1._freeListHead">
            <summary>
            Head of the free node chain
            </summary>
        </member>
        <member name="F:com.espertech.esper.collection.FIFOHashSet`1._version">
            <summary>
            Version of the collection.
            </summary>
        </member>
        <member name="F:com.espertech.esper.collection.FIFOHashSet`1._nodeCount">
            <summary>
            Total number of entries in the set.
            </summary>
        </member>
        <member name="F:com.espertech.esper.collection.FIFOHashSet`1._collisions">
            <summary>
            # of nodes that overlap in the same bucket
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.FIFOHashSet`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.collection.FIFOHashSet`1"/> class.
            </summary>
            <param name="sourceCollection">The source collection.</param>
        </member>
        <member name="M:com.espertech.esper.collection.FIFOHashSet`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.collection.FIFOHashSet`1"/> class.
            </summary>
            <param name="minCapacity">The minimum capacity.</param>
        </member>
        <member name="M:com.espertech.esper.collection.FIFOHashSet`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.collection.FIFOHashSet`1"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.FIFOHashSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.FIFOHashSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.FIFOHashSet`1.ForEach(System.Action{`0})">
            <summary>
            Iterates over the collection performing one operation on each element in
            the set.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:com.espertech.esper.collection.FIFOHashSet`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:com.espertech.esper.collection.FIFOHashSet`1.GetChain(System.Int32)">
            <summary>
            Gets an enumeration of all items in a chain.
            </summary>
            <param name="hashIndexIndex">Index of the hash index.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.collection.FIFOHashSet`1.DebugHashDistribution">
            <summary>
            Gets the histogram.
            </summary>
            <returns></returns>
        </member>
        <member name="F:com.espertech.esper.collection.FIFOHashSet`1._nodeAllocIndex">
            <summary>
            Indicates the index where the next node needs to be allocated from.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.FIFOHashSet`1.AllocNode(`0,System.Int32)">
            <summary>
            Allocates a node for use and return the index of the node.
            </summary>
            <param name="item">The item.</param>
            <param name="hashCode">The hash code.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.collection.FIFOHashSet`1.ReIndex">
            <summary>
            Reindexes the internal bucket table.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.FIFOHashSet`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:com.espertech.esper.collection.FIFOHashSet`1.Contains(`0)">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.FIFOHashSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:com.espertech.esper.collection.FIFOHashSet`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="P:com.espertech.esper.collection.FIFOHashSet`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.collection.FIFOHashSet`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="T:com.espertech.esper.collection.FIFOHashSet`1.Node">
            <summary>
            Each node contains the content for the node and references to
            the next node in it's respective chain and order.
            </summary>
        </member>
        <member name="F:com.espertech.esper.collection.FIFOHashSet`1.Node.NextNodeInChain">
            <summary>
            Gets or sets the next node in chain.
            </summary>
            <value>The next node in chain.</value>
        </member>
        <member name="F:com.espertech.esper.collection.FIFOHashSet`1.Node.HashCode">
            <summary>
            Gets or sets the hash code.
            </summary>
            <value>The hash code.</value>
        </member>
        <member name="F:com.espertech.esper.collection.FIFOHashSet`1.Node.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="F:com.espertech.esper.collection.FIFOHashSet`1.Node.NextNodeInOrder">
            <summary>
            Gets or sets the next node in order.
            </summary>
            <value>The next node in order.</value>
        </member>
        <member name="F:com.espertech.esper.collection.FIFOHashSet`1.Node.PrevNodeInOrder">
            <summary>
            Gets or sets the previous node in order.
            </summary>
        </member>
        <member name="T:com.espertech.esper.collection.MultiKeyUntypedEventPair">
            <summary>
            Functions as a key value for Maps where keys need to be composite values, and includes 
            an <seealso cref="T:com.espertech.esper.client.EventBean"/> handle.
            The class allows a Map that uses MultiKeyUntyped entries for key values to use multiple objects 
            as keys. It calculates the hashCode from the key objects on construction and caches the hashCode.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.MultiKeyUntypedEventPair.#ctor(System.Object[],com.espertech.esper.client.EventBean)">
            <summary>Constructor for multiple keys supplied in an object array. </summary>
            <param name="keys">is an array of key objects</param>
            <param name="eventBean">for pair</param>
        </member>
        <member name="M:com.espertech.esper.collection.MultiKeyUntypedEventPair.Get(System.Int32)">
            <summary>Returns the key object at the specified position. </summary>
            <param name="index">is the array position</param>
            <returns>key object at position</returns>
        </member>
        <member name="P:com.espertech.esper.collection.MultiKeyUntypedEventPair.EventBean">
            <summary>Returns the event. </summary>
            <value>event</value>
        </member>
        <member name="P:com.espertech.esper.collection.MultiKeyUntypedEventPair.Count">
            <summary>Returns the number of key objects. </summary>
            <value>size of key object array</value>
        </member>
        <member name="P:com.espertech.esper.collection.MultiKeyUntypedEventPair.Keys">
            <summary>Returns keys. </summary>
            <value>keys object array</value>
        </member>
        <member name="T:com.espertech.esper.collection.NameParameterCountKey">
            <summary>
            A hash key that include a name and a count, wherein the combination of name and count defines the uniqueness.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.NameParameterCountKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.collection.NameParameterCountKey.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:com.espertech.esper.collection.NumberSetShiftGroupEnumeration">
            <summary>
            Enumeration that first returns a round-shift-left of all numbers and
            when that is exhausted it returns number sets using grouped algo until
            exhausted.
            </summary>
        </member>
        <member name="T:com.espertech.esper.collection.OneEventCollection">
            <summary>
            Simple collection that exposes a limited add-and-get interface and
            that is optimized towards holding a single event, but can hold multiple
            events. If more then one event is added, the class allocates a linked
            list for additional events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.OneEventCollection.Add(com.espertech.esper.client.EventBean)">
            <summary>
            Add an event to the collection.
            </summary>
            <param name="theEvent">is the event to add</param>
        </member>
        <member name="M:com.espertech.esper.collection.OneEventCollection.IsEmpty">
            <summary>
            Returns true if the collection is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
            <returns>true if empty, false if not</returns>
        </member>
        <member name="M:com.espertech.esper.collection.OneEventCollection.ToArray">
            <summary>
            Returns an array holding the collected events.
            </summary>
            <returns>event array</returns>
        </member>
        <member name="M:com.espertech.esper.collection.TimeWindowPair.#ctor(System.Int64,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.collection.TimeWindowPair"/> class.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="eventHolder">The event holder.</param>
        </member>
        <member name="P:com.espertech.esper.collection.TimeWindowPair.Timestamp">
            <summary>
            Gets or sets the timestamp.
            </summary>
            <value>The timestamp.</value>
        </member>
        <member name="P:com.espertech.esper.collection.TimeWindowPair.EventHolder">
            <summary>
            Gets or sets the event holder.
            </summary>
            <value>The event holder.</value>
        </member>
        <member name="M:com.espertech.esper.compat.AtomicLong.Get">
            <summary>
            Gets this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.AtomicLong.Set(System.Int64)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:com.espertech.esper.compat.AtomicLong.IncrementAndGet">
            <summary>
            Increments and returns the value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.AtomicLong.DecrementAndGet">
            <summary>
            Decrements and returns the value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.BoundBlockingQueueOverride.#cctor">
            <summary>
            Initializes the <see cref="T:com.espertech.esper.compat.collections.BoundBlockingQueueOverride"/> class.
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.collections.BoundBlockingQueueOverride.IsEngaged">
            <summary>
            Gets a value indicating whether the override is engaged.
            </summary>
            <value><c>true</c> if the override is engaged; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:com.espertech.esper.compat.collections.DictionaryExtensions.Remove``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@)">
            <summary>
            Removes the item from the dictionary that is associated with
            the specified key.  Returns the value that was found at that
            location and removed or the defaultValue.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">Search key into the dictionary</param>
            <param name="value">The value removed from the dictionary (if found).</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.DictionaryExtensions.RemoveAndReturn``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Removes the item from the dictionary that is associated with
            the specified key.  The item if found is returned; if not,
            default(V) is returned.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.DictionaryExtensions.Get``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Fetches the value associated with the specified key.
            If no value can be found, then the defaultValue is
            returned.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.DictionaryExtensions.Get``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Fetches the value associated with the specified key.
            If no value can be found, then default(V) is returned.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.DictionaryExtensions.Put``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Sets the given key in the dictionary.  If the key
            already exists, then it is remapped to thenew value.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.DictionaryExtensions.Push``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Sets the given key in the dictionary.  If the key
            already exists, then it is remapped to the new value.
            If a value was previously mapped it is returned.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.DictionaryExtensions.PutAll``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Puts all values from the source dictionary into
            this dictionary.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.DictionaryExtensions.PutAll``3(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``2}},com.espertech.esper.compat.Transformer{``2,``1})">
            <summary>
            Puts all values from the source dictionary into this dictionary.  This variation
            of the method allows the values to be transformed from one type to another.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="source">The source.</param>
            <param name="transformer">The transformer.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.DictionaryExtensions.FirstValue``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Returns the first value in the enumeration of values
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dictionary">The dictionary.</param>
            <returns></returns>
        </member>
        <member name="F:com.espertech.esper.compat.collections.OrderedDictionary`2._keyList">
            <summary>
            Key List
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.collections.OrderedDictionary`2._valList">
            <summary>
            Value list
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.collections.OrderedDictionary`2._keyComparer">
            <summary>
            Key comparer
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.OrderedDictionary`2.#ctor(System.Collections.Generic.List{`0},System.Collections.Generic.List{`1},System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.OrderedDictionary`2"/> class.
            </summary>
            <param name="keyList">The key list.</param>
            <param name="valList">The val list.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.OrderedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.OrderedDictionary`2"/> class.
            </summary>
            <param name="keyComparer">The key comparer.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.OrderedDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.OrderedDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.OrderedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.OrderedDictionary`2.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.OrderedDictionary`2.BinarySearch(`0)">
            <summary>
            Searches the list for a given key.  The algorithm leverages the binary
            search routine built into the class libraries.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.OrderedDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.OrderedDictionary`2.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.OrderedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.OrderedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the array to a target.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.OrderedDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.OrderedDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.OrderedDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.OrderedDictionary`2.Remove(`0)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.OrderedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.OrderedDictionary`2.Head(`0,System.Boolean)">
            <summary>
            Returns a dictionary that includes everything up to the specified value.
            Whether the value is included in the range depends on whether the isInclusive
            flag is set.
            </summary>
            <param name="value">The value.</param>
            <param name="isInclusive">if set to <c>true</c> [is inclusive].</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.OrderedDictionary`2.GetHeadIndex(`0,System.Boolean)">
            <summary>
            Gets the index that should be used for an inclusive or exclusive search
            ending at the head index.
            </summary>
            <param name="value">The start value.</param>
            <param name="isInclusive">if set to <c>true</c> [is inclusive].</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.OrderedDictionary`2.Tail(`0,System.Boolean)">
            <summary>
            Returns a dictionary that includes everything after the value.
            Whether the value is included in the range depends on whether the isInclusive
            flag is set.
            </summary>
            <param name="value">The end value.</param>
            <param name="isInclusive">if set to <c>true</c> [is inclusive].</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.OrderedDictionary`2.GetTailIndex(`0,System.Boolean)">
            <summary>
            Gets the index that should be used for an inclusive or exclusive search
            starting from tail index.
            </summary>
            <param name="value">The end value.</param>
            <param name="isInclusive">if set to <c>true</c> [is inclusive].</param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.OrderedDictionary`2.KeyComparer">
            <summary>
            Gets the key comparer.
            </summary>
            <value>The key comparer.</value>
        </member>
        <member name="P:com.espertech.esper.compat.collections.OrderedDictionary`2.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:com.espertech.esper.compat.collections.OrderedDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:com.espertech.esper.compat.collections.OrderedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the <see cref="!:V"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.compat.collections.OrderedDictionary`2.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:com.espertech.esper.compat.collections.OrderedDictionary`2.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="M:com.espertech.esper.compat.collections.StandardComparer`1.#ctor(System.Func{`0,`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.StandardComparer`1"/> class.
            </summary>
            <param name="finalComparison">The final comparison.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.StandardComparer`1.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to,
            or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value
            Condition
            Less than zero
            <paramref name="x"/> is less than <paramref name="y"/>.
            Zero
            <paramref name="x"/> equals <paramref name="y"/>.
            Greater than zero
            <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.compat.CastHelper">
            <summary>
            Provides efficient cast methods for converting from object to
            primitive types.  The cast method provided here-in is consistent
            with the cast mechanics of C#.  These cast mechanics are not
            the same as those provided by the IConvertible interface.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.CastHelper.GetTypeCaster(System.Type,System.Type)">
            <summary>
            Gets the cast converter.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <param name="targetType">Type of the target.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.CastHelper.GetCastConverter(System.Type)">
            <summary>
            Gets the cast converter for the specified type.  If none is
            found, this method returns null.
            </summary>
            <param name="t">The t.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.CastHelper.PrimitiveCastEnum(System.Type,System.Object)">
            <summary>
            Casts the object to a enumerated type
            </summary>
            <param name="enumType">The type.</param>
            <param name="sourceObj">The source object</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.CastHelper.PrimitiveCastSByte(System.Object)">
            <summary>
            Casts the object to the System.SByte
            </summary>
            <param name="sourceObj">The source object</param>
        </member>
        <member name="M:com.espertech.esper.compat.CastHelper.PrimitiveCastByte(System.Object)">
            <summary>
            Casts the object to the System.Byte
            </summary>
            <param name="sourceObj">The source object</param>
        </member>
        <member name="M:com.espertech.esper.compat.CastHelper.PrimitiveCastChar(System.Object)">
            <summary>
            Casts the object to the System.Char
            </summary>
            <param name="sourceObj">The source object</param>
        </member>
        <member name="M:com.espertech.esper.compat.CastHelper.PrimitiveCastInt16(System.Object)">
            <summary>
            Casts the object to the System.Int16
            </summary>
            <param name="sourceObj">The source object</param>
        </member>
        <member name="M:com.espertech.esper.compat.CastHelper.PrimitiveCastInt32(System.Object)">
            <summary>
            Casts the object to the System.Int32
            </summary>
            <param name="sourceObj">The source object</param>
        </member>
        <member name="M:com.espertech.esper.compat.CastHelper.PrimitiveCastInt64(System.Object)">
            <summary>
            Casts the object to the System.Int64
            </summary>
            <param name="sourceObj">The source object</param>
        </member>
        <member name="M:com.espertech.esper.compat.CastHelper.PrimitiveCastUInt16(System.Object)">
            <summary>
            Casts the object to the System.UInt16
            </summary>
            <param name="sourceObj">The source object</param>
        </member>
        <member name="M:com.espertech.esper.compat.CastHelper.PrimitiveCastUInt32(System.Object)">
            <summary>
            Casts the object to the System.UInt32
            </summary>
            <param name="sourceObj">The source object</param>
        </member>
        <member name="M:com.espertech.esper.compat.CastHelper.PrimitiveCastUInt64(System.Object)">
            <summary>
            Casts the object to the System.UInt64
            </summary>
            <param name="sourceObj">The source object</param>
        </member>
        <member name="M:com.espertech.esper.compat.CastHelper.PrimitiveCastSingle(System.Object)">
            <summary>
            Casts the object to the System.Single
            </summary>
            <param name="sourceObj">The source object</param>
        </member>
        <member name="M:com.espertech.esper.compat.CastHelper.PrimitiveCastDouble(System.Object)">
            <summary>
            Casts the object to the System.Double
            </summary>
            <param name="sourceObj">The source object</param>
        </member>
        <member name="M:com.espertech.esper.compat.CastHelper.PrimitiveCastDecimal(System.Object)">
            <summary>
            Casts the object to the System.Decimal
            </summary>
            <param name="sourceObj">The source object</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.IBlockingQueue`1.Clear">
            <summary>
            Clears all items from the queue
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.IBlockingQueue`1.Push(`0)">
            <summary>
            Pushes an item onto the queue.  If the queue has reached
            capacity, the call will pend until the queue has space to
            receive the request.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.IBlockingQueue`1.Pop">
            <summary>
            Pops an item off the queue.  If there is nothing on the queue
            the call will pend until there is an item on the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.IBlockingQueue`1.Pop(System.Int32,`0@)">
            <summary>
            Pops an item off the queue.  If there is nothing on the queue
            the call will pend until there is an item on the queue or
            the timeout has expired.  If the timeout has expired, the
            method will return false.
            </summary>
            <param name="maxTimeoutInMillis">The max timeout in millis.</param>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.IBlockingQueue`1.Count">
            <summary>
            Gets the number of items in the queue.
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:com.espertech.esper.compat.collections.BoundBlockingQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.BoundBlockingQueue`1"/> class.
            </summary>
            <param name="maxCapacity">The max capacity.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.BoundBlockingQueue`1.Clear">
            <summary>
            Clears all items from the queue
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.BoundBlockingQueue`1.Push(`0)">
            <summary>
            Pushes an item onto the queue.  If the queue has reached
            capacity, the call will pend until the queue has space to
            receive the request.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.BoundBlockingQueue`1.Pop">
            <summary>
            Pops an item off the queue.  If there is nothing on the queue
            the call will pend until there is an item on the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.BoundBlockingQueue`1.Pop(System.Int32,`0@)">
            <summary>
            Pops an item off the queue.  If there is nothing on the queue
            the call will pend until there is an item on the queue or
            the timeout has expired.  If the timeout has expired, the
            method will return false.
            </summary>
            <param name="maxTimeoutInMillis">The max timeout in millis.</param>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.BoundBlockingQueue`1.Count">
            <summary>
            Gets the number of items in the queue.
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CompatExtensions.AtIndex(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Gets the item at the nth index of the enumerable.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CompatExtensions.AtIndex(System.Collections.IEnumerable,System.Int32,System.Func{System.Int32,System.Object})">
            <summary>
            Gets the item at the nth index of the enumerable.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <param name="index">The index.</param>
            <param name="itemNotFound">The item not found.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CompatExtensions.ContainsAll``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns true if all items in the itemEnum are contained in referenceCollection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="referenceCollection"></param>
            <param name="itemEnum"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CompatExtensions.Advance``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
            Advances the specified enumerator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerator">The enumerator.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CompatExtensions.DeepEquals``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Does a deep equality test on a set of lists.  Order is assumed to be the same.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pthis">The pthis.</param>
            <param name="pthat">The pthat.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CompatExtensions.IsEmptyOrNull``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether the specified collection in the parameter is null or
            empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parameter">The parameter.</param>
            <returns>
            	<c>true</c> if [is empty or null] [the specified parameter]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CompatExtensions.IsEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether the specified collection in the parameter is empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parameter">The parameter.</param>
            <returns>
            	<c>true</c> if the specified parameter is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CompatExtensions.IsEmptyCollection(System.Collections.ICollection)">
            <summary>
            Determines whether the specified collection in the parameter is empty.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>
            	<c>true</c> if the specified parameter is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CompatExtensions.IsNotEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether the specified collection in the parameter is not empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parameter">The parameter.</param>
            <returns>
            	<c>true</c> if the specified parameter is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CompatExtensions.AddAll``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds all of the items in the source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pthis">The pthis.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CompatExtensions.Second``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the second item in the set
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CompatExtensions.RemoveAll``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes all items.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CompatExtensions.Reverse``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Primitive reversal of a collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CompatExtensions.Render(System.Collections.IEnumerable)">
            <summary>
            Renders an enumerable source
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CompatExtensions.Render(System.Collections.IEnumerable,System.Func{System.Object,System.String})">
            <summary>
            Renders an enumerable source
            </summary>
            <param name="source">The source.</param>
            <param name="renderEngine">The render engine.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CompatExtensions.RemoveAndReturn``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Removes the item at the specified index from the list and
            returns the item.
            </summary>
            <typeparam name="V"></typeparam>
            <param name="list">The list.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CompatExtensions.PopFront``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
            Removes the item at the front of the list and returns it.
            </summary>
            <typeparam name="V"></typeparam>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CompatExtensions.Render(System.Array)">
            <summary>
            Renders the array as a string.
            </summary>
            <param name="array">The array.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CompatExtensions.Render(System.Array,System.String,System.String)">
            <summary>
            Renders the array as a string
            </summary>
            <param name="array">The array.</param>
            <param name="itemSeparator">The item separator.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ObsoleteConcurrentDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.ObsoleteConcurrentDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ObsoleteConcurrentDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.ObsoleteConcurrentDictionary`2"/> class.
            </summary>
            <param name="subDictionary">The sub dictionary.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ObsoleteConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ObsoleteConcurrentDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ObsoleteConcurrentDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ObsoleteConcurrentDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ObsoleteConcurrentDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
                                Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
            <param name="item">
                                The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                            </param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ObsoleteConcurrentDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ObsoleteConcurrentDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
                                Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <param name="item">
                                The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                            </param>
            <exception cref="T:System.NotSupportedException">
                                The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ObsoleteConcurrentDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ObsoleteConcurrentDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ObsoleteConcurrentDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ObsoleteConcurrentDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
            </exception>
        </member>
        <member name="P:com.espertech.esper.compat.collections.ObsoleteConcurrentDictionary`2.Count">
            <summary>
                                Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
                                The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.ObsoleteConcurrentDictionary`2.IsReadOnly">
            <summary>
                                Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.ObsoleteConcurrentDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <value></value>
            <returns>
            The element with the specified key.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The property is retrieved and <paramref name="key"/> is not found.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="P:com.espertech.esper.compat.collections.ObsoleteConcurrentDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.ObsoleteConcurrentDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.EmptyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.EmptyDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.EmptyDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.EmptyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.EmptyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.EmptyDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.EmptyDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.EmptyDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.EmptyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.EmptyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.EmptyDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="P:com.espertech.esper.compat.collections.EmptyDictionary`2.Item(`0)">
            <summary>
            Gets or sets the <see cref="!:V"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.compat.collections.EmptyDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.EmptyDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.EmptyDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.EmptyDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ProxyComparer`1.#ctor(System.Func{`0,`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.ProxyComparer`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ProxyComparer`1.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <returns>
            Value 
                                Condition 
                                Less than zero
                            <paramref name="x"/> is less than <paramref name="y"/>.
                                Zero
                            <paramref name="x"/> equals <paramref name="y"/>.
                                Greater than zero
                            <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
            <param name="x">The first object to compare.
                            </param><param name="y">The second object to compare.
                            </param>
        </member>
        <member name="T:com.espertech.esper.compat.ReadOnlyCollection`1">
            <summary>
            A wrapper that provide a list that is readonly.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyCollection`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.ReadOnlyList`1"/> class.
            </summary>
            <param name="parentList">The parent list.</param>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyCollection`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyCollection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyCollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.ReadOnlyCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.ReadOnlyCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:com.espertech.esper.compat.collections.ImperfectBlockingQueue`1">
            <summary>
            ImperfectBlockingQueue is a blocking queue designed for very high performance exchanges
            between threads.  Multiple readers and writers can exchange information using the
            ImperfectBlockingQueue.  The design allows for a read node and a write node.  Both the
            read node and write node are assumed to be probablistically incorrect at any given time.
            Specifically, that means that the read node may have actually been processed and the
            write node may not actually be the tail.  Rather than attempting to correct for this 
            imperfection in the data structure, we leverage it.
            <para/>
            When a writer attempts to write to the tail, the tail uses an atomic compare-exchange
            to exchange the next node with the newly allocated node.  If the exchange fails, the 
            thread will iterate through the next member until it finds null and the cycle continue
            again with the atomic compare-exchange.  Using this method, the writer will succeed
            in writing to the tail atomically.  The write node does not need to accurately reflect
            the true end of tail, so adjusting the write node to the written node is "reasonably"
            accurate.
            <para/>
            When a reader attempts to read from the head, an atomic compare exchange is used to
            test against the "IsProcessed" field of the node.  If the node has been processed, then
            the reader moves on to the next node until it can successfully perform a CAS against
            the node.  If none can be found, the method will force a sleep to simulate a block.
            Once found, the reader extracts the value for return and sets the head equal to the
            node just read.  Again, since we're probablistic, this is fine.  Since we've successfully
            read from the node, we're assured that all nodes before us have been processed.  Being
            "reasonably" accurate with the read node is fine since the next reader will simply
            advance from this point.
            <para/>
            This class was tested against various concurrent reader/writer models was equal to or
            outperformed all other models in all cases.  However, it still appears that during
            tight iterations that there is about a 4-1 call ratio between CAS and the Push method
            which means there is still some efficiency to be squeezed out.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ImperfectBlockingQueue`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.ImperfectBlockingQueue`1"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ImperfectBlockingQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.ImperfectBlockingQueue`1"/> class.
            </summary>
            <param name="maxLength">Length of the max.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ImperfectBlockingQueue`1.Clear">
            <summary>
            Clears all items from the queue
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ImperfectBlockingQueue`1.Push(`0)">
            <summary>
            Pushes an item onto the queue.  If the queue has reached
            capacity, the call will pend until the queue has space to
            receive the request.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ImperfectBlockingQueue`1.Pop">
            <summary>
            Pops an item off the queue.  If there is nothing on the queue
            the call will pend until there is an item on the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ImperfectBlockingQueue`1.Pop(System.Int32,`0@)">
            <summary>
            Pops an item off the queue.  If there is nothing on the queue
            the call will pend until there is an item on the queue or
            the timeout has expired.  If the timeout has expired, the
            method will return false.
            </summary>
            <param name="maxTimeoutInMillis">The max timeout in millis.</param>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.ImperfectBlockingQueue`1.Count">
            <summary>
            Gets the number of items in the queue.
            </summary>
            <value>The count.</value>
        </member>
        <member name="F:com.espertech.esper.compat.collections.ImperfectBlockingQueue`1.Node.IsProcessed">
            <summary>
            Indicates whether the node has been processed
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.collections.ImperfectBlockingQueue`1.Node.Value">
            <summary>
            Value at this node
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.collections.ImperfectBlockingQueue`1.Node.Next">
            <summary>
            Next node in list
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ImperfectBlockingQueue`1.Node.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.ImperfectBlockingQueue`1.Node"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedBlockingQueue`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.LinkedBlockingQueue`1"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedBlockingQueue`1.Clear">
            <summary>
            Clears all items from the queue
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedBlockingQueue`1.Push(`0)">
            <summary>
            Pushes an item onto the queue.  If the queue has reached
            capacity, the call will pend until the queue has space to
            receive the request.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedBlockingQueue`1.Pop">
            <summary>
            Pops an item off the queue.  If there is nothing on the queue
            the call will pend until there is an item on the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedBlockingQueue`1.Pop(System.Int32,`0@)">
            <summary>
            Pops an item off the queue.  If there is nothing on the queue
            the call will pend until there is an item on the queue or
            the timeout has expired.  If the timeout has expired, the
            method will return false.
            </summary>
            <param name="maxTimeoutInMillis">The max timeout in millis.</param>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.LinkedBlockingQueue`1.Count">
            <summary>
            Gets the number of items in the queue.
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LookaheadEnumerator`1.HasNext">
            <summary>
            Gets or sets a value indicating whether this instance has a value after
            the current value.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LookaheadEnumerator`1.Next">
            <summary>
            Gets the next item.
            </summary>
            <value>The next.</value>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LookaheadEnumerator`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.LookaheadEnumerator`1"/> class.
            </summary>
            <param name="baseEnum">The base enum.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LookaheadEnumerator`1.#ctor(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.LookaheadEnumerator`1"/> class.
            </summary>
            <param name="baseEnum">The base enum.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LookaheadEnumerator`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LookaheadEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LookaheadEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="P:com.espertech.esper.compat.collections.LookaheadEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <value></value>
            <returns>
            The current element in the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
            </exception>
        </member>
        <member name="P:com.espertech.esper.compat.collections.LookaheadEnumerator`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="F:com.espertech.esper.compat.collections.NullableDictionary`2._baseDictionary">
            <summary>
            Underlying dictionary that handles real requests
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.collections.NullableDictionary`2._nullEntry">
            <summary>
            Value of the entry at the null key.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.NullableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.NullableDictionary`2"/> class.
            </summary>
            <param name="baseDictionary">The base dictionary.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.NullableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.NullableDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.NullableDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.NullableDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.NullableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.NullableDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.NullableDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
                                Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <param name="item">
                                The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                            </param>
            <exception cref="T:System.NotSupportedException">
                                The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.NullableDictionary`2.ContainsKey(`0)">
            <summary>
                                Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.
            </returns>
            <param name="key">
                                The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
                            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.
                            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.NullableDictionary`2.Add(`0,`1)">
            <summary>
                                Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <param name="key">
                                The object to use as the key of the element to add.
                            </param>
            <param name="value">
                                The object to use as the value of the element to add.
                            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.
                            </exception>
            <exception cref="T:System.ArgumentException">
                                An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
                            </exception>
            <exception cref="T:System.NotSupportedException">
                                The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.
                            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.NullableDictionary`2.Remove(`0)">
            <summary>
                                Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
            <param name="key">
                                The key of the element to remove.
                            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.
                            </exception>
            <exception cref="T:System.NotSupportedException">
                                The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.
                            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.NullableDictionary`2.TryGetValue(`0,`1@)">
            <summary>
                                Gets the value associated with the specified key.
            </summary>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, false.
            </returns>
            <param name="key">
                                The key whose value to get.
                            </param>
            <param name="value">
                                When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.
                            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.
                            </exception>
        </member>
        <member name="P:com.espertech.esper.compat.collections.NullableDictionary`2.BaseDictionary">
            <summary>
            Gets the base dictionary.
            </summary>
            <value>The base dictionary.</value>
        </member>
        <member name="P:com.espertech.esper.compat.collections.NullableDictionary`2.NullEntryCount">
            <summary>
            Gets the count for the null entry.
            </summary>
            <value>The null entry count.</value>
        </member>
        <member name="P:com.espertech.esper.compat.collections.NullableDictionary`2.Count">
            <summary>
                                Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
                                The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.NullableDictionary`2.IsReadOnly">
            <summary>
                                Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.NullableDictionary`2.Item(`0)">
            <summary>
                                Gets or sets the element with the specified key.
            </summary>
            <returns>
                                The element with the specified key.
            </returns>
            <param name="key">
                                The key of the element to get or set.
                            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.
                            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
                                The property is retrieved and <paramref name="key" /> is not found.
                            </exception>
            <exception cref="T:System.NotSupportedException">
                                The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.
                            </exception>
        </member>
        <member name="P:com.espertech.esper.compat.collections.NullableDictionary`2.Keys">
            <summary>
                                Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <returns>
                                An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.NullableDictionary`2.Values">
            <summary>
                                Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <returns>
                                An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
        </member>
        <member name="F:com.espertech.esper.compat.collections.NullableValueTypeDictionary`2._baseDictionary">
            <summary>
            Underlying dictionary that handles real requests
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.collections.NullableValueTypeDictionary`2._nullEntry">
            <summary>
            Value of the entry at the null key.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.NullableValueTypeDictionary`2.#ctor(System.Collections.Generic.IDictionary{System.Nullable{`0},`1})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.NullableValueTypeDictionary`2"/> class.
            </summary>
            <param name="baseDictionary">The base dictionary.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.NullableValueTypeDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.NullableValueTypeDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.NullableValueTypeDictionary`2.Add(System.Collections.Generic.KeyValuePair{System.Nullable{`0},`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.NullableValueTypeDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.NullableValueTypeDictionary`2.Contains(System.Collections.Generic.KeyValuePair{System.Nullable{`0},`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.NullableValueTypeDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{System.Nullable{`0},`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.NullableValueTypeDictionary`2.Remove(System.Collections.Generic.KeyValuePair{System.Nullable{`0},`1})">
            <summary>
                                Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <param name="item">
                                The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                            </param>
            <exception cref="T:System.NotSupportedException">
                                The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.NullableValueTypeDictionary`2.ContainsKey(System.Nullable{`0})">
            <summary>
                                Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.
            </returns>
            <param name="key">
                                The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
                            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.
                            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.NullableValueTypeDictionary`2.Add(System.Nullable{`0},`1)">
            <summary>
                                Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <param name="key">
                                The object to use as the key of the element to add.
                            </param>
            <param name="value">
                                The object to use as the value of the element to add.
                            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.
                            </exception>
            <exception cref="T:System.ArgumentException">
                                An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
                            </exception>
            <exception cref="T:System.NotSupportedException">
                                The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.
                            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.NullableValueTypeDictionary`2.Remove(System.Nullable{`0})">
            <summary>
                                Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
            <param name="key">
                                The key of the element to remove.
                            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.
                            </exception>
            <exception cref="T:System.NotSupportedException">
                                The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.
                            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.NullableValueTypeDictionary`2.TryGetValue(System.Nullable{`0},`1@)">
            <summary>
                                Gets the value associated with the specified key.
            </summary>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, false.
            </returns>
            <param name="key">
                                The key whose value to get.
                            </param>
            <param name="value">
                                When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.
                            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.
                            </exception>
        </member>
        <member name="P:com.espertech.esper.compat.collections.NullableValueTypeDictionary`2.BaseDictionary">
            <summary>
            Gets the base dictionary.
            </summary>
            <value>The base dictionary.</value>
        </member>
        <member name="P:com.espertech.esper.compat.collections.NullableValueTypeDictionary`2.NullEntryCount">
            <summary>
            Gets the count for the null entry.
            </summary>
            <value>The null entry count.</value>
        </member>
        <member name="P:com.espertech.esper.compat.collections.NullableValueTypeDictionary`2.Count">
            <summary>
                                Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
                                The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.NullableValueTypeDictionary`2.IsReadOnly">
            <summary>
                                Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.NullableValueTypeDictionary`2.Item(System.Nullable{`0})">
            <summary>
                                Gets or sets the element with the specified key.
            </summary>
            <returns>
                                The element with the specified key.
            </returns>
            <param name="key">
                                The key of the element to get or set.
                            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.
                            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
                                The property is retrieved and <paramref name="key" /> is not found.
                            </exception>
            <exception cref="T:System.NotSupportedException">
                                The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.
                            </exception>
        </member>
        <member name="P:com.espertech.esper.compat.collections.NullableValueTypeDictionary`2.Keys">
            <summary>
                                Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <returns>
                                An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.NullableValueTypeDictionary`2.Values">
            <summary>
                                Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <returns>
                                An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.IStringDictionary`1.IsCaseSensitive">
            <summary>
            Gets a value indicating whether the keys for the dictionary
            are case sensitive.
            </summary>
            <value>
            	<c>true</c> if this instance is case sensitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:com.espertech.esper.compat.collections.StringDictionary`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.StringDictionary`1"/> class.
            </summary>
            <param name="isCaseSensitive">if set to <c>true</c> [is case sensitive].</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.StringDictionary`1.#ctor(System.Boolean,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.StringDictionary`1"/> class.
            </summary>
            <param name="isCaseSensitive">if set to <c>true</c> [is case sensitive].</param>
            <param name="sourceDictionary">The source dictionary.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.StringDictionary`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.StringDictionary`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.StringDictionary`1.Add(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.StringDictionary`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.StringDictionary`1.Contains(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.StringDictionary`1.CopyTo(System.Collections.Generic.KeyValuePair{System.String,`0}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type <paramref name="V"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.StringDictionary`1.Remove(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.StringDictionary`1.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.StringDictionary`1.Add(System.String,`0)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.StringDictionary`1.Remove(System.String)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.StringDictionary`1.TryGetValue(System.String,`0@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
            </exception>
        </member>
        <member name="P:com.espertech.esper.compat.collections.StringDictionary`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.StringDictionary`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.StringDictionary`1.Item(System.String)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <value></value>
            <returns>
            The element with the specified key.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The property is retrieved and <paramref name="key"/> is not found.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="P:com.espertech.esper.compat.collections.StringDictionary`1.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.StringDictionary`1.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.StringDictionary`1.IsCaseSensitive">
            <summary>
            Gets or sets a value indicating whether the keys for the dictionary
            are case sensitive.
            </summary>
            <value>
            	<c>true</c> if this instance is case sensitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:com.espertech.esper.compat.collections.SubmapDictionary`2">
            <summary>
            An efficient subsection of an ordered or sorted dictionary.  Designed for traversal and lookup, but not
            necessarily efficient at counting elements.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.collections.TransformCollection`2._trueCollection">
            <summary>
            Underlying collection
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.collections.TransformCollection`2._transformExtInt">
            <summary>
            Function that transforms items from the "external" type to the "internal" type
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.collections.TransformCollection`2._transformIntExt">
            <summary>
            Function that transforms items from the "internal" type to the "external" type
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.TransformCollection`2.#ctor(System.Collections.Generic.ICollection{`0},System.Func{`1,`0},System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.TransformCollection`2"/> class.
            </summary>
            <param name="trueCollection">The true collection.</param>
            <param name="transformExtInt">The transform ext int.</param>
            <param name="transformIntExt">The transform int ext.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.TransformCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.TransformCollection`2.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.TransformCollection`2.Add(`1)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.TransformCollection`2.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.TransformCollection`2.Contains(`1)">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.TransformCollection`2.Remove(`1)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.TransformCollection`2.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:com.espertech.esper.compat.collections.TransformCollection`2.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:com.espertech.esper.compat.HighResolutionTimeProvider._baseNano">
            <summary>
            Represents the # of nano-seconds that were reported by DateTime.Now
            when we reset the baseline.  It is used to determine the starting
            point from which all other performance measurements are calculated.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.HighResolutionTimeProvider._baseTime">
            <summary>
            Represents the # of nano-seconds reported by NanoTime when we
            initialized the timer.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.HighResolutionTimeProvider._resetTime">
            <summary>
            Represents the # of nano-seconds at which we will reset the baseline.
            This accounts for drift between the high resolution timer and the
            internal clock.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.HighResolutionTimeProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.HighResolutionTimeProvider"/> class.
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.HighResolutionTimeProvider.BaseNano">
            <summary>
            Gets the # of nano-seconds that were reported by DateTime.Now
            when we reset the baseline.  It is used to determine the starting
            point from which all other performance measurements are calculated.
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.HighResolutionTimeProvider.BaseTime">
            <summary>
            Gets the # of nano-seconds reported by NanoTime when we
            initialized the timer.
            </summary>
            <value>The base time.</value>
        </member>
        <member name="P:com.espertech.esper.compat.HighResolutionTimeProvider.CurrentTime">
            <summary>
            Gets the current time.
            </summary>
            <value>The current time.</value>
        </member>
        <member name="M:com.espertech.esper.compat.logging.Log4Log4Net.#ctor(log4net.ILog)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.logging.Log4Log4Net"/> class.
            </summary>
            <param name="log">The log.</param>
        </member>
        <member name="M:com.espertech.esper.compat.logging.Log4Log4Net.ChangeConfiguration">
            <summary>
            Changes the configuration.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.logging.LogManager.GetLogger(System.Type)">
            <summary>
            Gets a logger instance for the given type.
            </summary>
            <param name="t">The t.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.logging.LogManager.GetLogger(System.String)">
            <summary>
            Gets the logger instance for the given name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.compat.MetaEnum">
            <summary>
            Methos for meta enumerations.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.MetaEnum.GetMetaEnum``1(System.String)">
            <summary>
            Gets the named clause.
            </summary>
            <param name="enumName">Name of the enum.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.MetaEnum.GetNamedEnum``2(System.Int32)">
            <summary>
            Gets the named enumerated value.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="enumOrdinal">The enum ordinal.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.compat.Mutable`1">
            <summary>
            Thread local data
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.threading.CommonReadLock">
            <summary>
            Description of CommonReadLock.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.threading.ILockable">
            <summary>
            A simple locking mechanism
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.ILockable.Acquire">
            <summary>
            Acquires the lock; the lock is released when the disposable
            object that was returned is disposed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.ILockable.ReleaseAcquire">
            <summary>
            Provides a temporary release of the lock if it is acquired.  When the
            disposable object that is returned is disposed, the lock is re-acquired.
            This method is effectively the opposite of acquire.
            </summary>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.compat.threading.CommonReadLock`1">
            <summary>
            Description of CommonReadLock.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.threading.CommonWriteLock">
            <summary>
            Description of CommonWriteLock.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.threading.CommonWriteLock`1">
            <summary>
            Description of CommonWriteLock.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.CountDownLatch.Await(System.TimeSpan)">
            <summary>
            Waits for the latch to be released for up to the specified amount of time.
            If the timeout expires a TimeoutException is thrown.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.CountDownLatch.Await">
            <summary>
            Awaits this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.threading.CountDownLatch.Count">
            <summary>
            Returns the number of outstanding latches that have not been
            removed.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:com.espertech.esper.compat.threading.DummyReaderWriterLock">
            <summary>
            Uses a standard lock to model a reader-writer ... not for general use
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.threading.IReaderWriterLock.ReadLock">
            <summary>
            Gets the read-side lockable
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.threading.IReaderWriterLock.WriteLock">
            <summary>
            Gets the write-side lockable
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.DummyReaderWriterLock.#ctor">
            <summary>
            Constructs a new instance of a DummyReaderWriterLock
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.threading.DummyReaderWriterLock.ReadLock">
            <summary>
            Gets the read-side lockable
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.threading.DummyReaderWriterLock.WriteLock">
            <summary>
            Gets the write-side lockable
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.threading.IReaderWriterLockCommon">
            <summary>
            Simple boilerplate for common reader-writer lock implementations
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.IReaderWriterLockCommon.AcquireReaderLock(System.Int32)">
            <summary>
            Acquires the reader lock.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.IReaderWriterLockCommon.AcquireWriterLock(System.Int32)">
            <summary>
            Acquires the writer lock.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.IReaderWriterLockCommon.ReleaseReaderLock">
            <summary>
            Releases the reader lock.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.IReaderWriterLockCommon.ReleaseWriterLock">
            <summary>
            Releases the writer lock.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.FairReaderWriterLock._uMainLock">
            <summary>
            Main lock
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FairReaderWriterLock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.threading.FairReaderWriterLock"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FairReaderWriterLock.WithMainLock(System.Action)">
            <summary>
            Executes the action within the mainlock.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FairReaderWriterLock.WithMainLock``1(System.Int64,System.Int64,System.Func{``0})">
            <summary>
            Executes the action within the mainlock.  An end time is provided to this
            call to set the last millisecond in which this lock must be obtained.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="timeCur">The current time.</param>
            <param name="timeEnd">The end time.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FairReaderWriterLock.AcquireReaderLock(System.Int32)">
            <summary>
            Acquires the reader lock.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FairReaderWriterLock.AcquireWriterLock(System.Int32)">
            <summary>
            Acquires the writer lock.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FairReaderWriterLock.ReleaseReaderLock">
            <summary>
            Releases the reader lock.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FairReaderWriterLock.ReleaseWriterLock">
            <summary>
            Releases the writer lock.
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.threading.FairReaderWriterLock.ReadLock">
            <summary>
            Gets the read-side lockable
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.compat.threading.FairReaderWriterLock.WriteLock">
            <summary>
            Gets the write-side lockable
            </summary>
            <value></value>
        </member>
        <member name="F:com.espertech.esper.compat.threading.FairReaderWriterLock.LockFlags.None">
            <summary>
            No flags are set
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.FairReaderWriterLock.LockFlags.Shared">
            <summary>
            Lock is in a shared state ...
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.FairReaderWriterLock.LockFlags.Exclusive">
            <summary>
            Lock is in an exclusive state ...
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.FairReaderWriterLock.LockFlags.ExclusiveUpgrade">
            <summary>
            Exclusive upgrade pending ...
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.IReaderWriterLockCommon`1.AcquireReaderLock(System.Int32)">
            <summary>
            Acquires the reader lock.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.IReaderWriterLockCommon`1.AcquireWriterLock(System.Int32)">
            <summary>
            Acquires the writer lock.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.IReaderWriterLockCommon`1.ReleaseReaderLock(`0)">
            <summary>
            Releases the reader lock.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.IReaderWriterLockCommon`1.ReleaseWriterLock(`0)">
            <summary>
            Releases the writer lock.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FifoReaderWriterLock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.threading.FairReaderWriterLock"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FifoReaderWriterLock.PushNode(com.espertech.esper.compat.threading.FifoReaderWriterLock.Node)">
            <summary>
            Pushes a node onto the end of the chain.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FifoReaderWriterLock.AcquireReaderLock(System.Int32)">
            <summary>
            Acquires the reader lock.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FifoReaderWriterLock.AcquireWriterLock(System.Int32)">
            <summary>
            Acquires the writer lock.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FifoReaderWriterLock.ReleaseReaderLock(com.espertech.esper.compat.threading.FifoReaderWriterLock.Node)">
            <summary>
            Releases the reader lock.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FifoReaderWriterLock.ReleaseWriterLock(com.espertech.esper.compat.threading.FifoReaderWriterLock.Node)">
            <summary>
            Releases the writer lock.
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.threading.FifoReaderWriterLock.ReadLock">
            <summary>
            Gets the read-side lockable
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.compat.threading.FifoReaderWriterLock.WriteLock">
            <summary>
            Gets the write-side lockable
            </summary>
            <value></value>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FifoReaderWriterLock.Node.#ctor(com.espertech.esper.compat.threading.FifoReaderWriterLock.NodeFlags)">
            <summary>
            Initializes a new instance of a node
            </summary>
            <param name="flags"></param>
        </member>
        <member name="F:com.espertech.esper.compat.threading.MonitorSlimLock._uLockId">
            <summary>
            Uniquely identifies the lock.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.MonitorSlimLock._uLockObj">
            <summary>
            Underlying object that is locked
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.MonitorSlimLock._uLockTimeout">
            <summary>
            Number of milliseconds until the lock acquisition fails
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.MonitorSlimLock._uLockOwner">
            <summary>
            Owner of the lock.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.MonitorSlimLock._uLockDepth">
            <summary>
            Used to track recursive locks.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.MonitorSlimLock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.threading.MonitorSlimLock"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.MonitorSlimLock.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.threading.MonitorSlimLock"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.MonitorSlimLock.Acquire">
            <summary>
            Acquires a lock against this instance.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.MonitorSlimLock.ReleaseAcquire">
            <summary>
            Provides a temporary release of the lock if it is acquired.  When the
            disposable object that is returned is disposed, the lock is re-acquired.
            This method is effectively the opposite of acquire.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.MonitorSlimLock.InternalAcquire">
            <summary>
            Internally acquires the lock.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.MonitorSlimLock.InternalRelease">
            <summary>
            Internally releases the lock.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.MonitorSlimLock.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.threading.MonitorSlimLock.LockTimeout">
            <summary>
            Gets the number of milliseconds until the lock acquisition fails.
            </summary>
            <value>The lock timeout.</value>
        </member>
        <member name="P:com.espertech.esper.compat.threading.MonitorSlimLock.LockDepth">
            <summary>
            Gets the lock depth.
            </summary>
            <value>The lock depth.</value>
        </member>
        <member name="P:com.espertech.esper.compat.threading.MonitorSlimLock.IsHeldByCurrentThread">
            <summary>
            Gets a value indicating whether this instance is held by current thread.
            </summary>
            <value>
            	<c>true</c> if this instance is held by current thread; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:com.espertech.esper.compat.threading.StandardReaderWriterLock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.threading.StandardReaderWriterLock"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.StandardReaderWriterLock.AcquireReaderLock(System.Int32)">
            <summary>
            Acquires the reader lock.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.StandardReaderWriterLock.AcquireWriterLock(System.Int32)">
            <summary>
            Acquires the writer lock.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.StandardReaderWriterLock.ReleaseReaderLock">
            <summary>
            Releases the reader lock.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.StandardReaderWriterLock.ReleaseWriterLock">
            <summary>
            Releases the writer lock.
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.threading.StandardReaderWriterLock.ReadLock">
            <summary>
            Gets the read-side lockable
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.compat.threading.StandardReaderWriterLock.WriteLock">
            <summary>
            Gets the write-side lockable
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.compat.VoidDisposable">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.VoidDisposable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.PerformanceObserverMono">
            <summary>
            Implementation of the performance observer turned for use on Windows.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.PerformanceObserverWin">
            <summary>
            Implementation of the performance observer turned for use on Windows.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.PerformanceTracker.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.PerformanceTracker"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.PerformanceTracker.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.PerformanceTracker.AddMeasurement">
            <summary>
            Adds the measurment.
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.PerformanceTracker.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="M:com.espertech.esper.compat.ScopedThreadCulture.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.ScopedThreadCulture"/> class.
            </summary>
            <param name="culture">The culture.</param>
        </member>
        <member name="M:com.espertech.esper.compat.ScopedThreadCulture.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.magic.MagicMarker.GetCollectionFactory(System.Type)">
            <summary>
            Creates a factory object that produces wrappers (MagicCollection) instances for a
            given object.  This method is designed for those who know early on that they are
            going to be dealing with an opaque object that will have a true generic definition
            once they receive it.  However, to make life easier (relatively speaking), we would
            prefer to operate with a clean object rather than the type specific detail.
            </summary>
            <param name="t">The t.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.magic.MagicMarker.NewCollectionFactory(System.Type)">
            <summary>
            Constructs the factory method for the given type.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.magic.MagicMarker.NewListFactory(System.Type)">
            <summary>
            Constructs the factory method for the given type.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.magic.MagicMarker.GetDictionaryFactory(System.Type)">
            <summary>
            Creates a factory object that produces wrappers (MagicStringDictionary) instances for
            a given object.  This method is designed for those who know early on that they are
            going to be dealing with an opaque object that will have a true generic definition
            once they receive it.  However, to make life easier (relatively speaking), we would
            prefer to operate with a clean object rather than the type specific detail.
            </summary>
            <param name="t">The t.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.magic.MagicMarker.NewDictionaryFactory(System.Type)">
            <summary>
            Constructs the factory method for the given type.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.magic.MagicMarker.GetStringDictionaryFactory(System.Type)">
            <summary>
            Creates a factory object that produces wrappers (MagicStringDictionary) instances for
            a given object.  This method is designed for those who know early on that they are
            going to be dealing with an opaque object that will have a true generic definition
            once they receive it.  However, to make life easier (relatively speaking), we would
            prefer to operate with a clean object rather than the type specific detail.
            </summary>
            <param name="t">The t.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.magic.MagicMarker.NewStringDictionaryFactory(System.Type)">
            <summary>
            Constructs the factory method for the given type.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="F:com.espertech.esper.compat.magic.MagicType._type">
            <summary>
            Underlying type managed by magic type
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.magic.MagicType._parent">
            <summary>
            MagicType for parent type
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.magic.MagicType._ciPropertyTable">
            <summary>
            Case insensitive property table
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.magic.MagicType._csPropertyTable">
            <summary>
            Case sensitive property table
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.magic.MagicType.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.magic.MagicType"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:com.espertech.esper.compat.magic.MagicType.New">
            <summary>
            Creates a new instance of the object.  Assumes a default constructor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.magic.MagicType.ExtendsType(System.Type)">
            <summary>
            Returns true if this type is an extension of the provided
            baseType.  This method will recurse the type tree to determine
            if the extension occurs anywhere in the tree.  If not found,
            the method returns false.
            </summary>
            <param name="baseType">Type of the base.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.magic.MagicType.IndexSimpleProperties">
            <summary>
            Indexes the simple properties.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.magic.MagicType.IndexMappedProperties">
            <summary>
            Indexes the mapped properties.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.magic.MagicType.IndexIndexedProperties">
            <summary>
            Indexes the indexed properties.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.magic.MagicType.GetAllProperties(System.Boolean,System.Predicate{com.espertech.esper.compat.magic.MagicPropertyInfo})">
            <summary>
            Gets all properties.
            </summary>
            <param name="isCaseSensitive">if set to <c>true</c> [is case sensitive].</param>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.magic.MagicType.GetAllProperties(System.Boolean)">
            <summary>
            Gets all properties.
            </summary>
            <param name="isCaseSensitive">if set to <c>true</c> [case sensitive].</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.magic.MagicType.GetSimpleProperties(System.Boolean)">
            <summary>
            Gets all simple properties.
            </summary>
            <param name="isCaseSensitive">if set to <c>true</c> [case sensitive].</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.magic.MagicType.GetMappedProperties(System.Boolean)">
            <summary>
            Gets all mapped properties.
            </summary>
            <param name="isCaseSensitive">if set to <c>true</c> [case sensitive].</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.magic.MagicType.GetIndexedProperties(System.Boolean)">
            <summary>
            Gets all indexed properties.
            </summary>
            <param name="isCaseSensitive">if set to <c>true</c> [case sensitive].</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.magic.MagicType.ResolveComplexProperty(System.String,com.espertech.esper.client.PropertyResolutionStyle)">
            <summary>
            Resolves the complex property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="resolutionStyle">The resolution style.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.magic.MagicType.ResolveProperty(System.String,com.espertech.esper.client.PropertyResolutionStyle)">
            <summary>
            Finds the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="resolutionStyle">if set to <c>true</c> [is case sensitive].</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.magic.MagicType.ResolvePropertyMethod(System.String,com.espertech.esper.client.PropertyResolutionStyle)">
            <summary>
            Search of the type to find a property.
            </summary>
            <param name="propertyName">The name.</param>
            <param name="resolutionStyle">The resolution style.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.magic.MagicType.GetMutatorPropertyName(System.Reflection.MethodInfo)">
            <summary>
            Gets the name of the mutator property.
            </summary>
            <param name="mutatorMethod">The mutator method.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.magic.MagicType.GetAccessorPropertyName(System.Reflection.MethodInfo)">
            <summary>
            Gets the name that should be assigned to the property bound to the accessorMethod
            </summary>
            <param name="accessorMethod"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.magic.MagicType.FetchSimpleProperties">
            <summary>
            Returns all simple properties
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.magic.MagicType.FetchSimpleAccessors">
            <summary>
            Returns an enumerable that provides all accessors that take no
            parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.magic.MagicType.FetchIndexedAccessors">
            <summary>
            Returns an enumerable that provides all accessors that take one
            parameter of type int.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.magic.MagicType.FetchMappedAccessors">
            <summary>
            Returns an enumerable that provides all accessors that take one
            parameter of type string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.magic.MagicType.GetAccessors">
            <summary>
            Enumerates all accessor methods for a type
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.magic.MagicType.TargetType">
            <summary>
            Gets the type that magic type reflects.
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.magic.MagicType.BaseType">
            <summary>
            Gets the magic type for the base type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.magic.MagicPropertyInfo.CastTo``1(System.Object)">
            <summary>
            Static cast method used in assignment.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.magic.MagicPropertyInfo.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:com.espertech.esper.compat.magic.MagicPropertyInfo.PropertyType">
            <summary>
            Gets or sets the type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="P:com.espertech.esper.compat.magic.MagicPropertyInfo.EventPropertyType">
            <summary>
            Gets or sets the event type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="P:com.espertech.esper.compat.magic.MagicPropertyInfo.GetFunction">
            <summary>
            Returns a function that can be used to obtain the value of the
            property from an object instance.
            </summary>
            <value>The get function.</value>
        </member>
        <member name="P:com.espertech.esper.compat.magic.MagicPropertyInfo.SetFunction">
            <summary>
            Returns a function that can be used to set the value of the
            property in an object instance.
            </summary>
            <value>The set function.</value>
        </member>
        <member name="P:com.espertech.esper.compat.magic.MagicPropertyInfo.CanWrite">
            <summary>
            Gets a value indicating whether this property can be set.
            </summary>
            <value><c>true</c> if this instance can write; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:com.espertech.esper.compat.magic.SimpleMagicPropertyInfo.#ctor(System.String,System.Reflection.MemberInfo,System.Reflection.MethodInfo,System.Reflection.MethodInfo,com.espertech.esper.events.EventPropertyType)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.magic.SimpleMagicPropertyInfo"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="member">The member.</param>
            <param name="getMethod">The get method.</param>
            <param name="setMethod">The set method.</param>
            <param name="propertyType">Type of the property.</param>
        </member>
        <member name="P:com.espertech.esper.compat.magic.SimpleMagicPropertyInfo.Member">
            <summary>
            Gets or sets the member.
            </summary>
            <value>The member.</value>
        </member>
        <member name="P:com.espertech.esper.compat.magic.SimpleMagicPropertyInfo.GetMethod">
            <summary>
            Gets or sets the get method.
            </summary>
            <value>The get method.</value>
        </member>
        <member name="P:com.espertech.esper.compat.magic.SimpleMagicPropertyInfo.SetMethod">
            <summary>
            Gets or sets the set method.
            </summary>
            <value>The set method.</value>
        </member>
        <member name="P:com.espertech.esper.compat.magic.SimpleMagicPropertyInfo.CanWrite">
            <summary>
            Gets a value indicating whether this property can be set.
            </summary>
            <value><c>true</c> if this instance can write; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:com.espertech.esper.compat.magic.SimpleMagicPropertyInfo.Next">
            <summary>
            Gets or sets the next magic property info that shares the same
            name.
            </summary>
            <value>The next.</value>
        </member>
        <member name="P:com.espertech.esper.compat.magic.SimpleMagicPropertyInfo.IsUnique">
            <summary>
            Gets a value indicating whether this property is unique.  If a property is
            not unique then it shares the same name as another property but a different
            implementation.
            </summary>
            <value><c>true</c> if this instance is unique; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:com.espertech.esper.compat.magic.SimpleMagicPropertyInfo.GetFunction">
            <summary>
            Returns a function that can be used to obtain the value of the
            property from an object instance.
            </summary>
            <value>The get function.</value>
        </member>
        <member name="P:com.espertech.esper.compat.magic.SimpleMagicPropertyInfo.SetFunction">
            <summary>
            Returns a function that can be used to set the value of the
            property in an object instance.
            </summary>
            <value>The set function.</value>
        </member>
        <member name="M:com.espertech.esper.compat.magic.DynamicMagicPropertyInfo.GetValue(System.Object)">
            <summary>
            Gets the value from an instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.magic.DynamicMagicPropertyInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value within an instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:com.espertech.esper.compat.magic.DynamicMagicPropertyInfo.#ctor(com.espertech.esper.compat.magic.MagicPropertyInfo,com.espertech.esper.compat.magic.MagicPropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.magic.DynamicMagicPropertyInfo"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="child">The child.</param>
        </member>
        <member name="P:com.espertech.esper.compat.magic.DynamicMagicPropertyInfo.GetFunction">
            <summary>
            Returns a function that can be used to obtain the value of the
            property from an object instance.
            </summary>
            <value>The get function.</value>
        </member>
        <member name="P:com.espertech.esper.compat.magic.DynamicMagicPropertyInfo.SetFunction">
            <summary>
            Returns a function that can be used to set the value of the
            property in an object instance.
            </summary>
            <value>The set function.</value>
        </member>
        <member name="P:com.espertech.esper.compat.magic.DynamicMagicPropertyInfo.CanWrite">
            <summary>
            Gets a value indicating whether this property can be set.
            </summary>
            <value><c>true</c> if this instance can write; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:com.espertech.esper.compat.threading.VoidLock.Acquire">
            <summary>
            Acquires the lock; the lock is released when the disposable
            object that was returned is disposed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.VoidLock.ReleaseAcquire">
            <summary>
            Provides a temporary release of the lock if it is acquired.  When the
            disposable object that is returned is disposed, the lock is re-acquired.
            This method is effectively the opposite of acquire.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.VoidReaderWriterLock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.threading.VoidReaderWriterLock"/> class.
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.threading.VoidReaderWriterLock.ReadLock">
            <summary>
            Gets the read-side lockable
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.threading.VoidReaderWriterLock.WriteLock">
            <summary>
            Gets the write-side lockable
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.TelemetryEngine.GetCategory(System.String)">
            <summary>
            Gets the category.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.TelemetryEngine.DumpTo(System.IO.TextWriter)">
            <summary>
            Dumps telemetry information to a textWriter.
            </summary>
            <param name="textWriter">The text writer.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.TelemetryEngine.DumpToFile(System.String)">
            <summary>
            Dumps telemetry information to file.
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="P:com.espertech.esper.compat.threading.TelemetryEngine.Categories">
            <summary>
            Gets the categories.
            </summary>
            <value>The categories.</value>
        </member>
        <member name="P:com.espertech.esper.compat.threading.TelemetryEngine.CategoryDictionary">
            <summary>
            Gets the category dictionary.
            </summary>
            <value>The category dictionary.</value>
        </member>
        <member name="F:com.espertech.esper.compat.threading.TelemetryEventArgs.Id">
            <summary>
            Unique lock identifier.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.TelemetryEventArgs.RequestTime">
            <summary>
            Time lock was requested.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.TelemetryEventArgs.AcquireTime">
            <summary>
            Time lock was acquired.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.TelemetryEventArgs.ReleaseTime">
            <summary>
            Time lock was released.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.TelemetryEventArgs.StackTrace">
            <summary>
            Stack trace associated with lock.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.TelemetryLockCategory._telemetryEvents">
            <summary>
            List of telemetry events for this category.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.TelemetryLockCategory.OnLockReleased(System.Object,com.espertech.esper.compat.threading.TelemetryEventArgs)">
            <summary>
            Called when a lock is released.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:com.espertech.esper.compat.threading.TelemetryEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.TelemetryLockCategory.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.threading.TelemetryLockCategory"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:com.espertech.esper.compat.threading.TelemetryLockCategory.Events">
            <summary>
            Gets the telemetry events.
            </summary>
            <value>The events.</value>
        </member>
        <member name="P:com.espertech.esper.compat.threading.TelemetryLockCategory.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:com.espertech.esper.compat.threading.TelemetryProbe.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.TelemetryReaderWriterLock._id">
            <summary>
            Common identifier for the reader-writer
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.TelemetryReaderWriterLock._subLock">
            <summary>
            Lock that holds the real lock implementation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.TelemetryReaderWriterLock.OnReadLockReleased(com.espertech.esper.compat.threading.TelemetryEventArgs)">
            <summary>
            Raises the <see cref="E:ReadLockReleased"/> event.
            </summary>
            <param name="e">The <see cref="T:com.espertech.esper.compat.threading.TelemetryEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.TelemetryReaderWriterLock.OnWriteLockReleased(com.espertech.esper.compat.threading.TelemetryEventArgs)">
            <summary>
            Raises the <see cref="E:WriteLockReleased"/> event.
            </summary>
            <param name="e">The <see cref="T:com.espertech.esper.compat.threading.TelemetryEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.TelemetryReaderWriterLock.#ctor(com.espertech.esper.compat.threading.IReaderWriterLock)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.threading.TelemetryReaderWriterLock"/> class.
            </summary>
            <param name="subLock">The sub lock.</param>
        </member>
        <member name="E:com.espertech.esper.compat.threading.TelemetryReaderWriterLock.ReadLockReleased">
            <summary>
            Occurs when the lock is released.
            </summary>
        </member>
        <member name="E:com.espertech.esper.compat.threading.TelemetryReaderWriterLock.WriteLockReleased">
            <summary>
            Occurs when the lock is released.
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.threading.TelemetryReaderWriterLock.ReadLock">
            <summary>
            Gets the read-side lockable
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.compat.threading.TelemetryReaderWriterLock.WriteLock">
            <summary>
            Gets the write-side lockable
            </summary>
            <value></value>
        </member>
        <member name="M:com.espertech.esper.compat.threading.LockableExtensions.Call(com.espertech.esper.compat.threading.ILockable,System.Action)">
            <summary>
            Executes an observable call within the scope of the lock.
            </summary>
            <param name="lockable">The lockable.</param>
            <param name="observableCall">The observable call.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.LockableExtensions.Call``1(com.espertech.esper.compat.threading.ILockable,System.Func{``0})">
            <summary>
            Executes a function within the scope of the lock.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lockable">The lockable.</param>
            <param name="function">The function.</param>
            <returns></returns>
        </member>
        <member name="F:com.espertech.esper.compat.threading.TelemetryLock._id">
            <summary>
            Unique identifier for the lock.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.TelemetryLock._subLock">
            <summary>
            Lock that holds the real lock implementation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.TelemetryLock.OnLockReleased(com.espertech.esper.compat.threading.TelemetryEventArgs)">
            <summary>
            Raises the <see cref="E:LockReleased"/> event.
            </summary>
            <param name="e">The <see cref="T:com.espertech.esper.compat.threading.TelemetryEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.TelemetryLock.FinishTrackingPerformance(System.Int64,System.Int64)">
            <summary>
            Finishes tracking performance of a call sequence.
            </summary>
            <param name="timeLockRequest">The time the lock was requested.</param>
            <param name="timeLockAcquire">The time the lock was acquired.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.TelemetryLock.Acquire">
            <summary>
            Acquires the lock; the lock is released when the disposable
            object that was returned is disposed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.TelemetryLock.ReleaseAcquire">
            <summary>
            Provides a temporary release of the lock if it is acquired.  When the
            disposable object that is returned is disposed, the lock is re-acquired.
            This method is effectively the opposite of acquire.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.TelemetryLock.#ctor(System.String,com.espertech.esper.compat.threading.ILockable)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.threading.TelemetryLock"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="subLock">The sub lock.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.TelemetryLock.#ctor(com.espertech.esper.compat.threading.ILockable)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.threading.TelemetryLock"/> class.
            </summary>
            <param name="subLock">The sub lock.</param>
        </member>
        <member name="E:com.espertech.esper.compat.threading.TelemetryLock.LockReleased">
            <summary>
            Occurs when the lock is released.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.TrackedDisposable.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.TrackedDisposable"/> class.
            </summary>
            <param name="actionOnDispose">The action on dispose.</param>
        </member>
        <member name="M:com.espertech.esper.compat.TrackedDisposable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.SynchronizedList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.SynchronizedList`1"/> class.
            </summary>
            <param name="_subList">The _sub list.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.XmlExtensions.GetDeclaration(System.Xml.XmlDocument)">
            <summary>
            Gets the declaration (if any) from the document.
            </summary>
            <param name="document">The document.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.compat.ContextVar`1">
            <summary>
            Provides a stack-like object that can be used to maintain the state of a
            thread-local value.  Unlike a pure threadstatic variable a ContextVar can
            have multiple values that can be stacked.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.compat.ContextVar`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.ContextVar`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:com.espertech.esper.compat.ContextVar`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.ContextVar`1.Current">
            <summary>
            Gets the current value associated with the context.
            </summary>
            <value>The current.</value>
        </member>
        <member name="T:com.espertech.esper.compat.DefaultTypeCasterFactory">
            <summary>
            DefaultTypeCasterFactory is a class that implements the methods required to
            transform objects from one type to another type.  This specific class allows
            the developer to override the behavior that occurs during creation of new
            TypeCasters.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.DefaultTypeCasterFactory.GetTypeCaster(System.Type,System.Type)">
            <summary>
            Gets or creates a typeCaster for the specified pair of types.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <param name="targetType">Type of the target.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.DefaultTypeCasterFactory.IdentityTypePairConverter(System.Object)">
            <summary>
            Returns the source as the target; this is used when the source type and
            target types are identical.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.DefaultTypeCasterFactory.StringTypePairConverter(System.Object)">
            <summary>
            Returns the source as a string.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.DefaultTypeCasterFactory.EmitTypePairConverter(com.espertech.esper.compat.TypePair)">
            <summary>
            Emits a type caster for the type pair.
            </summary>
            <param name="typePair">The type pair.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.DefaultTypeCasterFactory.GetTrueType(System.Type)">
            <summary>
            Gets the true underlying type of the provided type.  Basically it unmasks
            nullables.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.compat.Runnable">
            <summary>
            Represents a delegate that can be called.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.IRunnable">
            <summary>
            Represents an interface that can be called.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.threading.BasicExecutorService">
            <summary>
            Class that provides access to threadPool like services.  This class exists to
            provide an easier bridge between the CLR thread pool and the JVM thread pool
            mechanisms.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.IExecutorService.Submit(System.Action)">
            <summary>
            Submits the specified runnable to the thread pool.
            </summary>
            <param name="runnable">The runnable.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.IExecutorService.Submit``1(com.espertech.esper.compat.ICallable{``0})">
            <summary>
            Submits the specified callable to the thread pool.
            </summary>
            <param name="callable">The callable.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.IExecutorService.Submit``1(System.Func{``0})">
            <summary>
            Submits the specified callable to the thread pool.
            </summary>
            <param name="callable">The callable.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.IExecutorService.Shutdown">
            <summary>
            Shutdowns this instance.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.IExecutorService.AwaitTermination">
            <summary>
            Awaits the termination.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.IExecutorService.AwaitTermination(System.TimeSpan)">
            <summary>
            Awaits the termination.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.BasicExecutorService.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.threading.BasicExecutorService"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.BasicExecutorService.DispatchFuture(System.Object)">
            <summary>
            Dispatches the future.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.BasicExecutorService.Submit(System.Action)">
            <summary>
            Submits the specified runnable to the thread pool.
            </summary>
            <param name="runnable">The runnable.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.BasicExecutorService.Submit``1(com.espertech.esper.compat.ICallable{``0})">
            <summary>
            Submits the specified callable to the thread pool.
            </summary>
            <param name="callable">The callable.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.BasicExecutorService.Submit``1(System.Func{``0})">
            <summary>
            Submits the specified callable to the thread pool.
            </summary>
            <param name="callable">The callable.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.BasicExecutorService.Shutdown">
            <summary>
            Shutdowns this instance.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.BasicExecutorService.AwaitTermination">
            <summary>
            Awaits the termination.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.BasicExecutorService.AwaitTermination(System.TimeSpan)">
            <summary>
            Awaits the termination.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="P:com.espertech.esper.compat.threading.BasicExecutorService.NumExecuted">
            <summary>
            Gets the number of items executed.
            </summary>
            <value>The num executed.</value>
        </member>
        <member name="T:com.espertech.esper.compat.threading.Executors">
            <summary>
            Class that provides access to threadPool like services.  This class exists to
            provide an easier bridge between the CLR thread pool and the JVM thread pool
            mechanisms.
            </summary>
            
        </member>
        <member name="M:com.espertech.esper.compat.threading.Executors.NewCachedThreadPool">
            <summary>
            Supposably creates a new thread pool and returns the executor.  Ours does
            nothing as we use the CLR thread pool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.Executors.NewFixedThreadPool(System.Int32)">
            <summary>
            Supposably creates a new thread pool and returns the executor.  Ours does
            nothing as we use the CLR thread pool.
            </summary>
            <param name="maxNumThreads">The max num threads.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.Future`1.GetValue(System.TimeSpan)">
            <summary>
            Gets the value. If a value is not available before the timeout expires,
            a TimeoutException will be thrown.
            </summary>
            <param name="timeOut">The time out.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.Future`1.GetValueOrDefault">
            <summary>
            Gets the result value from the execution.
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.threading.Future`1.HasValue">
            <summary>
            Gets a value indicating whether this instance has value.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:com.espertech.esper.compat.threading.Future">
            <summary>
            Default implementation of a future
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.threading.FutureBase">
            <summary>
            Base class for all future implementations
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FutureBase.InvokeImpl">
            <summary>
            Invokes the impl.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FutureBase.Invoke">
            <summary>
            Invokes this instance.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FutureBase.Kill">
            <summary>
            Kills this instance.
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.threading.FutureBase.ExecThread">
            <summary>
            Gets the exec thread.
            </summary>
            <value>The exec thread.</value>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FutureImpl`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.threading.FutureImpl`1"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FutureImpl`1.GetValue(System.TimeSpan)">
            <summary>
            Gets the value. If a value is not available before the timeout expires,
            a TimeoutException will be thrown.
            </summary>
            <param name="timeOut">The time out.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FutureImpl`1.GetValueOrDefault">
            <summary>
            Gets the result value from the execution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FutureImpl`1.InvokeImpl">
            <summary>
            Invokes this instance.
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.threading.FutureImpl`1.HasValue">
            <summary>
            Gets a value indicating whether this instance has value.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:com.espertech.esper.compat.threading.FutureImpl`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:com.espertech.esper.compat.threading.FutureImpl`1.Callable">
            <summary>
            Gets or sets the callable.
            </summary>
            <value>The callable.</value>
        </member>
        <member name="M:com.espertech.esper.compat.threading.BlitReaderWriterLock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.threading.BlitReaderWriterLock"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.BlitReaderWriterLock.AcquireReaderLock(System.Int32)">
            <summary>
            Acquires the reader lock.
            </summary>
            <param name="millisecondsTimeout">The milliseconds timeout.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.BlitReaderWriterLock.ReleaseReaderLock">
            <summary>
            Releases the reader lock.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.BlitReaderWriterLock.AcquireWriterLock(System.Int32)">
            <summary>
            Acquires the writer lock.
            </summary>
            <param name="millisecondsTimeout">The milliseconds timeout.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.BlitReaderWriterLock.ReleaseWriterLock">
            <summary>
            Releases the writer lock.
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.threading.BlitReaderWriterLock.ReadLock">
            <summary>
            Gets the read-side lockable
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.threading.BlitReaderWriterLock.WriteLock">
            <summary>
            Gets the write-side lockable
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.threading.BlitReaderWriterLock.ReaderLock">
            <summary>
            Internal reader lock.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.BlitReaderWriterLock.ReaderLock.#ctor(com.espertech.esper.compat.threading.BlitReaderWriterLock)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.threading.BlitReaderWriterLock.ReaderLock"/> class.
            </summary>
            <param name="lockObj">The lock obj.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.BlitReaderWriterLock.ReaderLock.Acquire">
            <summary>
            Acquires the lock; the lock is released when the disposable
            object that was returned is disposed.
            </summary>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.compat.threading.BlitReaderWriterLock.WriterLock">
            <summary>
            Internal writer lock.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.BlitReaderWriterLock.WriterLock.#ctor(com.espertech.esper.compat.threading.BlitReaderWriterLock)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.threading.BlitReaderWriterLock.WriterLock"/> class.
            </summary>
            <param name="lockObj">The lock obj.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.BlitReaderWriterLock.WriterLock.Acquire">
            <summary>
            Acquires the lock; the lock is released when the disposable
            object that was returned is disposed.
            </summary>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.compat.threading.IThreadLocal`1">
            <summary>
            IThreadLocal provides the engine with a way to store information that
            is local to the instance and a the thread.  While the CLR provides the
            ThreadStatic attribute, it can only be applied to static variables;
            some usage patterns in esper (such as statement-specific thread-specific
            processing data) require that data be associated by instance and thread.
            The CLR provides a solution to this known as LocalDataStoreSlot.  It
            has been documented that this method is slower than its ThreadStatic
            counterpart, but it allows for instance-based allocation.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.compat.threading.IThreadLocal`1.GetOrCreate">
            <summary>
            Gets the data or creates it if not found.
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.threading.IThreadLocal`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="F:com.espertech.esper.compat.threading.XperThreadLocal`1._nodeTable">
            <summary>
            NodeTable of nodes ...
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.XperThreadLocal`1._hashIndex">
            <summary>
            NodeTable that is indexed by hash code and points to the first node
            in the chain for that hash code.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.XperThreadLocal`1._nodeAllocIndex">
            <summary>
            Indicates the index where the next node needs to be allocated from.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.XperThreadLocal`1.AllocNode(System.Int32,`0,System.Int32)">
            <summary>
            Allocates a node for use and return the index of the node.
            </summary>
            <param name="threadId">The item.</param>
            <param name="value">The value.</param>
            <param name="hashCode">The hash code.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.XperThreadLocal`1.ReIndex">
            <summary>
            Reindexes the internal bucket table.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.XperThreadLocal`1.GetOrCreate">
            <summary>
            Gets the data or creates it if not found.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.XperThreadLocal`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.XperThreadLocal`1.#ctor(com.espertech.esper.compat.FactoryDelegate{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.threading.XperThreadLocal`1"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="P:com.espertech.esper.compat.threading.XperThreadLocal`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:com.espertech.esper.compat.threading.XperThreadLocal`1.Node">
            <summary>
            Each node contains the content for the node and references to
            the next node in it's respective chain and order.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.XperThreadLocal`1.Node.HashCode">
            <summary>
            Gets or sets the hash code.
            </summary>
            <value>The hash code.</value>
        </member>
        <member name="F:com.espertech.esper.compat.threading.XperThreadLocal`1.Node.ThreadId">
            <summary>
            Gets or sets the thread id.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.XperThreadLocal`1.Node.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:com.espertech.esper.compat.threading.XperThreadLocalFactory">
            <summary>
            Creates slim thread local objects.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.threading.ThreadLocalFactory">
            <summary>
            Creator and manufacturer of thread local objects.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.ThreadLocalFactory.CreateThreadLocal``1(com.espertech.esper.compat.FactoryDelegate{``0})">
            <summary>
            Create a thread local object of the specified type param.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.XperThreadLocalFactory.CreateThreadLocal``1(com.espertech.esper.compat.FactoryDelegate{``0})">
            <summary>
            Create a thread local object of the specified type param.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.SlimThreadLocal`1.GetOrCreate">
            <summary>
            Gets the data or creates it if not found.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.SlimThreadLocal`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.SlimThreadLocal`1.#ctor(com.espertech.esper.compat.FactoryDelegate{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.threading.SlimThreadLocal`1"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="P:com.espertech.esper.compat.threading.SlimThreadLocal`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:com.espertech.esper.compat.threading.SlimThreadLocalFactory">
            <summary>
            Creates slim thread local objects.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.SlimThreadLocalFactory.CreateThreadLocal``1(com.espertech.esper.compat.FactoryDelegate{``0})">
            <summary>
            Create a thread local object of the specified type param.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.ThreadLocalManager.#cctor">
            <summary>
            Initializes the <see cref="T:com.espertech.esper.compat.threading.ThreadLocalManager"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.ThreadLocalManager.Create``1(com.espertech.esper.compat.FactoryDelegate{``0})">
            <summary>
            Creates a thread local instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.ThreadLocalManager.CreateDefaultThreadLocal``1(com.espertech.esper.compat.FactoryDelegate{``0})">
            <summary>
            Creates the default thread local.
            </summary>
            <returns></returns>
        </member>
        <member name="F:com.espertech.esper.compat.threading.ReaderWriterLockManager.TelemetryEngine">
            <summary>
            Engine that captures telemetry data.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.ReaderWriterLockManager.#cctor">
            <summary>
            Initializes the <see cref="T:com.espertech.esper.compat.threading.LockManager"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.ReaderWriterLockManager.RegisterCategoryLock``1(System.Func{com.espertech.esper.compat.threading.IReaderWriterLock})">
            <summary>
            Registers the category lock.
            </summary>
            <param name="lockFactory">The lock factory.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.ReaderWriterLockManager.RegisterCategoryLock(System.Type,System.Func{com.espertech.esper.compat.threading.IReaderWriterLock})">
            <summary>
            Registers the category lock.
            </summary>
            <param name="typeCategory">The type category.</param>
            <param name="lockFactory">The lock factory.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.ReaderWriterLockManager.RegisterCategoryLock(System.String,System.Func{com.espertech.esper.compat.threading.IReaderWriterLock})">
            <summary>
            Registers the category lock.
            </summary>
            <param name="category">The category.</param>
            <param name="lockFactory">The lock factory.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.ReaderWriterLockManager.CreateLock(System.Type)">
            <summary>
            Creates a lock for the category defined by the type.
            </summary>
            <param name="typeCategory">The type category.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.ReaderWriterLockManager.WrapLock(com.espertech.esper.compat.threading.IReaderWriterLock,System.String)">
            <summary>
            Wraps the lock.
            </summary>
            <param name="readerWriterLock">The reader writer lock.</param>
            <param name="category">The category.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.ReaderWriterLockManager.CreateLock(System.String)">
            <summary>
            Creates a lock for the category.
            </summary>
            <param name="category">The category.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.ReaderWriterLockManager.CreateDefaultLock">
            <summary>
            Creates the default lock.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.ReaderWriterLockManager.CreateDefaultLock(System.String)">
            <summary>
            Creates the default lock.
            </summary>
            <param name="category">The category.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.ReaderWriterLockManager.SingularityLock">
            <summary>
            Creates a singularity lock.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.ReaderWriterLockManager.StandardLock">
            <summary>
            Creates the standard reader writer lock.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.ReaderWriterLockManager.SlimLock">
            <summary>
            Creates the slim reader writer lock.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.ReaderWriterLockManager.VoidLock">
            <summary>
            Creates the void reader writer lock.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.ReaderWriterLockManager.FairLock">
            <summary>
            Creates the fair reader writer lock.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.ReaderWriterLockManager.FifoLock">
            <summary>
            Creates the fifo reader writer lock.
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.threading.ReaderWriterLockManager.IsTelemetryEnabled">
            <summary>
            Gets or sets a value indicating whether lock telemetry is enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is telemetry enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:com.espertech.esper.compat.threading.ReaderWriterLockManager.DefaultLockFactory">
            <summary>
            Gets or sets the default lock factory.
            </summary>
            <value>The default lock factory.</value>
        </member>
        <member name="M:com.espertech.esper.compat.threading.DedicatedExecutorService.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.threading.DedicatedExecutorService"/> class.
            </summary>
            <param name="label">The label.</param>
            <param name="numThreads">The num threads.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.DedicatedExecutorService.#ctor(System.String,System.Int32,com.espertech.esper.compat.collections.IBlockingQueue{com.espertech.esper.compat.Runnable})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.threading.DedicatedExecutorService"/> class.
            </summary>
            <param name="label">The label.</param>
            <param name="numThreads">The num threads.</param>
            <param name="taskQueue">The task queue.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.DedicatedExecutorService.HandleTasksInQueue">
            <summary>
            Handles the tasks in queue.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.DedicatedExecutorService.Submit(System.Action)">
            <summary>
            Submits the specified runnable to the thread pool.
            </summary>
            <param name="runnable">The runnable.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.DedicatedExecutorService.Submit``1(com.espertech.esper.compat.ICallable{``0})">
            <summary>
            Submits the specified callable to the thread pool.
            </summary>
            <param name="callable">The callable.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.DedicatedExecutorService.Submit``1(System.Func{``0})">
            <summary>
            Submits the specified callable to the thread pool.
            </summary>
            <param name="callable">The callable.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.DedicatedExecutorService.Shutdown">
            <summary>
            Shutdowns this instance.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.DedicatedExecutorService.AwaitTermination">
            <summary>
            Awaits the termination.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.DedicatedExecutorService.AwaitTermination(System.TimeSpan)">
            <summary>
            Awaits the termination.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="P:com.espertech.esper.compat.threading.DedicatedExecutorService.NumExecuted">
            <summary>
            Gets the number of tasks executed.
            </summary>
            <value>The number of tasks executed.</value>
        </member>
        <member name="M:com.espertech.esper.compat.threading.DedicatedExecutorService.SimpleFutureImpl`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.threading.FutureImpl`1"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.DedicatedExecutorService.SimpleFutureImpl`1.GetValue(System.TimeSpan)">
            <summary>
            Gets the value.
            </summary>
            <param name="timeOut">The time out.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.DedicatedExecutorService.SimpleFutureImpl`1.GetValueOrDefault">
            <summary>
            Gets the result value from the execution.
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.threading.DedicatedExecutorService.SimpleFutureImpl`1.HasValue">
            <summary>
            Gets a value indicating whether this instance has value.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:com.espertech.esper.compat.threading.DedicatedExecutorService.SimpleFutureImpl`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:com.espertech.esper.compat.threading.LockManager.#cctor">
            <summary>
            Initializes the <see cref="T:com.espertech.esper.compat.threading.LockManager"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.LockManager.RegisterCategoryLock(System.Type,System.Func{com.espertech.esper.compat.threading.ILockable})">
            <summary>
            Registers the category lock.
            </summary>
            <param name="typeCategory">The type category.</param>
            <param name="lockFactory">The lock factory.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.LockManager.RegisterCategoryLock(System.String,System.Func{com.espertech.esper.compat.threading.ILockable})">
            <summary>
            Registers the category lock.
            </summary>
            <param name="category">The category.</param>
            <param name="lockFactory">The lock factory.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.LockManager.CreateLock(System.Type)">
            <summary>
            Creates a lock for the category defined by the type.
            </summary>
            <param name="typeCategory">The type category.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.LockManager.WrapLock(com.espertech.esper.compat.threading.ILockable)">
            <summary>
            Wraps the lock.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.LockManager.CreateLock(System.String)">
            <summary>
            Creates a lock for the category.
            </summary>
            <param name="category">The category.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.LockManager.CreateDefaultLock">
            <summary>
            Creates the default lock.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.LockManager.CreateMonitorLock">
            <summary>
            Creates the monitor lock.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.LockManager.CreateMonitorSpinLock">
            <summary>
            Creates the monitor spin lock.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.LockManager.CreateMonitorSlimLock">
            <summary>
            Creates the monitor slim lock.
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.threading.LockManager.IsTelemetryEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is telemetry enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is telemetry enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:com.espertech.esper.compat.threading.LockManager.DefaultLockFactory">
            <summary>
            Gets or sets the default lock factory.
            </summary>
            <value>The default lock factory.</value>
        </member>
        <member name="M:com.espertech.esper.compat.threading.SlimReaderWriterLock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.threading.SlimReaderWriterLock"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.SlimReaderWriterLock.AcquireReaderLock(System.Int32)">
            <summary>
            Acquires the reader lock.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.SlimReaderWriterLock.AcquireWriterLock(System.Int32)">
            <summary>
            Acquires the writer lock.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:com.espertech.esper.compat.threading.SlimReaderWriterLock.ReleaseReaderLock">
            <summary>
            Releases the reader lock.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.SlimReaderWriterLock.ReleaseWriterLock">
            <summary>
            Releases the writer lock.
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.threading.SlimReaderWriterLock.ReadLock">
            <summary>
            Gets the read-side lockable
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.compat.threading.SlimReaderWriterLock.WriteLock">
            <summary>
            Gets the write-side lockable
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.compat.threading.FastThreadLocal`1">
            <summary>
            IThreadLocal provides the engine with a way to store information that
            is local to the instance and a the thread.  While the CLR provides the
            ThreadStatic attribute, it can only be applied to static variables;
            some usage patterns in esper (such as statement-specific thread-specific
            processing data) require that data be associated by instance and thread.
            The CLR provides a solution to this known as LocalDataStoreSlot.  It
            has been documented that this method is slower than its ThreadStatic
            counterpart, but it allows for instance-based allocation.
            <para/>
            During recent testing it was determined that the LocalDataStoreSlot was
            using an amount of time that seemed a bit excessive.  We took some
            snapshots of performance under the profiler.  Using that information we
            retooled the class to provide tight and fast access to thread-local
            instance-specific data.  The class is pretty tightly wound and takes a
            few liberties in understanding how esper uses it.  A ThreadStatic
            variable is initialized for the IThreadLocal.  This item is 'thread-local'
            and contains an array of 'instance-specific' data.  Indexing is done
            when the IThreadLocal item is created.  Under esper this results in roughly
            one 'index' per statement.  Changes to this model resulted in good cost
            savings in the retrieval and acquisition of local data.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:com.espertech.esper.compat.threading.FastThreadLocal`1.ThreadDataList">
            <summary>
            List of weak reference data.  This list is allocated when the
            class is instantiated and keeps track of data that is allocated
            regardless of thread.  Minimal locks should be used to ensure
            that normal IThreadLocal activity is not placed in the crossfire
            of this structure.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.FastThreadLocal`1.ThreadDataListLock">
            <summary>
            Lock for the _threadDataList
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FastThreadLocal`1.#cctor">
            <summary>
            Initializes the <see cref="T:com.espertech.esper.compat.threading.FastThreadLocal`1"/> class.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.FastThreadLocal`1._dataFactory">
            <summary>
            Factory delegate for construction of data on miss.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FastThreadLocal`1.GetOrCreate">
            <summary>
            Gets the data or creates it if not found.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FastThreadLocal`1.ClearAll">
            <summary>
            Clears all threads
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FastThreadLocal`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FastThreadLocal`1.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:com.espertech.esper.compat.threading.FastThreadLocal`1"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FastThreadLocal`1.AllocateIndex">
            <summary>
            Allocates a usable index.  This method looks in the indexReclaim
            first to determine if there is a slot that has been released.  If so,
            it is reclaimed.  If no space is available, a new index is allocated.
            This can lead to growth of the static data table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FastThreadLocal`1.#ctor(com.espertech.esper.compat.FactoryDelegate{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.threading.FastThreadLocal`1"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="P:com.espertech.esper.compat.threading.FastThreadLocal`1.InstanceId">
            <summary>
            Gets the instance id ... if you really must know.
            </summary>
            <value>The instance id.</value>
        </member>
        <member name="P:com.espertech.esper.compat.threading.FastThreadLocal`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:com.espertech.esper.compat.threading.FastThreadLocalFactory">
            <summary>
            Creates fast thread local objects.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FastThreadLocalFactory.CreateThreadLocal``1(com.espertech.esper.compat.FactoryDelegate{``0})">
            <summary>
            Create a thread local object of the specified type param.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.compat.threading.FastThreadStore`1">
            <summary>
            FastThreadStore is a variation of the FastThreadLocal, but it lacks a factory
            for object creation.  While there are plenty of cases where this makes sense,
            we actually did this to work around an issue in .NET 3.5 SP1.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:com.espertech.esper.compat.threading.FastThreadStore`1.ThreadDataList">
            <summary>
            List of weak reference data.  This list is allocated when the
            class is instantiated and keeps track of data that is allocated
            regardless of thread.  Minimal locks should be used to ensure
            that normal IThreadLocal activity is not placed in the crossfire
            of this structure.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.FastThreadStore`1.ThreadDataListLock">
            <summary>
            Lock for the _threadDataList
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FastThreadStore`1.#cctor">
            <summary>
            Initializes the <see cref="T:com.espertech.esper.compat.threading.FastThreadStore`1"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FastThreadStore`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FastThreadStore`1.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:com.espertech.esper.compat.threading.FastThreadStore`1"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FastThreadStore`1.AllocateIndex">
            <summary>
            Allocates a usable index.  This method looks in the indexReclaim
            first to determine if there is a slot that has been released.  If so,
            it is reclaimed.  If no space is available, a new index is allocated.
            This can lead to growth of the static data table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.FastThreadStore`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.threading.FastThreadStore`1"/> class.
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.threading.FastThreadStore`1.InstanceId">
            <summary>
            Gets the instance id ... if you really must know.
            </summary>
            <value>The instance id.</value>
        </member>
        <member name="P:com.espertech.esper.compat.threading.FastThreadStore`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:com.espertech.esper.compat.FixedDictionarySchema`1">
            <summary>
            FixedDictionarySchema is a class that represents the structure of a map who's
            keys are known when the schema is created.  FixedSchemas are immutable
            once they have been created, but because they are known they can be
            used to create Map objects that have a much smaller memory footprint
            than conventional hashtables.
            </summary>
            <typeparam name="K"></typeparam>
        </member>
        <member name="F:com.espertech.esper.compat.FixedDictionarySchema`1._keyToIndex">
            <summary>
            This dictionary maps keys to a linear index.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.FixedDictionarySchema`1.TryGetIndex(`0,System.Int32@)">
            <summary>
            Tries the get the index for the key.  If the index does not
            exist, the method returns false.
            </summary>
            <param name="key">The key.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.FixedDictionarySchema`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.compat.FixedDictionarySchema`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:com.espertech.esper.compat.FixedDictionarySchema`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.FixedDictionarySchema`1"/> class.
            </summary>
            <param name="keyList">The key list.</param>
        </member>
        <member name="P:com.espertech.esper.compat.FixedDictionarySchema`1.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:com.espertech.esper.compat.FixedDictionarySchema`1.Keys">
            <summary>
            Gets the keys for the schema.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:com.espertech.esper.compat.FixedDictionarySchema`1.Item(`0)">
            <summary>
            Gets the index associated with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="F:com.espertech.esper.compat.threading.MonitorSpinLock._uLockId">
            <summary>
            Uniquely identifies the lock.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.MonitorSpinLock._uLockObj">
            <summary>
            Underlying object that is locked
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.MonitorSpinLock._uLockTimeout">
            <summary>
            Number of milliseconds until the lock acquisition fails
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.MonitorSpinLock._uLockDepth">
            <summary>
            Used to track recursive locks.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.MonitorSpinLock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.threading.MonitorSpinLock"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.MonitorSpinLock.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.threading.MonitorSpinLock"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.MonitorSpinLock.Acquire">
            <summary>
            Acquires a lock against this instance.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.MonitorSpinLock.ReleaseAcquire">
            <summary>
            Provides a temporary release of the lock if it is acquired.  When the
            disposable object that is returned is disposed, the lock is re-acquired.
            This method is effectively the opposite of acquire.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.MonitorSpinLock.InternalAcquire">
            <summary>
            Internally acquires the lock.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.MonitorSpinLock.InternalRelease">
            <summary>
            Internally releases the lock.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.MonitorSpinLock.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.threading.MonitorSpinLock.LockTimeout">
            <summary>
            Gets the number of milliseconds until the lock acquisition fails.
            </summary>
            <value>The lock timeout.</value>
        </member>
        <member name="P:com.espertech.esper.compat.threading.MonitorSpinLock.LockDepth">
            <summary>
            Gets the lock depth.
            </summary>
            <value>The lock depth.</value>
        </member>
        <member name="P:com.espertech.esper.compat.threading.MonitorSpinLock.IsHeldByCurrentThread">
            <summary>
            Gets a value indicating whether this instance is held by current thread.
            </summary>
            <value>
            	<c>true</c> if this instance is held by current thread; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:com.espertech.esper.compat.FactoryDelegate`1">
            <summary>
            Factory pattern delegate that creates an object of type T.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.FixedDictionary`2.#ctor(com.espertech.esper.compat.FixedDictionarySchema{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.FixedDictionary`2"/> class.
            </summary>
            <param name="dictionarySchema">The schema.</param>
        </member>
        <member name="M:com.espertech.esper.compat.FixedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.compat.FixedDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:com.espertech.esper.compat.FixedDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.FixedDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
        </member>
        <member name="M:com.espertech.esper.compat.FixedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:com.espertech.esper.compat.FixedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.-or-<paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.FixedDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.FixedDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.
            </returns>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.FixedDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.FixedDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.FixedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, false.
            </returns>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.FixedDictionary`2.AssignIndex(System.Int32,`1)">
            <summary>
            Assigns the index.
            </summary>
            <param name="keyIndex">Index of the key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:com.espertech.esper.compat.FixedDictionary`2.Get(`0,`1)">
            <summary>
            Fetches the value associated with the specified key.
            If no value can be found, then the defaultValue is
            returned.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.FixedDictionary`2.Get(`0)">
            <summary>
            Fetches the value associated with the specified key.
            If no value can be found, then default(V) is returned.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.FixedDictionary`2.Put(`0,`1)">
            <summary>
            Sets the given key in the dictionary.  If the key
            already exists, then it is remapped to the new value.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.FixedDictionary`2.Push(`0,`1)">
            <summary>
            Sets the given key in the dictionary.  If the key
            already exists, then it is remapped to the new value.
            If a value was previously mapped it is returned.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.FixedDictionary`2.PutAll(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Puts all values from the source dictionary into
            this dictionary.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:com.espertech.esper.compat.FixedDictionary`2.Remove(`0,`1@)">
            <summary>
            Removes the item from the dictionary that is associated with
            the specified key.
            </summary>
            <param name="key">Search key into the dictionary</param>
            <param name="value">The value removed from the dictionary (if found).</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.FixedDictionary`2.RemoveAndReturn(`0)">
            <summary>
            Removes the item from the dictionary that is associated with
            the specified key.  The item if found is returned; if not,
            default(V) is returned.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.FixedDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.FixedDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.FixedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
            </returns>
            <param name="key">The key of the element to get or set.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key" /> is not found.</exception>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
        </member>
        <member name="P:com.espertech.esper.compat.FixedDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.FixedDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.FixedDictionary`2.FirstValue">
            <summary>
            Returns the first value in the enumeration of values
            </summary>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.compat.ObservableCall">
            <summary>
            A simple delegate that can be observed.  Observable delegates are primarily
            designed to be used with calls that wrap the child call for collection of
            diagnostics.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.SetUtil.Union``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Creates the union of two sets.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="set1">The set1.</param>
            <param name="set2">The set2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.SetUtil.Intersect``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Creates the intersection of two sets.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="set1">The set1.</param>
            <param name="set2">The set2.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.compat.threading.SystemThreadLocal`1">
            <summary>
            IThreadLocal implementation that uses the native support
            in the CLR (i.e. the LocalDataStoreSlot).
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:com.espertech.esper.compat.threading.SystemThreadLocal`1.m_dataStoreSlot">
            <summary>
            Local data storage slot
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.SystemThreadLocal`1.m_dataFactory">
            <summary>
            Factory delegate for construction of data on miss.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.SystemThreadLocal`1.GetOrCreate">
            <summary>
            Gets the data or creates it if not found.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.SystemThreadLocal`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.SystemThreadLocal`1.#ctor(com.espertech.esper.compat.FactoryDelegate{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.threading.SystemThreadLocal`1"/> class.
            </summary>
            <param name="factory">The factory used to create values when not found.</param>
        </member>
        <member name="P:com.espertech.esper.compat.threading.SystemThreadLocal`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:com.espertech.esper.compat.threading.SystemThreadLocalFactory">
            <summary>
            Creates system thread local objects.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.SystemThreadLocalFactory.CreateThreadLocal``1(com.espertech.esper.compat.FactoryDelegate{``0})">
            <summary>
            Create a thread local object of the specified type param.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="F:com.espertech.esper.compat.collections.ReferenceMap`2._dictionary">
            <summary>
            Underlying dictionary must be opaque to match the semantics of
            the reference types.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.collections.ReferenceMap`2._keyReferenceType">
            <summary>
            Defines the way that keys are maintained in the dictionary
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.collections.ReferenceMap`2._valueReferenceType">
            <summary>
            Defines the way that values are maintained in the dictionary
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.collections.ReferenceMap`2._pruneList">
            <summary>
            List of dictionary keys that need to be removed
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.#ctor(com.espertech.esper.compat.collections.ReferenceType,com.espertech.esper.compat.collections.ReferenceType)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.ReferenceMap`2"/> class.
            </summary>
            <param name="keyReferenceType">Type of the key reference.</param>
            <param name="valueReferenceType">Type of the value reference.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.#ctor(System.Int32,com.espertech.esper.compat.collections.ReferenceType,com.espertech.esper.compat.collections.ReferenceType)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.ReferenceMap`2"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <param name="keyReferenceType">Type of the key reference.</param>
            <param name="valueReferenceType">Type of the value reference.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if key was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.TryGetValue(`0,`1@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.SetValue(`0,`1)">
            <summary>
            Sets the value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.Prune(System.Object)">
            <summary>
            Adds the specified dictionary key to the prune list.
            </summary>
            <param name="dictKey">The dict key.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.Prune">
            <summary>
            Removes all 'dead' references that have been added to the
            prune list.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.Purge">
            <summary>
            Removes the left-over weak references for entries in the dictionary
            whose key or value has already been reclaimed by the garbage
            collector. This will reduce the dictionary's Count by the number
            of dead key-value pairs that were eliminated.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, Starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.Get(`0,`1)">
            <summary>
            Fetches the value associated with the specified key.
            If no value can be found, then the defaultValue is
            returned.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.Get(`0)">
            <summary>
            Fetches the value associated with the specified key.
            If no value can be found, then default(V) is returned.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.Put(`0,`1)">
            <summary>
            Sets the given key in the dictionary.  If the key
            already exists, then it is remapped to thenew value.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.Push(`0,`1)">
            <summary>
            Sets the given key in the dictionary.  If the key
            already exists, then it is remapped to the new value.
            If a value was previously mapped it is returned.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.PutAll(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Puts all values from the source dictionary into
            this dictionary.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.Remove(`0,`1@)">
            <summary>
            Removes the item from the dictionary that is associated with
            the specified key.
            </summary>
            <param name="key">Search key into the dictionary</param>
            <param name="value">The value removed from the dictionary (if found).</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.RemoveAndReturn(`0)">
            <summary>
            Removes the item from the dictionary that is associated with
            the specified key.  The item if found is returned; if not,
            default(V) is returned.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.ReferenceMap`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <remarks>
            WARNING: The count returned here may include entries for which
            either the key or value objects have already been garbage
            collected. Call RemoveCollectedEntries to weed out collected
            entries and update the count accordingly.
            </remarks>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.ReferenceMap`2.KeysEnum">
            <summary>
            Gets an enumerator that enumerates the keys.
            </summary>
            <value>The keys enum.</value>
        </member>
        <member name="P:com.espertech.esper.compat.collections.ReferenceMap`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.ReferenceMap`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.ReferenceMap`2.Item(`0)">
            <summary>
            Gets or sets the item with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.compat.collections.ReferenceMap`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.ReferenceMap`2.FirstValue">
            <summary>
            Returns the first value in the enumeration of values
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.compat.collections.ReferenceMap`2.IReferenceAdapter`1">
            <summary>
            Converts items from their reference for to their dictionary form and
            vice-versa.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.IReferenceAdapter`1.ReferenceToDictionary(`2)">
            <summary>
            Converts the item from a reference item to a dictionary item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.IReferenceAdapter`1.DictionaryToReference(System.Object,`2@)">
            <summary>
            Converts the item from a dictionary item to a reference item.
            Returns true if the dictionary item is still alive.
            </summary>
            <param name="item">The item.</param>
            <param name="refItem">The reference item.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.HardReferenceAdapter`1.ReferenceToDictionary(`2)">
            <summary>
            Converts the item from a reference item to a dictionary item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.HardReferenceAdapter`1.DictionaryToReference(System.Object,`2@)">
            <summary>
            Converts the item from a dictionary item to a reference item.
            </summary>
            <param name="item">The item.</param>
            <param name="refItem">The reference item.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.HardReferenceAdapter`1.Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type T to compare.</param>
            <param name="y">The second object of type T to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.HardReferenceAdapter`1.GetHashCode(System.Object)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of obj is a reference type and obj is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.SoftReferenceAdapter`1.ReferenceToDictionary(`2)">
            <summary>
            Converts the item from a reference item to a dictionary item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.SoftReferenceAdapter`1.DictionaryToReference(System.Object,`2@)">
            <summary>
            Converts the item from a dictionary item to a reference item.
            </summary>
            <param name="item">The item.</param>
            <param name="refItem">The reference item.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.SoftReferenceAdapter`1.Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="x">The first object of type T to compare.</param>
            <param name="y">The second object of type T to compare.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
            <remark>
            Note: There are actually 9 cases to handle here.
            Let Wa = Alive Weak Reference
            Let Wd = Dead Weak Reference
            Let S  = Strong Reference
            x  | y  | Equals(x,y)
            -------------------------------------------------
            Wa | Wa | comparer.Equals(x.Target, y.Target)
            Wa | Wd | false
            Wa | S  | comparer.Equals(x.Target, y)
            Wd | Wa | false
            Wd | Wd | x == y
            Wd | S  | false
            S  | Wa | comparer.Equals(x, y.Target)
            S  | Wd | false
            S  | S  | comparer.Equals(x, y)
            -------------------------------------------------
            </remark>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.SoftReferenceAdapter`1.GetHashCode(System.Object)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of obj is a reference type and obj is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.ReferenceMap`2.SoftReferenceAdapter`1.GetTarget(System.Object,System.Boolean@)">
            <summary>
            Gets the target of the object.  The target can only be a WeakReference of T or
            T itself.  This method distinguishes between the two and returns the actual
            target object.  Status of the target is returned through the out parameter.
            </summary>
            <param name="obj">The obj.</param>
            <param name="isDead">if set to <c>true</c> [is dead].</param>
            <returns></returns>
        </member>
        <member name="F:com.espertech.esper.compat.collections.ReferenceType.HARD">
            <summary>
            Hard references keep references to the object and prevent the
            garbage collector from collecting the item.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.collections.ReferenceType.SOFT">
            <summary>
            Soft references allow the garbage collector to collect items
            that are not in use.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.EnumHelper">
            <summary>
            Collection of utility methods to help with enumerated types.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.EnumHelper.Parse``1(System.String,System.Boolean)">
            <summary>
            Parses the specified text value and converts it into the specified
            type of enumeration.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="textValue">The text value.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.EnumHelper.ParseBoxed``1(System.String,System.Boolean)">
            <summary>
            Parses the specified enumeration returning the value in a boxable container
            to allow for null values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="textValue">The text value.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.EnumHelper.GetNames``1">
            <summary>
            Gets the names.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.EnumHelper.GetName``1(``0)">
            <summary>
            Gets the name associated with the value presented in enumValue.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumValue">The enum value.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.EnumHelper.GetValues``1">
            <summary>
            Gets the values.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.Sequencer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.Sequencer"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.Sequencer.Allocate">
            <summary>
            Allocates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.Sequencer.Release(System.Int32)">
            <summary>
            Releases the specified sequence.
            </summary>
            <param name="sequence">The sequence.</param>
        </member>
        <member name="M:com.espertech.esper.compat.Sequencer._PrivateSequence.#ctor(com.espertech.esper.compat.Sequencer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.Sequencer._PrivateSequence"/> class.
            </summary>
            <param name="sequencer">The sequencer.</param>
            <param name="sequence">The sequence.</param>
        </member>
        <member name="P:com.espertech.esper.compat.Sequencer._PrivateSequence.Sequence">
            <summary>
            Gets the sequence.
            </summary>
            <value>The sequence.</value>
        </member>
        <member name="F:com.espertech.esper.compat.threading.ThreadMetrics._locksAcquired">
            <summary>
            Continual counter that tracks the number of locks that have been
            acquired on the thread.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.ThreadMetrics.Increment">
            <summary>
            Increments the # of times locks have been acquired.
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.threading.ThreadMetrics.LocksAcquired">
            <summary>
            Gets the # of times locks have been acquired by this thread.
            </summary>
            <value>The locks acquired.</value>
        </member>
        <member name="T:com.espertech.esper.compat.TypeCaster">
            <summary>
            Casts an opaque object into a different type of opaque object.
            The TypeCaster encapsulates the behavior to make the transformation
            occur but the input and output types are loosely defined.
            </summary>
            <param name="sourceObj"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.compat.GenericTypeCaster`1">
            <summary>
            Casts (not converts) an opaque object into a strongly typed result.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceObj"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.compat.TypeCasterFactory">
            <summary>
            TypeCasterFactory provides factory methods for the creation of TypeCaster
            that transform between two known types.
            </summary>
            <param name="sourceType"></param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.TypeExtensions.FindProperty(System.Type,System.String)">
            <summary>
            Finds the property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.TypeExtensions.AsSingleton``1(``0)">
            <summary>
            Ases the singleton.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.TypeExtensions.AsShort(System.Object)">
            <summary>
            Returns the value as a short.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.TypeExtensions.AsBoxedInt(System.Object)">
            <summary>
            Returns the value as a boxed int.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.TypeExtensions.AsInt(System.Object)">
            <summary>
            Returns the value as an int.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.TypeExtensions.AsBoxedLong(System.Object)">
            <summary>
            Returns the value as a boxed long.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.TypeExtensions.AsLong(System.Object)">
            <summary>
            Returns the value as a long.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.TypeExtensions.AsFloat(System.Object)">
            <summary>
            Returns the value as a float.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.TypeExtensions.AsDouble(System.Object)">
            <summary>
            Returns the value as a double.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.TypeExtensions.AsDecimal(System.Object)">
            <summary>
            Returns the value as a decimal.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.TypeExtensions.IsLong(System.Object)">
            <summary>
            Determines whether the specified value is long.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value is long; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.TypeExtensions.IsInt(System.Object)">
            <summary>
            Determines whether the specified value is int.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value is int; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.TypeExtensions.IsDateTime(System.Object)">
            <summary>
            Determines whether [is date time] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if [is date time] [the specified value]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.TypeExtensions.GetBaseTypeTree(System.Type)">
            <summary>
            Gets the base type tree.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.TypeExtensions.AsDataMap(System.Object)">
            <summary>
            Transparent cast for the lazy
            </summary>
            <param name="o">The o.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.TypePair.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.TypePair"/> class.
            </summary>
            <param name="typeA">The type A.</param>
            <param name="typeB">The type B.</param>
        </member>
        <member name="M:com.espertech.esper.compat.TypePair.Equals(com.espertech.esper.compat.TypePair)">
            <summary>
            Performs the underlying equality comparison.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.TypePair.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:com.espertech.esper.compat.TypePair.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.TypePair.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.TypePair.TypeA">
            <summary>
            Gets the type A.
            </summary>
            <value>The type A.</value>
        </member>
        <member name="P:com.espertech.esper.compat.TypePair.TypeB">
            <summary>
            Gets the type B.
            </summary>
            <value>The type B.</value>
        </member>
        <member name="M:com.espertech.esper.compat.xml.IXPathFunctionResolver.ResolveFunction(System.String,System.String,System.Xml.XPath.XPathResultType[])">
            <summary>
            Resolves the function that is identified by the specified information.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="name">The name.</param>
            <param name="argTypes">The arg types.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.xml.IXPathVariableResolver.ResolveVariable(System.String,System.String)">
            <summary>
            Resolves the variable that is identified by the specified information.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.core.context.factory.ProxyStatementAgentInstancePostLoad.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.core.context.factory.ProxyStatementAgentInstancePostLoad"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.context.factory.ProxyStatementAgentInstancePostLoad.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.core.context.factory.ProxyStatementAgentInstancePostLoad"/> class.
            </summary>
            <param name="procExecutePostLoad">The proc execute post load.</param>
        </member>
        <member name="M:com.espertech.esper.core.context.factory.ProxyStatementAgentInstancePreload.ExecutePreload">
            <summary>
            Executes the preload.
            </summary>
        </member>
        <member name="F:com.espertech.esper.core.context.mgr.ContextManagerImpl._rootContext">
            <summary>The single root context. This represents the context declared first. </summary>
        </member>
        <member name="F:com.espertech.esper.core.context.mgr.ContextManagerNested._rootContext">
            <summary>The single root context. This represents the context declared first. </summary>
        </member>
        <member name="F:com.espertech.esper.core.context.mgr.ContextManagerNested._subcontexts">
            <summary>Double-linked tree of sub-contexts. An entry exists for all branches including the root. For example with 2 contexts declared this map has entries representing the root and all second-level sub-contexts. For example with 3 contexts declared this map has entries for the root, second and third-level contexts. </summary>
        </member>
        <member name="M:com.espertech.esper.core.context.util.EPStatementAgentInstanceHandlePrioritySort.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.core.context.util.EPStatementAgentInstanceHandlePrioritySort"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.context.util.EPStatementAgentInstanceHandlePrioritySort.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.core.service.EPStatementHandlePrioritySort"/> class.
            </summary>
            <param name="useGreaterThanOrEqual">if set to <c>true</c> [use greater than or equal].</param>
        </member>
        <member name="M:com.espertech.esper.core.context.util.EPStatementAgentInstanceHandlePrioritySort.GetComparer(System.Boolean)">
            <summary>
            Gets the comparer.
            </summary>
            <param name="useGreaterThanOrEqual">if set to <c>true</c> [use greater than or equal].</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.Directory.Lookup(System.String)">
            <summary>
            Lookup an object by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.Directory.Bind(System.String,System.Object)">
            <summary>
            Bind an object to a name.  Throws an exception if
            the name is already bound.
            </summary>
            <param name="name"></param>
            <param name="obj"></param>
        </member>
        <member name="M:com.espertech.esper.client.Directory.Rebind(System.String,System.Object)">
            <summary>
            Bind an object to a name.  If the object is already
            bound, rebind it.
            </summary>
            <param name="name"></param>
            <param name="obj"></param>
        </member>
        <member name="M:com.espertech.esper.client.Directory.Unbind(System.String)">
            <summary>
            Unbind the object at the given name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:com.espertech.esper.client.Directory.Rename(System.String,System.String)">
            <summary>
            Rename the object at oldName with newName.
            </summary>
            <param name="oldName"></param>
            <param name="newName"></param>
        </member>
        <member name="M:com.espertech.esper.client.Directory.List(System.String)">
            <summary>
            Enumerates the names bound in the named context.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.core.ActiveDirectory.Lookup(System.String)">
            <summary>
            Lookup an object by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.core.ActiveDirectory.Bind(System.String,System.Object)">
            <summary>
            Bind an object to a name.  Throws an exception if
            the name is already bound.
            </summary>
            <param name="name"></param>
            <param name="obj"></param>
        </member>
        <member name="M:com.espertech.esper.core.ActiveDirectory.Rebind(System.String,System.Object)">
            <summary>
            Bind an object to a name.  If the object is already
            bound, rebind it.
            </summary>
            <param name="name"></param>
            <param name="obj"></param>
        </member>
        <member name="M:com.espertech.esper.core.ActiveDirectory.Unbind(System.String)">
            <summary>
            Unbind the object at the given name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:com.espertech.esper.core.ActiveDirectory.Rename(System.String,System.String)">
            <summary>
            Rename the object at oldName with newName.
            </summary>
            <param name="oldName"></param>
            <param name="newName"></param>
        </member>
        <member name="M:com.espertech.esper.core.ActiveDirectory.List(System.String)">
            <summary>
            Enumerates the names bound in the named context.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.core.context.factory.StatementAgentInstanceFactoryUpdateResult.#ctor(com.espertech.esper.view.Viewable,com.espertech.esper.util.StopCallback,com.espertech.esper.core.context.util.AgentInstanceContext,System.Collections.Generic.IDictionary{com.espertech.esper.epl.expression.ExprSubselectNode,com.espertech.esper.core.context.subselect.SubSelectStrategyHolder})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.core.context.factory.StatementAgentInstanceFactoryUpdateResult"/> class.
            </summary>
            <param name="finalView">The final view.</param>
            <param name="stopCallback">The stop callback.</param>
            <param name="agentInstanceContext">The agent instance context.</param>
            <param name="subselectStrategies">The subselect strategies.</param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggregationService">
            <summary>
            Service for maintaining aggregation state. Processes events entering (a window, a join etc,) 
            and events leaving. Answers questions about current aggregation state for a given row.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggregationResultFuture">
            <summary>
            Interface for use by aggregate expression nodes representing aggregate functions such
            as 'sum' or 'avg' to use to obtain the current value for the function at time of expression evaluation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggregationResultFuture.GetValue(System.Int32,System.Int32)">
            <summary>Returns current aggregation state, for use by expression node representing an aggregation function.  </summary>
            <param name="column">is assigned to the aggregation expression node and passed as an column (index) into a row</param>
            <param name="agentInstanceId">the context partition id</param>
            <returns>current aggragation state</returns>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggregationService.ApplyEnter(com.espertech.esper.client.EventBean[],System.Object,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Apply events as entering a window (new events).
            </summary>
            <param name="eventsPerStream">events for each stream entering window</param>
            <param name="optionalGroupKeyPerRow">
            can be null if grouping without keys is desired, else the keys 
            to use for grouping, each distinct key value results in a new 
            row of aggregation state.
            </param>
            <param name="exprEvaluatorContext">context for expression evaluatiom</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggregationService.ApplyLeave(com.espertech.esper.client.EventBean[],System.Object,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Apply events as leaving a window (old events).
            </summary>
            <param name="eventsPerStream">events for each stream entering window</param>
            <param name="optionalGroupKeyPerRow">
            can be null if grouping without keys is desired, else the keys
             to use for grouping, each distinct key value results in a new row 
            of aggregation state.
            </param>
            <param name="exprEvaluatorContext">context for expression evaluatiom</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggregationService.SetCurrentAccess(System.Object,System.Int32)">
            <summary>Set the current aggregation state row - for use when evaluation nodes are asked to evaluate. </summary>
            <param name="groupKey">key identify the row of aggregation states</param>
            <param name="agentInstanceId">context partition id</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggregationService.ClearResults(com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Clear current aggregation state. </summary>
            <param name="exprEvaluatorContext"></param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprPriorEvalStrategy">
            <summary>Represents the 'prior' prior event resolution strategy for use in an expression node tree. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprSubselectStrategy">
            <summary>
            
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.context.subselect.SubSelectActivationCollection">
            <summary>Holds stream information for subqueries. </summary>
        </member>
        <member name="M:com.espertech.esper.core.context.subselect.SubSelectActivationCollection.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.core.context.subselect.SubSelectActivationCollection.Add(com.espertech.esper.epl.expression.ExprSubselectNode,com.espertech.esper.core.context.subselect.SubSelectActivationHolder)">
            <summary>
            Add lookup.
            </summary>
            <param name="subselectNode">is the subselect expression node</param>
            <param name="holder">The holder.</param>
        </member>
        <member name="M:com.espertech.esper.core.context.subselect.SubSelectActivationCollection.GetSubSelectHolder(com.espertech.esper.epl.expression.ExprSubselectNode)">
            <summary>
            Gets the sub select holder.
            </summary>
            <param name="subselectNode">The subselect node.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.core.context.subselect.SubSelectActivationCollection.GetStreamNumber(com.espertech.esper.epl.expression.ExprSubselectNode)">
            <summary>Returns stream number. </summary>
            <param name="subqueryNode">is the lookup node's stream number</param>
            <returns>number of stream</returns>
        </member>
        <member name="M:com.espertech.esper.core.context.subselect.SubSelectActivationCollection.GetRootViewableType(com.espertech.esper.epl.expression.ExprSubselectNode)">
            <summary>Returns the lookup viewable, child-most view. </summary>
            <param name="subqueryNode">is the expression node to get this for</param>
            <returns>child viewable</returns>
        </member>
        <member name="M:com.espertech.esper.core.context.subselect.SubSelectActivationCollection.GetViewFactoryChain(com.espertech.esper.epl.expression.ExprSubselectNode)">
            <summary>Returns the lookup's view factory chain. </summary>
            <param name="subqueryNode">is the node to look for</param>
            <returns>view factory chain</returns>
        </member>
        <member name="T:com.espertech.esper.core.context.subselect.SubSelectActivationHolder">
            <summary>
            Entry holding lookup resource references for use by <seealso cref="T:com.espertech.esper.core.context.subselect.SubSelectActivationCollection"/>. 
            </summary>
        </member>
        <member name="P:com.espertech.esper.core.context.subselect.SubSelectActivationHolder.StreamNumber">
            <summary>Returns lookup stream number. </summary>
            <value>stream num</value>
        </member>
        <member name="P:com.espertech.esper.core.context.subselect.SubSelectActivationHolder.ViewFactoryChain">
            <summary>Returns the lookup view factory chain </summary>
            <value>view factory chain</value>
        </member>
        <member name="T:com.espertech.esper.core.context.subselect.SubSelectStrategyCollection">
            <summary>Holds stream information for subqueries. </summary>
        </member>
        <member name="M:com.espertech.esper.core.context.subselect.SubSelectStrategyCollection.Add(com.espertech.esper.epl.expression.ExprSubselectNode,com.espertech.esper.core.context.subselect.SubSelectStrategyFactoryDesc)">
            <summary>Add lookup. </summary>
            <param name="subselectNode">is the subselect expression node</param>
        </member>
        <member name="T:com.espertech.esper.core.context.subselect.SubSelectStrategyFactory">
            <summary>
            Entry holding lookup resource references for use by <seealso cref="T:com.espertech.esper.core.context.subselect.SubSelectActivationCollection"/>.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.context.subselect.SubSelectStrategyFactoryDesc">
            <summary>
            Entry holding lookup resource references for use by {@link SubSelectActivationCollection}.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.context.subselect.SubSelectStrategyFactoryLocalViewPreloaded">
            <summary>
            Entry holding lookup resource references for use by {@link SubSelectActivationCollection}.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.context.subselect.SubSelectStrategyFactoryNamedWinIndexShare">
            <summary>
            Entry holding lookup resource references for use by {@link SubSelectActivationCollection}.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.context.subselect.SubSelectStrategyHolder">
            <summary>
            Entry holding lookup resource references for use by <seealso cref="T:com.espertech.esper.core.context.subselect.SubSelectActivationCollection"/>
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.context.subselect.SubSelectStrategyRealization">
            <summary>
            Entry holding lookup resource references for use by {@link com.espertech.esper.core.context.subselect.SubSelectActivationCollection}.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprEvaluatorContext">
            <summary>
            Returns the context for expression evaluation.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.ViewSupport">
            <summary>
            A helper class for View implementations that provides generic implementation for some 
            of the methods. Methods that contain the actual logic of the view are not implemented 
            in this class. A common implementation normally does not need to override any of the 
            methods implemented here, their implementation is generic and should suffice. The class 
            provides a convenience method for updateing it's children data UpdateChildren(Object[], Object[]). 
            This method should be called from within the View.Update(Object[], Object[]) methods in 
            the subclasses.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.View">
            <summary> The View interface provides a way for a stream, data provider, or another view,
            to notify an object of additions and deletions to its data set.
            Views are themselves Viewable by other Views, and can implement their own set of cached data internally.
            The contract is that a View is wholly derived from the object (its parent) to which it is attached.
            That is, it must be able to reconstitute its cached state from a playback of source data passed to it
            through the update() method.
            
            A view's job is to derive some data from the data in the Viewable object to which it is attached.
            This can happen by a 'push' mechanism whereby new data in the underlying collection is pushed to the view
            through the update method. A view that operates in this mode incrementally updates its derived data and
            then provides this data to any queries or requesters through its Data interface and potentially through
            other customized methods it exposes. When these methods are called, the view in push mode does not contact
            its parent: it just supplies the requester with the data it already derived. The push mode is efficient
            when data in a view is slow-changing with respect to how much its data is requested. For example, a view
            calculating the mean of an intermittent signal over time may be queried very frequently. It incrementally
            updates its statistic and then provides that quantity to callers whenever they want it, which may be much
            more frequently than the incoming signal occurs.
            
            The 'pull' mechanism is driven by requests to the view's Data interface or other customized data access methods.
            A view operating in 'pull' mode may know whether it is "clean" or "dirty" by listening to its update method, or
            it may not get any calls to its update method, and have to consult its parent to re-derive data when it is called.
            This mode is efficient when requests to a view for its data are infrequent compared to the update frequency of its
            parent's data. For example, a temperature sensor may be changing on a near-continuous basis, and a view which
            derives some quantity from that sensor may be queried irregularly. It is most efficient for that view to operate
            in pull mode, and only update itself when it is asked by some consumer for its derived quantity. It then asks the
            temperature sensor for the current temperature, does its derivation, and returns to the requester.
            
            To feed views that are registered with it, a view should only call the update method on its child views when its own
            data has changed. If it receives an update which results in no change to its data, it should not update any children
            views. 
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.EventCollection">
            <summary>
            Interface that marks an event collection. Every event in the event collection must be 
            of the same event type, as defined by the EventType property.
            </summary>
        </member>
        <member name="P:com.espertech.esper.view.EventCollection.EventType">
            <summary> Provides metadata information about the type of object the event collection contains.</summary>
            <returns> metadata for the objects in the collection
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.Viewable">
            <summary>
            The Viewable interface marks an object as supporting zero, one or more View instances.
            All implementing classes must call each view's 'Update' method when new data enters it.
            Implementations must take care to synchronize methods of this interface with other methods
            such that data flow is threadsafe.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.Viewable.AddView(com.espertech.esper.view.View)">
            <summary> Add a view to the viewable object.</summary>
            <param name="view">to add
            </param>
            <returns> view to add
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.Viewable.RemoveView(com.espertech.esper.view.View)">
            <summary> Remove a view.</summary>
            <param name="view">to remove
            </param>
            <returns> true to indicate that the view to be removed existed within this view, false if the view to
            remove could not be found
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.Viewable.RemoveAllViews">
            <summary>
            Remove all views.
            </summary>
        </member>
        <member name="P:com.espertech.esper.view.Viewable.Views">
            <summary> Returns all added views.</summary>
            <returns> list of added views
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.Viewable.HasViews">
            <summary> Test is there are any views to the Viewable.</summary>
            <returns> true indicating there are child views, false indicating there are no child views
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.View.Update(com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean[])">
            <summary>
            Notify that data has been added or removed from the Viewable parent.
            The last object in the newData array of objects would be the newest object added to the parent view.
            The first object of the oldData array of objects would be the oldest object removed from the parent view.
            <para>
            If the call to update contains new (inserted) data, then the first argument will be a non-empty list and the
            second will be empty. Similarly, if the call is a notification of deleted data, then the first argument will be
            empty and the second will be non-empty. Either the newData or oldData will be non-null.
            This method won't be called with both arguments being null, but either one could be null.
            The same is true for zero-length arrays. Either newData or oldData will be non-empty.
            If both are non-empty, then the update is a modification notification.
            </para>
            <para>
            When update() is called on a view by the parent object, the data in newData will be in the collection of the
            parent, and its data structures will be arranged to reflect that.
            The data in oldData will not be in the parent's data structures, and any access to the parent will indicate that
            that data is no longer there.
            </para>
            </summary>
            <param name="newData">is the new data that has been added to the parent view
            </param>
            <param name="oldData">is the old data that has been removed from the parent view
            </param>
        </member>
        <member name="P:com.espertech.esper.view.View.Parent">
            <summary> Gets or sets the View's parent Viewable.</summary>
            <returns> viewable
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.ViewSupport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.view.ViewSupport"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewSupport.AddView(com.espertech.esper.view.View)">
            <summary>
            Add a view to the viewable object.
            </summary>
            <param name="view">to add</param>
            <returns>view to add</returns>
        </member>
        <member name="M:com.espertech.esper.view.ViewSupport.UpdateChildren(com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean[])">
            <summary>
            Updates all the children with new data. Views may want to use the hasViews method on the 
            Viewable interface to determine if there are any child views attached at all, and save the 
            work of constructing the arrays and making the call to UpdateChildren() in case there aren't
            any children attached.
            </summary>
            <param name="newData">is the array of new event data</param>
            <param name="oldData">is the array of old event data</param>
        </member>
        <member name="M:com.espertech.esper.view.ViewSupport.UpdateChildren(System.Collections.Generic.IList{com.espertech.esper.view.View},com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean[])">
            <summary>Updates all the children with new data. Static convenience method that accepts the list of child views as a parameter. </summary>
            <param name="childViews">is the list of child views to send the data to</param>
            <param name="newData">is the array of new event data</param>
            <param name="oldData">is the array of old event data</param>
        </member>
        <member name="M:com.espertech.esper.view.ViewSupport.DumpUpdateParams(System.String,com.espertech.esper.collection.UniformPair{com.espertech.esper.client.EventBean[]})">
            <summary>Convenience method for logging the parameters passed to the update method. Only logs if debug is enabled. </summary>
            <param name="prefix">is a prefix text to output for each line</param>
            <param name="result">is the data in an update call</param>
        </member>
        <member name="M:com.espertech.esper.view.ViewSupport.DumpUpdateParams(System.String,System.Object[],System.Object[])">
            <summary>Convenience method for logging the parameters passed to the update method. Only logs if debug is enabled. </summary>
            <param name="prefix">is a prefix text to output for each line</param>
            <param name="newData">is the new data in an update call</param>
            <param name="oldData">is the old data in an update call</param>
        </member>
        <member name="M:com.espertech.esper.view.ViewSupport.DumpChildViews(System.String,com.espertech.esper.view.Viewable)">
            <summary>Convenience method for logging the child views of a Viewable. Only logs if debug is enabled. This is a recursive method. </summary>
            <param name="prefix">is a text to print for each view printed</param>
            <param name="parentViewable">is the parent for which the child views are displayed.</param>
        </member>
        <member name="M:com.espertech.esper.view.ViewSupport.FindDescendent(com.espertech.esper.view.Viewable,com.espertech.esper.view.Viewable)">
            <summary>Find the descendent view in the view tree under the parent view returning the list of view nodes between the parent view and the descendent view. Returns null if the descendent view is not found. Returns an empty list if the descendent view is a child view of the parent view. </summary>
            <param name="parentView">is the view to start searching under</param>
            <param name="descendentView">is the view to find</param>
            <returns>list of Viewable nodes between parent and descendent view.</returns>
        </member>
        <member name="M:com.espertech.esper.view.ViewSupport.Update(com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean[])">
            <summary>
            Notify that data has been added or removed from the Viewable parent.
            The last object in the newData array of objects would be the newest object added to the parent view.
            The first object of the oldData array of objects would be the oldest object removed from the parent view.
            <para>
            If the call to update contains new (inserted) data, then the first argument will be a non-empty list and the
            second will be empty. Similarly, if the call is a notification of deleted data, then the first argument will be
            empty and the second will be non-empty. Either the newData or oldData will be non-null.
            This method won't be called with both arguments being null, but either one could be null.
            The same is true for zero-length arrays. Either newData or oldData will be non-empty.
            If both are non-empty, then the update is a modification notification.
            </para>
            <para>
            When Update() is called on a view by the parent object, the data in newData will be in the collection of the
            parent, and its data structures will be arranged to reflect that.
            The data in oldData will not be in the parent's data structures, and any access to the parent will indicate that
            that data is no longer there.
            </para>
            </summary>
            <param name="newData">is the new data that has been added to the parent view
            </param>
            <param name="oldData">is the old data that has been removed from the parent view
            </param>
        </member>
        <member name="M:com.espertech.esper.view.ViewSupport.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.view.ViewSupport.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewSupport.EventType">
            <summary>
            Provides metadata information about the type of object the event collection contains.
            </summary>
            <returns>
            metadata for the objects in the collection
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewSupport.Parent">
            <summary>
            Gets or sets the View's parent Viewable.
            </summary>
            <value></value>
            <returns> viewable
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewSupport.Views">
            <summary>
            Returns all added views.
            </summary>
            <value></value>
            <returns> list of added views
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewSupport.HasViews">
            <summary>
            Test is there are any views to the Viewable.
            </summary>
            <value></value>
            <returns> true indicating there are child views, false indicating there are no child views
            </returns>
        </member>
        <member name="T:com.espertech.esper.core.service.UpdateDispatchView">
            <summary>
            Update dispatch view to indicate statement results to listeners.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.UpdateDispatchView.NewResult(com.espertech.esper.collection.UniformPair{com.espertech.esper.client.EventBean[]})">
            <summary>
            Convenience method that accepts a pair of new and old data as this is the most treated unit.
            </summary>
            <param name="result">is new data (insert stream) and old data (remove stream)</param>
        </member>
        <member name="M:com.espertech.esper.core.context.util.EPStatementAgentInstanceHandle.#ctor(com.espertech.esper.core.service.EPStatementHandle,com.espertech.esper.compat.threading.IReaderWriterLock,System.Int32,com.espertech.esper.core.service.StatementAgentInstanceFilterVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.core.context.util.EPStatementAgentInstanceHandle"/> class.
            </summary>
            <param name="statementHandle">The statement handle.</param>
            <param name="statementAgentInstanceLock">The statement agent instance lock.</param>
            <param name="agentInstanceId">The agent instance id.</param>
            <param name="statementFilterVersion">The statement filter version.</param>
        </member>
        <member name="M:com.espertech.esper.core.context.util.EPStatementAgentInstanceHandle.IsCurrentFilter(System.Int64)">
            <summary>Tests filter version. </summary>
            <param name="filterVersion">to test</param>
            <returns>indicator whether version is up-to-date</returns>
        </member>
        <member name="M:com.espertech.esper.core.context.util.EPStatementAgentInstanceHandle.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.core.context.util.EPStatementAgentInstanceHandle.InternalDispatch(com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Invoked by <seealso cref="T:com.espertech.esper.client.EPRuntime"/> to indicate that a statements's filer and schedule processing is done, and now it's time to process join results. </summary>
            <param name="exprEvaluatorContext">context for expression evaluation</param>
        </member>
        <member name="M:com.espertech.esper.core.context.util.EPStatementAgentInstanceHandle.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:com.espertech.esper.core.context.util.EPStatementAgentInstanceHandle.OptionalDispatchable">
            <summary>Provides a callback for use when statement processing for filters and schedules is done, for use by join statements that require an explicit indicator that all joined streams results have been processed. </summary>
            <value>is the instance for calling onto after statement callback processing</value>
        </member>
        <member name="P:com.espertech.esper.core.context.util.EPStatementAgentInstanceHandle.FilterFaultHandler">
            <summary>
            Gets or sets the filter fault handler.
            </summary>
            <value>The filter fault handler.</value>
        </member>
        <member name="T:com.espertech.esper.core.deploy.DeploymentStateService">
            <summary>Interface for a service maintaining deployment state. </summary>
        </member>
        <member name="M:com.espertech.esper.core.deploy.DeploymentStateService.GetDeployment(System.String)">
            <summary>Returns the deployment informaton for a given deployment id. </summary>
            <param name="deploymentId">id</param>
            <returns>deployment information</returns>
        </member>
        <member name="M:com.espertech.esper.core.deploy.DeploymentStateService.AddUpdateDeployment(com.espertech.esper.client.deploy.DeploymentInformation)">
            <summary>Add or update the deployment information using the contained deployment id as a key. </summary>
            <param name="descriptor">to store</param>
        </member>
        <member name="M:com.espertech.esper.core.deploy.DeploymentStateService.Remove(System.String)">
            <summary> </summary>
            <param name="deploymentId"></param>
        </member>
        <member name="P:com.espertech.esper.core.deploy.DeploymentStateService.NextDeploymentId">
            <summary>Allocates a new deployment id. </summary>
            <value>deployment id</value>
        </member>
        <member name="P:com.espertech.esper.core.deploy.DeploymentStateService.Deployments">
            <summary>Returns a list of deployment ids of deployments. </summary>
            <value>deployment ids</value>
        </member>
        <member name="P:com.espertech.esper.core.deploy.DeploymentStateService.AllDeployments">
            <summary>Returns deployment information for all deployments. </summary>
            <value>array of deployment info</value>
        </member>
        <member name="T:com.espertech.esper.core.deploy.DeploymentStateServiceImpl">
            <summary>Implementation for storing deployment state. </summary>
        </member>
        <member name="T:com.espertech.esper.core.deploy.EPDeploymentAdminImpl">
            <summary>Deployment administrative implementation. </summary>
        </member>
        <member name="M:com.espertech.esper.core.deploy.EPDeploymentAdminImpl.#ctor(com.espertech.esper.core.service.EPAdministratorSPI,com.espertech.esper.core.deploy.DeploymentStateService,com.espertech.esper.core.service.StatementEventTypeRef,com.espertech.esper.events.EventAdapterService,com.espertech.esper.core.service.StatementIsolationService,com.espertech.esper.core.service.StatementIdGenerator,com.espertech.esper.filter.FilterService)">
            <summary>
            Ctor.
            </summary>
            <param name="epService">admininstrative SPI</param>
            <param name="deploymentStateService">deployment state maintainance service</param>
            <param name="statementEventTypeRef">maintains statement-eventtype relationship</param>
            <param name="eventAdapterService">event wrap service</param>
            <param name="statementIsolationService">for isolated statement execution</param>
            <param name="optionalStatementIdGenerator">The optional statement id generator.</param>
            <param name="filterService">The filter service.</param>
        </member>
        <member name="T:com.espertech.esper.core.deploy.EPLModuleParseItem">
            <summary>Item parsing an EPL module file. </summary>
        </member>
        <member name="M:com.espertech.esper.core.deploy.EPLModuleParseItem.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>Ctor. </summary>
            <param name="expression">EPL</param>
            <param name="lineNum">line number</param>
            <param name="startChar">start character number total file</param>
            <param name="endChar">end character number</param>
        </member>
        <member name="P:com.espertech.esper.core.deploy.EPLModuleParseItem.LineNum">
            <summary>Returns line number of expression. </summary>
            <value>line number</value>
        </member>
        <member name="P:com.espertech.esper.core.deploy.EPLModuleParseItem.Expression">
            <summary>Returns the expression. </summary>
            <value>expression</value>
        </member>
        <member name="P:com.espertech.esper.core.deploy.EPLModuleParseItem.StartChar">
            <summary>Returns the position of the start character. </summary>
            <value>start char position</value>
        </member>
        <member name="P:com.espertech.esper.core.deploy.EPLModuleParseItem.EndChar">
            <summary>Returns the position of the end character. </summary>
            <value>end char position</value>
        </member>
        <member name="T:com.espertech.esper.core.service.ConfigurationOperationsImpl">
            <summary>
            Provides runtime engine configuration operations.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.ConfigurationOperationsImpl.#ctor(com.espertech.esper.events.EventAdapterService,com.espertech.esper.events.EventTypeIdGenerator,com.espertech.esper.epl.core.EngineImportService,com.espertech.esper.epl.variable.VariableService,com.espertech.esper.epl.core.EngineSettingsService,com.espertech.esper.events.vaevent.ValueAddEventService,com.espertech.esper.epl.metric.MetricReportingService,com.espertech.esper.core.service.StatementEventTypeRef,com.espertech.esper.core.service.StatementVariableRef,com.espertech.esper.epl.spec.PluggableObjectCollection,com.espertech.esper.filter.FilterService,com.espertech.esper.pattern.pool.PatternSubexpressionPoolEngineSvc)">
            <summary>
            Ctor.
            </summary>
            <param name="eventAdapterService">is the event wrapper and type service</param>
            <param name="eventTypeIdGenerator">The event type id generator.</param>
            <param name="engineImportService">for imported aggregation functions and static functions</param>
            <param name="variableService">provides access to variable values</param>
            <param name="engineSettingsService">some engine settings are writable</param>
            <param name="valueAddEventService">update event handling</param>
            <param name="metricReportingService">for metric reporting</param>
            <param name="statementEventTypeRef">statement to event type reference holding</param>
            <param name="statementVariableRef">statement to variable reference holding</param>
            <param name="plugInViews">The plug in views.</param>
            <param name="filterService">The filter service.</param>
            <param name="patternSubexpressionPoolSvc">The pattern subexpression pool SVC.</param>
        </member>
        <member name="T:com.espertech.esper.core.service.DeliveryConvertor">
            <summary>Converts a row of column selection results into a result for dispatch to a method. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.DeliveryConvertor.ConvertRow(System.Object[])">
            <summary>Convert result row to dispatchable. </summary>
            <param name="row">to convert</param>
            <returns>converted row</returns>
        </member>
        <member name="T:com.espertech.esper.core.service.DeliveryConvertorMap">
            <summary>Converts column results into a Map of key-value pairs. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.DeliveryConvertorMap.#ctor(System.String[])">
            <summary>Ctor. </summary>
            <param name="columnNames">the names for columns</param>
        </member>
        <member name="T:com.espertech.esper.core.service.DeliveryConvertorNull">
            <summary>Implementation that does not convert columns. </summary>
        </member>
        <member name="T:com.espertech.esper.core.service.DeliveryConvertorObjectArr">
            <summary>Implementation of a convertor for column results that renders the result as an object array itself. </summary>
        </member>
        <member name="T:com.espertech.esper.core.service.DeliveryConvertorWidener">
            <summary>
            Implementation of a convertor for column results that renders the result as an object array itself.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.service.EPAdministratorContext">
            <summary>Context for administrative services. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.EPAdministratorContext.#ctor(com.espertech.esper.core.service.EPRuntimeSPI,com.espertech.esper.core.service.EPServicesContext,com.espertech.esper.client.ConfigurationOperations,com.espertech.esper.epl.spec.SelectClauseStreamSelectorEnum)">
            <summary>
            Ctor.
            </summary>
            <param name="runtimeSPI">The runtime SPI.</param>
            <param name="services">engine services</param>
            <param name="configurationOperations">configuration snapshot</param>
            <param name="defaultStreamSelector">default stream selection</param>
        </member>
        <member name="P:com.espertech.esper.core.service.EPAdministratorContext.ConfigurationOperations">
            <summary>Returns configuration. </summary>
            <value>configuration</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPAdministratorContext.DefaultStreamSelector">
            <summary>Returns the default stream selector. </summary>
            <value>default stream selector</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPAdministratorContext.Services">
            <summary>Returns the engine services context. </summary>
            <value>engine services</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPAdministratorContext.RuntimeSPI">
            <summary>
            Gets or sets the runtime SPI.
            </summary>
            <value>The runtime SPI.</value>
        </member>
        <member name="T:com.espertech.esper.core.service.EPAdministratorHelper">
            <summary>Helper class for administrative interface. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.EPAdministratorHelper.CompileEPL(System.String,System.String,System.Boolean,System.String,com.espertech.esper.core.service.EPServicesContext,com.espertech.esper.epl.spec.SelectClauseStreamSelectorEnum)">
            <summary>Compile an EPL statement. </summary>
            <param name="eplStatement">to compile</param>
            <param name="eplStatementForErrorMsg">the statement to use for indicating error messages</param>
            <param name="addPleaseCheck">true to add please-check message text</param>
            <param name="statementName">the name of statement</param>
            <param name="services">engine services</param>
            <param name="defaultStreamSelector">stream selector</param>
            <returns>compiled statement</returns>
        </member>
        <member name="M:com.espertech.esper.core.service.EPAdministratorHelper.CompileEPL(System.String,System.String,System.Boolean,System.String,com.espertech.esper.epl.spec.SelectClauseStreamSelectorEnum,com.espertech.esper.epl.core.EngineImportService,com.espertech.esper.epl.variable.VariableService,com.espertech.esper.schedule.SchedulingService,System.String,com.espertech.esper.client.ConfigurationInformation,com.espertech.esper.pattern.PatternNodeFactory,com.espertech.esper.core.context.mgr.ContextManagementService,com.espertech.esper.epl.declexpr.ExprDeclaredService)">
            <summary>
            Compile the EPL.
            </summary>
            <param name="eplStatement">expression to compile</param>
            <param name="eplStatementForErrorMsg">use this text for the error message</param>
            <param name="addPleaseCheck">indicator to add a "please check" wording for stack paraphrases</param>
            <param name="statementName">is the name of the statement</param>
            <param name="defaultStreamSelector">the configuration for which insert or remove streams (or both) to produce</param>
            <param name="engineImportService">The engine import service.</param>
            <param name="variableService">The variable service.</param>
            <param name="schedulingService">The scheduling service.</param>
            <param name="engineURI">The engine URI.</param>
            <param name="configSnapshot">The config snapshot.</param>
            <param name="patternNodeFactory">The pattern node factory.</param>
            <param name="contextManagementService">The context management service.</param>
            <param name="exprDeclaredService">The expr declared service.</param>
            <returns>statement specification</returns>
        </member>
        <member name="T:com.espertech.esper.core.service.EPAdministratorImpl">
            <summary>Implementation for the admin interface. </summary>
        </member>
        <member name="T:com.espertech.esper.core.service.EPAdministratorSPI">
            <summary>Administrative SPI. </summary>
        </member>
        <member name="T:com.espertech.esper.client.EPAdministrator">
            <summary>
            Administrative interface to the event stream processing engine. Includes methods
            to create patterns and EPL statements.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.CreatePattern(System.String)">
            <summary>
            Create and starts an event pattern statement for the expressing string passed.
            <para/>
            The engine assigns a unique name to the statement.
            </summary>
            <param name="onExpression">must follow the documented syntax for pattern statements</param>
            <returns>
            EPStatement to poll data from or to add listeners to
            </returns>
            <throws>EPException when the expression was not valid</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.CreateEPL(System.String)">
            <summary>
            Creates and starts an EPL statement.
            <para/>
            The engine assigns a unique name to the statement. The returned statement is in
            started state.
            </summary>
            <param name="eplStatement">is the query language statement</param>
            <returns>
            EPStatement to poll data from or to add listeners to
            </returns>
            <throws>EPException when the expression was not valid</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.CreatePattern(System.String,System.String)">
            <summary>
            Create and starts an event pattern statement for the expressing string passed
            and assign the name passed.
            <para/>
            The statement name is optimally a unique name. If a statement of the same name
            has already been created, the engine assigns a postfix to create a unique
            statement name.
            </summary>
            <param name="onExpression">must follow the documented syntax for pattern statements</param>
            <param name="statementName">is the name to assign to the statement for use in managing the statement</param>
            <returns>
            EPStatement to poll data from or to add listeners to
            </returns>
            <throws>EPException when the expression was not valid</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.CreatePattern(System.String,System.String,System.Object)">
            <summary>
            Create and starts an event pattern statement for the expressing string passed
            and assign the name passed.
            <para/>
            The statement name is optimally a unique name. If a statement of the same name
            has already been created, the engine assigns a postfix to create a unique
            statement name.
            <para/>
            Accepts an application defined user data object associated with the statement.
            The <em>user object</em> is a single, unnamed field that is stored with every
            statement. Applications may put arbitrary objects in this field or a null value.
            </summary>
            <param name="onExpression">must follow the documented syntax for pattern statements</param>
            <param name="statementName">is the name to assign to the statement for use in managing the statement</param>
            <param name="userObject">is the application-defined user object</param>
            <returns>
            EPStatement to poll data from or to add listeners to
            </returns>
            <throws>EPException when the expression was not valid</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.CreatePattern(System.String,System.Object)">
            <summary>
            Create and starts an event pattern statement for the expressing string passed
            and assign the name passed.
            <para/>
            Accepts an application defined user data object associated with the statement.
            The <em>user object</em> is a single, unnamed field that is stored with every
            statement. Applications may put arbitrary objects in this field or a null value.
            </summary>
            <param name="onExpression">must follow the documented syntax for pattern statements</param>
            <param name="userObject">is the application-defined user object</param>
            <returns>
            EPStatement to poll data from or to add listeners to
            </returns>
            <throws>EPException when the expression was not valid</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.CreateEPL(System.String,System.String)">
            <summary>
            Create and starts an EPL statement.
            <para/>
            The statement name is optimally a unique name. If a statement of the same name
            has already been created, the engine assigns a postfix to create a unique
            statement name.
            </summary>
            <param name="eplStatement">is the query language statement</param>
            <param name="statementName">is the name to assign to the statement for use in managing the statement</param>
            <returns>
            EPStatement to poll data from or to add listeners to
            </returns>
            <throws>EPException when the expression was not valid</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.CreateEPL(System.String,System.String,System.Object)">
            <summary>
            Create and starts an EPL statement.
            <para/>
            The statement name is optimally a unique name. If a statement of the same name
            has already been created, the engine assigns a postfix to create a unique
            statement name.
            <para/>
            Accepts an application defined user data object associated with the statement.
            The <em>user object</em> is a single, unnamed field that is stored with every
            statement. Applications may put arbitrary objects in this field or a null value.
            </summary>
            <param name="eplStatement">is the query language statement</param>
            <param name="statementName">is the name to assign to the statement for use in managing the statement</param>
            <param name="userObject">is the application-defined user object</param>
            <returns>
            EPStatement to poll data from or to add listeners to
            </returns>
            <throws>EPException when the expression was not valid</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.CreateEPL(System.String,System.Object)">
            <summary>
            Create and starts an EPL statement.
            <para/>
            Accepts an application defined user data object associated with the statement.
            The <em>user object</em> is a single, unnamed field that is stored with every
            statement. Applications may put arbitrary objects in this field or a null value.
            </summary>
            <param name="eplStatement">is the query language statement</param>
            <param name="userObject">is the application-defined user object</param>
            <returns>
            EPStatement to poll data from or to add listeners to
            </returns>
            <throws>EPException when the expression was not valid</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.Create(com.espertech.esper.client.soda.EPStatementObjectModel,System.String)">
            <summary>
            Creates and starts an EPL statement.
            <para/>
            The statement name is optimally a unique name. If a statement of the same name
            has already been created, the engine assigns a postfix to create a unique
            statement name.
            </summary>
            <param name="sodaStatement">is the statement object model</param>
            <param name="statementName">is the name to assign to the statement for use in managing the statement</param>
            <returns>
            EPStatement to poll data from or to add listeners to
            </returns>
            <throws>EPException when the expression was not valid</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.Create(com.espertech.esper.client.soda.EPStatementObjectModel,System.String,System.Object)">
            <summary>
            Creates and starts an EPL statement.
            <para/>
            The statement name is optimally a unique name. If a statement of the same name
            has already been created, the engine assigns a postfix to create a unique
            statement name.
            <para/>
            Accepts an application defined user data object associated with the statement.
            The <em>user object</em> is a single, unnamed field that is stored with every
            statement. Applications may put arbitrary objects in this field or a null value.
            </summary>
            <param name="sodaStatement">is the statement object model</param>
            <param name="statementName">is the name to assign to the statement for use in managing the statement</param>
            <param name="userObject">is the application-defined user object</param>
            <returns>
            EPStatement to poll data from or to add listeners to
            </returns>
            <throws>EPException when the expression was not valid</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.Create(com.espertech.esper.client.soda.EPStatementObjectModel)">
            <summary>
            Creates and starts an EPL statement.
            </summary>
            <param name="sodaStatement">is the statement object model</param>
            <returns>
            EPStatement to poll data from or to add listeners to
            </returns>
            <throws>EPException when the expression was not valid</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.CompileEPL(System.String)">
            <summary>
            Compiles a given EPL into an object model representation of the query.
            </summary>
            <param name="eplExpression">is the statement text to compile</param>
            <returns>
            object model of statement
            </returns>
            <throws>EPException indicates compilation errors.</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.PrepareEPL(System.String)">
            <summary>
            Prepares a statement for the given EPL, which can include substitution
            parameters marked via question mark '?'.
            </summary>
            <param name="eplExpression">is the statement text to prepare</param>
            <returns>
            prepared statement
            </returns>
            <throws>EPException indicates compilation errors.</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.PreparePattern(System.String)">
            <summary>
            Prepares a statement for the given pattern, which can include substitution
            parameters marked via question mark '?'.
            </summary>
            <param name="patternExpression">is the statement text to prepare</param>
            <returns>
            prepared statement
            </returns>
            <throws>EPException indicates compilation errors.</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.Create(com.espertech.esper.client.EPPreparedStatement,System.String)">
            <summary>
            Creates and starts a prepared statement.
            <para/>
            The statement name is optimally a unique name. If a statement of the same name
            has already been created, the engine assigns a postfix to create a unique
            statement name.
            </summary>
            <param name="prepared">is the prepared statement for which all substitution values have been provided</param>
            <param name="statementName">is the name to assign to the statement for use in managing the statement</param>
            <returns>
            EPStatement to poll data from or to add listeners to
            </returns>
            <throws>EPException when the prepared statement was not valid</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.Create(com.espertech.esper.client.EPPreparedStatement,System.String,System.Object)">
            <summary>
            Creates and starts a prepared statement.
            <para/>
            The statement name is optimally a unique name. If a statement of the same name
            has already been created, the engine assigns a postfix to create a unique
            statement name.
            <para/>
            Accepts an application defined user data object associated with the statement.
            The <em>user object</em> is a single, unnamed field that is stored with every
            statement. Applications may put arbitrary objects in this field or a null value.
            </summary>
            <param name="prepared">is the prepared statement for which all substitution values have been provided</param>
            <param name="statementName">is the name to assign to the statement for use in managing the statement</param>
            <param name="userObject">is the application-defined user object</param>
            <returns>
            EPStatement to poll data from or to add listeners to
            </returns>
            <throws>EPException when the prepared statement was not valid</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.Create(com.espertech.esper.client.EPPreparedStatement)">
            <summary>
            Creates and starts a prepared statement.
            </summary>
            <param name="prepared">is the prepared statement for which all substitution values have been provided</param>
            <returns>
            EPStatement to poll data from or to add listeners to
            </returns>
            <throws>EPException when the expression was not valid</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.GetStatement(System.String)">
            <summary>
            Returns the statement by the given statement name. Returns null if a statement
            of that name has not been created, or if the statement by that name has been
            destroyed.
            </summary>
            <param name="name">is the statement name to return the statement for</param>
            <returns>
            statement for the given name, or null if no such started or stopped statement
            exists
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.StartAllStatements">
            <summary>
            Starts all statements that are in stopped state. Statements in started state are
            not affected by this method.
            </summary>
            <throws>EPException when an error occured starting statements.</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.StopAllStatements">
            <summary>
            Stops all statements that are in started state. Statements in stopped state are
            not affected by this method.
            </summary>
            <throws>EPException when an error occured stopping statements</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPAdministrator.DestroyAllStatements">
            <summary>
            Stops and destroys all statements.
            </summary>
            <throws>EPException when an error occured stopping or destroying statements</throws>
        </member>
        <member name="P:com.espertech.esper.client.EPAdministrator.DeploymentAdmin">
            <summary>
            Returns deployment administrative services.
            </summary>
            <returns>deployment administration</returns>
        </member>
        <member name="P:com.espertech.esper.client.EPAdministrator.StatementNames">
            <summary>
            Returns the statement names of all started and stopped statements.
            <para/>
            This excludes the name of destroyed statements.
            </summary>
            <returns>
            statement names
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.EPAdministrator.Configuration">
            <summary>
            Gets the configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.core.service.EPAdministratorSPI.CompileExpression(System.String)">
            <summary>Compile expression. </summary>
            <param name="expression">to compile</param>
            <returns>compiled expression</returns>
            <throws>EPException if compile failed</throws>
        </member>
        <member name="M:com.espertech.esper.core.service.EPAdministratorSPI.CompileExpressionToSODA(System.String)">
            <summary>Compile expression. </summary>
            <param name="expression">to compile</param>
            <returns>compiled expression</returns>
            <throws>EPException if compile failed</throws>
        </member>
        <member name="M:com.espertech.esper.core.service.EPAdministratorSPI.CompilePatternToNode(System.String)">
            <summary>Compile pattern. </summary>
            <param name="expression">to compile</param>
            <returns>compiled expression</returns>
            <throws>EPException if compile failed</throws>
        </member>
        <member name="M:com.espertech.esper.core.service.EPAdministratorSPI.CompilePatternToSODA(System.String)">
            <summary>Compile pattern. </summary>
            <param name="expression">to compile</param>
            <returns>compiled expression</returns>
            <throws>EPException if compile failed</throws>
        </member>
        <member name="M:com.espertech.esper.core.service.EPAdministratorSPI.CompilePatternToSODAModel(System.String)">
            <summary>Compile pattern. </summary>
            <param name="expression">to compile</param>
            <returns>compiled expression</returns>
            <throws>EPException if compile failed</throws>
        </member>
        <member name="M:com.espertech.esper.core.service.EPAdministratorSPI.CompileAnnotationToSODA(System.String)">
            <summary>Compile annotation expressions. </summary>
            <param name="annotationExpression">to compile</param>
            <returns>model representation</returns>
        </member>
        <member name="M:com.espertech.esper.core.service.EPAdministratorSPI.CompileMatchRecognizePatternToSODA(System.String)">
            <summary>Compile match recognize pattern expression. </summary>
            <param name="matchRecogPatternExpression">to compile</param>
            <returns>model representation</returns>
        </member>
        <member name="M:com.espertech.esper.core.service.EPAdministratorImpl.#ctor(com.espertech.esper.core.service.EPAdministratorContext)">
            <summary>Constructor - takes the services context as argument. </summary>
            <param name="adminContext">administrative context</param>
        </member>
        <member name="M:com.espertech.esper.core.service.EPAdministratorImpl.Dispose">
            <summary>Destroys an engine instance. </summary>
        </member>
        <member name="T:com.espertech.esper.core.service.EPAdministratorIsolatedImpl">
            <summary>Implementation for the admin interface. </summary>
        </member>
        <member name="T:com.espertech.esper.core.service.EPAdministratorIsolatedSPI">
            <summary>
            Implementation for the admin interface.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.EPAdministratorIsolatedSPI.AddStatement(System.String)">
            <summary>
            Add a statement name to the list of statements held by the isolated service provider.
            </summary>
            <param name="name">to add</param>
        </member>
        <member name="M:com.espertech.esper.core.service.EPAdministratorIsolatedImpl.#ctor(System.String,com.espertech.esper.core.service.EPIsolationUnitServices,com.espertech.esper.core.service.EPServicesContext,com.espertech.esper.core.service.EPRuntimeIsolatedImpl)">
            <summary>Ctor. </summary>
            <param name="isolatedServiceName">name of the isolated service</param>
            <param name="services">isolated services</param>
            <param name="unisolatedServices">engine services</param>
            <param name="isolatedRuntime">the runtime for this isolated service</param>
        </member>
        <member name="M:com.espertech.esper.core.service.EPAdministratorIsolatedImpl.RemoveAllStatements">
            <summary>Remove all statements from isolated services, such as upon destroy. </summary>
        </member>
        <member name="T:com.espertech.esper.core.service.EPIsolationUnitServices">
            <summary>Context for all services that provide the isolated runtime. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.EPIsolationUnitServices.#ctor(System.String,System.Int32,com.espertech.esper.filter.FilterServiceSPI,com.espertech.esper.schedule.SchedulingServiceSPI)">
            <summary>Ctor. </summary>
            <param name="name">the isolation unit name</param>
            <param name="unitId">id of the isolation unit</param>
            <param name="filterService">isolated filter service</param>
            <param name="schedulingService">isolated scheduling service</param>
        </member>
        <member name="P:com.espertech.esper.core.service.EPIsolationUnitServices.Name">
            <summary>Returns the name of the isolated service. </summary>
            <value>name of the isolated service</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPIsolationUnitServices.UnitId">
            <summary>Returns the id assigned to that isolated service. </summary>
            <value>isolated service id</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPIsolationUnitServices.FilterService">
            <summary>Returns the isolated filter service. </summary>
            <value>filter service</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPIsolationUnitServices.SchedulingService">
            <summary>Returns the isolated scheduling service. </summary>
            <value>scheduling service</value>
        </member>
        <member name="T:com.espertech.esper.core.service.EPPreparedQueryImpl">
            <summary>
            Provides prepared query functionality.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.EPPreparedQueryImpl.#ctor(com.espertech.esper.core.start.EPPreparedExecuteMethod,System.String)">
            <summary>Ctor. </summary>
            <param name="executeMethod">used at execution time to obtain query results</param>
            <param name="epl">is the EPL to execute</param>
        </member>
        <member name="T:com.espertech.esper.core.service.EPPreparedQueryResult">
            <summary>The result of executing a prepared query. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.EPPreparedQueryResult.#ctor(com.espertech.esper.client.EventType,com.espertech.esper.client.EventBean[])">
            <summary>Ctor. </summary>
            <param name="eventType">is the type of event produced by the query</param>
            <param name="result">the result rows</param>
        </member>
        <member name="P:com.espertech.esper.core.service.EPPreparedQueryResult.EventType">
            <summary>Returs the event type representing the selected columns. </summary>
            <value>metadata</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPPreparedQueryResult.Result">
            <summary>Returns the query result. </summary>
            <value>result rows</value>
        </member>
        <member name="T:com.espertech.esper.core.service.EPQueryResultImpl">
            <summary>Query result. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.EPQueryResultImpl.#ctor(com.espertech.esper.core.service.EPPreparedQueryResult)">
            <summary>Ctor. </summary>
            <param name="queryResult">is the prepared query</param>
        </member>
        <member name="T:com.espertech.esper.core.service.EPRuntimeEventSender">
            <summary>For use by <seealso cref="T:com.espertech.esper.client.EventSender"/> for direct feed of wrapped events for processing. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.EPRuntimeEventSender.ProcessWrappedEvent(com.espertech.esper.client.EventBean)">
            <summary>Equivalent to the sendEvent method of EPRuntime, for use to process an known event. </summary>
            <param name="eventBean">is the event object wrapped by an event bean providing the event metadata</param>
        </member>
        <member name="M:com.espertech.esper.core.service.EPRuntimeEventSender.RouteEventBean(com.espertech.esper.client.EventBean)">
            <summary>For processing a routed event. </summary>
            <param name="theEvent">routed event</param>
        </member>
        <member name="T:com.espertech.esper.core.service.EPRuntimeImpl">
            <summary>
            Implements runtime interface. Also accepts timer callbacks for synchronizing time events with regular events sent in.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.service.EPRuntimeSPI">
            <summary>
            SPI interface of the runtime exposes fire-and-forget, non-continuous query functionality.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.EPRuntime">
            <summary>
            Interface to event stream processing runtime services.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.SendEvent(System.Object)">
            <summary>
            Send an event represented by a plain object to the event stream processing
            runtime.
            <para/>
            Use the route method for sending events into the runtime from within
            UpdateListener code, to avoid the possibility of a stack overflow due to nested calls to
            SendEvent.
            </summary>
            <param name="obj">is the event to sent to the runtime</param>
            <throws>EPException is thrown when the processing of the event lead to an error</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.SendEvent(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Send a map containing event property values to the event stream processing
            runtime.
            <para/>
            Use the route method for sending events into the runtime from within
            event handler code. to avoid the possibility of a stack overflow due to nested calls to
            SendEvent.
            </summary>
            <param name="map">map that contains event property values. Keys are expected to be of type string while value scan be of any type. Keys and values should match those declared via Configuration for the given eventTypeName. </param>
            <param name="mapEventTypeName">the name for the Map event type that was previously configured</param>
            <throws>EPException - when the processing of the event leads to an error</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.SendEvent(System.Object[],System.String)">
            <summary>Send an object array containing event property values to the event stream processing runtime. &lt;p&gt; Use the route method for sending events into the runtime from within UpdateListener code. to avoid the possibility of a stack overflow due to nested calls to sendEvent.  </summary>
            <param name="objectarray">array that contains event property values. Your application must ensure that property valuesmatch the exact same order that the property names and types have been declared, and that the array length matches the number of properties declared. </param>
            <param name="objectArrayEventTypeName">the name for the Object-array event type that was previously configured</param>
            <throws>EPException - when the processing of the event leads to an error</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.SendEvent(System.Xml.Linq.XElement)">
            <summary>
            Send an event represented by a LINQ element to the event stream processing runtime.
            <para/>
            Use the route method for sending events into the runtime from within
            event handler code. to avoid the possibility of a stack overflow due to nested calls to
            SendEvent.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.SendEvent(System.Xml.XmlNode)">
            <summary>
            Send an event represented by a DOM node to the event stream processing runtime.
            <para/>
            Use the route method for sending events into the runtime from within
            event handler code. to avoid the possibility of a stack overflow due to nested calls to
            SendEvent.
            </summary>
            <param name="node">is the DOM node as an event</param>
            <throws>EPException is thrown when the processing of the event lead to an error</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.ResetStats">
            <summary>
            Reset number of events received and emitted
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.Route(System.Object)">
            <summary>
            Route the event object back to the event stream processing runtime for internal
            dispatching, to avoid the possibility of a stack overflow due to nested calls to
            SendEvent. The route event is processed just like it was sent to the runtime,
            that is any active expressions seeking that event receive it. The routed event has
            priority over other events sent to the runtime. In a single-threaded application
            the routed event is processed before the next event is sent to the runtime through
            the EPRuntime.SendEvent method.
            </summary>
            <param name="evnt">to route internally for processing by the event stream processing runtime</param>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.Route(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Route the event object back to the event stream processing runtime for internal
            dispatching, to avoid the possibility of a stack overflow due to nested calls to
            SendEvent. The route event is processed just like it was sent to the runtime,
            that is any active expressions seeking that event receive it. The routed event has
            priority over other events sent to the runtime. In a single-threaded application
            the routed event is processed before the next event is sent to the runtime through
            the EPRuntime.SendEvent method.
            </summary>
            <param name="map">map that contains event property values. Keys are expected to be of type string while valuescan be of any type. Keys and values should match those declared via Configuration for the given eventTypeName. </param>
            <param name="eventTypeName">the name for Map event type that was previously configured</param>
            <throws>EPException - when the processing of the event leads to an error</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.Route(System.Object[],System.String)">
            <summary>Route the event object back to the event stream processing runtime for internal dispatching, to avoid the possibility of a stack overflow due to nested calls to sendEvent. The route event is processed just like it was sent to the runtime, that is any active expressions seeking that event receive it. The routed event has priority over other events sent to the runtime. In a single-threaded application the routed event is processed before the next event is sent to the runtime through the EPRuntime.sendEvent method. </summary>
            <param name="objectArray">object array that contains event property values. Your application must ensure that property valuesmatch the exact same order that the property names and types have been declared, and that the array length matches the number of properties declared. </param>
            <param name="eventTypeName">the name for Object-array event type that was previously configured</param>
            <throws>EPException - when the processing of the event leads to an error</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.Route(System.Xml.Linq.XElement)">
            <summary>
            Route the event object back to the event stream processing runtime for internal
            dispatching, to avoid the possibility of a stack overflow due to nested calls to
            SendEvent. The route event is processed just like it was sent to the runtime,
            that is any active expressions seeking that event receive it. The routed event has
            priority over other events sent to the runtime. In a single-threaded application
            the routed event is processed before the next event is sent to the runtime through
            the EPRuntime.SendEvent method.
            </summary>
            <param name="element">The LINQ element as an event.</param>
            <throws>EPException is thrown when the processing of the event lead to an error</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.Route(System.Xml.XmlNode)">
            <summary>
            Route the event object back to the event stream processing runtime for internal
            dispatching, to avoid the possibility of a stack overflow due to nested calls to
            SendEvent. The route event is processed just like it was sent to the runtime,
            that is any active expressions seeking that event receive it. The routed event has
            priority over other events sent to the runtime. In a single-threaded application
            the routed event is processed before the next event is sent to the runtime through
            the EPRuntime.SendEvent method.
            </summary>
            <param name="node">is the DOM node as an event</param>
            <throws>EPException is thrown when the processing of the event lead to an error</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.RemoveAllUnmatchedEventHandlers">
            <summary>
            Removes all unmatched event handlers.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.GetVariableValue(System.String)">
            <summary>
            Returns the current variable value. A null value is a valid value for a
            variable.
            </summary>
            <param name="variableName">is the name of the variable to return the value for</param>
            <returns>
            current variable value
            </returns>
            <throws>VariableNotFoundException if a variable by that name has not been declared</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.GetVariableValue(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Returns current variable values for each of the variable names passed in,
            guaranteeing consistency in the face of concurrent updates to the variables.
            </summary>
            <param name="variableNames">is a set of variable names for which to return values</param>
            <returns>
            map of variable name and variable value
            </returns>
            <throws>VariableNotFoundException if any of the variable names has not been declared</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.SetVariableValue(System.String,System.Object)">
            <summary>
            Sets the value of a single variable.
            </summary>
            <param name="variableName">is the name of the variable to change the value of</param>
            <param name="variableValue">is the new value of the variable, with null an allowed value</param>
            <throws>VariableValueException if the value does not match variable type or cannot be safely coercedto the variable type </throws>
            <throws>VariableNotFoundException if the variable name has not been declared</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.SetVariableValue(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the value of multiple variables in one update, applying all or none of the
            changes to variable values in one atomic transaction.
            </summary>
            <param name="variableValues">is the map of variable name and variable value, with null an allowed value</param>
            <throws>VariableValueException if any value does not match variable type or cannot be safely coercedto the variable type </throws>
            <throws>VariableNotFoundException if any of the variable names has not been declared</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.GetEventSender(System.String)">
            <summary>
            Returns a facility to process event objects that are of a known type.
            <para/>
            Given an event type name this method returns a sender that allows to send in
            event objects of that type. The event objects send in via the event sender are
            expected to match the event type, thus the event sender does not inspect the event
            object other then perform basic checking.
            <para/>
            For events backed by a type, the sender ensures that
            the object send in matches in class, or, or : the class underlying the event type
            for the given event type name.
            <para/>
            For events backed by a Object[] (Object-array events), the sender does not perform any checking other
            then checking that the event object indeed is an array of object.
            <para/>
            For events backed by a Dictionary(Map events), the sender does not perform
            any checking other then checking that the event object indeed : Map.
            <para/>
            For events backed by a XmlNode (XML DOM events), the sender checks that
            the root element name indeed does match the root element name for the event type
            name.
            </summary>
            <param name="eventTypeName">is the name of the event type</param>
            <returns>
            sender for fast-access processing of event objects of known type (and content)
            </returns>
            <throws>EventTypeException thrown to indicate that the name does not exist</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.GetEventSender(System.Uri[])">
            <summary>
            For use with plug-in event representations, returns a facility to process event
            objects that are of one of a number of types that one or more of the registered
            plug-in event representation extensions can reflect upon and provide an event for.
            </summary>
            <param name="uris">
            is the URIs that specify which plug-in event representations may process an event object.
            <para/>URIs do not need to match event representation URIs exactly, a child (hierarchical) match is enough for an event representation to participate.
            <para/>The order of URIs is relevant as each event representation's factory is asked in turn to process the event, until the first factory processes the event.
            </param>
            <returns>
            sender for processing of event objects of one of the plug-in event
            representations
            </returns>
            <throws>EventTypeException thrown to indicate that the URI list was invalid</throws>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.ExecuteQuery(System.String)">
            <summary>
            Execute an on-demand query.
            <para/>
            On-demand queries are EPL queries that execute non-continuous fire-and-forget
            queries against named windows.
            </summary>
            <param name="epl">is the EPL to execute</param>
            <returns>
            query result
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.ExecuteQuery(System.String,com.espertech.esper.client.context.ContextPartitionSelector[])">
            <summary>
            For use with named windows that have a context declared and that may therefore have multiple context partitions, allows to target context partitions for query execution selectively.
            </summary>
            <param name="epl">is the EPL query to execute</param>
            <param name="contextPartitionSelectors">selects context partitions to consider</param>
            <returns>result</returns>
        </member>
        <member name="M:com.espertech.esper.client.EPRuntime.PrepareQuery(System.String)">
            <summary>
            Prepare an on-demand query before execution and for repeated execution.
            </summary>
            <param name="epl">to prepare</param>
            <returns>
            proxy to execute upon, that also provides the event type of the returned results
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.EPRuntime.NumEventsEvaluated">
            <summary>
            Number of events evaluated over the lifetime of the event stream processing
            runtime, or since the last ResetStats() call.
            </summary>
            <returns>
            number of events received
            </returns>
        </member>
        <member name="E:com.espertech.esper.client.EPRuntime.UnmatchedEvent">
            <summary>
            Gets or sets a listener to receive events that are unmatched by any statement.
            <para/>
            Events that can be unmatched are all events that are send into a runtime via
            one of the SendEvent methods, or that have been generated via insert-into clause.
            <para/>
            For an event to be unmatched by any statement, the event must not match any
            statement's event stream filter criteria (a where-clause is NOT a filter criteria
            for a stream, as below).
            <para/>
            Note: In the following statement a MyEvent event does always match this
            statement's event stream filter criteria, regardless of the value of the 'quantity'
            property.
            <pre>select * from MyEvent where quantity > 5</pre> 
            <para/>
            In the following statement only a MyEvent event with a 'quantity' property value of 5 or less does
            not match this statement's event stream filter criteria: 
            <pre>select * from MyEvent(quantity > 5)</pre>
            <para/>
            For patterns, if no pattern sub-expression is active for such event, the event
            is also unmatched.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.EPRuntime.VariableValueAll">
            <summary>
            Returns current variable values for all variables, guaranteeing consistency in
            the face of concurrent updates to the variables.
            </summary>
            <returns>
            map of variable name and variable value
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.EPRuntime.EventRenderer">
            <summary>
            Returns the event renderer for events generated by this runtime.
            </summary>
            <returns>
            event renderer
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.EPRuntime.CurrentTime">
            <summary>
            Returns current engine time.
            <para/>
            If time is provided externally via timer events, the function returns current
            time as externally provided.
            </summary>
            <returns>
            current engine time
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.EPRuntime.NextScheduledTime">
            <summary>
            Returns the time at which the next schedule execution is expected, returns null if no schedule execution is
            outstanding.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.EPRuntime.DataFlowRuntime">
            <summary>Returns the data flow runtime. </summary>
            <returns>data flow runtime</returns>
        </member>
        <member name="M:com.espertech.esper.core.service.EPRuntimeSPI.GetVariableType(System.String)">
            <summary>
            Returns a variable's type.
            </summary>
            <param name="variableName">type or null if the variable is not declared</param>
            <returns>type of variable</returns>
        </member>
        <member name="M:com.espertech.esper.core.service.EPRuntimeSPI.WrapEvent(System.Object)">
            <summary>
            Send an event represented by a plain object to the event stream processing runtime. 
            <para/> 
            Use the route method for sending events into the runtime from within UpdateListener code, to avoid 
            the possibility of a stack overflow due to nested calls to sendEvent.
            </summary>
            <param name="object">is the event to sent to the runtime</param>
            <returns></returns>
            <throws>com.espertech.esper.client.EPException is thrown when the processing of the event lead to an error</throws>
        </member>
        <member name="M:com.espertech.esper.core.service.EPRuntimeSPI.WrapEvent(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Send a map containing event property values to the event stream processing runtime.
            <para/> 
            Use the route method for sending events into the runtime from within UpdateListener code. to avoid
            the possibility of a stack overflow due to nested calls to sendEvent.
            </summary>
            <param name="map">map that contains event property values. Keys are expected to be of type String while valuescan be of any type. Keys and values should match those declared via Configuration for the given eventTypeName.</param>
            <param name="eventTypeName">the name for the Map event type that was previously configured</param>
            <returns></returns>
            <throws>EPException - when the processing of the event leads to an error</throws>
        </member>
        <member name="M:com.espertech.esper.core.service.EPRuntimeSPI.WrapEvent(System.Xml.XmlNode)">
            <summary>
            Send an event represented by a DOM node to the event stream processing runtime.
            <para/>
            Use the route method for sending events into the runtime from within UpdateListener code. to avoid 
            the possibility of a stack overflow due to nested calls to sendEvent.
            </summary>
            <param name="node">is the DOM node as an event</param>
            <returns></returns>
            <throws>EPException is thrown when the processing of the event lead to an error</throws>
        </member>
        <member name="P:com.espertech.esper.core.service.EPRuntimeSPI.VariableTypeAll">
            <summary>
            Returns all declared variable names and their types.
            </summary>
            <value>variable names and types</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPRuntimeSPI.RoutedInternal">
            <summary>
            Number of events routed internally.
            </summary>
            <value>event count routed internally</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPRuntimeSPI.RoutedExternal">
            <summary>
            Number of events routed externally.
            </summary>
            <value>event count routed externally</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPRuntimeSPI.EngineURI">
            <summary>
            Gets the engine URI.
            </summary>
            <value>The engine URI.</value>
        </member>
        <member name="T:com.espertech.esper.core.service.InternalEventRouteDest">
            <summary>
            Interface for a service that routes events within the engine for further processing.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.InternalEventRouteDest.Route(com.espertech.esper.client.EventBean,com.espertech.esper.core.service.EPStatementHandle,System.Boolean)">
            <summary>
            Route the event such that the event is processed as required.
            </summary>
            <param name="theEvent">to route</param>
            <param name="statementHandle">provides statement resources</param>
            <param name="addToFront">if set to <c>true</c> [add to front].</param>
        </member>
        <member name="F:com.espertech.esper.core.service.EPRuntimeImpl._threadLocalData">
            <summary>
            Data that remains local to the thread.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.EPRuntimeImpl.#ctor(com.espertech.esper.core.service.EPServicesContext)">
            <summary>Constructor. </summary>
            <param name="services">references to services</param>
        </member>
        <member name="M:com.espertech.esper.core.service.EPRuntimeImpl.RemoveAllUnmatchedEventHandlers">
            <summary>
            Removes all unmatched event handlers.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.EPRuntimeImpl.CreateLocalData">
            <summary>
            Creates a local data object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.core.service.EPRuntimeImpl.SendEvent(System.Xml.Linq.XElement)">
            <summary>
            Send an event represented by a LINQ element to the event stream processing runtime.
            <para/>
            Use the route method for sending events into the runtime from within
            event handler code. to avoid the possibility of a stack overflow due to nested calls to
            SendEvent.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:com.espertech.esper.core.service.EPRuntimeImpl.ProcessEvent(System.Object)">
            <summary>Process an unwrapped event. </summary>
            <param name="theEvent">to process.</param>
        </member>
        <member name="M:com.espertech.esper.core.service.EPRuntimeImpl.ProcessThreadWorkQueue">
            <summary>Works off the thread's work queue. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.EPRuntimeImpl.ProcessStatementScheduleMultiple(com.espertech.esper.core.context.util.EPStatementAgentInstanceHandle,System.Object,com.espertech.esper.core.service.EPServicesContext,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Processing multiple schedule matches for a statement. </summary>
            <param name="handle">statement handle</param>
            <param name="callbackObject">object containing matches</param>
            <param name="services">engine services</param>
            <param name="exprEvaluatorContext">context for expression evaluatiom</param>
        </member>
        <member name="M:com.espertech.esper.core.service.EPRuntimeImpl.ProcessStatementScheduleSingle(com.espertech.esper.core.service.EPStatementHandleCallback,com.espertech.esper.core.service.EPServicesContext,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Processing single schedule matche for a statement. </summary>
            <param name="handle">statement handle</param>
            <param name="services">engine services</param>
            <param name="exprEvaluatorContext">context for expression evaluatiom</param>
        </member>
        <member name="M:com.espertech.esper.core.service.EPRuntimeImpl.ProcessStatementFilterMultiple(com.espertech.esper.core.context.util.EPStatementAgentInstanceHandle,System.Collections.Generic.LinkedList{com.espertech.esper.filter.FilterHandleCallback},com.espertech.esper.client.EventBean,System.Int64)">
            <summary>Processing multiple filter matches for a statement. </summary>
            <param name="handle">statement handle</param>
            <param name="callbackList">object containing callbacks</param>
            <param name="theEvent">to process</param>
            <param name="version">filter version</param>
        </member>
        <member name="M:com.espertech.esper.core.service.EPRuntimeImpl.ProcessStatementFilterSingle(com.espertech.esper.core.context.util.EPStatementAgentInstanceHandle,com.espertech.esper.core.service.EPStatementHandleCallback,com.espertech.esper.client.EventBean,System.Int64)">
            <summary>Process a single match. </summary>
            <param name="handle">statement</param>
            <param name="handleCallback">callback</param>
            <param name="theEvent">event to indicate</param>
            <param name="version">filter version</param>
        </member>
        <member name="M:com.espertech.esper.core.service.EPRuntimeImpl.Dispatch">
            <summary>Dispatch events. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.EPRuntimeImpl.Dispose">
            <summary>
            Destroy for destroying an engine instance: sets references to null and clears thread-locals
            </summary>
        </member>
        <member name="P:com.espertech.esper.core.service.EPRuntimeImpl.ThreadData">
            <summary>
            Gets the local data.
            </summary>
            <value>The local data.</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPRuntimeImpl.InternalEventRouter">
            <summary>Sets the route for events to use </summary>
            <value>router</value>
        </member>
        <member name="T:com.espertech.esper.core.service.EPRuntimeImpl.ThreadLocalData">
            <summary>
            Group of data that is associated with the thread.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.service.EPRuntimeIsolatedImpl">
            <summary>
            Implementation for isolated runtime.
            </summary>
        </member>
        <member name="F:com.espertech.esper.core.service.EPRuntimeIsolatedImpl._threadLocalData">
            <summary>
            Data that remains local to the thread.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.EPRuntimeIsolatedImpl.CreateLocalData">
            <summary>
            Creates a local data object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.core.service.EPRuntimeIsolatedImpl.#ctor(com.espertech.esper.core.service.EPIsolationUnitServices,com.espertech.esper.core.service.EPServicesContext)">
            <summary>Ctor. </summary>
            <param name="svc">isolated services</param>
            <param name="unisolatedSvc">engine services</param>
        </member>
        <member name="M:com.espertech.esper.core.service.EPRuntimeIsolatedImpl.Route(System.Xml.XmlNode)">
            <summary>Route a XML docment event </summary>
            <param name="document">to route</param>
            <throws>EPException if routing failed</throws>
        </member>
        <member name="M:com.espertech.esper.core.service.EPRuntimeIsolatedImpl.ProcessEvent(System.Object)">
            <summary>Process an unwrapped event. </summary>
            <param name="theEvent">to process.</param>
        </member>
        <member name="M:com.espertech.esper.core.service.EPRuntimeIsolatedImpl.ProcessWrappedEvent(com.espertech.esper.client.EventBean)">
            <summary>Process a wrapped event. </summary>
            <param name="eventBean">to process</param>
        </member>
        <member name="M:com.espertech.esper.core.service.EPRuntimeIsolatedImpl.ProcessThreadWorkQueue">
            <summary>Works off the thread's work queue. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.EPRuntimeIsolatedImpl.ProcessStatementFilterMultiple(com.espertech.esper.core.context.util.EPStatementAgentInstanceHandle,System.Collections.Generic.ICollection{com.espertech.esper.filter.FilterHandleCallback},com.espertech.esper.client.EventBean)">
            <summary>Processing multiple filter matches for a statement. </summary>
            <param name="handle">statement handle</param>
            <param name="callbackList">object containing callbacks</param>
            <param name="theEvent">to process</param>
        </member>
        <member name="M:com.espertech.esper.core.service.EPRuntimeIsolatedImpl.ProcessStatementFilterSingle(com.espertech.esper.core.context.util.EPStatementAgentInstanceHandle,com.espertech.esper.core.service.EPStatementHandleCallback,com.espertech.esper.client.EventBean)">
            <summary>Process a single match. </summary>
            <param name="handle">statement</param>
            <param name="handleCallback">callback</param>
            <param name="theEvent">event to indicate</param>
        </member>
        <member name="M:com.espertech.esper.core.service.EPRuntimeIsolatedImpl.Dispatch">
            <summary>Dispatch events. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.EPRuntimeIsolatedImpl.Dispose">
            <summary>
            Destroy for destroying an engine instance: sets references to null and clears thread-locals
            </summary>
        </member>
        <member name="P:com.espertech.esper.core.service.EPRuntimeIsolatedImpl.LocalData">
            <summary>
            Gets the local data.
            </summary>
            <value>The local data.</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPRuntimeIsolatedImpl.ScheduleArray">
            <summary>
            Gets the schedule array.
            </summary>
            <value>The schedule array.</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPRuntimeIsolatedImpl.SchedulePerStmt">
            <summary>
            Gets the schedule per statement.
            </summary>
            <value>The schedule per statement.</value>
        </member>
        <member name="T:com.espertech.esper.core.service.EPRuntimeIsolatedImpl.ThreadLocalData">
            <summary>
            Group of data that is associated with the thread.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.service.EPServiceProviderImpl">
            <summary>
            Service provider encapsulates the engine's services for runtime and administration interfaces.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.service.EPServiceProviderSPI">
            <summary>
            A service provider interface that makes available internal engine services.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.EPServiceProvider">
            <summary>
            This class provides access to the EPRuntime and EPAdministrator implementations.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPServiceProvider.Initialize">
            <summary>
            Frees any resources associated with this engine instance, and leaves
            the engine instance ready for further use.
            <para/>
            Do not use the <see cref="P:com.espertech.esper.client.EPServiceProvider.EPAdministrator"/> administrative and <see cref="P:com.espertech.esper.client.EPServiceProvider.EPRuntime"/>
            runtime instances obtained before the initialize (including related services such as configuration, 
            module management, etc.).  Your application must obtain new administrative and runtime instances.
            <para/>
            Retains the existing configuration of the engine instance but forgets any runtime configuration changes.
            <para/>
            Stops and destroys any existing statement resources such as filters, patterns, expressions, views.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPServiceProvider.RemoveAllServiceStateEventHandlers">
            <summary>
            Clears the service state event handlers.  For internal use only.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.EPServiceProvider.GetEPServiceIsolated(System.String)">
            <summary>
            Returns the isolated service provider for that name, creating an isolated
            service if the name is a new name, or returning an existing isolated service for an
            existing name.
            </summary>
            <param name="name">to return isolated service for</param>
            <returns>
            isolated service
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.EPServiceProvider.EPRuntime">
            <summary> Returns a class instance of EPRuntime.</summary>
            <returns> an instance of EPRuntime
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.EPServiceProvider.EPAdministrator">
            <summary> Returns a class instance of EPAdministrator.</summary>
            <returns> an instance of EPAdministrator
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.EPServiceProvider.Directory">
            <summary>
            Returns the engine environment directory for engine-external
            resources such as adapters.
            </summary>
            <returns>engine environment directory</returns>
        </member>
        <member name="P:com.espertech.esper.client.EPServiceProvider.URI">
            <summary>Returns the provider URI, or "default" if this is the default provider.</summary>
            <returns>provider URI</returns>
        </member>
        <member name="P:com.espertech.esper.client.EPServiceProvider.IsDestroyed">
            <summary>
            Returns true if the service is in destroyed state, or false if not.
            </summary>
            <returns>indicator whether the service has been destroyed</returns>
        </member>
        <member name="P:com.espertech.esper.client.EPServiceProvider.EPServiceIsolatedNames">
            <summary>
            Returns the names of isolated service providers currently allocated.
            </summary>
            <returns>
            isolated service provider names
            </returns>
        </member>
        <member name="E:com.espertech.esper.client.EPServiceProvider.ServiceDestroyRequested">
            <summary>
            Occurs before an <seealso cref="T:com.espertech.esper.client.EPServiceProvider"/> is destroyed.
            </summary>
        </member>
        <member name="E:com.espertech.esper.client.EPServiceProvider.ServiceInitialized">
            <summary>
            Occurs after an <seealso cref="T:com.espertech.esper.client.EPServiceProvider"/> is initialized.
            </summary>
        </member>
        <member name="E:com.espertech.esper.client.EPServiceProvider.StatementCreate">
            <summary>
            Occurs when a statement created.
            </summary>
        </member>
        <member name="E:com.espertech.esper.client.EPServiceProvider.StatementStateChange">
            <summary>
            Occurs when a statement state changes.
            </summary>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServiceProviderSPI.StatementLifecycleSvc">
            <summary>Returns statement management service for the engine. </summary>
            <value>the StatementLifecycleSvc</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServiceProviderSPI.EventAdapterService">
            <summary>Get the EventAdapterService for this engine. </summary>
            <value>the EventAdapterService</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServiceProviderSPI.SchedulingService">
            <summary>Get the SchedulingService for this engine. </summary>
            <value>the SchedulingService</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServiceProviderSPI.SchedulingMgmtService">
            <summary>Get the SchedulingMgmtService for this engine. </summary>
            <value>the SchedulingMgmtService</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServiceProviderSPI.FilterService">
            <summary>Returns the filter service. </summary>
            <value>filter service</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServiceProviderSPI.TimerService">
            <summary>Returns the timer service. </summary>
            <value>timer service</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServiceProviderSPI.NamedWindowService">
            <summary>Returns the named window service. </summary>
            <value>named window service</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServiceProviderSPI.ConfigurationInformation">
            <summary>Returns the current configuration. </summary>
            <value>configuration information</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServiceProviderSPI.ExtensionServicesContext">
            <summary>Returns the extension services context. </summary>
            <value>extension services context</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServiceProviderSPI.MetricReportingService">
            <summary>Returns metrics reporting. </summary>
            <value>metrics reporting</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServiceProviderSPI.VariableService">
            <summary>Returns variable services. </summary>
            <value>services</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServiceProviderSPI.ValueAddEventService">
            <summary>Returns value-added type service. </summary>
            <value>value types</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServiceProviderSPI.StatementEventTypeRef">
            <summary>Returns statement event type reference service. </summary>
            <value>statement-type reference service</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServiceProviderSPI.ThreadingService">
            <summary>Returns threading service for the engine. </summary>
            <value>the ThreadingService</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServiceProviderSPI.EngineEnvContext">
            <summary>Returns engine environment context such as plugin loader references. </summary>
            <value>environment context</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServiceProviderSPI.ServicesContext">
            <summary>Returns services. </summary>
            <value>services</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServiceProviderSPI.StatementContextFactory">
            <summary>Returns context factory. </summary>
            <value>factory</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServiceProviderSPI.EngineImportService">
            <summary>Returns engine imports. </summary>
            <value>engine imports</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServiceProviderSPI.TimeProvider">
            <summary>Returns time provider. </summary>
            <value>time provider</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServiceProviderSPI.ScriptingService">
            <summary>
            Gets the scripting service.
            </summary>
            <value>The scripting service.</value>
        </member>
        <member name="M:com.espertech.esper.core.service.EPServiceProviderImpl.#ctor(com.espertech.esper.client.Configuration,System.String,System.Collections.Generic.IDictionary{System.String,com.espertech.esper.core.service.EPServiceProviderSPI})">
            <summary>Constructor - initializes services. </summary>
            <param name="configuration">is the engine configuration</param>
            <param name="engineURI">is the engine URI or "default" (or null which it assumes as "default") if this is the default provider</param>
            <param name="runtimes">map of URI and runtime</param>
            <throws>ConfigurationException is thrown to indicate a configuraton error</throws>
        </member>
        <member name="M:com.espertech.esper.core.service.EPServiceProviderImpl.PostInitialize">
            <summary>Invoked after an initialize operation. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.EPServiceProviderImpl.SetConfiguration(com.espertech.esper.client.Configuration)">
            <summary>Sets engine configuration information for use in the next initialize. </summary>
            <param name="configuration">is the engine configs</param>
        </member>
        <member name="M:com.espertech.esper.core.service.EPServiceProviderImpl.DoInitialize(System.Nullable{System.Int64})">
            <summary>Performs the initialization. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.EPServiceProviderImpl.OnStatementCreate(com.espertech.esper.client.StatementStateEventArgs)">
            <summary>
            Raises the <see cref="E:com.espertech.esper.core.service.EPServiceProviderImpl.StatementCreate"/> event.
            </summary>
            <param name="e">The <see cref="T:com.espertech.esper.core.service.StatementLifecycleEvent"/> instance containing the event data.</param>
        </member>
        <member name="M:com.espertech.esper.core.service.EPServiceProviderImpl.OnStatementStateChanged(com.espertech.esper.core.service.StatementLifecycleEvent)">
            <summary>
            Raises the <see cref="!:StatementStateChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:com.espertech.esper.core.service.StatementLifecycleEvent"/> instance containing the event data.</param>
        </member>
        <member name="M:com.espertech.esper.core.service.EPServiceProviderImpl.HandleLifecycleEvent(System.Object,com.espertech.esper.core.service.StatementLifecycleEvent)">
            <summary>
            Handles the lifecycle event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:com.espertech.esper.core.service.StatementLifecycleEvent"/> instance containing the event data.</param>
        </member>
        <member name="M:com.espertech.esper.core.service.EPServiceProviderImpl.LoadAdapters(com.espertech.esper.core.service.EPServicesContext)">
            <summary>Loads and initializes adapter loaders. </summary>
            <param name="services">is the engine instance services</param>
        </member>
        <member name="M:com.espertech.esper.core.service.EPServiceProviderImpl.RemoveAllServiceStateEventHandlers">
            <summary>
            Clears the service state event handlers.  For internal use only.
            </summary>
        </member>
        <member name="E:com.espertech.esper.core.service.EPServiceProviderImpl.ServiceDestroyRequested">
            <summary>
            Occurs before an <seealso cref="T:com.espertech.esper.client.EPServiceProvider"/> is destroyed.
            </summary>
        </member>
        <member name="E:com.espertech.esper.core.service.EPServiceProviderImpl.ServiceInitialized">
            <summary>
            Occurs after an <seealso cref="T:com.espertech.esper.client.EPServiceProvider"/> is initialized.
            </summary>
        </member>
        <member name="E:com.espertech.esper.core.service.EPServiceProviderImpl.StatementCreate">
            <summary>
            Occurs when a statement created.
            </summary>
        </member>
        <member name="E:com.espertech.esper.core.service.EPServiceProviderImpl.StatementStateChange">
            <summary>
            Occurs when a statement state changes.
            </summary>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServiceProviderImpl.ScriptingService">
            <summary>
            Gets the scripting service.
            </summary>
            <value>The scripting service.</value>
        </member>
        <member name="T:com.espertech.esper.core.service.EPServiceProviderIsolatedImpl">
            <summary>
            Implementation of the isolated service provider.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.service.EPServiceProviderIsolatedSPI">
            <summary>SPU for isolated service provider. </summary>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServiceProviderIsolatedSPI.IsolatedServices">
            <summary>Return isolated services. </summary>
            <value>isolated services</value>
        </member>
        <member name="M:com.espertech.esper.core.service.EPServiceProviderIsolatedImpl.#ctor(System.String,com.espertech.esper.core.service.EPIsolationUnitServices,com.espertech.esper.core.service.EPServicesContext,System.Collections.Generic.IDictionary{System.String,com.espertech.esper.core.service.EPServiceProviderIsolatedImpl})">
            <summary>Ctor. </summary>
            <param name="name">name of isolated service</param>
            <param name="isolatedServices">filter and scheduling service isolated</param>
            <param name="unisolatedSvc">engine services</param>
            <param name="providers">names and isolated service providers</param>
        </member>
        <member name="F:com.espertech.esper.core.service.EPServiceProviderConstants.DEFAULT_ENGINE_URI">
            <summary>For the default provider instance, which carries a null provider URI, the URI value is "default". </summary>
        </member>
        <member name="F:com.espertech.esper.core.service.EPServiceProviderConstants.DEFAULT_ENGINE_URI__QUALIFIER">
            <summary>For the default provider instance, which carries a "default" provider URI, the property name qualification and stream name qualification may use "default". </summary>
        </member>
        <member name="T:com.espertech.esper.core.service.EPServicesContext">
            <summary>
            Convenience class to hold implementations for all services.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.EPServicesContext.#ctor(System.String,com.espertech.esper.schedule.SchedulingServiceSPI,com.espertech.esper.events.EventAdapterService,com.espertech.esper.epl.core.EngineImportService,com.espertech.esper.epl.core.EngineSettingsService,com.espertech.esper.epl.db.DatabaseConfigService,com.espertech.esper.epl.spec.PluggableObjectCollection,com.espertech.esper.core.service.StatementLockFactory,com.espertech.esper.compat.threading.IReaderWriterLock,com.espertech.esper.core.service.ExtensionServicesContext,com.espertech.esper.client.Directory,com.espertech.esper.core.service.StatementContextFactory,com.espertech.esper.epl.spec.PluggableObjectCollection,com.espertech.esper.timer.TimerService,com.espertech.esper.filter.FilterServiceSPI,com.espertech.esper.view.stream.StreamFactoryService,com.espertech.esper.epl.named.NamedWindowService,com.espertech.esper.epl.variable.VariableService,com.espertech.esper.timer.TimeSourceService,com.espertech.esper.events.vaevent.ValueAddEventService,com.espertech.esper.epl.metric.MetricReportingServiceSPI,com.espertech.esper.core.service.StatementEventTypeRef,com.espertech.esper.core.service.StatementVariableRef,com.espertech.esper.client.ConfigurationInformation,com.espertech.esper.core.thread.ThreadingService,com.espertech.esper.core.service.InternalEventRouterImpl,com.espertech.esper.core.service.StatementIsolationService,com.espertech.esper.schedule.SchedulingMgmtService,com.espertech.esper.core.deploy.DeploymentStateService,com.espertech.esper.core.service.ExceptionHandlingService,com.espertech.esper.pattern.PatternNodeFactory,com.espertech.esper.events.EventTypeIdGenerator,com.espertech.esper.core.service.StatementMetadataFactory,com.espertech.esper.core.context.mgr.ContextManagementService,com.espertech.esper.core.context.schedule.SchedulableAgentInstanceDirectory,com.espertech.esper.pattern.pool.PatternSubexpressionPoolEngineSvc,com.espertech.esper.dataflow.core.DataFlowService,com.espertech.esper.epl.declexpr.ExprDeclaredService,com.espertech.esper.script.ScriptingService)">
            <summary>
            Constructor - sets up new set of services.
            </summary>
            <param name="engineURI">is the engine URI</param>
            <param name="schedulingService">service to get time and schedule callbacks</param>
            <param name="eventAdapterService">service to resolve event types</param>
            <param name="engineImportService">is engine imported static func packages and aggregation functions</param>
            <param name="engineSettingsService">provides engine settings</param>
            <param name="databaseConfigService">service to resolve a database name to database connection factory and configs</param>
            <param name="plugInViews">resolves view namespace and name to view factory class</param>
            <param name="statementLockFactory">creates statement-level locks</param>
            <param name="eventProcessingRWLock">is the engine lock for statement management</param>
            <param name="extensionServicesContext">marker interface allows adding additional services</param>
            <param name="engineEnvContext">is engine environment/directory information for use with adapters and external env</param>
            <param name="statementContextFactory">is the factory to use to create statement context objects</param>
            <param name="plugInPatternObjects">resolves plug-in pattern objects</param>
            <param name="timerService">is the timer service</param>
            <param name="filterService">the filter service</param>
            <param name="streamFactoryService">is hooking up filters to streams</param>
            <param name="namedWindowService">is holding information about the named windows active in the system</param>
            <param name="variableService">provides access to variable values</param>
            <param name="timeSourceService">time source provider class</param>
            <param name="valueAddEventService">handles update events</param>
            <param name="metricsReportingService">for metric reporting</param>
            <param name="statementEventTypeRef">statement to event type reference holding</param>
            <param name="statementVariableRef">statement to variabke reference holding</param>
            <param name="configSnapshot">configuration snapshot</param>
            <param name="threadingServiceImpl">engine-level threading services</param>
            <param name="internalEventRouter">routing of events</param>
            <param name="statementIsolationService">maintains isolation information per statement</param>
            <param name="schedulingMgmtService">schedule management for statements</param>
            <param name="deploymentStateService">The deployment state service.</param>
            <param name="exceptionHandlingService">The exception handling service.</param>
            <param name="patternNodeFactory">The pattern node factory.</param>
            <param name="eventTypeIdGenerator">The event type id generator.</param>
            <param name="statementMetadataFactory">The statement metadata factory.</param>
            <param name="contextManagementService">The context management service.</param>
            <param name="schedulableAgentInstanceDirectory">The schedulable agent instance directory.</param>
            <param name="patternSubexpressionPoolSvc">The pattern subexpression pool SVC.</param>
            <param name="dataFlowService">The data flow service.</param>
            <param name="exprDeclaredService">The expr declared service.</param>
            <param name="scriptingService">The scripting service.</param>
        </member>
        <member name="M:com.espertech.esper.core.service.EPServicesContext.SetStatementLifecycleSvc(com.espertech.esper.core.service.StatementLifecycleSvc)">
            <summary>Sets the service dealing with starting and stopping statements. </summary>
            <param name="statementLifecycleSvc">statement lifycycle svc</param>
        </member>
        <member name="M:com.espertech.esper.core.service.EPServicesContext.Dispose">
            <summary>Destroy services. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.EPServicesContext.Initialize">
            <summary>Destroy services. </summary>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.InternalEventEngineRouteDest">
            <summary>Returns the event routing destination. </summary>
            <value>event routing destination</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.InternalEventRouter">
            <summary>Returns router for internal event processing. </summary>
            <value>router for internal event processing</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.FilterService">
            <summary>Returns filter evaluation service implementation. </summary>
            <value>filter evaluation service</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.TimerService">
            <summary>Returns time provider service implementation. </summary>
            <value>time provider service</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.SchedulingService">
            <summary>Returns scheduling service implementation. </summary>
            <value>scheduling service</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.DispatchService">
            <summary>Returns dispatch service responsible for dispatching events to listeners. </summary>
            <value>dispatch service.</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.ViewService">
            <summary>Returns services for view creation, sharing and removal. </summary>
            <value>view service</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.StreamService">
            <summary>Returns stream service. </summary>
            <value>stream service</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.EventAdapterService">
            <summary>Returns event type resolution service. </summary>
            <value>service resolving event type</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.EngineImportService">
            <summary>Returns the import and class name resolution service. </summary>
            <value>import service</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.DatabaseRefService">
            <summary>Returns the database settings service. </summary>
            <value>database info service</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.PlugInViews">
            <summary>Information to resolve plug-in view namespace and name. </summary>
            <value>plug-in view information</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.PlugInPatternObjects">
            <summary>Information to resolve plug-in pattern object namespace and name. </summary>
            <value>plug-in pattern object information</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.StatementLockFactory">
            <summary>Factory for statement-level locks. </summary>
            <value>factory</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.EventProcessingRwLock">
            <summary>Returns the event processing lock for coordinating statement administration with event processing. </summary>
            <value>lock</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.StatementLifecycleSvc">
            <summary>Returns statement lifecycle svc </summary>
            <value>service for statement start and stop</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.ExtensionServicesContext">
            <summary>Returns extension service for adding custom the services. </summary>
            <value>extension service context</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.EngineEnvContext">
            <summary>Returns the engine environment context for getting access to engine-external resources, such as adapters </summary>
            <value>engine environment context</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.ThreadingService">
            <summary>Returns engine-level threading settings. </summary>
            <value>threading service</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.StatementContextFactory">
            <summary>} public ExpressionResultCacheService GetExpressionResultCacheSharable() { return expressionResultCacheSharable; Returns the factory to use for creating a statement context. </summary>
            <value>statement context factory</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.EngineURI">
            <summary>Returns the engine URI. </summary>
            <value>engine URI</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.EngineSettingsService">
            <summary>Returns engine settings. </summary>
            <value>settings</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.NamedWindowService">
            <summary>Returns the named window management service. </summary>
            <value>service for managing named windows</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.VariableService">
            <summary>Returns the variable service. </summary>
            <value>variable service</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.TimeSource">
            <summary>Returns the time source provider class. </summary>
            <value>time source</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.ValueAddEventService">
            <summary>Returns the service for handling updates to events. </summary>
            <value>revision service</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.MetricsReportingService">
            <summary>Returns metrics reporting. </summary>
            <value>metrics reporting</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.StatementEventTypeRefService">
            <summary>Returns service for statement to event type mapping. </summary>
            <value>statement-type mapping</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.ConfigSnapshot">
            <summary>Returns the configuration. </summary>
            <value>configuration</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.StatementVariableRefService">
            <summary>Service for keeping track of variable-statement use. </summary>
            <value>svc</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.SchedulingMgmtService">
            <summary>Returns the schedule management service. </summary>
            <value>schedule management service</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPServicesContext.StatementIsolationService">
            <summary>Returns the service for maintaining statement isolation information. </summary>
            <value>isolation service</value>
        </member>
        <member name="T:com.espertech.esper.core.service.EPServicesContextFactory">
            <summary>Interface for a factory class to provide services in a services context for an engine instance. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.EPServicesContextFactory.CreateServicesContext(com.espertech.esper.client.EPServiceProvider,com.espertech.esper.client.ConfigurationInformation)">
            <summary>Factory method for a new set of engine services. </summary>
            <param name="epServiceProvider">is the engine instance</param>
            <param name="configurationSnapshot">is a snapshot of configs at the time of engine creation</param>
            <returns>services context</returns>
        </member>
        <member name="T:com.espertech.esper.core.service.EPServicesContextFactoryDefault">
            <summary>
            Factory for services context.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.EPServicesContextFactoryDefault.MakeTimeSource(com.espertech.esper.client.ConfigurationInformation)">
            <summary>Makes the time source provider. </summary>
            <param name="configSnapshot">the configuration</param>
            <returns>time source provider</returns>
        </member>
        <member name="M:com.espertech.esper.core.service.EPServicesContextFactoryDefault.InitVariables(com.espertech.esper.epl.variable.VariableService,System.Collections.Generic.IDictionary{System.String,com.espertech.esper.client.ConfigurationVariable},com.espertech.esper.epl.core.EngineImportService)">
            <summary>Adds configured variables to the variable service. </summary>
            <param name="variableService">service to add to</param>
            <param name="variables">configured variables</param>
        </member>
        <member name="M:com.espertech.esper.core.service.EPServicesContextFactoryDefault.Init(com.espertech.esper.events.EventAdapterService,com.espertech.esper.client.ConfigurationInformation)">
            <summary>Initialize event adapter service for config snapshot. </summary>
            <param name="eventAdapterService">is events adapter</param>
            <param name="configSnapshot">is the config snapshot</param>
        </member>
        <member name="M:com.espertech.esper.core.service.EPServicesContextFactoryDefault.MakeEngineImportService(com.espertech.esper.client.ConfigurationInformation)">
            <summary>Constructs the auto import service. </summary>
            <param name="configSnapshot">config info</param>
            <returns>service</returns>
        </member>
        <member name="M:com.espertech.esper.core.service.EPServicesContextFactoryDefault.MakeDatabaseRefService(com.espertech.esper.client.ConfigurationInformation,com.espertech.esper.schedule.SchedulingService,com.espertech.esper.schedule.SchedulingMgmtService)">
            <summary>Creates the database config service. </summary>
            <param name="configSnapshot">is the config snapshot</param>
            <param name="schedulingService">is the timer stuff</param>
            <param name="schedulingMgmtService">for statement schedule management</param>
            <returns>database config svc</returns>
        </member>
        <member name="T:com.espertech.esper.core.service.EPStatementDispatch">
            <summary>
            Interface for statement-level dispatch.
            <para/>
            Relevant when a statements callbacks have completed and the join processing must take place.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.EPStatementDispatch.Execute(com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Execute dispatch. </summary>
            <param name="exprEvaluatorContext">context for expression evaluation</param>
        </member>
        <member name="T:com.espertech.esper.core.service.EPStatementHandle">
            <summary>
            Class exists once per statement and hold statement resource lock(s).
            <para/>
            Use by <seealso cref="T:com.espertech.esper.core.service.EPRuntimeImpl"/> for determining callback-statement affinity and locking of statement
            resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.EPStatementHandle.#ctor(System.String,System.String,System.String,System.String,System.Boolean,com.espertech.esper.epl.metric.StatementMetricHandle,System.Int32,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="statementId">is the statement id uniquely indentifying the handle</param>
            <param name="statementName">Name of the statement.</param>
            <param name="statementText">The statement text.</param>
            <param name="expressionText">is the expression</param>
            <param name="hasVariables">indicator whether the statement uses variables</param>
            <param name="metricsHandle">handle for metrics reporting</param>
            <param name="priority">priority, zero is default</param>
            <param name="preemptive">true for drop after done</param>
        </member>
        <member name="M:com.espertech.esper.core.service.EPStatementHandle.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. 
                            </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:com.espertech.esper.core.service.EPStatementHandle.StatementId">
            <summary>Returns the statement id. </summary>
            <value>statement id</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPStatementHandle.InsertIntoFrontLatchFactory">
            <summary>Returns the factory for latches in insert-into guaranteed order of delivery. </summary>
            <value>latch factory for the statement if it performs insert-into (route) of events</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPStatementHandle.HasVariables">
            <summary>Returns true if the statement uses variables, false if not. </summary>
            <value>indicator if variables are used by statement</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPStatementHandle.Priority">
            <summary>Returns the statement priority. </summary>
            <value>priority, default 0</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPStatementHandle.IsPreemptive">
            <summary>True for preemptive (drop) statements. </summary>
            <value>preemptive indicator</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPStatementHandle.IsCanSelfJoin">
            <summary>Returns true if the statement potentially self-joins amojng the events it processes. </summary>
            <value>true for self-joins possible, false for not possible (most statements)</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPStatementHandle.MetricsHandle">
            <summary>Returns handle for metrics reporting. </summary>
            <value>handle for metrics reporting</value>
        </member>
        <member name="T:com.espertech.esper.core.service.EPStatementHandleCallback">
            <summary>
            Statement resource handle and callback for use with <seealso cref="T:com.espertech.esper.filter.FilterService"/> 
            and <seealso cref="T:com.espertech.esper.schedule.SchedulingService"/>. 
            <para/> 
            Links the statement handle identifying a statement and containing the statement resource lock, with the actual 
            callback to invoke for a statement together. 
            </summary>
        </member>
        <member name="T:com.espertech.esper.schedule.ScheduleHandle">
            <summary>
            Marker interface for use with <see cref="T:com.espertech.esper.schedule.SchedulingService"/>. Implementations serve as a schedule trigger values when
            the schedule is reached to trigger or return the handle.
            </summary>
        </member>
        <member name="P:com.espertech.esper.schedule.ScheduleHandle.StatementId">
            <summary>
            Gets the statement id.
            </summary>
            <value>The statement id.</value>
        </member>
        <member name="M:com.espertech.esper.core.service.EPStatementHandleCallback.#ctor(com.espertech.esper.core.context.util.EPStatementAgentInstanceHandle,com.espertech.esper.filter.FilterHandleCallback)">
            <summary>Ctor. </summary>
            <param name="agentInstanceHandle">is a statement handle</param>
            <param name="callback">is a filter callback</param>
        </member>
        <member name="M:com.espertech.esper.core.service.EPStatementHandleCallback.#ctor(com.espertech.esper.core.context.util.EPStatementAgentInstanceHandle,com.espertech.esper.schedule.ScheduleHandleCallback)">
            <summary>Ctor. </summary>
            <param name="agentInstanceHandle">is a statement handle</param>
            <param name="callback">is a schedule callback</param>
        </member>
        <member name="P:com.espertech.esper.core.service.EPStatementHandleCallback.AgentInstanceHandle">
            <summary>Returns the statement handle. </summary>
            <value>handle containing a statement resource lock</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPStatementHandleCallback.FilterCallback">
            <summary>Returns the statement filter callback, or null if this is a schedule callback handle. </summary>
            <value>filter callback</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPStatementHandleCallback.ScheduleCallback">
            <summary>Returns the statement schedule callback, or null if this is a filter callback handle. </summary>
            <value>schedule callback</value>
        </member>
        <member name="M:com.espertech.esper.core.service.EPStatementHandlePrioritySort.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.core.service.EPStatementHandlePrioritySort"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.EPStatementHandlePrioritySort.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.core.service.EPStatementHandlePrioritySort"/> class.
            </summary>
            <param name="useGreaterThanOrEqual">if set to <c>true</c> [use greater than or equal].</param>
        </member>
        <member name="M:com.espertech.esper.core.service.EPStatementHandlePrioritySort.GetComparer(System.Boolean)">
            <summary>
            Gets the comparer.
            </summary>
            <param name="useGreaterThanOrEqual">if set to <c>true</c> [use greater than or equal].</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.core.service.EPStatementImpl">
            <summary>
            Statement implementation for EPL statements.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.service.EPStatementSPI">
            <summary>
            Statement SPI for statements operations for state transitions and internal management.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.EPStatementSPI.SetCurrentState(com.espertech.esper.client.EPStatementState,System.Int64)">
            <summary>Set statement state. </summary>
            <param name="currentState">new current state</param>
            <param name="timeLastStateChange">the timestamp the statement changed state</param>
        </member>
        <member name="P:com.espertech.esper.core.service.EPStatementSPI.StatementId">
            <summary>Returns the statement id. </summary>
            <value>statement id</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPStatementSPI.ExpressionNoAnnotations">
            <summary>Returns the statements expression without annotations. </summary>
            <value>expression</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPStatementSPI.ListenerSet">
            <summary>Returns the current set of listeners for read-only operations. </summary>
            <value>listener set</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPStatementSPI.ParentView">
            <summary>Sets the parent view. </summary>
            <value>is the statement viewable</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPStatementSPI.StatementMetadata">
            <summary>Returns additional metadata about a statement. </summary>
            <value>statement metadata</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPStatementSPI.StatementContext">
            <summary>Returns the statement context. </summary>
            <value>statement context</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPStatementSPI.IsNameProvided">
            <summary>True if an explicit statement name has been provided, false if the statement name is system-generated. </summary>
            <value>indicator if statement name exists</value>
        </member>
        <member name="M:com.espertech.esper.core.service.EPStatementImpl.#ctor(com.espertech.esper.client.EPServiceProvider,System.String,System.String,System.String,System.String,System.Boolean,com.espertech.esper.dispatch.DispatchService,com.espertech.esper.core.service.StatementLifecycleSvc,System.Int64,System.Boolean,System.Boolean,System.Int64,com.espertech.esper.timer.TimeSourceService,com.espertech.esper.core.service.StatementMetadata,System.Object,System.Attribute[],com.espertech.esper.core.service.StatementContext,System.Boolean,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="statementId">is a unique ID assigned by the engine for the statement</param>
            <param name="statementName">is the statement name assigned during creation, or the statement id if none was assigned</param>
            <param name="expressionText">is the EPL and/or pattern expression</param>
            <param name="expressionNoAnnotations">expression text witout annotations</param>
            <param name="isPattern">is true to indicate this is a pure pattern expression</param>
            <param name="dispatchService">for dispatching events to listeners to the statement</param>
            <param name="statementLifecycleSvc">handles lifecycle transitions for the statement</param>
            <param name="timeLastStateChange">the timestamp the statement was created and started</param>
            <param name="isBlockingDispatch">is true if the dispatch to listeners should block to preserve event generation order</param>
            <param name="isSpinBlockingDispatch">true to use spin locks blocking to deliver results, as locks are usually uncontended</param>
            <param name="msecBlockingTimeout">is the max number of milliseconds of block time</param>
            <param name="timeSourceService">time source provider</param>
            <param name="statementMetadata">statement metadata</param>
            <param name="userObject">the application define user object associated to each statement, if supplied</param>
            <param name="annotations">annotations associated to statement</param>
            <param name="statementContext">the statement service context</param>
            <param name="isFailed">indicator to start in failed state</param>
            <param name="nameProvided">true to indicate a statement name has been provided and is not a system-generated name</param>
        </member>
        <member name="M:com.espertech.esper.core.service.EPStatementImpl.Start">
            <summary>
            Start the statement.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.EPStatementImpl.Stop">
            <summary>
            Stop the statement.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.EPStatementImpl.SetCurrentState(com.espertech.esper.client.EPStatementState,System.Int64)">
            <summary>
            Set statement state.
            </summary>
            <param name="currentState">new current state</param>
            <param name="timeLastStateChange">the timestamp the statement changed state</param>
        </member>
        <member name="M:com.espertech.esper.core.service.EPStatementImpl.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.core.service.EPStatementImpl.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.core.service.EPStatementImpl.GetSafeEnumerator">
            <summary>
            Returns a concurrency-safe iterator that iterates over events representing statement results (pull API)
            in the face of concurrent event processing by further threads.
            <para />
            In comparison to the regular iterator, the safe iterator guarantees correct results even
            as events are being processed by other threads. The cost is that the iterator holds
            one or more locks that must be released. Any locks are acquired at the time this method
            is called.
            <para/>
            This method is a blocking method. It may block until statement processing locks are released
            such that the safe iterator can acquire any required locks.
            <para/>
            An application MUST explicitly close the safe iterator instance using the close method, to release locks held by the
            iterator. The call to the close method should be done in a finally block to make sure
            the iterator gets closed.
            <para/>
            Multiple safe iterators may be not be used at the same time by different application threads.
            A single application thread may hold and use multiple safe iterators however this is discouraged.
            </summary>
            <returns>safe iterator;</returns>
        </member>
        <member name="M:com.espertech.esper.core.service.EPStatementImpl.RemoveAllEventHandlers">
            <summary>Remove all event handlers from a statement.</summary>
        </member>
        <member name="M:com.espertech.esper.core.service.EPStatementImpl.AddEventHandlerWithReplay(com.espertech.esper.client.UpdateEventHandler)">
            <summary>
            Add an event handler to the current statement and replays current statement 
            results to the handler.
            <para/>
            The handler receives current statement results as the first call to the update
            method of the event handler, passing in the newEvents parameter the current statement
            results as an array of zero or more events. Subsequent calls to the update
            method of the event handler are statement results.
            <para/>
            Current statement results are the events returned by the GetEnumerator or
            GetSafeEnumerator methods.
            <para/>
            Delivery of current statement results in the first call is performed by the
            same thread invoking this method, while subsequent calls to the event handler may
            deliver statement results by the same or other threads.
            <para/>
            Note: this is a blocking call, delivery is atomic: Events occurring during
            iteration and delivery to the event handler are guaranteed to be delivered in a separate
            call and not lost. The event handler implementation should minimize long-running or
            blocking operations.
            <para/>
            Delivery is only atomic relative to the current statement. If the same event handler
            instance is registered with other statements it may receive other statement
            result s simultaneously.
            <para/>
            If a statement is not started an therefore does not have current results, the
            event handler receives a single invocation with a null value in newEvents.
            </summary>
            <param name="eventHandler">eventHandler that will receive events</param>
        </member>
        <member name="M:com.espertech.esper.core.service.EPStatementImpl.ClearEventHandlers">
            <summary>
            Clears the event handlers.  Should be used with caution since this clears
            anyone who has registered a handler.
            </summary>
        </member>
        <member name="P:com.espertech.esper.core.service.EPStatementImpl.ServiceProvider">
            <summary>
            Gets or sets the service provider.
            </summary>
            <value>The service provider.</value>
        </member>
        <member name="E:com.espertech.esper.core.service.EPStatementImpl.Events">
            <summary>
            Occurs whenever new events are available or old events are removed.
            </summary>
        </member>
        <member name="P:com.espertech.esper.core.service.EPStatementImpl.StatementId">
            <summary>
            Returns the statement id.
            </summary>
            <value>statement id</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPStatementImpl.State">
            <summary>
            Gets the statement's current state
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPStatementImpl.ParentView">
            <summary>
            Sets the parent view.
            </summary>
            <value>is the statement viewable</value>
        </member>
        <member name="P:com.espertech.esper.core.service.EPStatementImpl.Text">
            <summary>
            Returns the underlying expression text or XML.
            </summary>
            <value></value>
            <returns> expression text</returns>
        </member>
        <member name="P:com.espertech.esper.core.service.EPStatementImpl.Name">
            <summary>
            Returns the statement name.
            </summary>
            <value></value>
            <returns> statement name</returns>
        </member>
        <member name="P:com.espertech.esper.core.service.EPStatementImpl.ListenerSet">
            <summary>Returns the set of listeners to the statement. </summary>
            <value>statement listeners</value>
        </member>
        <member name="T:com.espertech.esper.core.service.EPStatementListenerSet">
            <summary>
            Provides update listeners for use by statement instances, and the management methods around these.
            <para>
            The collection of update listeners is based on copy-on-write:
            When the engine dispatches events to a set of listeners, then while iterating through the set there
            may be listeners added or removed (the listener may remove itself).
            </para>
            <para>
            Additionally, events may be dispatched by multiple threads to the same listener.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.EPStatementListenerSet.#ctor">
            <summary>Ctor.</summary>
        </member>
        <member name="M:com.espertech.esper.core.service.EPStatementListenerSet.Copy(com.espertech.esper.core.service.EPStatementListenerSet)">
            <summary>Copy the update listener set to from another.</summary>
            <param name="listenerSet">a collection of update listeners</param>
        </member>
        <member name="P:com.espertech.esper.core.service.EPStatementListenerSet.Subscriber">
            <summary>
            Gets or sets the subscriber instance.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.service.EPStatementObjectModelHelper">
            <summary>Helper methods for use by the statement object model. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.EPStatementObjectModelHelper.RenderEPL(System.IO.TextWriter,System.Object)">
            <summary>Renders a constant as an EPL. </summary>
            <param name="writer">to output to</param>
            <param name="constant">to render</param>
        </member>
        <member name="T:com.espertech.esper.core.service.ExpressionResultCacheService">
            <summary>
            Provides 3 caches on the statement-level: 
            <para />
            (A) On the level of indexed event properties: 
                Properties that are wrapped in EventBean instances, such as for Enumeration Methods, get 
                wrapped only once for the same event. The cache is keyed by property-name and EventBean 
                reference and maintains a Collection&lt;EventBean&gt;.
            <para />
            (B) On the level of enumeration method:
                If a enumeration method expression is invoked within another enumeration method expression 
                (not counting expression declarations), for example "source.Where(a =&gt; source.MinBy(b =&gt; b.x))" 
                the "source.MinBy(b =&gt; b.x)" is not dependent on any other lambda so the result gets cached. The 
                cache is keyed by the enumeration-method-node as an IdentityHashMap and verified by a context 
                stack (long[]) that is built in nested evaluation calls.
            <para /> 
            (C) On the level of expression declaration: 
                a) for non-enum evaluation and for enum-evaluation a separate cache 
                b) The cache is keyed by the prototype-node as an IdentityHashMap and verified by a events-per-stream 
                   (EventBean[]) that is maintained or rewritten.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.service.ExprEvaluatorContextStatement">
            <summary>
            Represents a statement-level-only context for expression evaluation, not allowing for agents instances and result cache.
            </summary>
        </member>
        <member name="P:com.espertech.esper.core.service.ExprEvaluatorContextStatement.TimeProvider">
            <summary>Returns the time provider. </summary>
            <value>time provider</value>
        </member>
        <member name="T:com.espertech.esper.core.service.ExtensionServicesContext">
            <summary>
            Marker interface for extension services that provide additional engine or statement-level 
            extensions, such as views backed by a write-behind store.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.ExtensionServicesContext.Init(com.espertech.esper.core.service.EPServicesContext)">
            <summary>Invoked to initialize extension services after engine services initialization. </summary>
        </member>
        <member name="T:com.espertech.esper.core.service.InsertIntoLatchFactory">
            <summary>
            Class to hold a current latch per statement that uses an insert-into stream (per statement and insert-into stream relationship).
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.InsertIntoLatchFactory.#ctor(System.String,System.Int64,com.espertech.esper.client.ConfigurationEngineDefaults.Threading.Locking,com.espertech.esper.timer.TimeSourceService)">
            <summary>Ctor. </summary>
            <param name="name">the factory name</param>
            <param name="msecWait">the number of milliseconds latches will await maximually</param>
            <param name="locking">the blocking strategy to employ</param>
            <param name="timeSourceService">time source provider</param>
        </member>
        <member name="M:com.espertech.esper.core.service.InsertIntoLatchFactory.NewLatch(com.espertech.esper.client.EventBean)">
            <summary>Returns a new latch. <para /> Need not be synchronized as there is one per statement and execution is during statement lock. </summary>
            <param name="payload">is the object returned by the await.</param>
            <returns>latch</returns>
        </member>
        <member name="T:com.espertech.esper.core.service.InsertIntoLatchSpin">
            <summary>
            A spin-locking implementation of a latch for use in guaranteeing delivery between a single event produced by a single statement and consumable by another statement.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.InsertIntoLatchSpin.#ctor(com.espertech.esper.core.service.InsertIntoLatchFactory,com.espertech.esper.core.service.InsertIntoLatchSpin,System.Int64,com.espertech.esper.client.EventBean)">
            <summary>
            Ctor.
            </summary>
            <param name="factory">The factory.</param>
            <param name="earlier">the latch before this latch that this latch should be waiting for</param>
            <param name="msecTimeout">the timeout after which delivery occurs</param>
            <param name="payload">the payload is an event to deliver</param>
        </member>
        <member name="M:com.espertech.esper.core.service.InsertIntoLatchSpin.#ctor(com.espertech.esper.core.service.InsertIntoLatchFactory)">
            <summary>Ctor - use for the first and unused latch to indicate completion. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.InsertIntoLatchSpin.IsCompleted">
            <summary>Returns true if the dispatch completed for this future. </summary>
            <returns>true for completed, false if not</returns>
        </member>
        <member name="M:com.espertech.esper.core.service.InsertIntoLatchSpin.Await">
            <summary>Blocking call that returns only when the earlier latch completed. </summary>
            <returns>payload of the latch</returns>
        </member>
        <member name="M:com.espertech.esper.core.service.InsertIntoLatchSpin.Done">
            <summary>Called to indicate that the latch completed and a later latch can start. </summary>
        </member>
        <member name="T:com.espertech.esper.core.service.InsertIntoLatchWait">
            <summary>A suspend-and-notify implementation of a latch for use in guaranteeing delivery between a single event produced by a single statement and consumable by another statement. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.InsertIntoLatchWait.#ctor(com.espertech.esper.core.service.InsertIntoLatchFactory,com.espertech.esper.core.service.InsertIntoLatchWait,System.Int64,com.espertech.esper.client.EventBean)">
            <summary>
            Ctor.
            </summary>
            <param name="factory">The factory.</param>
            <param name="earlier">the latch before this latch that this latch should be waiting for</param>
            <param name="msecTimeout">the timeout after which delivery occurs</param>
            <param name="payload">the payload is an event to deliver</param>
        </member>
        <member name="M:com.espertech.esper.core.service.InsertIntoLatchWait.#ctor(com.espertech.esper.core.service.InsertIntoLatchFactory)">
            <summary>Ctor - use for the first and unused latch to indicate completion. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.InsertIntoLatchWait.IsCompleted">
            <summary>Returns true if the dispatch completed for this future. </summary>
            <returns>true for completed, false if not</returns>
        </member>
        <member name="M:com.espertech.esper.core.service.InsertIntoLatchWait.SetLater(com.espertech.esper.core.service.InsertIntoLatchWait)">
            <summary>Hand a later latch to use for indicating completion via notify. </summary>
            <param name="later">is the later latch</param>
        </member>
        <member name="M:com.espertech.esper.core.service.InsertIntoLatchWait.Await">
            <summary>Blcking call that returns only when the earlier latch completed. </summary>
            <returns>payload of the latch</returns>
        </member>
        <member name="M:com.espertech.esper.core.service.InsertIntoLatchWait.Done">
            <summary>Called to indicate that the latch completed and a later latch can start. </summary>
        </member>
        <member name="T:com.espertech.esper.core.service.InternalEventRouter">
            <summary>Interface for a service that routes events within the engine for further processing. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.InternalEventRouter.RemovePreprocessing(com.espertech.esper.client.EventType,com.espertech.esper.epl.spec.UpdateDesc)">
            <summary>Remove preprocessing. </summary>
            <param name="eventType">type to remove for</param>
            <param name="desc">update statement specification</param>
        </member>
        <member name="M:com.espertech.esper.core.service.InternalEventRouter.Route(com.espertech.esper.client.EventBean,com.espertech.esper.core.service.EPStatementHandle,com.espertech.esper.core.service.InternalEventRouteDest,com.espertech.esper.epl.expression.ExprEvaluatorContext,System.Boolean)">
            <summary>
            Route the event such that the event is processed as required.
            </summary>
            <param name="theEvent">to route</param>
            <param name="statementHandle">provides statement resources</param>
            <param name="routeDest">routing destination</param>
            <param name="exprEvaluatorContext">context for expression evalauation</param>
            <param name="addToFront">if set to <c>true</c> [add to front].</param>
        </member>
        <member name="T:com.espertech.esper.core.service.InternalEventRouterEntry">
            <summary>
            Pre-Processing entry for routing an event internally.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.InternalEventRouterEntry.#ctor(System.Int32,System.Boolean,com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.epl.expression.ExprNode[],com.espertech.esper.events.EventBeanWriter,com.espertech.esper.util.TypeWidener[],com.espertech.esper.core.service.InternalRoutePreprocessView,com.espertech.esper.compat.threading.IReaderWriterLock,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="priority">priority of statement</param>
            <param name="drop">whether to drop the event if matched</param>
            <param name="optionalWhereClause">where clause, or null if none provided</param>
            <param name="assignments">event property assignments</param>
            <param name="writer">writes values to an event</param>
            <param name="wideners">for widening types to write</param>
            <param name="outputView">for indicating output</param>
            <param name="agentInstanceLock">The agent instance lock.</param>
            <param name="hasSubselect">if set to <c>true</c> [has subselect].</param>
        </member>
        <member name="P:com.espertech.esper.core.service.InternalEventRouterEntry.Priority">
            <summary>Returns the execution priority. </summary>
            <value>priority</value>
        </member>
        <member name="P:com.espertech.esper.core.service.InternalEventRouterEntry.IsDrop">
            <summary>Returns indicator whether dropping events if the where-clause matches. </summary>
            <value>drop events</value>
        </member>
        <member name="P:com.espertech.esper.core.service.InternalEventRouterEntry.OptionalWhereClause">
            <summary>Returns the where-clause or null if none defined </summary>
            <value>where-clause</value>
        </member>
        <member name="P:com.espertech.esper.core.service.InternalEventRouterEntry.Assignments">
            <summary>Returns the expressions providing values for assignment. </summary>
            <value>assignment expressions</value>
        </member>
        <member name="P:com.espertech.esper.core.service.InternalEventRouterEntry.Writer">
            <summary>Returns the writer to the event for writing property values. </summary>
            <value>writer</value>
        </member>
        <member name="P:com.espertech.esper.core.service.InternalEventRouterEntry.Wideners">
            <summary>Returns the type wideners to use or null if none required. </summary>
            <value>wideners.</value>
        </member>
        <member name="P:com.espertech.esper.core.service.InternalEventRouterEntry.OutputView">
            <summary>Returns the output view. </summary>
            <value>output view</value>
        </member>
        <member name="T:com.espertech.esper.core.service.InternalEventRouterImpl">
            <summary>
            Routing implementation that allows to pre-process events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.InternalEventRouterImpl.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.InternalEventRouterImpl.Preprocess(com.espertech.esper.client.EventBean,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Pre-process the event. </summary>
            <param name="theEvent">to preprocess</param>
            <param name="exprEvaluatorContext">expression evaluation context</param>
            <returns>preprocessed event</returns>
        </member>
        <member name="P:com.espertech.esper.core.service.InternalEventRouterImpl.HasPreprocessing">
            <summary>Return true to indicate that there is pre-processing to take place. </summary>
            <value>preprocessing indicator</value>
        </member>
        <member name="T:com.espertech.esper.core.service.InternalEventRouterPreprocessor">
            <summary>
            Interface for a service that routes events within the engine for further
            processing.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.InternalEventRouterPreprocessor.#ctor(com.espertech.esper.events.EventBeanCopyMethod,System.Collections.Generic.IEnumerable{com.espertech.esper.core.service.InternalEventRouterEntry})">
            <summary>
            Ctor.
            </summary>
            <param name="copyMethod">for copying the events to preprocess</param>
            <param name="entries">descriptors for pre-processing to apply</param>
        </member>
        <member name="M:com.espertech.esper.core.service.InternalEventRouterPreprocessor.Process(com.espertech.esper.client.EventBean,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Pre-proces the event.
            </summary>
            <param name="theEvent">to pre-process</param>
            <param name="exprEvaluatorContext">expression evaluation context</param>
            <returns>
            processed event
            </returns>
        </member>
        <member name="T:com.espertech.esper.core.service.InternalRoutePreprocessView">
            <summary>
            View for use with pre-processing statement such as "update istream" for indicating previous 
            and current event.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.InternalRoutePreprocessView.#ctor(com.espertech.esper.client.EventType,com.espertech.esper.core.service.StatementResultService)">
            <summary>Ctor. </summary>
            <param name="eventType">the type of event to indicator</param>
            <param name="statementResultService">determines whether listeners or subscribers are attached.</param>
        </member>
        <member name="M:com.espertech.esper.core.service.InternalRoutePreprocessView.Indicate(com.espertech.esper.client.EventBean,com.espertech.esper.client.EventBean)">
            <summary>Indicate an modifed event and its previous version. </summary>
            <param name="newEvent">modified event</param>
            <param name="oldEvent">previous version event</param>
        </member>
        <member name="P:com.espertech.esper.core.service.InternalRoutePreprocessView.IsIndicate">
            <summary>Returns true if a subscriber or listener is attached. </summary>
            <value>indicator</value>
        </member>
        <member name="T:com.espertech.esper.core.service.NamedWindowSelectedProps">
            <summary>Selected properties for a create-window expression in the model-after syntax. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.NamedWindowSelectedProps.#ctor(System.Type,System.String,com.espertech.esper.client.EventType)">
            <summary>Ctor. </summary>
            <param name="selectExpressionType">expression result type</param>
            <param name="assignedName">name of column</param>
            <param name="fragmentType">null if not a fragment, or event type of fragment if one was selected</param>
        </member>
        <member name="P:com.espertech.esper.core.service.NamedWindowSelectedProps.SelectExpressionType">
            <summary>Returns the type of the expression result. </summary>
            <value>type</value>
        </member>
        <member name="P:com.espertech.esper.core.service.NamedWindowSelectedProps.AssignedName">
            <summary>Returns the assigned column name. </summary>
            <value>name</value>
        </member>
        <member name="P:com.espertech.esper.core.service.NamedWindowSelectedProps.FragmentType">
            <summary>Returns the fragment type or null if not a fragment type. </summary>
            <value>type</value>
        </member>
        <member name="T:com.espertech.esper.core.service.PatternListenerDispatch">
            <summary>
            Dispatchable for dispatching events to update listeners.
            </summary>
        </member>
        <member name="T:com.espertech.esper.dispatch.Dispatchable">
            <summary>
            Implementations are executed when the DispatchService receives a dispatch invocation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.dispatch.Dispatchable.Execute">
            <summary>
            Execute dispatch.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.PatternListenerDispatch.#ctor(com.espertech.esper.client.EPServiceProvider,com.espertech.esper.client.EPStatement,System.Collections.Generic.ICollection{com.espertech.esper.client.UpdateEventHandler})">
            <summary>
            Constructor.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="statement">The statement.</param>
            <param name="eventHandlers">The event handlers.</param>
        </member>
        <member name="M:com.espertech.esper.core.service.PatternListenerDispatch.Add(com.espertech.esper.client.EventBean)">
            <summary>
            Add an event to be dispatched.
            </summary>
            <param name="theEvent">event to add</param>
        </member>
        <member name="M:com.espertech.esper.core.service.PatternListenerDispatch.FireUpdateEvent(com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean[])">
            <summary>
            Fires the update event.
            </summary>
            <param name="newEvents">The new events.</param>
            <param name="oldEvents">The old events.</param>
        </member>
        <member name="M:com.espertech.esper.core.service.PatternListenerDispatch.Execute">
            <summary>
            Execute any listeners.
            </summary>
        </member>
        <member name="P:com.espertech.esper.core.service.PatternListenerDispatch.HasData">
            <summary> Returns true if at least one event has been added.</summary>
            <returns> true if it has data, false if not
            </returns>
        </member>
        <member name="T:com.espertech.esper.core.service.ResultDeliveryStrategy">
            <summary>
            Strategy for use with <seealso cref="T:com.espertech.esper.core.service.StatementResultService"/> to dispatch to
            a statement's subscriber via method invocations.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.ResultDeliveryStrategy.Execute(com.espertech.esper.collection.UniformPair{com.espertech.esper.client.EventBean[]})">
            <summary>Execute the dispatch. </summary>
            <param name="result">is the insert and remove stream to indicate</param>
        </member>
        <member name="T:com.espertech.esper.core.service.ResultDeliveryStrategyFactory">
            <summary>
            Factory for creating a dispatch strategy based on the subscriber object and the columns produced by a select-clause.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.ResultDeliveryStrategyFactory.Create(System.String,System.Object,System.Type[],System.String[])">
            <summary>
            Creates a strategy implementation that indicates to subscribers the statement results based on the select-clause columns.
            </summary>
            <param name="statementName">Name of the statement.</param>
            <param name="subscriber">to indicate to</param>
            <param name="selectClauseTypes">are the types of each column in the select clause</param>
            <param name="selectClauseColumns">the names of each column in the select clause</param>
            <returns>strategy for dispatching naturals</returns>
            <throws>EPSubscriberException if the subscriber is invalid</throws>
        </member>
        <member name="T:com.espertech.esper.core.service.ResultDeliveryStrategyImpl">
            <summary>
            A result delivery strategy that uses a matching "update" method and optional start, 
            end, and updateRStream methods, to deliver column-wise to parameters of the update method.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.ResultDeliveryStrategyImpl.#ctor(System.String,System.Object,com.espertech.esper.core.service.DeliveryConvertor,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Ctor.
            </summary>
            <param name="statementName">Name of the statement.</param>
            <param name="subscriber">is the subscriber receiving method invocations</param>
            <param name="deliveryConvertor">for converting individual rows</param>
            <param name="method">to deliver the insert stream to</param>
            <param name="startMethod">to call to indicate when delivery starts, or null if no such indication is required</param>
            <param name="endMethod">to call to indicate when delivery ends, or null if no such indication is required</param>
            <param name="rStreamMethod">to deliver the remove stream to, or null if no such indication is required</param>
        </member>
        <member name="M:com.espertech.esper.core.service.ResultDeliveryStrategyImpl.Handle(System.String,com.espertech.esper.compat.logging.ILog,System.Reflection.TargetInvocationException,System.Object[],System.Object,CGLib.FastMethod)">
            <summary>
            Handle the exception, displaying a nice message and converting to <seealso cref="T:com.espertech.esper.client.EPException"/>.
            </summary>
            <param name="statementName">Name of the statement.</param>
            <param name="logger">is the logger to use for error logging</param>
            <param name="e">is the exception</param>
            <param name="paramList">the method parameters</param>
            <param name="subscriber">the object to deliver to</param>
            <param name="method">the method to call</param>
            <throws>EPException converted from the passed invocation exception</throws>
        </member>
        <member name="M:com.espertech.esper.core.service.ResultDeliveryStrategyImpl.HandleThrowable(com.espertech.esper.compat.logging.ILog,System.Exception,System.Object[],System.Object,CGLib.FastMethod)">
            <summary>Handle the exception, displaying a nice message and converting to <seealso cref="T:com.espertech.esper.client.EPException"/>. </summary>
            <param name="logger">is the logger to use for error logging</param>
            <param name="e">is the throwable</param>
            <param name="paramList">the method parameters</param>
            <param name="subscriber">the object to deliver to</param>
            <param name="method">the method to call</param>
            <throws>EPException converted from the passed invocation exception</throws>
        </member>
        <member name="T:com.espertech.esper.core.service.ResultDeliveryStrategyMap">
            <summary>
            A result delivery strategy that uses an "update" method that accepts a pair of map array.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.ResultDeliveryStrategyMap.#ctor(System.String,System.Object,System.Reflection.MethodInfo,System.String[])">
            <summary>
            Ctor.
            </summary>
            <param name="statementName">Name of the statement.</param>
            <param name="subscriber">the object to deliver to</param>
            <param name="method">the delivery method</param>
            <param name="columnNames">the column names for the map</param>
        </member>
        <member name="T:com.espertech.esper.core.service.ResultDeliveryStrategyObjectArr">
            <summary>
            A result delivery strategy that uses an "update" method that accepts a pair of object array array.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.ResultDeliveryStrategyObjectArr.#ctor(System.String,System.Object,System.Reflection.MethodInfo)">
            <summary>
            Ctor.
            </summary>
            <param name="statementName">Name of the statement.</param>
            <param name="subscriber">is the subscriber to deliver to</param>
            <param name="method">the method to invoke</param>
        </member>
        <member name="T:com.espertech.esper.core.service.ResultDeliveryStrategyTypeArr">
            <summary>
            A result delivery strategy that uses an "update" method that accepts a underlying 
            array for use in wildcard selection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.ResultDeliveryStrategyTypeArr.#ctor(System.String,System.Object,System.Reflection.MethodInfo)">
            <summary>
            Ctor.
            </summary>
            <param name="statementName">Name of the statement.</param>
            <param name="subscriber">is the receiver to method invocations</param>
            <param name="method">is the method to deliver to</param>
        </member>
        <member name="T:com.espertech.esper.schedule.SchedulingServiceSPI">
            <summary>Service provider interface for scheduling service. </summary>
        </member>
        <member name="T:com.espertech.esper.schedule.SchedulingService">
            <summary>
            Interface for a service that allows to add and remove handles (typically storing callbacks)
            for a certain time which are returned when
            the evaluate method is invoked and the current time is on or after the handle's registered time.
            It is the expectation that the setTime method is called
            with same or ascending values for each subsequent call. Handles with are triggered are automatically removed
            by implementations.
            </summary>
        </member>
        <member name="T:com.espertech.esper.schedule.TimeProvider">
            <summary>
            Provider of internal system time.
            <para>
            Internal system time is controlled either by a timer function or by external time events.
            </para>
            </summary>
        </member>
        <member name="P:com.espertech.esper.schedule.TimeProvider.Time">
            <summary>Returns the current engine time.</summary>
            <returns>time that has last been set</returns>
        </member>
        <member name="M:com.espertech.esper.schedule.SchedulingService.Add(System.Int64,com.espertech.esper.schedule.ScheduleHandle,com.espertech.esper.schedule.ScheduleSlot)">
            <summary> Add a callback for after the given milliseconds from the current time.
            If the same callback (equals) was already added before, the method will not add a new
            callback or change the existing callback to a new time, but throw an exception.
            </summary>
            <param name="afterMSec">number of millisec to get a callback
            </param>
            <param name="handle">to add
            </param>
            <param name="slot">allows ordering of concurrent callbacks
            </param>
            <throws>  ScheduleServiceException thrown if the add operation did not complete </throws>
        </member>
        <member name="M:com.espertech.esper.schedule.SchedulingService.Remove(com.espertech.esper.schedule.ScheduleHandle,com.espertech.esper.schedule.ScheduleSlot)">
            <summary> Remove a callback.
            If the callback to be removed was not found an exception is thrown.
            </summary>
            <param name="handle">to remove
            </param>
            <param name="slot">for which the callback was added
            </param>
            <throws>  ScheduleServiceException thrown if the callback was not located </throws>
        </member>
        <member name="M:com.espertech.esper.schedule.SchedulingService.Evaluate(System.Collections.Generic.ICollection{com.espertech.esper.schedule.ScheduleHandle})">
            <summary> Evaluate the current time and perform any callbacks.</summary>
        </member>
        <member name="M:com.espertech.esper.schedule.SchedulingService.IsScheduled(com.espertech.esper.schedule.ScheduleHandle)">
            <summary>
            Returns true if the handle has been scheduled already.
            </summary>
            <param name="handle">The handle.</param>
            <returns>
            	<c>true</c> if the specified handle is scheduled; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.schedule.SchedulingService.TimeHandleCount">
            <summary>Returns time handle count.</summary>
            <returns>count</returns>
        </member>
        <member name="P:com.espertech.esper.schedule.SchedulingService.FurthestTimeHandle">
            <summary>Returns furthest in the future handle.</summary>
            <returns>future handle</returns>
        </member>
        <member name="P:com.espertech.esper.schedule.SchedulingService.ScheduleHandleCount">
            <summary>Returns count of handles.</summary>
            <returns>count</returns>
        </member>
        <member name="M:com.espertech.esper.schedule.SchedulingServiceSPI.Take(System.Collections.Generic.ICollection{System.String})">
            <summary>Take a statement's schedules out of the currently active set of schedules. </summary>
            <param name="statementId">statements to take out</param>
            <returns>schedules</returns>
        </member>
        <member name="M:com.espertech.esper.schedule.SchedulingServiceSPI.Apply(com.espertech.esper.schedule.ScheduleSet)">
            <summary>Apply the set of schedules. </summary>
            <param name="scheduleSet">to apply</param>
        </member>
        <member name="T:com.espertech.esper.core.service.StatementAgentInstanceFilterVersion">
            <summary>
            Records minimal statement filter version required for processing.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementAgentInstanceFilterVersion.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementAgentInstanceFilterVersion.IsCurrentFilter(System.Int64)">
            <summary>Check current filter. </summary>
            <param name="filterVersion">to check</param>
            <returns>false if not current</returns>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementAgentInstanceFilterVersion.StmtFilterVersion">
            <summary>Set filter version. </summary>
            <value>to set</value>
        </member>
        <member name="T:com.espertech.esper.core.service.StatementContext">
            <summary>
            Contains handles to the implementation of the the scheduling service for use in view evaluation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementContext.#ctor(com.espertech.esper.core.service.StatementContextEngineServices,System.String,System.Byte[],System.String,System.String,com.espertech.esper.schedule.SchedulingService,com.espertech.esper.schedule.ScheduleBucket,com.espertech.esper.core.service.EPStatementHandle,com.espertech.esper.view.ViewResolutionService,com.espertech.esper.pattern.PatternObjectResolutionService,com.espertech.esper.core.service.StatementExtensionSvcContext,com.espertech.esper.view.StatementStopService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.pattern.PatternContextFactory,com.espertech.esper.filter.FilterService,com.espertech.esper.core.service.StatementResultService,com.espertech.esper.core.service.InternalEventRouteDest,System.Attribute[],com.espertech.esper.core.context.stmt.StatementAIResourceRegistry,com.espertech.esper.compat.threading.IReaderWriterLock,com.espertech.esper.core.context.util.ContextDescriptor,com.espertech.esper.pattern.pool.PatternSubexpressionPoolStmtSvc,System.Boolean,com.espertech.esper.core.context.mgr.ContextControllerFactoryService,com.espertech.esper.epl.script.AgentInstanceScriptContext,com.espertech.esper.epl.agg.service.AggregationServiceFactoryService,com.espertech.esper.script.ScriptingService)">
            <summary>
            Constructor.
            </summary>
            <param name="stmtEngineServices">is the engine services for the statement</param>
            <param name="statementId">is the statement is assigned for the statement for which this context exists</param>
            <param name="statementIdBytes">The statement id bytes.</param>
            <param name="statementName">is the statement name</param>
            <param name="expression">is the EPL or pattern expression used</param>
            <param name="schedulingService">implementation for schedule registration</param>
            <param name="scheduleBucket">is for ordering scheduled callbacks within the view statements</param>
            <param name="epStatementHandle">is the statements-own handle for use in registering callbacks with services</param>
            <param name="viewResultionService">is a service for resolving view namespace and name to a view factory</param>
            <param name="patternResolutionService">is the service that resolves pattern objects for the statement</param>
            <param name="statementExtensionSvcContext">provide extension points for custom statement resources</param>
            <param name="statementStopService">for registering a callback invoked when a statement is stopped</param>
            <param name="methodResolutionService">is a service for resolving static methods and aggregation functions</param>
            <param name="patternContextFactory">is the pattern-level services and context information factory</param>
            <param name="filterService">is the filtering service</param>
            <param name="statementResultService">handles awareness of listeners/subscriptions for a statement customizing output produced</param>
            <param name="internalEventEngineRouteDest">routing destination</param>
            <param name="annotations">The annotations.</param>
            <param name="statementAgentInstanceRegistry">The statement agent instance registry.</param>
            <param name="defaultAgentInstanceLock">The default agent instance lock.</param>
            <param name="contextDescriptor">The context descriptor.</param>
            <param name="patternSubexpressionPoolSvc">The pattern subexpression pool SVC.</param>
            <param name="statelessSelect">if set to <c>true</c> [stateless select].</param>
            <param name="contextControllerFactoryService">The context controller factory service.</param>
            <param name="defaultAgentInstanceScriptContext">The default agent instance script context.</param>
            <param name="aggregationServiceFactoryService">The aggregation service factory service.</param>
            <param name="scriptingService">The scripting service.</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementContext.AddDynamicReferenceEventType(System.String)">
            <summary>Add an event type name created during statement start and not available through static analysis. </summary>
            <param name="eventTypeName">to add</param>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementContext.StatementId">
            <summary>Returns the statement id. </summary>
            <value>statement id</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementContext.StatementName">
            <summary>Returns the statement name </summary>
            <value>statement name</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementContext.SchedulingService">
            <summary>Returns service to use for schedule evaluation. </summary>
            <value>schedule evaluation service implemetation</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementContext.EventAdapterService">
            <summary>Returns service for generating events and handling event types. </summary>
            <value>event adapter service</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementContext.ScheduleBucket">
            <summary>Returns the schedule bucket for ordering schedule callbacks within this pattern. </summary>
            <value>schedule bucket</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementContext.EpStatementHandle">
            <summary>Returns the statement's resource locks. </summary>
            <value>statement resource lock/handle</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementContext.ViewResolutionService">
            <summary>Returns view resolution svc. </summary>
            <value>view resolution</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementContext.ExtensionServicesContext">
            <summary>Returns extension context for statements. </summary>
            <value>context</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementContext.StatementStopService">
            <summary>Returns statement stop subscription taker. </summary>
            <value>stop service</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementContext.MethodResolutionService">
            <summary>Returns service to look up static and aggregation methods or functions. </summary>
            <value>method resolution</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementContext.PatternContextFactory">
            <summary>Returns the pattern context factory for the statement. </summary>
            <value>pattern context factory</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementContext.Expression">
            <summary>Returns the statement expression text </summary>
            <value>expression text</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementContext.EngineURI">
            <summary>Returns the engine URI. </summary>
            <value>engine URI</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementContext.FilterService">
            <summary>Returns the filter service. </summary>
            <value>filter service</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementContext.PatternResolutionService">
            <summary>Returns the statement's resolution service for pattern objects. </summary>
            <value>service for resolving pattern objects</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementContext.NamedWindowService">
            <summary>Returns the named window management service. </summary>
            <value>service for managing named windows</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementContext.VariableService">
            <summary>Returns variable service. </summary>
            <value>variable service</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementContext.StatementResultService">
            <summary>Returns the service that handles awareness of listeners/subscriptions for a statement customizing output produced </summary>
            <value>statement result svc</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementContext.PlugInTypeResolutionURIs">
            <summary>Returns the URIs for resolving the event name against plug-inn event representations, if any </summary>
            <value>URIs</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementContext.ValueAddEventService">
            <summary>Returns the update event service. </summary>
            <value>revision service</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementContext.DynamicReferenceEventTypes">
            <summary>Returns event type names created during statement start and not available through static analysis. </summary>
            <value>event type names</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementContext.ConfigSnapshot">
            <summary>Returns the configuration. </summary>
            <value>configuration</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementContext.ScheduleAdjustmentService">
            <summary>Return the service for adjusting schedules. </summary>
            <value>service for adjusting schedules</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementContext.MetricReportingService">
            <summary>Returns metrics svc. </summary>
            <value>metrics</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementContext.TimeProvider">
            <summary>Returns the time provider. </summary>
            <value>time provider</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementContext.ViewService">
            <summary>Returns view svc. </summary>
            <value>svc</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementContext.InternalEventEngineRouteDest">
            <summary>Returns the internal event router. </summary>
            <value>router</value>
        </member>
        <member name="T:com.espertech.esper.core.service.StatementContextFactory">
            <summary>
            Interface for a factory class that makes statement context specific to a statement.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementContextFactory.MakeContext(System.String,System.String,System.String,com.espertech.esper.core.service.EPServicesContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Attribute[],com.espertech.esper.core.service.EPIsolationUnitServices,System.Boolean,com.espertech.esper.epl.spec.StatementSpecRaw)">
            <summary>
            Create a new statement context consisting of statement-level services.
            </summary>
            <param name="statementId">is the statement is</param>
            <param name="statementName">is the statement name</param>
            <param name="expression">is the statement expression</param>
            <param name="engineServices">is engine services</param>
            <param name="optAdditionalContext">addtional context to pass to the statement</param>
            <param name="isFireAndForget">if the statement context is for a fire-and-forget statement</param>
            <param name="annotations">The annotations.</param>
            <param name="isolationUnitServices">for isolation units</param>
            <param name="stateless">if set to <c>true</c> [stateless].</param>
            <param name="statementSpecRaw">The statement spec raw.</param>
            <returns>statement context</returns>
        </member>
        <member name="T:com.espertech.esper.core.service.StatementContextFactoryDefault">
            <summary>
            Default implementation for making a statement-specific context class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementContextFactoryDefault.#ctor(com.espertech.esper.epl.spec.PluggableObjectCollection,com.espertech.esper.epl.spec.PluggableObjectCollection,System.Type)">
            <summary>
            Ctor.
            </summary>
            <param name="viewPlugIns">is the view plug-in object descriptions</param>
            <param name="plugInPatternObj">is the pattern plug-in object descriptions</param>
            <param name="systemVirtualDWViewFactory">The system virtual DW view factory.</param>
        </member>
        <member name="T:com.espertech.esper.core.service.StatementContextFactoryDefault.AnnotationAnalysisResult">
            <summary>Analysis result of analysing annotations for a statement. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementContextFactoryDefault.AnnotationAnalysisResult.#ctor(System.Int32,System.Boolean)">
            <summary>Ctor. </summary>
            <param name="priority">priority</param>
            <param name="premptive">preemptive indicator</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementContextFactoryDefault.AnnotationAnalysisResult.AnalyzeAnnotations(System.Attribute[])">
            <summary>Analyze the annotations and return priority and drop settings. </summary>
            <param name="annotations">to analyze</param>
            <returns>analysis result</returns>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementContextFactoryDefault.AnnotationAnalysisResult.Priority">
            <summary>Returns execution priority. </summary>
            <value>priority.</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementContextFactoryDefault.AnnotationAnalysisResult.IsPremptive">
            <summary>Returns preemptive indicator (drop or normal). </summary>
            <value>true for drop</value>
        </member>
        <member name="T:com.espertech.esper.core.service.StatementEventDispatcherUnthreaded">
            <summary>
            Dispatcher for statement lifecycle events to service provider statement state listeners.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementEventDispatcherUnthreaded.#ctor(com.espertech.esper.client.EPServiceProvider,System.Collections.Generic.IEnumerable{com.espertech.esper.client.EPStatementStateListener})">
            <summary>Ctor. </summary>
            <param name="serviceProvider">engine instance</param>
            <param name="statementListeners">listeners to dispatch to</param>
        </member>
        <member name="T:com.espertech.esper.core.service.StatementEventTypeRef">
            <summary>Service for maintaining references between statement name and event type. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementEventTypeRef.IsInUse(System.String)">
            <summary>Returns true if the event type is listed as in-use by any statement, or false if not </summary>
            <param name="eventTypeName">name</param>
            <returns>indicator whether type is in use</returns>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementEventTypeRef.GetTypesForStatementName(System.String)">
            <summary>Returns the set of event types that are use by a given statement name. </summary>
            <param name="statementName">name</param>
            <returns>set of event types or empty set if none found</returns>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementEventTypeRef.GetStatementNamesForType(System.String)">
            <summary>Returns the set of statement names that use a given event type name. </summary>
            <param name="eventTypeName">name</param>
            <returns>set of statements or null if none found</returns>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementEventTypeRef.AddReferences(System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>Add a reference from a statement name to a set of event types. </summary>
            <param name="statementName">name of statement</param>
            <param name="eventTypesReferenced">types</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementEventTypeRef.RemoveReferencesStatement(System.String)">
            <summary>Remove all references for a given statement. </summary>
            <param name="statementName">statement name</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementEventTypeRef.RemoveReferencesType(System.String)">
            <summary>Remove all references for a given event type. </summary>
            <param name="eventTypeName">event type name</param>
        </member>
        <member name="T:com.espertech.esper.core.service.StatementEventTypeRefImpl">
            <summary>Service for holding references between statements and their event type use. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementEventTypeRefImpl.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementEventTypeRefImpl.TypeToStmt">
            <summary>For testing, returns the mapping of event type name to statement names. </summary>
            <value>mapping</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementEventTypeRefImpl.StmtToType">
            <summary>For testing, returns the mapping of statement names to event type names. </summary>
            <value>mapping</value>
        </member>
        <member name="T:com.espertech.esper.core.service.StatementExtensionSvcContext">
            <summary>
            Statement-level extension services.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.service.StatementIdGeneratorFactoryContext">
            <summary>Statement id generator factory context. </summary>
        </member>
        <member name="T:com.espertech.esper.core.service.StatementIsolationService">
            <summary>Service for managing statement isolation. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementIsolationService.GetIsolationUnit(System.String,System.Nullable{System.Int32})">
            <summary>Returns an isolated service by names, or allocates a new one if none found. </summary>
            <param name="name">isolated service</param>
            <param name="optionalUnitId">the unique id assigned to the isolation unit</param>
            <returns>isolated service provider</returns>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementIsolationService.BeginIsolatingStatements(System.String,System.Int32,System.Collections.Generic.IList{com.espertech.esper.client.EPStatement})">
            <summary>Indicates statements are moved to isolation. </summary>
            <param name="name">isolated service provider name.</param>
            <param name="unitId">isolated service provider number.</param>
            <param name="stmt">statements moved.</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementIsolationService.CommitIsolatingStatements(System.String,System.Int32,System.Collections.Generic.IList{com.espertech.esper.client.EPStatement})">
            <summary>Indicates statements are have moved to isolation. </summary>
            <param name="name">isolated service provider name.</param>
            <param name="unitId">isolated service provider number.</param>
            <param name="stmt">statements moved.</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementIsolationService.RollbackIsolatingStatements(System.String,System.Int32,System.Collections.Generic.IList{com.espertech.esper.client.EPStatement})">
            <summary>Indicates statements are have not moved to isolation. </summary>
            <param name="name">isolated service provider name.</param>
            <param name="unitId">isolated service provider number.</param>
            <param name="stmt">statements moved.</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementIsolationService.BeginUnisolatingStatements(System.String,System.Int32,System.Collections.Generic.IList{com.espertech.esper.client.EPStatement})">
            <summary>Indicates statements are moved out of isolation. </summary>
            <param name="name">isolated service provider name.</param>
            <param name="unitId">isolated service provider number.</param>
            <param name="stmt">statements moved.</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementIsolationService.CommitUnisolatingStatements(System.String,System.Int32,System.Collections.Generic.IList{com.espertech.esper.client.EPStatement})">
            <summary>Indicates statements have been moved out of isolation. </summary>
            <param name="name">isolated service provider name.</param>
            <param name="unitId">isolated service provider number.</param>
            <param name="stmt">statements moved.</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementIsolationService.RollbackUnisolatingStatements(System.String,System.Int32,System.Collections.Generic.IList{com.espertech.esper.client.EPStatement})">
            <summary>Indicates statements are not moved out of isolation. </summary>
            <param name="name">isolated service provider name.</param>
            <param name="unitId">isolated service provider number.</param>
            <param name="stmt">statements moved.</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementIsolationService.NewStatement(System.String,System.String,com.espertech.esper.core.service.EPIsolationUnitServices)">
            <summary>Indicates a new statement created in an isolated service. </summary>
            <param name="stmtId">statement id</param>
            <param name="stmtName">statement name</param>
            <param name="isolatedServices">isolated services</param>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementIsolationService.IsolationUnitNames">
            <summary>Returns all names or currently known isolation services. </summary>
            <value>names</value>
        </member>
        <member name="T:com.espertech.esper.core.service.StatementIsolationServiceImpl">
            <summary>Service to maintain currently active isoalted service providers for an engine. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementIsolationServiceImpl.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementIsolationServiceImpl.ServicesContext">
            <summary>Set the engine service context. </summary>
            <value>services context</value>
        </member>
        <member name="T:com.espertech.esper.core.service.StatementLifecycleEvent">
            <summary>
            Event indicating statement lifecycle management.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementLifecycleEvent.#ctor(com.espertech.esper.client.EPStatement,com.espertech.esper.core.service.StatementLifecycleEvent.LifecycleEventType,System.Object[])">
            <summary>Ctor. </summary>
            <param name="statement">the statement</param>
            <param name="eventType">the type if event</param>
            <param name="parameters">event parameters</param>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementLifecycleEvent.Statement">
            <summary>Returns the statement instance for the event. </summary>
            <value>statement</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementLifecycleEvent.EventType">
            <summary>Returns the event type. </summary>
            <value>type of event</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementLifecycleEvent.Parameters">
            <summary>Returns event parameters. </summary>
            <value>params</value>
        </member>
        <member name="T:com.espertech.esper.core.service.StatementLifecycleEvent.LifecycleEventType">
            <summary>Event types. </summary>
        </member>
        <member name="F:com.espertech.esper.core.service.StatementLifecycleEvent.LifecycleEventType.CREATE">
            <summary>Statement created. </summary>
        </member>
        <member name="F:com.espertech.esper.core.service.StatementLifecycleEvent.LifecycleEventType.STATECHANGE">
            <summary>Statement state change. </summary>
        </member>
        <member name="F:com.espertech.esper.core.service.StatementLifecycleEvent.LifecycleEventType.LISTENER_ADD">
            <summary>listener added </summary>
        </member>
        <member name="F:com.espertech.esper.core.service.StatementLifecycleEvent.LifecycleEventType.LISTENER_REMOVE">
            <summary>Listener removed. </summary>
        </member>
        <member name="F:com.espertech.esper.core.service.StatementLifecycleEvent.LifecycleEventType.LISTENER_REMOVE_ALL">
            <summary>All listeners removed. </summary>
        </member>
        <member name="F:com.espertech.esper.core.service.StatementLifecycleEvent.LifecycleEventType.DISPOSED">
            <summary>Statement destroyed / disposed.</summary>
        </member>
        <member name="T:com.espertech.esper.core.service.StatementLifecycleSvc">
            <summary>
            Handles statement management.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementLifecycleSvc.Init">
            <summary>Initialized the service before use. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementLifecycleSvc.DispatchStatementLifecycleEvent(com.espertech.esper.core.service.StatementLifecycleEvent)">
            <summary>
            Dispatch event to observers.
            </summary>
            <param name="theEvent">to dispatch</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementLifecycleSvc.CreateAndStart(com.espertech.esper.epl.spec.StatementSpecRaw,System.String,System.Boolean,System.String,System.Object,com.espertech.esper.core.service.EPIsolationUnitServices,System.String,com.espertech.esper.client.soda.EPStatementObjectModel)">
            <summary>
            Create and start the statement.
            </summary>
            <param name="statementSpec">is the statement definition in bean object form, raw unvalidated and unoptimized.</param>
            <param name="expression">is the expression text</param>
            <param name="isPattern">is an indicator on whether this is a pattern statement and thus the iterator must return the last result,versus for non-pattern statements the iterator returns view content.</param>
            <param name="optStatementName">is an optional statement name, null if none was supplied</param>
            <param name="userObject">the application define user object associated to each statement, if supplied</param>
            <param name="isolationUnitServices">isolated service services</param>
            <param name="statementId">The statement id.</param>
            <param name="optionalModel">The optional model.</param>
            <returns>started statement</returns>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementLifecycleSvc.Start(System.String)">
            <summary>Start statement by statement id. </summary>
            <param name="statementId">of the statement to start.</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementLifecycleSvc.Stop(System.String)">
            <summary>Stop statement by statement id. </summary>
            <param name="statementId">of the statement to stop.</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementLifecycleSvc.Destroy(System.String)">
            <summary>Destroy statement by statement id. </summary>
            <param name="statementId">statementId of the statement to destroy</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementLifecycleSvc.GetStatementByName(System.String)">
            <summary>Returns the statement by the given name, or null if no such statement exists. </summary>
            <param name="name">is the statement name</param>
            <returns>statement for the given name, or null if no such statement existed</returns>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementLifecycleSvc.StartAllStatements">
            <summary>Starts all stopped statements. First statement to fail supplies the exception. </summary>
            <throws>EPException to indicate a start error.</throws>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementLifecycleSvc.StopAllStatements">
            <summary>Stops all started statements. First statement to fail supplies the exception. </summary>
            <throws>EPException to indicate a start error.</throws>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementLifecycleSvc.DestroyAllStatements">
            <summary>Destroys all started statements. First statement to fail supplies the exception. </summary>
            <throws>EPException to indicate a start error.</throws>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementLifecycleSvc.UpdatedListeners(com.espertech.esper.client.EPStatement,com.espertech.esper.core.service.EPStatementListenerSet)">
            <summary>Statements indicate that listeners have been added through this method. </summary>
            <param name="stmt">is the statement for which listeners were added</param>
            <param name="listeners">is the set of listeners after adding the new listener</param>
        </member>
        <member name="E:com.espertech.esper.core.service.StatementLifecycleSvc.LifecycleEvent">
            <summary>
            Occurs when there is a corresponding lifecycle event.
            </summary>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementLifecycleSvc.StatementNames">
            <summary>
            Returns an array of statement names. If no statement has been created, an empty array is returned.
            <para/>
            Only returns started and stopped statements. </summary>
            <value>statement names</value>
        </member>
        <member name="T:com.espertech.esper.core.service.StatementLifecycleSvcImpl">
            <summary>
            Provides statement lifecycle services.
            </summary>
        </member>
        <member name="F:com.espertech.esper.core.service.StatementLifecycleSvcImpl._services">
            <summary>Services context for statement lifecycle management. </summary>
        </member>
        <member name="F:com.espertech.esper.core.service.StatementLifecycleSvcImpl._stmtIdToDescMap">
            <summary>Maps of statement id to descriptor. </summary>
        </member>
        <member name="F:com.espertech.esper.core.service.StatementLifecycleSvcImpl._stmtNameToStmtMap">
            <summary>Map of statement name to statement. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementLifecycleSvcImpl.#ctor(com.espertech.esper.client.EPServiceProvider,com.espertech.esper.core.service.EPServicesContext)">
            <summary>Ctor. </summary>
            <param name="epServiceProvider">is the engine instance to hand to statement-aware listeners</param>
            <param name="services">is engine services</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementLifecycleSvcImpl.CreateStoppedAssignName(com.espertech.esper.epl.spec.StatementSpecRaw,System.String,System.Boolean,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object,com.espertech.esper.core.service.EPIsolationUnitServices,com.espertech.esper.client.soda.EPStatementObjectModel)">
            <summary>
            Creates and starts statement.
            </summary>
            <param name="statementSpec">defines the statement</param>
            <param name="expression">is the EPL</param>
            <param name="isPattern">is true for patterns</param>
            <param name="optStatementName">is the optional statement name</param>
            <param name="statementId">is the statement id</param>
            <param name="optAdditionalContext">additional context for use by the statement context</param>
            <param name="userObject">the application define user object associated to each statement, if supplied</param>
            <param name="isolationUnitServices">isolated service services</param>
            <param name="optionalModel">The optional model.</param>
            <returns>started statement</returns>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementLifecycleSvcImpl.CreateStopped(com.espertech.esper.epl.spec.StatementSpecRaw,System.String,System.Boolean,System.String,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object,com.espertech.esper.core.service.EPIsolationUnitServices,System.Boolean,com.espertech.esper.client.soda.EPStatementObjectModel)">
            <summary>
            Create stopped statement.
            </summary>
            <param name="statementSpec">statement definition</param>
            <param name="expression">is the expression text</param>
            <param name="isPattern">is true for patterns, false for non-patterns</param>
            <param name="statementName">is the statement name assigned or given</param>
            <param name="nameProvided">true when an explicit statement name is provided</param>
            <param name="statementId">is the statement id</param>
            <param name="optAdditionalContext">additional context for use by the statement context</param>
            <param name="userObject">the application define user object associated to each statement, if supplied</param>
            <param name="isolationUnitServices">isolated service services</param>
            <param name="isFailed">to start the statement in failed state</param>
            <param name="optionalModel">The optional model.</param>
            <returns>stopped statement</returns>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementLifecycleSvcImpl.ValidateScripts(System.String,System.Collections.Generic.IEnumerable{com.espertech.esper.epl.spec.ExpressionScriptProvided},com.espertech.esper.epl.spec.ExpressionDeclDesc)">
            <summary>
            All scripts get compiled/verfied - to ensure they compile (and not just when they are referred to my an expression).
            </summary>
            <param name="epl"></param>
            <param name="scripts"></param>
            <param name="expressionDeclDesc"></param>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementLifecycleSvcImpl.Start(System.String,com.espertech.esper.core.service.StatementLifecycleSvcImpl.EPStatementDesc,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Start the given statement. </summary>
            <param name="statementId">is the statement id</param>
            <param name="desc">is the cached statement info</param>
            <param name="isNewStatement">indicator whether the statement is new or a stop-restart statement</param>
            <param name="isRecoveringStatement">if the statement is recovering or new</param>
            <param name="isResilient">true if recovering a resilient stmt</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementLifecycleSvcImpl.GetStatementById(System.String)">
            <summary>Returns the statement given a statement id. </summary>
            <param name="id">is the statement id</param>
            <returns>statement</returns>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementLifecycleSvcImpl.Compile(com.espertech.esper.epl.spec.StatementSpecRaw,System.String,com.espertech.esper.core.service.StatementContext,System.Boolean,System.Attribute[],System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprSubselectNode},System.Collections.Generic.IList{com.espertech.esper.epl.declexpr.ExprDeclaredNode},com.espertech.esper.core.service.EPServicesContext)">
            <summary>
            Compiles a statement returning the compile (verified, non-serializable) form of a statement.
            </summary>
            <param name="spec">is the statement specification</param>
            <param name="eplStatement">the statement to compile</param>
            <param name="statementContext">the statement services</param>
            <param name="isSubquery">is true for subquery compilation or false for statement compile</param>
            <param name="annotations">statement annotations</param>
            <param name="subselectNodes">The subselect nodes.</param>
            <param name="declaredNodes">The declared nodes.</param>
            <param name="servicesContext">The services context.</param>
            <returns>compiled statement</returns>
            <throws>EPStatementException if the statement cannot be compiled</throws>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementLifecycleSvcImpl.CompileSelectAllowSubselect(com.espertech.esper.epl.spec.SelectClauseSpecRaw)">
            <summary>Compile a select clause allowing subselects. </summary>
            <param name="spec">to compile</param>
            <returns>select clause compiled</returns>
            <throws>ExprValidationException when validation fails</throws>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementLifecycleSvcImpl.CompileLimitedSelect(com.espertech.esper.epl.spec.SelectClauseSpecRaw,System.String,com.espertech.esper.client.EventType,System.String,System.String,com.espertech.esper.epl.expression.ExprEvaluatorContext,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.events.EventAdapterService,com.espertech.esper.script.ScriptingService,System.String,System.String,System.Attribute[])">
            <summary>
            Compiles the limited select.
            </summary>
            <param name="spec">The spec.</param>
            <param name="eplStatement">The epl statement.</param>
            <param name="singleType">Type of the single.</param>
            <param name="selectFromTypeName">Name of the select from type.</param>
            <param name="engineURI">The engine URI.</param>
            <param name="exprEvaluatorContext">The expr evaluator context.</param>
            <param name="methodResolutionService">The method resolution service.</param>
            <param name="eventAdapterService">The event adapter service.</param>
            <param name="scriptingService">The scripting service.</param>
            <param name="statementName">Name of the statement.</param>
            <param name="statementId">The statement id.</param>
            <param name="annotations">The annotations.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.core.service.StatementLifecycleSvcImpl.EPStatementDesc">
            <summary>
            Statement information.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementLifecycleSvcImpl.EPStatementDesc.#ctor(com.espertech.esper.core.service.EPStatementSPI,com.espertech.esper.core.start.EPStatementStartMethod,com.espertech.esper.core.start.EPStatementStopMethod,com.espertech.esper.core.start.EPStatementDestroyMethod,System.String,com.espertech.esper.core.service.EPStatementHandle,com.espertech.esper.core.service.StatementContext)">
            <summary>Ctor. </summary>
            <param name="epStatement">the statement</param>
            <param name="startMethod">the start method</param>
            <param name="stopMethod">the stop method</param>
            <param name="optInsertIntoStream">is the insert-into stream name, or null if not using insert-into</param>
            <param name="statementHandle">is the locking handle for the statement</param>
            <param name="statementContext">statement context</param>
            <param name="destroyMethod">method to call when destroyed</param>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementLifecycleSvcImpl.EPStatementDesc.EpStatement">
            <summary>Returns the statement. </summary>
            <value>statement.</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementLifecycleSvcImpl.EPStatementDesc.StartMethod">
            <summary>Returns the start method. </summary>
            <value>start method</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementLifecycleSvcImpl.EPStatementDesc.StopMethod">
            <summary>Returns the stop method. </summary>
            <value>stop method</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementLifecycleSvcImpl.EPStatementDesc.StatementHandle">
            <summary>Returns the statements handle. </summary>
            <value>statement handle</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementLifecycleSvcImpl.EPStatementDesc.StatementContext">
            <summary>Returns the statement context. </summary>
            <value>statement context</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementLifecycleSvcImpl.EPStatementDesc.DestroyMethod">
            <summary>Return destroy method. </summary>
            <value>method.</value>
        </member>
        <member name="T:com.espertech.esper.core.service.StatementLockFactory">
            <summary>
            Factory for the managed lock that provides statement resource protection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementLockFactory.GetStatementLock(System.String,System.String,System.Attribute[],System.Boolean)">
            <summary>
            Create lock for statement
            </summary>
            <param name="statementName">is the statement name</param>
            <param name="expressionText">is the statement expression text</param>
            <param name="annotations">The annotations.</param>
            <param name="stateless">if set to <c>true</c> [stateless].</param>
            <returns>lock</returns>
        </member>
        <member name="T:com.espertech.esper.core.service.StatementLockFactoryImpl">
            <summary>
            Provides statement-level locks.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.service.StatementMetadata">
            <summary>Statement metadata. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementMetadata.#ctor(com.espertech.esper.core.service.StatementType)">
            <summary>Ctor. </summary>
            <param name="statementType">the type of statement</param>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementMetadata.StatementType">
            <summary>Returns the statement type. </summary>
            <value>statement type.</value>
        </member>
        <member name="T:com.espertech.esper.core.service.StatementMetadataFactory">
            <summary>Statement metadata factory. </summary>
        </member>
        <member name="T:com.espertech.esper.core.service.StatementMetadataFactoryContext">
            <summary>
            Statement metadata factory context.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.service.StatementMetadataFactoryDefault">
            <summary>Statement metadata. </summary>
        </member>
        <member name="T:com.espertech.esper.core.service.StatementResultListener">
            <summary>
            Interface for statement result callbacks.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementResultListener.Update(com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean[],System.String,com.espertech.esper.core.service.EPStatementSPI,com.espertech.esper.core.service.EPServiceProviderSPI)">
            <summary>Provide statement result. </summary>
            <param name="newEvents">insert stream</param>
            <param name="oldEvents">remove stream</param>
            <param name="statementName">stmt name</param>
            <param name="statement">stmt</param>
            <param name="epServiceProvider">engine</param>
        </member>
        <member name="T:com.espertech.esper.core.service.StatementResultService">
            <summary>
            Interface for a statement-level service for coordinating the insert/remove stream generation, 
            native deliver to subscribers and the presence/absence of listener or subscribers to a statement.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementResultService.SetContext(com.espertech.esper.core.service.EPStatementSPI,com.espertech.esper.core.service.EPServiceProviderSPI,System.Boolean,System.Boolean,System.Boolean,System.Boolean,com.espertech.esper.epl.metric.StatementMetricHandle)">
            <summary>
            For initialization of the service to provide statement context.
            </summary>
            <param name="epStatement">the statement</param>
            <param name="epServiceProvider">the engine instance</param>
            <param name="isInsertInto">true if this is insert into</param>
            <param name="isPattern">true if this is a pattern statement</param>
            <param name="isDistinct">true if using distinct</param>
            <param name="isForClause">if set to <c>true</c> [is for clause].</param>
            <param name="statementMetricHandle">handle for metrics reporting</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementResultService.SetSelectClause(System.Type[],System.String[],System.Boolean,com.espertech.esper.epl.expression.ExprEvaluator[],com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            For initialize of the service providing select clause column types and names.
            </summary>
            <param name="selectClauseTypes">types of columns in the select clause</param>
            <param name="selectClauseColumnNames">column names</param>
            <param name="forClauseDelivery">if set to <c>true</c> [for clause delivery].</param>
            <param name="groupDeliveryExpressions">The group delivery expressions.</param>
            <param name="exprEvaluatorContext">The expr evaluator context.</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementResultService.DispatchOnStop">
            <summary>Dispatch the remaining results, if any, to listeners as the statement is about to be stopped. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementResultService.SetUpdateListeners(com.espertech.esper.core.service.EPStatementListenerSet)">
            <summary>Indicate a change in update listener. </summary>
            <param name="updateListeners">is the new listeners and subscriber</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementResultService.Indicate(com.espertech.esper.collection.UniformPair{com.espertech.esper.client.EventBean[]})">
            <summary>Stores for dispatching the statement results. </summary>
            <param name="results">is the insert and remove stream data</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementResultService.Execute">
            <summary>Execution of result indication. </summary>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementResultService.IsMakeSynthetic">
            <summary>Returns true to indicate that synthetic events should be produced, for use in select expression processing. </summary>
            <value>true to produce synthetic events</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementResultService.IsMakeNatural">
            <summary>Returns true to indicate that natural events should be produced, for use in select expression processing. </summary>
            <value>true to produce natural (object[] column) events</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementResultService.LastIterableEvent">
            <summary>Returns the last iterable event, for use by patterns since these are not iterable. </summary>
            <value>last event</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementResultService.StatementName">
            <summary>
            Gets the name of the statement.
            </summary>
            <value>The name of the statement.</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementResultService.StatementListenerSet">
            <summary>
            Gets the statement listener set.
            </summary>
            <value>The statement listener set.</value>
        </member>
        <member name="T:com.espertech.esper.core.service.StatementResultServiceImpl">
            <summary>
            Implements tracking of statement listeners and subscribers for a given statement
            such as to efficiently dispatch in situations where 0, 1 or more listeners are attached 
            and/or 0 or 1 subscriber (such as iteration-only statement).
            </summary>
        </member>
        <member name="F:com.espertech.esper.core.service.StatementResultServiceImpl.LastResults">
            <summary>Buffer for holding dispatchable events. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementResultServiceImpl.#ctor(System.String,com.espertech.esper.core.service.StatementLifecycleSvc,com.espertech.esper.epl.metric.MetricReportingServiceSPI,com.espertech.esper.core.thread.ThreadingService)">
            <summary>
            Ctor.
            </summary>
            <param name="statementName">Name of the statement.</param>
            <param name="statementLifecycleSvc">handles persistence for statements</param>
            <param name="metricReportingService">for metrics reporting</param>
            <param name="threadingService">for outbound threading</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementResultServiceImpl.SetContext(com.espertech.esper.core.service.EPStatementSPI,com.espertech.esper.core.service.EPServiceProviderSPI,System.Boolean,System.Boolean,System.Boolean,System.Boolean,com.espertech.esper.epl.metric.StatementMetricHandle)">
            <summary>
            For initialization of the service to provide statement context.
            </summary>
            <param name="epStatement">the statement</param>
            <param name="epServiceProvider">the engine instance</param>
            <param name="isInsertInto">true if this is insert into</param>
            <param name="isPattern">true if this is a pattern statement</param>
            <param name="isDistinct">true if using distinct</param>
            <param name="isForClause">if set to <c>true</c> [is for clause].</param>
            <param name="statementMetricHandle">handle for metrics reporting</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementResultServiceImpl.SetSelectClause(System.Type[],System.String[],System.Boolean,com.espertech.esper.epl.expression.ExprEvaluator[],com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            For initialize of the service providing select clause column types and names.
            </summary>
            <param name="selectClauseTypes">types of columns in the select clause</param>
            <param name="selectClauseColumnNames">column names</param>
            <param name="forClauseDelivery">if set to <c>true</c> [for clause delivery].</param>
            <param name="groupDeliveryExpressions">The group delivery expressions.</param>
            <param name="exprEvaluatorContext">The expr evaluator context.</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementResultServiceImpl.ProcessDispatch(com.espertech.esper.collection.UniformPair{com.espertech.esper.client.EventBean[]})">
            <summary>Indicate an outbound result. </summary>
            <param name="events">to indicate</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementResultServiceImpl.DispatchOnStop">
            <summary>
            Dispatches when the statement is stopped any remaining results.
            </summary>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementResultServiceImpl.StatementName">
            <summary>
            Gets the name of the statement.
            </summary>
            <value>The name of the statement.</value>
        </member>
        <member name="T:com.espertech.esper.core.service.StatementType">
            <summary>Type of the statement. </summary>
        </member>
        <member name="F:com.espertech.esper.core.service.StatementType.PATTERN">
            <summary>Pattern statement. </summary>
        </member>
        <member name="F:com.espertech.esper.core.service.StatementType.SELECT">
            <summary>Select statement that may contain one or more patterns. </summary>
        </member>
        <member name="F:com.espertech.esper.core.service.StatementType.INSERT_INTO">
            <summary>Insert-into statement. </summary>
        </member>
        <member name="F:com.espertech.esper.core.service.StatementType.CREATE_WINDOW">
            <summary>Create a named window statement. </summary>
        </member>
        <member name="F:com.espertech.esper.core.service.StatementType.CREATE_VARIABLE">
            <summary>Create a variable statement. </summary>
        </member>
        <member name="F:com.espertech.esper.core.service.StatementType.CREATE_SCHEMA">
            <summary>Create-schema statement. </summary>
        </member>
        <member name="F:com.espertech.esper.core.service.StatementType.CREATE_INDEX">
            <summary>Create-index statement. </summary>
        </member>
        <member name="F:com.espertech.esper.core.service.StatementType.CREATE_CONTEXT">
            <summary>Create-context statement. </summary>
        </member>
        <member name="F:com.espertech.esper.core.service.StatementType.CREATE_EXPRESSION">
            <summary>Create-expression statement.</summary>
        </member>
        <member name="F:com.espertech.esper.core.service.StatementType.CREATE_GRAPH">
            <summary>Create-graph statement. </summary>
        </member>
        <member name="F:com.espertech.esper.core.service.StatementType.ON_MERGE">
            <summary>On-merge statement. </summary>
        </member>
        <member name="F:com.espertech.esper.core.service.StatementType.ON_SPLITSTREAM">
            <summary>On-merge statement. </summary>
        </member>
        <member name="F:com.espertech.esper.core.service.StatementType.ON_DELETE">
            <summary>On-delete statement. </summary>
        </member>
        <member name="F:com.espertech.esper.core.service.StatementType.ON_SELECT">
            <summary>On-select statement. </summary>
        </member>
        <member name="F:com.espertech.esper.core.service.StatementType.ON_INSERT">
            <summary>On-insert statement. </summary>
        </member>
        <member name="F:com.espertech.esper.core.service.StatementType.ON_SET">
            <summary>On-set statement. </summary>
        </member>
        <member name="F:com.espertech.esper.core.service.StatementType.ON_UPDATE">
            <summary>On-update statement. </summary>
        </member>
        <member name="F:com.espertech.esper.core.service.StatementType.UPDATE">
            <summary>Update statement. </summary>
        </member>
        <member name="T:com.espertech.esper.core.service.StatementVariableRef">
            <summary>Service for maintaining references between statement name and variables. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementVariableRef.IsInUse(System.String)">
            <summary>Returns true if the variable is listed as in-use by any statement, or false if not </summary>
            <param name="variableName">name</param>
            <returns>indicator whether variable is in use</returns>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementVariableRef.GetStatementNamesForVar(System.String)">
            <summary>Returns the set of statement names that use a given variable. </summary>
            <param name="variableName">name</param>
            <returns>set of statements or null if none found</returns>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementVariableRef.AddReferences(System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>Add a reference from a statement name to a set of variables. </summary>
            <param name="statementName">name of statement</param>
            <param name="variablesReferenced">types</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementVariableRef.RemoveReferencesStatement(System.String)">
            <summary>Remove all references for a given statement. </summary>
            <param name="statementName">statement name</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementVariableRef.RemoveReferencesVariable(System.String)">
            <summary>Remove all references for a given event type. </summary>
            <param name="variableName">variable name</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementVariableRef.AddConfiguredVariable(System.String)">
            <summary>Add a preconfigured variable. </summary>
            <param name="variableName">name</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementVariableRef.RemoveConfiguredVariable(System.String)">
            <summary>Remove a preconfigured variable. </summary>
            <param name="variableName">var</param>
        </member>
        <member name="T:com.espertech.esper.core.service.StatementVariableRefImpl">
            <summary>Service for holding references between statements and their variable use. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.StatementVariableRefImpl.#ctor(com.espertech.esper.epl.variable.VariableService)">
            <summary>Ctor. </summary>
            <param name="variableService">variables</param>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementVariableRefImpl.VariableToStmt">
            <summary>For testing, returns the mapping of variable name to statement names. </summary>
            <value>mapping</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StatementVariableRefImpl.StmtToVariable">
            <summary>For testing, returns the mapping of statement names to variable names. </summary>
            <value>mapping</value>
        </member>
        <member name="T:com.espertech.esper.core.service.StreamJoinAnalysisResult">
            <summary>
            Analysis result for joins.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.StreamJoinAnalysisResult.#ctor(System.Int32)">
            <summary>Ctor. </summary>
            <param name="numStreams">number of streams</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StreamJoinAnalysisResult.SetUnidirectionalInd(System.Int32)">
            <summary>Sets flag. </summary>
            <param name="index">index</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StreamJoinAnalysisResult.SetUnidirectionalNonDriving(System.Int32)">
            <summary>Sets flag. </summary>
            <param name="index">index</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StreamJoinAnalysisResult.SetHasChildViews(System.Int32)">
            <summary>Sets child view flags. </summary>
            <param name="index">to set</param>
        </member>
        <member name="M:com.espertech.esper.core.service.StreamJoinAnalysisResult.SetNamedWindow(System.Int32)">
            <summary>Sets named window flag </summary>
            <param name="index">to set</param>
        </member>
        <member name="P:com.espertech.esper.core.service.StreamJoinAnalysisResult.IsUnidirectional">
            <summary>Returns unidirectional flag. </summary>
            <value>unidirectional flag</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StreamJoinAnalysisResult.UnidirectionalStreamNumber">
            <summary>Returns unidirectional stream number. </summary>
            <value>num</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StreamJoinAnalysisResult.PureSelfJoin">
            <summary>Sets self-join. </summary>
            <value>if a self join</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StreamJoinAnalysisResult.UnidirectionalInd">
            <summary>Returns unidirection ind. </summary>
            <value>unidirectional flags</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StreamJoinAnalysisResult.UnidirectionalNonDriving">
            <summary>Returns non-driving unidirectional streams when partial self-joins. </summary>
            <value>indicators</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StreamJoinAnalysisResult.IsPureSelfJoin">
            <summary>True for self-join. </summary>
            <value>self-join</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StreamJoinAnalysisResult.HasChildViews">
            <summary>Returns child view flags. </summary>
            <value>flags</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StreamJoinAnalysisResult.NamedWindow">
            <summary>Return named window flags. </summary>
            <value>flags</value>
        </member>
        <member name="P:com.espertech.esper.core.service.StreamJoinAnalysisResult.NumStreams">
            <summary>Returns streams num. </summary>
            <value>num</value>
        </member>
        <member name="T:com.espertech.esper.core.service.UpdateDispatchFutureSpin">
            <summary>
            UpdateDispatchFutureSpin can be added to a dispatch queue that is thread-local. It represents 
            is a stand-in for a future dispatching of a statement result to statement listeners. 
            <para/> 
            UpdateDispatchFutureSpin is aware of future and past dispatches: 
                (newest) DF3   &lt;--&gt;   DF2  &lt;--&gt;  DF1  (oldest), 
            
            and uses a spin lock to block if required
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.UpdateDispatchFutureSpin.#ctor(com.espertech.esper.core.service.UpdateDispatchViewBlockingSpin,com.espertech.esper.core.service.UpdateDispatchFutureSpin,System.Int64,com.espertech.esper.timer.TimeSourceService)">
            <summary>Ctor. </summary>
            <param name="view">is the blocking dispatch view through which to execute a dispatch</param>
            <param name="earlier">is the older future</param>
            <param name="msecTimeout">is the timeout period to wait for listeners to complete a prior dispatch</param>
            <param name="timeSourceService">time source provider</param>
        </member>
        <member name="M:com.espertech.esper.core.service.UpdateDispatchFutureSpin.#ctor(com.espertech.esper.timer.TimeSourceService)">
            <summary>Ctor - use for the first future to indicate completion. </summary>
            <param name="timeSourceService">time source provider</param>
        </member>
        <member name="M:com.espertech.esper.core.service.UpdateDispatchFutureSpin.IsCompleted">
            <summary>Returns true if the dispatch completed for this future. </summary>
            <returns>true for completed, false if not</returns>
        </member>
        <member name="T:com.espertech.esper.core.service.UpdateDispatchFutureWait">
            <summary>
            UpdateDispatchFutureWait can be added to a dispatch queue that is thread-local. It 
            represents is a stand-in for a future dispatching of a statement result to statement 
            listeners. 
            <para />
            UpdateDispatchFutureWait is aware of future and past dispatches: 
                (newest) DF3   &lt;--&gt;   DF2  &lt;--&gt;  DF1  (oldest)
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.UpdateDispatchFutureWait.#ctor(com.espertech.esper.core.service.UpdateDispatchViewBlockingWait,com.espertech.esper.core.service.UpdateDispatchFutureWait,System.Int64)">
            <summary>Ctor. </summary>
            <param name="view">is the blocking dispatch view through which to execute a dispatch</param>
            <param name="earlier">is the older future</param>
            <param name="msecTimeout">is the timeout period to wait for listeners to complete a prior dispatch</param>
        </member>
        <member name="M:com.espertech.esper.core.service.UpdateDispatchFutureWait.#ctor">
            <summary>Ctor - use for the first future to indicate completion. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.UpdateDispatchFutureWait.SetLater(com.espertech.esper.core.service.UpdateDispatchFutureWait)">
            <summary>Hand a later future to the dispatch to use for indicating completion via notify. </summary>
            <param name="later">is the later dispatch</param>
        </member>
        <member name="P:com.espertech.esper.core.service.UpdateDispatchFutureWait.IsCompleted">
            <summary>Returns true if the dispatch completed for this future. </summary>
            <value>true for completed, false if not</value>
        </member>
        <member name="T:com.espertech.esper.core.service.UpdateDispatchViewBase">
            <summary>
            Convenience view for dispatching view updates received from a parent view to update listeners via the dispatch service.
            </summary>
        </member>
        <member name="F:com.espertech.esper.core.service.UpdateDispatchViewBase.DispatchService">
            <summary>Dispatches events to listeners. </summary>
        </member>
        <member name="F:com.espertech.esper.core.service.UpdateDispatchViewBase.LastIterableEvent">
            <summary>For iteration with patterns. </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.UpdateDispatchViewBase.#ctor(com.espertech.esper.core.service.StatementResultService,com.espertech.esper.dispatch.DispatchService)">
            <summary>Ctor. </summary>
            <param name="dispatchService">for performing the dispatch</param>
            <param name="statementResultService">handles result delivery</param>
        </member>
        <member name="M:com.espertech.esper.core.service.UpdateDispatchViewBase.Clear">
            <summary>Remove event reference to last event. </summary>
        </member>
        <member name="P:com.espertech.esper.core.service.UpdateDispatchViewBase.StatementResultService">
            <summary>Handles result delivery </summary>
        </member>
        <member name="P:com.espertech.esper.core.service.UpdateDispatchViewBase.IsDispatchWaiting">
            <summary>Flag to indicate we have registered a dispatch.</summary>
        </member>
        <member name="T:com.espertech.esper.core.service.UpdateDispatchViewBlockingSpin">
            <summary>
            Convenience view for dispatching view updates received from a parent view 
            to update listeners via the dispatch service.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.UpdateDispatchViewBlockingSpin.#ctor(com.espertech.esper.core.service.StatementResultService,com.espertech.esper.dispatch.DispatchService,System.Int64,com.espertech.esper.timer.TimeSourceService)">
            <summary>Ctor. </summary>
            <param name="dispatchService">for performing the dispatch</param>
            <param name="msecTimeout">timeout for preserving dispatch order through blocking</param>
            <param name="statementResultService">handles result delivery</param>
            <param name="timeSourceService">time source provider</param>
        </member>
        <member name="T:com.espertech.esper.core.service.UpdateDispatchViewBlockingWait">
            <summary>
            Convenience view for dispatching view updates received from a parent view to update 
            listeners via the dispatch service.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.UpdateDispatchViewBlockingWait.#ctor(com.espertech.esper.core.service.StatementResultService,com.espertech.esper.dispatch.DispatchService,System.Int64)">
            <summary>Ctor. </summary>
            <param name="dispatchService">for performing the dispatch</param>
            <param name="msecTimeout">timeout for preserving dispatch order through blocking</param>
            <param name="statementResultServiceImpl">handles result delivery</param>
        </member>
        <member name="T:com.espertech.esper.core.service.UpdateDispatchViewNonBlocking">
            <summary>
            Convenience view for dispatching view updates received from a parent view to update
            listeners via the dispatch service.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.service.UpdateDispatchViewNonBlocking.#ctor(com.espertech.esper.core.service.StatementResultService,com.espertech.esper.dispatch.DispatchService)">
            <summary>
            Ctor.
            </summary>
            <param name="statementResultServiceImpl">handles result delivery</param>
            <param name="dispatchService">for performing the dispatch</param>
        </member>
        <member name="T:com.espertech.esper.core.SimpleServiceDirectory">
            <summary>
            Simple implementation of the directory.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.SimpleServiceDirectory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.core.SimpleServiceDirectory"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.SimpleServiceDirectory.Lookup(System.String)">
            <summary>
            Lookup an object by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.core.SimpleServiceDirectory.Bind(System.String,System.Object)">
            <summary>
            Bind an object to a name.  Throws an exception if
            the name is already bound.
            </summary>
            <param name="name"></param>
            <param name="obj"></param>
        </member>
        <member name="M:com.espertech.esper.core.SimpleServiceDirectory.Rebind(System.String,System.Object)">
            <summary>
            Bind an object to a name.  If the object is already
            bound, rebind it.
            </summary>
            <param name="name"></param>
            <param name="obj"></param>
        </member>
        <member name="M:com.espertech.esper.core.SimpleServiceDirectory.Unbind(System.String)">
            <summary>
            Unbind the object at the given name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:com.espertech.esper.core.SimpleServiceDirectory.Rename(System.String,System.String)">
            <summary>
            Rename the object at oldName with newName.
            </summary>
            <param name="oldName"></param>
            <param name="newName"></param>
        </member>
        <member name="M:com.espertech.esper.core.SimpleServiceDirectory.List(System.String)">
            <summary>
            Enumerates the names bound in the named context.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.core.SimpleServiceDirectory.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.start.EPPreparedExecuteMethod">
            <summary>Starts and provides the stop method for EPL statements. </summary>
        </member>
        <member name="M:com.espertech.esper.core.start.EPPreparedExecuteMethod.#ctor(com.espertech.esper.epl.spec.StatementSpecCompiled,com.espertech.esper.core.service.EPServicesContext,com.espertech.esper.core.service.StatementContext)">
            <summary>Ctor. </summary>
            <param name="statementSpec">is a container for the definition of all statement constructs thatmay have been used in the statement, i.e. if defines the select clauses, insert into, outer joins etc. </param>
            <param name="services">is the service instances for dependency injection</param>
            <param name="statementContext">is statement-level information and statement services</param>
            <throws>ExprValidationException if the preparation failed</throws>
        </member>
        <member name="M:com.espertech.esper.core.start.EPPreparedExecuteMethod.Execute(com.espertech.esper.client.context.ContextPartitionSelector[])">
            <summary>Executes the prepared query. </summary>
            <returns>query results</returns>
        </member>
        <member name="P:com.espertech.esper.core.start.EPPreparedExecuteMethod.EventType">
            <summary>Returns the event type of the prepared statement. </summary>
            <value>event type</value>
        </member>
        <member name="T:com.espertech.esper.core.start.EPStatementDestroyMethod">
            <summary>Method to call to destroy an EPStatement. </summary>
        </member>
        <member name="T:com.espertech.esper.core.start.EPStatementStartMethod">
            <summary>Starts and provides the stop method for EPL statements. </summary>
        </member>
        <member name="M:com.espertech.esper.core.start.EPStatementStartMethod.Start(com.espertech.esper.core.service.EPServicesContext,com.espertech.esper.core.service.StatementContext,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Starts the EPL statement. </summary>
            <returns>a viewable to attach to for listening to events, and a stop method to invoke to clean up</returns>
            <param name="statementContext">statement level services</param>
            <param name="isNewStatement">indicator whether the statement is new or a stop-restart statement</param>
            <param name="isRecoveringStatement">true to indicate the statement is in the process of being recovered</param>
            <param name="isRecoveringResilient">true to indicate the statement is in the process of being recovered and that statement is resilient</param>
            <throws>com.espertech.esper.view.ViewProcessingException when views cannot be started</throws>
        </member>
        <member name="T:com.espertech.esper.core.start.EPStatementStartMethodBase">
            <summary>Starts and provides the stop method for EPL statements. </summary>
        </member>
        <member name="T:com.espertech.esper.core.start.EPStatementStartMethodCreateContext">
            <summary>
            Starts and provides the stop method for EPL statements.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.start.EPStatementStartMethodCreateExpression">
            <summary>
            Starts and provides the stop method for EPL statements.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.start.EPStatementStartMethodCreateGraph">
            <summary>Starts and provides the stop method for EPL statements. </summary>
        </member>
        <member name="T:com.espertech.esper.core.start.EPStatementStartMethodCreateIndex">
            <summary>
            Starts and provides the stop method for EPL statements.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.start.EPStatementStartMethodCreateSchema">
            <summary>
            Starts and provides the stop method for EPL statements.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.start.EPStatementStartMethodCreateVariable">
            <summary>
            Starts and provides the stop method for EPL statements.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.start.EPStatementStartMethodCreateWindow">
            <summary>
            Starts and provides the stop method for EPL statements.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.start.EPStatementStartMethodFactory">
            <summary>
            Starts and provides the stop method for EPL statements.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.start.EPStatementStartMethodFactory.MakeStartMethod(com.espertech.esper.epl.spec.StatementSpecCompiled)">
            <summary>
            Ctor.
            </summary>
            <param name="statementSpec">
            is a container for the definition of all statement constructs that
            may have been used in the statement, i.e. if defines the select clauses,
            insert into, outer joins etc.
            </param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.core.start.EPStatementStartMethodHelperPrevious">
            <summary>
            Starts and provides the stop method for EPL statements.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.start.EPStatementStartMethodHelperPrior">
            <summary>
            Starts and provides the stop method for EPL statements.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.start.EPStatementStartMethodHelperUtil.DetermineStreamNames(System.Collections.Generic.IList{com.espertech.esper.epl.spec.StreamSpecCompiled})">
            <summary>Returns a stream name assigned for each stream, generated if none was supplied. </summary>
            <param name="streams">stream specifications</param>
            <returns>array of stream names</returns>
        </member>
        <member name="M:com.espertech.esper.core.start.EPStatementStartMethodHelperValidate.ValidateNodes(com.espertech.esper.epl.spec.StatementSpecCompiled,com.espertech.esper.core.service.StatementContext,com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.ViewResourceDelegateUnverified)">
            <summary>Validate filter and join expression nodes. </summary>
            <param name="statementSpec">the compiled statement</param>
            <param name="statementContext">the statement services</param>
            <param name="typeService">the event types for streams</param>
            <param name="viewResourceDelegate">the delegate to verify expressions that use view resources</param>
        </member>
        <member name="T:com.espertech.esper.core.start.EPStatementStartMethodOnTrigger">
            <summary>
            Starts and provides the stop method for EPL statements.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.start.EPStatementStartMethodSelect">
            <summary>
            Starts and provides the stop method for EPL statements.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.start.EPStatementStartMethodSelectDesc">
            <summary>Starts and provides the stop method for EPL statements. </summary>
        </member>
        <member name="T:com.espertech.esper.core.start.EPStatementStartMethodSelectUtil">
            <summary>
            Starts and provides the stop method for EPL statements.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.start.EPStatementStartMethodUpdate">
            <summary>
            Starts and provides the stop method for EPL statements.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.start.EPStatementStartResult">
            <summary>Result holder returned by @{link EPStatementStartMethod}. </summary>
        </member>
        <member name="M:com.espertech.esper.core.start.EPStatementStartResult.#ctor(com.espertech.esper.view.Viewable,com.espertech.esper.core.start.EPStatementStopMethod)">
            <summary>Ctor. </summary>
            <param name="viewable">last view to attach listeners to</param>
            <param name="stopMethod">method to stop</param>
        </member>
        <member name="M:com.espertech.esper.core.start.EPStatementStartResult.#ctor(com.espertech.esper.view.Viewable,com.espertech.esper.core.start.EPStatementStopMethod,com.espertech.esper.core.start.EPStatementDestroyMethod)">
            <summary>Ctor. </summary>
            <param name="viewable">last view to attach listeners to</param>
            <param name="stopMethod">method to stop</param>
            <param name="destroyMethod">method to call when destroying</param>
        </member>
        <member name="P:com.espertech.esper.core.start.EPStatementStartResult.Viewable">
            <summary>Returns last view to attached to. </summary>
            <value>view</value>
        </member>
        <member name="P:com.espertech.esper.core.start.EPStatementStartResult.StopMethod">
            <summary>Returns stop method. </summary>
            <value>stop method.</value>
        </member>
        <member name="P:com.espertech.esper.core.start.EPStatementStartResult.DestroyMethod">
            <summary>Returns destroy method. </summary>
            <value>destroy method</value>
        </member>
        <member name="T:com.espertech.esper.core.start.EPStatementStopMethod">
            <summary>
            Method to call to stop an EPStatement.
            </summary>
        </member>
        <member name="T:com.espertech.esper.core.start.EPStatementStopMethodImpl">
            <summary>Method to call to stop an EPStatement. </summary>
        </member>
        <member name="T:com.espertech.esper.core.thread.InboundUnitSendLINQ">
            <summary>
            Inbound unit for LINQ XML events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.thread.InboundUnitSendLINQ.#ctor(System.Xml.Linq.XElement,com.espertech.esper.core.service.EPServicesContext,com.espertech.esper.core.service.EPRuntimeImpl)">
            <summary>Ctor. </summary>
            <param name="theEvent">document</param>
            <param name="services">for wrapping event</param>
            <param name="runtime">runtime to process</param>
        </member>
        <member name="T:com.espertech.esper.core.thread.InboundUnitSendDOM">
            <summary>Inbound unit for DOM events. </summary>
        </member>
        <member name="M:com.espertech.esper.core.thread.InboundUnitSendDOM.#ctor(System.Xml.XmlNode,com.espertech.esper.core.service.EPServicesContext,com.espertech.esper.core.service.EPRuntimeImpl)">
            <summary>Ctor. </summary>
            <param name="theEvent">document</param>
            <param name="services">for wrapping event</param>
            <param name="runtime">runtime to process</param>
        </member>
        <member name="T:com.espertech.esper.core.thread.InboundUnitSendEvent">
            <summary>Inbound unit for unwrapped events. </summary>
        </member>
        <member name="M:com.espertech.esper.core.thread.InboundUnitSendEvent.#ctor(System.Object,com.espertech.esper.core.service.EPRuntimeImpl)">
            <summary>Ctor. </summary>
            <param name="theEvent">to process</param>
            <param name="runtime">to process event</param>
        </member>
        <member name="T:com.espertech.esper.core.thread.InboundUnitSendMap">
            <summary>Inbound work unit processing a map event. </summary>
        </member>
        <member name="M:com.espertech.esper.core.thread.InboundUnitSendMap.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,com.espertech.esper.core.service.EPServicesContext,com.espertech.esper.core.service.EPRuntimeImpl)">
            <summary>Ctor. </summary>
            <param name="map">to send</param>
            <param name="eventTypeName">type name</param>
            <param name="services">to wrap</param>
            <param name="runtime">to process</param>
        </member>
        <member name="T:com.espertech.esper.core.thread.InboundUnitSendObjectArray">
            <summary>Inbound work unit processing a map event. </summary>
        </member>
        <member name="M:com.espertech.esper.core.thread.InboundUnitSendObjectArray.#ctor(System.Object[],System.String,com.espertech.esper.core.service.EPServicesContext,com.espertech.esper.core.service.EPRuntimeImpl)">
            <summary>Ctor. </summary>
            <param name="properties">to send</param>
            <param name="eventTypeName">type name</param>
            <param name="services">to wrap</param>
            <param name="runtime">to process</param>
        </member>
        <member name="T:com.espertech.esper.core.thread.InboundUnitSendWrapped">
            <summary>
            Inbound unit for wrapped events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.thread.InboundUnitSendWrapped.#ctor(com.espertech.esper.client.EventBean,com.espertech.esper.core.service.EPRuntimeEventSender)">
            <summary>Ctor. </summary>
            <param name="theEvent">inbound event, wrapped</param>
            <param name="runtime">to process</param>
        </member>
        <member name="T:com.espertech.esper.core.thread.OutboundUnitRunnable">
            <summary>Outbound unit. </summary>
        </member>
        <member name="M:com.espertech.esper.core.thread.OutboundUnitRunnable.#ctor(com.espertech.esper.collection.UniformPair{com.espertech.esper.client.EventBean[]},com.espertech.esper.core.service.StatementResultServiceImpl)">
            <summary>Ctor. </summary>
            <param name="events">to dispatch</param>
            <param name="statementResultService">handles result indicate</param>
        </member>
        <member name="T:com.espertech.esper.core.thread.RouteUnitMultiple">
            <summary>Route execution work unit. </summary>
        </member>
        <member name="M:com.espertech.esper.core.thread.RouteUnitMultiple.#ctor(com.espertech.esper.core.service.EPRuntimeImpl,System.Collections.Generic.LinkedList{com.espertech.esper.filter.FilterHandleCallback},com.espertech.esper.client.EventBean,com.espertech.esper.core.context.util.EPStatementAgentInstanceHandle,System.Int64)">
            <summary>Ctor. </summary>
            <param name="epRuntime">runtime to process</param>
            <param name="callbackList">callback list</param>
            <param name="theEvent">event to pass</param>
            <param name="handle">statement handle</param>
            <param name="filterVersion">version of filter</param>
        </member>
        <member name="T:com.espertech.esper.core.thread.RouteUnitSingle">
            <summary>
            Route unit for single match.
            </summary>
        </member>
        <member name="M:com.espertech.esper.core.thread.RouteUnitSingle.#ctor(com.espertech.esper.core.service.EPRuntimeImpl,com.espertech.esper.core.service.EPStatementHandleCallback,com.espertech.esper.client.EventBean,System.Int64)">
            <summary>Ctor. </summary>
            <param name="epRuntime">runtime to process</param>
            <param name="handleCallback">callback</param>
            <param name="theEvent">event</param>
            <param name="filterVersion">version of filter</param>
        </member>
        <member name="T:com.espertech.esper.core.thread.ThreadingOption">
            <summary>Ctor </summary>
        </member>
        <member name="P:com.espertech.esper.core.thread.ThreadingOption.IsThreadingEnabled">
            <summary>Returns true when threading is enabled </summary>
            <value>indicator</value>
        </member>
        <member name="T:com.espertech.esper.core.thread.ThreadingService">
            <summary>Engine-level threading services. </summary>
        </member>
        <member name="M:com.espertech.esper.core.thread.ThreadingService.InitThreading(com.espertech.esper.core.service.EPServicesContext,com.espertech.esper.core.service.EPRuntimeImpl)">
            <summary>Initialize thread pools. </summary>
            <param name="services">engine-level service context</param>
            <param name="runtime">runtime</param>
        </member>
        <member name="M:com.espertech.esper.core.thread.ThreadingService.SubmitTimerWork(com.espertech.esper.compat.Runnable)">
            <summary>Submit timer execution work unit. </summary>
            <param name="timerUnit">unit of work</param>
        </member>
        <member name="M:com.espertech.esper.core.thread.ThreadingService.SubmitInbound(com.espertech.esper.compat.Runnable)">
            <summary>Submit inbound work unit. </summary>
            <value>unit of work</value>
        </member>
        <member name="M:com.espertech.esper.core.thread.ThreadingService.SubmitRoute(com.espertech.esper.compat.Runnable)">
            <summary>Submit route work unit. </summary>
            <param name="unit">unit of work</param>
        </member>
        <member name="M:com.espertech.esper.core.thread.ThreadingService.SubmitOutbound(com.espertech.esper.compat.Runnable)">
            <summary>Submit outbound work unit. </summary>
            <param name="unit">unit of work</param>
        </member>
        <member name="P:com.espertech.esper.core.thread.ThreadingService.IsTimerThreading">
            <summary>Returns true for timer execution threading enabled. </summary>
            <value>indicator</value>
        </member>
        <member name="P:com.espertech.esper.core.thread.ThreadingService.IsInboundThreading">
            <summary>Returns true for inbound threading enabled. </summary>
            <value>indicator</value>
        </member>
        <member name="P:com.espertech.esper.core.thread.ThreadingService.IsRouteThreading">
            <summary>Returns true for route execution threading enabled. </summary>
            <value>indicator</value>
        </member>
        <member name="P:com.espertech.esper.core.thread.ThreadingService.IsOutboundThreading">
            <summary>Returns true for outbound threading enabled. </summary>
            <value>indicator</value>
        </member>
        <member name="P:com.espertech.esper.core.thread.ThreadingService.OutboundQueue">
            <summary>Returns the outbound queue. </summary>
            <value>queue</value>
        </member>
        <member name="P:com.espertech.esper.core.thread.ThreadingService.OutboundThreadPool">
            <summary>Returns the outbound thread pool </summary>
            <value>thread pool</value>
        </member>
        <member name="P:com.espertech.esper.core.thread.ThreadingService.RouteQueue">
            <summary>Returns the route queue. </summary>
            <value>queue</value>
        </member>
        <member name="P:com.espertech.esper.core.thread.ThreadingService.RouteThreadPool">
            <summary>Returns the route thread pool </summary>
            <value>thread pool</value>
        </member>
        <member name="P:com.espertech.esper.core.thread.ThreadingService.TimerQueue">
            <summary>Returns the timer queue. </summary>
            <value>queue</value>
        </member>
        <member name="P:com.espertech.esper.core.thread.ThreadingService.TimerThreadPool">
            <summary>Returns the timer thread pool </summary>
            <value>thread pool</value>
        </member>
        <member name="P:com.espertech.esper.core.thread.ThreadingService.InboundQueue">
            <summary>Returns the inbound queue. </summary>
            <value>queue</value>
        </member>
        <member name="P:com.espertech.esper.core.thread.ThreadingService.InboundThreadPool">
            <summary>Returns the inbound thread pool </summary>
            <value>thread pool</value>
        </member>
        <member name="T:com.espertech.esper.core.thread.ThreadingServiceImpl">
            <summary>Implementation for engine-level threading. </summary>
        </member>
        <member name="M:com.espertech.esper.core.thread.ThreadingServiceImpl.#ctor(com.espertech.esper.client.ConfigurationEngineDefaults.Threading)">
            <summary>Ctor. </summary>
            <param name="threadingConfig">configuration</param>
        </member>
        <member name="M:com.espertech.esper.core.thread.ThreadingServiceImpl.SubmitRoute(com.espertech.esper.compat.Runnable)">
            <summary>Submit route work unit. </summary>
            <param name="unit">unit of work</param>
        </member>
        <member name="M:com.espertech.esper.core.thread.ThreadingServiceImpl.SubmitInbound(com.espertech.esper.compat.Runnable)">
            <summary>Submit inbound work unit. </summary>
            <value>unit of work</value>
        </member>
        <member name="T:com.espertech.esper.core.thread.TimerUnitMultiple">
            <summary>Timer unit for multiple callbacks for a statement. </summary>
        </member>
        <member name="M:com.espertech.esper.core.thread.TimerUnitMultiple.#ctor(com.espertech.esper.core.service.EPServicesContext,com.espertech.esper.core.service.EPRuntimeImpl,com.espertech.esper.core.context.util.EPStatementAgentInstanceHandle,System.Object,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Ctor. </summary>
            <param name="services">engine services</param>
            <param name="runtime">runtime to process</param>
            <param name="handle">statement handle</param>
            <param name="callbackObject">callback list</param>
            <param name="exprEvaluatorContext">expression evaluation context</param>
        </member>
        <member name="T:com.espertech.esper.core.thread.TimerUnitSingle">
            <summary>Timer unit for a single callback for a statement. </summary>
        </member>
        <member name="M:com.espertech.esper.core.thread.TimerUnitSingle.#ctor(com.espertech.esper.core.service.EPServicesContext,com.espertech.esper.core.service.EPRuntimeImpl,com.espertech.esper.core.service.EPStatementHandleCallback,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Ctor. </summary>
            <param name="services">engine services</param>
            <param name="runtime">runtime to process</param>
            <param name="handleCallback">callback</param>
            <param name="exprEvaluatorContext">expression evaluation context</param>
        </member>
        <member name="M:com.espertech.esper.dataflow.annotations.OutputTypeAttribute.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether this instance is equal to a specified object.
            </summary>
            <returns>
            true if <paramref name="obj"/> equals the type and value of this instance; otherwise, false.
            </returns>
            <param name="obj">An <see cref="T:System.Object"/> to compare with this instance or null. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.dataflow.annotations.OutputTypeAttribute.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:com.espertech.esper.client.StatementAwareUpdateListener">
            <summary>
            Defines an interface to notify of new and old events.
            Also see <see cref="T:com.espertech.esper.client.UpdateListener"/> for update listeners that only
            require event delivery.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.StatementAwareUpdateListener.Update(com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean[],com.espertech.esper.client.EPStatement,com.espertech.esper.client.EPServiceProvider)">
            <summary>
            Notify that new events are available or old events are removed.
            <para>
            If the call to update contains new (inserted) events, then the first argument will be a non-empty list and
            the second will be empty. Similarly, if the call is a notification of deleted events, then the first argument
            will be empty and the second will be non-empty.
            </para>
            <para>
            Either the newEvents or oldEvents will be non-null. This method won't be called with both arguments being null,
            (unless using output rate limiting or force-output options),
            but either one could be null. The same is true for zero-length arrays.
            Either newEvents or oldEvents will be non-empty. If both are non-empty, then the update is a modification
            notification.
            </para>
            </summary>
            <param name="newEvents">
            is any new events. This will be null or empty if the update is for old events only.
            </param>
            <param name="oldEvents">
            is any old events. This will be null or empty if the update is for new events only.
            </param>
            <param name="statement">is the statement producing the result</param>
            <param name="epServiceProvider">
            is the engine instance that provided the administrative API that created the statement which produces the result
            </param>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputProcessViewCallback">
            <summary>Factory for output processing views. </summary>
        </member>
        <member name="M:com.espertech.esper.dataflow.util.DefaultSupportCaptureOp`1.WaitForInvocation(System.Int64,System.Int32)">
            <summary>Wait for the listener invocation for up to the given number of milliseconds. </summary>
            <param name="msecWait">to wait</param>
            <param name="numberOfNewEvents">in any number of separate invocations required before returning</param>
            <throws>RuntimeException when no results or insufficient number of events were received</throws>
        </member>
        <member name="T:com.espertech.esper.dataflow.util.LogicalChannel">
            <summary>Models a pipe between two operators. </summary>
        </member>
        <member name="T:com.espertech.esper.dispatch.DispatchService">
            <summary>
            Service for dispatching internally (for operators/views processing results of prior operators/views)
            and externally (dispatch events to UpdateListener implementations).
            <para>
            The service accepts Dispatchable implementations to its internal and external lists.
            When a client invokes dispatch the implementation first invokes all internal Dispatchable
            instances then all external Dispatchable instances. Dispatchables are invoked
            in the same order they are added. Any dispatchable added twice is dispatched once.
            </para>
            <para>
            Note: Each execution thread owns its own dispatch queue.
            </para>
            <para>
            Note: Dispatchs could result in further call to the dispatch service. This is because listener code
            that is invoked as a result of a dispatch may create patterns that fire as soon as they are Started
            resulting in further dispatches within the same thread. Thus the implementation class must be careful
            with the use of iterators to avoid ConcurrentModificationException errors.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.dispatch.DispatchService.AddExternal(com.espertech.esper.dispatch.Dispatchable)">
            <summary> Add a Dispatchable implementation.</summary>
            <param name="dispatchable">to execute later
            </param>
        </member>
        <member name="M:com.espertech.esper.dispatch.DispatchService.Dispatch">
            <summary> Execute all Dispatchable implementations added to the service since the last invocation of this method.</summary>
        </member>
        <member name="T:com.espertech.esper.dispatch.DispatchServiceImpl">
            <summary>
            Implements dispatch service using a thread-local linked list of Dispatchable instances.
            </summary>
        </member>
        <member name="M:com.espertech.esper.dispatch.DispatchServiceImpl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.dispatch.DispatchServiceImpl"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.dispatch.DispatchServiceImpl.Dispatch">
            <summary>
            Dispatches events in the queue.
            </summary>
        </member>
        <member name="M:com.espertech.esper.dispatch.DispatchServiceImpl.AddExternal(com.espertech.esper.dispatch.Dispatchable)">
            <summary>
            Add an item to be dispatched.  The item is added to
            the external dispatch queue.
            </summary>
            <param name="dispatchable">to execute later</param>
        </member>
        <member name="T:com.espertech.esper.dispatch.DispatchServiceProvider">
            <summary> Provider of implementations for the dispatch service.</summary>
        </member>
        <member name="M:com.espertech.esper.dispatch.DispatchServiceProvider.NewService">
            <summary> Returns new service.</summary>
            <returns> new dispatch service implementation.
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.agg.access.AggregationAccess">
            <summary>
            Base interface for providing access-aggregations, i.e. aggregations that mirror a data 
            window but group by the group-by clause and that do not mirror the data windows sorting
            policy.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.access.AggregationAccess.ApplyEnter(com.espertech.esper.client.EventBean[])">
            <summary>Enter an event. </summary>
            <param name="eventsPerStream">all events in all streams, typically implementations pick the relevant stream's events to add</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.access.AggregationAccess.ApplyLeave(com.espertech.esper.client.EventBean[])">
            <summary>Remove an event. </summary>
            <param name="eventsPerStream">all events in all streams, typically implementations pick the relevant stream's events to remove</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.access.AggregationAccess.GetFirstNthValue(System.Int32)">
            <summary>Counting from the first element to the last, returns the oldest (first) value entered for index zero and the n-th oldest value for index N. </summary>
            <param name="index">index</param>
            <returns>last value</returns>
        </member>
        <member name="M:com.espertech.esper.epl.agg.access.AggregationAccess.GetLastNthValue(System.Int32)">
            <summary>Counting from the last element to the first, returns the newest (last) value entered for index zero and the n-th newest value for index N. </summary>
            <param name="index">index</param>
            <returns>last value</returns>
        </member>
        <member name="M:com.espertech.esper.epl.agg.access.AggregationAccess.GetEnumerator">
            <summary>Returns all events for the group. </summary>
            <returns>group event iterator</returns>
        </member>
        <member name="M:com.espertech.esper.epl.agg.access.AggregationAccess.CollectionReadOnly">
            <summary>Returns all events for the group. </summary>
            <returns>group event iterator</returns>
        </member>
        <member name="M:com.espertech.esper.epl.agg.access.AggregationAccess.Clear">
            <summary>Clear all events in the group. </summary>
        </member>
        <member name="P:com.espertech.esper.epl.agg.access.AggregationAccess.FirstValue">
            <summary>Returns the first (oldest) value entered. </summary>
            <value>first value</value>
        </member>
        <member name="P:com.espertech.esper.epl.agg.access.AggregationAccess.LastValue">
            <summary>Returns the newest (last) value entered. </summary>
            <value>last value</value>
        </member>
        <member name="P:com.espertech.esper.epl.agg.access.AggregationAccess.Count">
            <summary>Returns the number of events in the group. </summary>
            <value>size</value>
        </member>
        <member name="T:com.espertech.esper.epl.agg.access.AggregationAccessImpl">
            <summary>
            Implementation of access function for single-stream (not joins).
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.access.AggregationAccessImpl.#ctor(System.Int32)">
            <summary>Ctor. </summary>
            <param name="streamId">stream id</param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.access.AggregationAccessJoinImpl">
            <summary>
            Implementation of access function for single-stream (not joins).
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.access.AggregationAccessJoinImpl.#ctor(System.Int32)">
            <summary>Ctor. </summary>
            <param name="streamId">stream id</param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.access.AggregationAccessor">
            <summary>
            Accessor for first/last/window access aggregation functions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.access.AggregationAccessor.GetValue(com.espertech.esper.epl.agg.access.AggregationAccess)">
            <summary>Returns the value for a first/last/window access aggregation function. </summary>
            <param name="access">access</param>
            <returns>value</returns>
        </member>
        <member name="T:com.espertech.esper.epl.agg.access.AggregationAccessorAll">
            <summary>
            Represents the aggregation accessor that provides the result for the "window" aggregation function.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.access.AggregationAccessorAll.#ctor(System.Int32,com.espertech.esper.epl.expression.ExprEvaluator,System.Type)">
            <summary>Ctor. </summary>
            <param name="streamNum">stream id</param>
            <param name="childNode">expression</param>
            <param name="componentType">type</param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.access.AggregationAccessorFirst">
            <summary>
            Represents the aggregation accessor that provides the result for the "first" aggregation function without index.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.access.AggregationAccessorFirst.#ctor(System.Int32,com.espertech.esper.epl.expression.ExprEvaluator)">
            <summary>Ctor. </summary>
            <param name="streamNum">stream id</param>
            <param name="childNode">expression</param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.access.AggregationAccessorFirstLastIndex">
            <summary>
            Represents the aggregation accessor that provides the result for 
            the "first" and "last" aggregation function with index.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.access.AggregationAccessorFirstLastIndex.#ctor(System.Int32,com.espertech.esper.epl.expression.ExprEvaluator,com.espertech.esper.epl.expression.ExprEvaluator,System.Int32,System.Boolean)">
            <summary>Ctor. </summary>
            <param name="streamNum">stream id</param>
            <param name="childNode">expression</param>
            <param name="indexNode">index expression</param>
            <param name="constant">constant index</param>
            <param name="isFirst">true if returning first, false for returning last</param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.access.AggregationAccessorLast">
            <summary>
            Represents the aggregation accessor that provides the result for the "last" aggregation function without index.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.access.AggregationAccessorLast.#ctor(System.Int32,com.espertech.esper.epl.expression.ExprEvaluator)">
            <summary>Ctor. </summary>
            <param name="streamNum">stream id</param>
            <param name="childNode">expression</param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.access.AggregationAccessorSlotPair">
            <summary>
            For handling access aggregation functions "first, last, window" a pair of slow and accessor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.access.AggregationAccessorSlotPair.#ctor(System.Int32,com.espertech.esper.epl.agg.access.AggregationAccessor)">
            <summary>Ctor. </summary>
            <param name="slot">number of accessor</param>
            <param name="accessor">accessor</param>
        </member>
        <member name="P:com.espertech.esper.epl.agg.access.AggregationAccessorSlotPair.Slot">
            <summary>Returns the slot. </summary>
            <value>slow</value>
        </member>
        <member name="P:com.espertech.esper.epl.agg.access.AggregationAccessorSlotPair.Accessor">
            <summary>Returns the accessor. </summary>
            <value>accessor</value>
        </member>
        <member name="T:com.espertech.esper.epl.agg.access.AggregationAccessType">
            <summary>Enum for aggregation access type. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.agg.access.AggregationAccessType.FIRST">
            <summary>For "first" function. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.agg.access.AggregationAccessType.LAST">
            <summary>For "last" function. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.agg.access.AggregationAccessType.WINDOW">
            <summary>For "window" function. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.access.AggregationAccessUtil">
            <summary>Utility for use with aggregation access functions. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.access.AggregationAccessUtil.GetNewAccesses(System.Int32,System.Boolean,System.Int32[],com.espertech.esper.epl.core.MethodResolutionService,System.Object)">
            <summary>Returns new accesses for each function. </summary>
            <param name="isJoin">true for joins</param>
            <param name="streams">stream numbers</param>
            <param name="methodResolutionService">service for obtaining accesses</param>
            <param name="groupKey">group by key</param>
            <returns>array of accessors</returns>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregationMethod">
            <summary>
            Maintains aggregation state applying values as entering and leaving the state.
            <para>
            Implementations must also act as a factory for further independent copies of aggregation 
            states such that new aggregation state holders and be created from a prototype.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.aggregator.AggregationMethod.Enter(System.Object)">
            <summary>
            Apply the value as entering aggregation (entering window). 
            <para>
            The value can be null since 'null' values may be counted as unique separate values.
            </para>
            </summary>
            <param name="value">to add to aggregate</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.aggregator.AggregationMethod.Leave(System.Object)">
            <summary>
            Apply the value as leaving aggregation (leaving window).
            <para>
            The value can be null since 'null' values may be counted as unique separate values.
            </para>
            </summary>
            <param name="value">to remove from aggregate</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.aggregator.AggregationMethod.Clear">
            <summary>Clear out the collection. </summary>
        </member>
        <member name="P:com.espertech.esper.epl.agg.aggregator.AggregationMethod.Value">
            <summary>Returns the current value held. </summary>
            <value>current value</value>
        </member>
        <member name="P:com.espertech.esper.epl.agg.aggregator.AggregationMethod.ValueType">
            <summary>Returns the type of the current value. </summary>
            <value>type of values held</value>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorAvedev">
            <summary>
            Standard deviation always generates double-types numbers.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.aggregator.AggregatorAvedev.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorAvedevFilter">
            <summary>
            Standard deviation always generates double-types numbers.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorAvg">
            <summary>
            Average that generates double-typed numbers.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorAvgDecimal">
            <summary>
            Average that generates a BigDecimal numbers.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.aggregator.AggregatorAvgDecimal.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorAvgDecimalFilter">
            <summary>
            Average that generates a BigDecimal numbers.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorAvgFilter">
            <summary>Average that generates double-typed numbers. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorCount">
            <summary>Counts all datapoints including null values. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorCountFilter">
            <summary>
            Counts all datapoints including null values.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorCountNonNull">
            <summary>Count all non-null values. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorCountNonNullFilter">
            <summary>
            Count all non-null values.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorDistinctValue">
            <summary>
            AggregationMethod for use on top of another aggregator that handles unique value 
            aggregation (versus all-value aggregation) for the underlying aggregator.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.aggregator.AggregatorDistinctValue.#ctor(com.espertech.esper.epl.agg.aggregator.AggregationMethod)">
            <summary>Ctor. </summary>
            <param name="inner">is the aggregator function computing aggregation values</param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorDistinctValueFilter">
            <summary>
            AggregationMethod for use on top of another aggregator that handles unique value 
            aggregation (versus all-value aggregation) for the underlying aggregator.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.aggregator.AggregatorDistinctValueFilter.#ctor(com.espertech.esper.epl.agg.aggregator.AggregationMethod)">
            <summary>Ctor. </summary>
            <param name="inner">is the aggregator function computing aggregation values</param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorFirstEver">
            <summary>
            Aggregator for the very first value.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.aggregator.AggregatorFirstEver.#ctor(System.Type)">
            <summary>Ctor. </summary>
            <param name="type">type of value returned</param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorFirstEverFilter">
            <summary>
            Aggregator for the very first value.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorLastEver">
            <summary>
            Aggregator for the very last value.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.aggregator.AggregatorLastEver.#ctor(System.Type)">
            <summary>Ctor. </summary>
            <param name="type">of result</param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorLastEverFilter">
            <summary>
            Aggregator for the very last value.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorLeaving">
            <summary>
            For testing if a remove stream entry has been present.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorMedian">
            <summary>Median aggregation. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.aggregator.AggregatorMedian.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorMedianFilter">
            <summary>Median aggregation. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorMinMax">
            <summary>Min/max aggregator for all values. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.aggregator.AggregatorMinMax.#ctor(com.espertech.esper.type.MinMaxTypeEnum,System.Type)">
            <summary>Ctor.  </summary>
            <param name="minMaxTypeEnum">enum indicating to return minimum or maximum values</param>
            <param name="returnType">is the value type returned by aggregator</param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorMinMaxEver">
            <summary>
            Min/max aggregator for all values, not considering events leaving the aggregation (i.e. ever).
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.aggregator.AggregatorMinMaxEver.#ctor(com.espertech.esper.type.MinMaxTypeEnum,System.Type)">
            <summary>Ctor.  </summary>
            <param name="minMaxTypeEnum">enum indicating to return minimum or maximum values</param>
            <param name="returnType">is the value type returned by aggregator</param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorMinMaxEverFilter">
            <summary>
            Min/max aggregator for all values, not considering events leaving the aggregation (i.e. ever).
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorMinMaxFilter">
            <summary>Min/max aggregator for all values. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorNth">
            <summary>
            Aggregator to return the Nth oldest element to enter, with N=1 the most recent value 
            is returned. If N is larger than the enter minus leave size, null is returned. A maximum 
            N historical values are stored, so it can be safely used to compare recent values in 
            large views without incurring excessive overhead.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.aggregator.AggregatorNth.#ctor(System.Type,System.Int32)">
            <summary>Ctor. </summary>
            <param name="returnType">return type</param>
            <param name="sizeBuf">size</param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorRate">
            <summary>
            Aggregation computing an event arrival rate for data windowed-events.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorRateEver">
            <summary>
            Aggregation computing an event arrival rate for with and without data window.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.aggregator.AggregatorRateEver.#ctor(System.Int64,com.espertech.esper.schedule.TimeProvider)">
            <summary>Ctor. </summary>
            <param name="interval">rate interval</param>
            <param name="timeProvider">time</param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorStddev">
            <summary>Standard deviation always generates double-typed numbers. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorStddevFilter">
            <summary>
            Standard deviation always generates double-typed numbers.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorSumDecimal">
            <summary>Sum for Bigint? values. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.aggregator.AggregatorSumDecimal.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorSumDecimalFilter">
            <summary>Sum for Bigint? values. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorSumDouble">
            <summary>
            Sum for double values.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorSumDoubleFilter">
            <summary>Sum for double values. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorSumFloat">
            <summary>
            Sum for float values.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorSumFloatFilter">
            <summary>Sum for float values. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorSumInteger">
            <summary>
            Sum for integer values.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorSumIntegerFilter">
            <summary>Sum for integer values. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorSumLong">
            <summary>
            Sum for long values.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorSumLongFilter">
            <summary>Sum for long values. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorSumNumInteger">
            <summary>
            Sum for any number value.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.aggregator.AggregatorSumNumIntegerFilter">
            <summary>Sum for any number value. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggregationMethodFactory">
            <summary>Factory for aggregation methods. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggregationMethodPairRow">
            <summary>A row in aggregation state. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggregationMethodPairRow.#ctor(System.Int64,com.espertech.esper.epl.agg.aggregator.AggregationMethod[],com.espertech.esper.epl.agg.access.AggregationAccess[])">
            <summary>Ctor. </summary>
            <param name="refcount">number of items in state</param>
            <param name="methods">aggregations</param>
            <param name="accesses">for first/last/window type access</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggregationMethodPairRow.IncreaseRefcount">
            <summary>Increase number of data points by one. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggregationMethodPairRow.DecreaseRefcount">
            <summary>Decrease number of data points by one. </summary>
        </member>
        <member name="P:com.espertech.esper.epl.agg.service.AggregationMethodPairRow.Refcount">
            <summary>Returns number of data points. </summary>
            <value>data points</value>
        </member>
        <member name="P:com.espertech.esper.epl.agg.service.AggregationMethodPairRow.Methods">
            <summary>Returns aggregation state. </summary>
            <value>state</value>
        </member>
        <member name="P:com.espertech.esper.epl.agg.service.AggregationMethodPairRow.Accesses">
            <summary>Returns the accesses for first/last/window aggregation functions. </summary>
            <value>accesses</value>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggregationMethodRow">
            <summary>A row in aggregation state. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggregationMethodRow.#ctor(System.Int64,com.espertech.esper.epl.agg.aggregator.AggregationMethod[])">
            <summary>Ctor. </summary>
            <param name="refcount">number of items in state</param>
            <param name="methods">aggregations</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggregationMethodRow.IncreaseRefcount">
            <summary>Increase number of data points by one. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggregationMethodRow.DecreaseRefcount">
            <summary>Decrease number of data points by one. </summary>
        </member>
        <member name="P:com.espertech.esper.epl.agg.service.AggregationMethodRow.Refcount">
            <summary>Returns number of data points. </summary>
            <value>data points</value>
        </member>
        <member name="P:com.espertech.esper.epl.agg.service.AggregationMethodRow.Methods">
            <summary>Returns aggregation state. </summary>
            <value>state</value>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggregationMethodRowAged">
            <summary>
            A row in aggregation state, with aging information.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggregationMethodRowAged.#ctor(System.Int64,System.Int64,com.espertech.esper.epl.agg.aggregator.AggregationMethod[],com.espertech.esper.epl.agg.access.AggregationAccess[])">
            <summary>Ctor. </summary>
            <param name="lastUpdateTime">time of creation</param>
            <param name="refcount">number of items in state</param>
            <param name="methods">aggregations</param>
            <param name="accesses">for first/last/window type access</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggregationMethodRowAged.IncreaseRefcount">
            <summary>Increase number of data points by one. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggregationMethodRowAged.DecreaseRefcount">
            <summary>Decrease number of data points by one. </summary>
        </member>
        <member name="P:com.espertech.esper.epl.agg.service.AggregationMethodRowAged.Refcount">
            <summary>Returns number of data points. </summary>
            <value>data points</value>
        </member>
        <member name="P:com.espertech.esper.epl.agg.service.AggregationMethodRowAged.Methods">
            <summary>Returns aggregation state. </summary>
            <value>state</value>
        </member>
        <member name="P:com.espertech.esper.epl.agg.service.AggregationMethodRowAged.LastUpdateTime">
            <summary>Set last update time. </summary>
            <value>time</value>
        </member>
        <member name="P:com.espertech.esper.epl.agg.service.AggregationMethodRowAged.Accesses">
            <summary>Returns the accesses for first/last/window aggregation functions. </summary>
            <value>accesses</value>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggregationRowPair">
            <summary>
            Pair of aggregation methods and accesses (first/last/window) data window representations.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggregationRowPair.#ctor(com.espertech.esper.epl.agg.aggregator.AggregationMethod[],com.espertech.esper.epl.agg.access.AggregationAccess[])">
            <summary>Ctor. </summary>
            <param name="methods">aggregation methods/state</param>
            <param name="accesses">access is data window representations</param>
        </member>
        <member name="P:com.espertech.esper.epl.agg.service.AggregationRowPair.Methods">
            <summary>Returns aggregation methods. </summary>
            <value>aggregation methods</value>
        </member>
        <member name="P:com.espertech.esper.epl.agg.service.AggregationRowPair.Accesses">
            <summary>Returns accesses to data window state. </summary>
            <value>accesses</value>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggregationServiceAggExpressionDesc.#ctor(com.espertech.esper.epl.expression.ExprAggregateNode,com.espertech.esper.epl.agg.service.AggregationMethodFactory)">
            <summary>Ctor. </summary>
            <param name="aggregationNode">expression</param>
            <param name="factory">method factory</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggregationServiceAggExpressionDesc.AddEquivalent(com.espertech.esper.epl.expression.ExprAggregateNode)">
            <summary>Add an equivalent aggregation function node </summary>
            <param name="aggNodeToAdd">node to add</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggregationServiceAggExpressionDesc.AssignFuture(com.espertech.esper.epl.agg.service.AggregationResultFuture)">
            <summary>Assigns a future to the expression </summary>
            <param name="service">the future</param>
        </member>
        <member name="P:com.espertech.esper.epl.agg.service.AggregationServiceAggExpressionDesc.EquivalentNodes">
            <summary>Returns the equivalent aggregation functions. </summary>
            <value>list of agg nodes</value>
        </member>
        <member name="P:com.espertech.esper.epl.agg.service.AggregationServiceAggExpressionDesc.AggregationNode">
            <summary>Returns the expression. </summary>
            <value>expression</value>
        </member>
        <member name="P:com.espertech.esper.epl.agg.service.AggregationServiceAggExpressionDesc.Factory">
            <summary>Returns the method factory. </summary>
            <value>factory</value>
        </member>
        <member name="P:com.espertech.esper.epl.agg.service.AggregationServiceAggExpressionDesc.ColumnNum">
            <summary>Returns the column number assigned. </summary>
            <value>column number</value>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggregationServiceBase">
            <summary>
            All aggregation services require evaluation nodes which supply the value to be 
            aggregated (summed, averaged, etc.) and aggregation state factories to make new 
            aggregation states.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggregationServiceBase.#ctor(com.espertech.esper.epl.expression.ExprEvaluator[])">
            <summary>Ctor. </summary>
            <param name="evaluators">are the child node of each aggregation function used for computing the value to be aggregated</param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggregationServiceBaseGrouped">
            <summary>
            All aggregation services require evaluation nodes which supply the value to be
            aggregated (summed, averaged, etc.) and aggregation state factories to make new
            aggregation states.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggregationServiceBaseGrouped.#ctor(com.espertech.esper.epl.expression.ExprEvaluator[],com.espertech.esper.epl.agg.service.AggregationMethodFactory[])">
            <summary>Ctor. </summary>
            <param name="evaluators">are the child node of each aggregation function used for computing the value to be aggregated</param>
            <param name="aggregators">aggregation states/factories</param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggregationServiceBaseUngrouped">
            <summary>
            All aggregation services require evaluation nodes which supply the value to be 
            aggregated (summed, averaged, etc.) and aggregation state factories to make new
            aggregation states.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.agg.service.AggregationServiceBaseUngrouped.Evaluators">
            <summary>Evaluation nodes under. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.agg.service.AggregationServiceBaseUngrouped.Aggregators">
            <summary>Aggregation states. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggregationServiceBaseUngrouped.#ctor(com.espertech.esper.epl.expression.ExprEvaluator[],com.espertech.esper.epl.agg.aggregator.AggregationMethod[])">
            <summary>Ctor. </summary>
            <param name="evaluators">are the child node of each aggregation function used for computing the value to be aggregated</param>
            <param name="aggregators">aggregation states/factories</param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggregationServiceFactory">
            <summary>
            Factory for aggregation service instances.
            <para>
            Consolidates aggregation nodes such that result futures point to a single instance 
            and no re-evaluation of the same result occurs.
            </para>
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggregationServiceFactoryBase">
            <summary>
            All aggregation services require evaluation nodes which supply the value to be aggregated 
            (summed, averaged, etc.) and aggregation state factories to make new aggregation states.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.agg.service.AggregationServiceFactoryBase.Evaluators">
            <summary>Evaluation nodes under. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.agg.service.AggregationServiceFactoryBase.Aggregators">
            <summary>Prototype aggregation states and factories. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggregationServiceFactoryBase.#ctor(com.espertech.esper.epl.expression.ExprEvaluator[],com.espertech.esper.epl.agg.service.AggregationMethodFactory[])">
            <summary>Ctor. </summary>
            <param name="evaluators">are the child node of each aggregation function used for computing the value to be aggregated</param>
            <param name="aggregators">aggregation states/factories</param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggregationServiceFactoryFactory">
            <summary>
            Factory for aggregation service instances.
            <para>
            Consolidates aggregation nodes such that result futures point to a single instance and no re-evaluation of the same result occurs.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggregationServiceFactoryFactory.GetServiceMatchRecognize(System.Int32,System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprAggregateNode}},com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Produces an aggregation service for use with match-recognice.  </summary>
            <param name="numStreams">number of streams</param>
            <param name="measureExprNodesPerStream">measure nodes</param>
            <param name="exprEvaluatorContext">context for expression evaluatiom</param>
            <returns>service</returns>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggregationServiceFactoryFactory.GetService(System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprAggregateNode},System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprAggregateNode},System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprAggregateNode},System.Boolean,com.espertech.esper.epl.expression.ExprEvaluatorContext,System.Attribute[],com.espertech.esper.epl.variable.VariableService,System.Boolean,com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.epl.agg.service.AggregationServiceFactoryService,com.espertech.esper.client.EventType[])">
            <summary>Returns an instance to handle the aggregation required by the aggregation expression nodes, depending on whether there are any group-by nodes.   </summary>
            <param name="selectAggregateExprNodes">aggregation nodes extracted out of the select expression</param>
            <param name="havingAggregateExprNodes">aggregation nodes extracted out of the select expression</param>
            <param name="orderByAggregateExprNodes">aggregation nodes extracted out of the select expression</param>
            <param name="hasGroupByClause">indicator on whethere there is group-by required, or group-all</param>
            <param name="exprEvaluatorContext">context for expression evaluatiom</param>
            <param name="annotations">statement annotations</param>
            <param name="variableService">variable</param>
            <param name="isJoin">true for joins</param>
            <param name="whereClause">the where-clause function if any</param>
            <param name="havingClause">the having-clause function if any</param>
            <returns>instance for aggregation handling</returns>
            <throws>com.espertech.esper.epl.expression.ExprValidationException if validation fails</throws>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggregationServiceMatchRecognize">
            <summary>Aggregation result future for use with match recognize. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggregationServiceMatchRecognize.ApplyEnter(com.espertech.esper.client.EventBean[],System.Int32,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Enter a single event row consisting of one or more events per stream (each stream representing a variable). </summary>
            <param name="eventsPerStream">events per stream</param>
            <param name="streamId">variable number that is the base</param>
            <param name="exprEvaluatorContext">context for expression evaluatiom</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggregationServiceMatchRecognize.ClearResults">
            <summary>Clear current aggregation state. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggregationServiceMatchRecognizeFactory">
            <summary>
            Factory for aggregation service instances.
            <para />
            Consolidates aggregation nodes such that result futures point to a single instance
            and no re-evaluation of the same result occurs.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggregationServiceMatchRecognizeFactoryImpl">
            <summary>
            Implements an aggregation service for match recognize.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggregationServiceMatchRecognizeFactoryImpl.#ctor(System.Int32,System.Collections.Generic.IDictionary{System.Int32,com.espertech.esper.epl.agg.service.AggregationMethodFactory[]},System.Collections.Generic.IDictionary{System.Int32,com.espertech.esper.epl.expression.ExprEvaluator[]})">
            <summary>Ctor. </summary>
            <param name="countStreams">number of streams/variables</param>
            <param name="aggregatorsPerStream">aggregation methods per stream</param>
            <param name="evaluatorsPerStream">evaluation functions per stream</param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggregationServiceMatchRecognizeImpl">
            <summary>Implements an aggregation service for match recognize. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggregationServiceNull">
            <summary>
            A null object implementation of the AggregationService interface.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggregationServiceNullFactory">
            <summary>
            A null object implementation of the AggregationService interface.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggregationSpec">
            <summary>
            Wrapper for an aggregation spec consisting of a stream number.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggregationSpec.#ctor(System.Int32)">
            <summary>Ctor. </summary>
            <param name="streamNum">stream number</param>
        </member>
        <member name="P:com.espertech.esper.epl.agg.service.AggregationSpec.StreamNum">
            <summary>Returns stream number. </summary>
            <value>stream number</value>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggregationSupport">
            <summary>Base class for use with plug-in aggregation functions. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggregationSupport.Validate(com.espertech.esper.epl.agg.service.AggregationValidationContext)">
            <summary>
            Implemented by plug-in aggregation functions to allow such functions to validate the 
            type of values passed to the function at statement compile time and to generally 
            interrogate parameter expressions.
            </summary>
            <param name="validationContext">expression information</param>
        </member>
        <member name="P:com.espertech.esper.epl.agg.service.AggregationSupport.FunctionName">
            <summary>Returns the name of the aggregation function. </summary>
            <value>aggregation function name</value>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggregationValidationContext">
            <summary>
            Context for use with plug-in custom aggregation functions that implement
            <seealso cref="T:com.espertech.esper.epl.agg.service.AggregationSupport"/>.
            <para/>
            This context object provides access to the parameter expressions themselves as 
            well as information compiled from the parameter expressions for your convenience.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggregationValidationContext.#ctor(System.Type[],System.Boolean[],System.Object[],System.Boolean,System.Boolean,com.espertech.esper.epl.expression.ExprNode[])">
            <summary>Ctor. </summary>
            <param name="parameterTypes">the type of each parameter expression.</param>
            <param name="constantValue">for each parameter expression an indicator whether the expression returns a constant result</param>
            <param name="constantValues">for each parameter expression that returns a constant result this array contains the constant value</param>
            <param name="distinct">true if 'distinct' keyword was provided</param>
            <param name="windowed">true if all event properties references by parameter expressions are from streams that have data windows declared onto the stream or are from named windows</param>
            <param name="expressions">the parameter expressions themselves</param>
        </member>
        <member name="P:com.espertech.esper.epl.agg.service.AggregationValidationContext.ParameterTypes">
            <summary>The return type of each parameter expression. <para />This information can also be obtained by calling getType on each parameter expression. </summary>
            <value>array providing result type of each parameter expression</value>
        </member>
        <member name="P:com.espertech.esper.epl.agg.service.AggregationValidationContext.IsConstantValue">
            <summary>A bool indicator for each parameter expression that is true if the expression returns a constant result or false if the expression result is not a constant value. <para />This information can also be obtained by calling isConstantResult on each parameter expression. </summary>
            <value>array providing an indicator per parameter expression that the result is a constant value</value>
        </member>
        <member name="P:com.espertech.esper.epl.agg.service.AggregationValidationContext.ConstantValues">
            <summary>If a parameter expression returns a constant value, the value of the constant it returns is provided in this array. <para />This information can also be obtained by calling evaluate on each parameter expression providing a constant value. </summary>
            <value>array providing the constant return value per parameter expression that has constant result value, or nullif a parameter expression is deemded to not provide a constant result value </value>
        </member>
        <member name="P:com.espertech.esper.epl.agg.service.AggregationValidationContext.IsDistinct">
            <summary>Returns true to indicate that the 'distinct' keyword was specified for this aggregation function. </summary>
            <value>distinct value indicator</value>
        </member>
        <member name="P:com.espertech.esper.epl.agg.service.AggregationValidationContext.IsWindowed">
            <summary>Returns true to indicate that all parameter expressions return event properties that originate from a stream that provides a remove stream. </summary>
            <value>windowed indicator</value>
        </member>
        <member name="P:com.espertech.esper.epl.agg.service.AggregationValidationContext.Expressions">
            <summary>Returns the parameter expressions themselves for interrogation. </summary>
            <value>parameter expressions</value>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggSvcGroupAllAccessOnlyFactory">
            <summary>
            Aggregation service for use when only first/last/window aggregation functions are used an none other.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggSvcGroupAllAccessOnlyImpl">
            <summary>
            Aggregation service for use when only first/last/window aggregation functions are used an none other.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggSvcGroupAllMixedAccessFactory">
            <summary>
            Implementation for handling aggregation without any grouping (no group-by).
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggSvcGroupAllMixedAccessImpl">
            <summary>
            Implementation for handling aggregation without any grouping (no group-by).
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggSvcGroupAllNoAccessFactory">
            <summary>Implementation for handling aggregation without any grouping (no group-by). </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggSvcGroupAllNoAccessImpl">
            <summary>
            Implementation for handling aggregation without any grouping (no group-by).
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggSvcGroupAllNoAccessImpl.#ctor(com.espertech.esper.epl.expression.ExprEvaluator[],com.espertech.esper.epl.agg.aggregator.AggregationMethod[])">
            <summary>Ctor. </summary>
            <param name="evaluators">evaluate the sub-expression within the aggregate function (ie. sum(4*myNum))</param>
            <param name="aggregators">collect the aggregation state that evaluators evaluate to</param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggSvcGroupByAccessOnlyFactory">
            <summary>Aggregation service for use when only first/last/window aggregation functions are used an none other. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggSvcGroupByAccessOnlyFactory.#ctor(com.espertech.esper.epl.agg.access.AggregationAccessorSlotPair[],System.Int32[],System.Boolean)">
            <summary>Ctor. </summary>
            <param name="accessors">accessor definitions</param>
            <param name="streams">streams in join</param>
            <param name="isJoin">true for join, false for single-stream</param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggSvcGroupByAccessOnlyImpl">
            <summary>
            Aggregation service for use when only first/last/window aggregation functions are used an none other.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggSvcGroupByAccessOnlyImpl.#ctor(com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.agg.access.AggregationAccessorSlotPair[],System.Int32[],System.Boolean)">
            <summary>Ctor. </summary>
            <param name="methodResolutionService">factory service for implementations</param>
            <param name="accessors">accessor definitions</param>
            <param name="streams">streams in join</param>
            <param name="isJoin">true for join, false for single-stream</param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggSvcGroupByExperimental">
            <summary>Implementation for handling aggregation with grouping by group-keys. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggSvcGroupByExperimental.#ctor(com.espertech.esper.epl.expression.ExprEvaluator[],com.espertech.esper.epl.agg.service.AggregationMethodFactory[],com.espertech.esper.epl.core.MethodResolutionService)">
            <summary>Ctor. </summary>
            <param name="evaluators">evaluate the sub-expression within the aggregate function (ie. Sum(4*myNum))</param>
            <param name="prototypes">collect the aggregation state that evaluators evaluate to, act as prototypes for new aggregationsaggregation states for each group </param>
            <param name="methodResolutionService">factory for creating additional aggregation method instances per group key</param>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggSvcGroupByExperimentalFactory.#ctor(com.espertech.esper.epl.expression.ExprEvaluator[],com.espertech.esper.epl.agg.service.AggregationMethodFactory[])">
            <summary>
            Ctor.
            </summary>
            <param name="evaluators">evaluate the sub-expression within the aggregate function (ie. Sum(4*myNum))</param>
            <param name="prototypes">collect the aggregation state that evaluators evaluate to, act as prototypes for new aggregation states for each group</param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggSvcGroupByMixedAccessFactory">
            <summary>
            Implementation for handling aggregation with grouping by group-keys.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggSvcGroupByMixedAccessFactory.#ctor(com.espertech.esper.epl.expression.ExprEvaluator[],com.espertech.esper.epl.agg.service.AggregationMethodFactory[],com.espertech.esper.epl.agg.access.AggregationAccessorSlotPair[],System.Int32[],System.Boolean)">
            <summary>Ctor. </summary>
            <param name="evaluators">evaluate the sub-expression within the aggregate function (ie. Sum(4*myNum))</param>
            <param name="prototypes">collect the aggregation state that evaluators evaluate to, act as prototypes for new aggregationsaggregation states for each group </param>
            <param name="accessors">accessor definitions</param>
            <param name="streams">streams in join</param>
            <param name="isJoin">true for join, false for single-stream</param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggSvcGroupByMixedAccessImpl">
            <summary>
            Implementation for handling aggregation with grouping by group-keys.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggSvcGroupByMixedAccessImpl.#ctor(com.espertech.esper.epl.expression.ExprEvaluator[],com.espertech.esper.epl.agg.service.AggregationMethodFactory[],com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.agg.access.AggregationAccessorSlotPair[],System.Int32[],System.Boolean)">
            <summary>Ctor. </summary>
            <param name="evaluators">evaluate the sub-expression within the aggregate function (ie. Sum(4*myNum))</param>
            <param name="prototypes">collect the aggregation state that evaluators evaluate to, act as prototypes for new aggregationsaggregation states for each group </param>
            <param name="methodResolutionService">factory for creating additional aggregation method instances per group key</param>
            <param name="accessorsFactory">accessor definitions</param>
            <param name="streams">streams in join</param>
            <param name="isJoin">true for join, false for single-stream</param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggSvcGroupByNoAccessFactory">
            <summary>Implementation for handling aggregation with grouping by group-keys. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggSvcGroupByNoAccessFactory.#ctor(com.espertech.esper.epl.expression.ExprEvaluator[],com.espertech.esper.epl.agg.service.AggregationMethodFactory[])">
            <summary>
            Ctor.
            </summary>
            <param name="evaluators">evaluate the sub-expression within the aggregate function (ie. sum(4*myNum))</param>
            <param name="prototypes">collect the aggregation state that evaluators evaluate to, act as prototypes for new aggregationsaggregation states for each group</param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggSvcGroupByNoAccessImpl">
            <summary>
            Implementation for handling aggregation with grouping by group-keys.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggSvcGroupByNoAccessImpl.#ctor(com.espertech.esper.epl.expression.ExprEvaluator[],com.espertech.esper.epl.agg.service.AggregationMethodFactory[],com.espertech.esper.epl.core.MethodResolutionService)">
            <summary>Ctor. </summary>
            <param name="evaluators">evaluate the sub-expression within the aggregate function (ie. Sum(4*myNum))</param>
            <param name="prototypes">collect the aggregation state that evaluators evaluate to, act as prototypes for new aggregationsaggregation states for each group </param>
            <param name="methodResolutionService">factory for creating additional aggregation method instances per group key</param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggSvcGroupByReclaimAgedEvalFunc">
            <summary>
            Implementation for handling aggregation with grouping by group-keys.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggSvcGroupByReclaimAgedEvalFuncConstant">
            <summary>
            Implementation for handling aggregation with grouping by group-keys.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggSvcGroupByReclaimAgedEvalFuncVariable">
            <summary>
            Implementation for handling aggregation with grouping by group-keys.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggSvcGroupByReclaimAgedFactory">
            <summary>
            Implementation for handling aggregation with grouping by group-keys.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggSvcGroupByReclaimAgedFactory.#ctor(com.espertech.esper.epl.expression.ExprEvaluator[],com.espertech.esper.epl.agg.service.AggregationMethodFactory[],com.espertech.esper.client.annotation.HintAttribute,com.espertech.esper.client.annotation.HintAttribute,com.espertech.esper.epl.variable.VariableService,com.espertech.esper.epl.agg.access.AggregationAccessorSlotPair[],System.Int32[],System.Boolean)">
            <summary>Ctor. </summary>
            <param name="evaluators">evaluate the sub-expression within the aggregate function (ie. Sum(4*myNum))</param>
            <param name="prototypes">collect the aggregation state that evaluators evaluate to, act as prototypes for new aggregationsaggregation states for each group </param>
            <param name="reclaimGroupAged">hint to reclaim</param>
            <param name="reclaimGroupFrequency">hint to reclaim</param>
            <param name="variableService">variables</param>
            <param name="accessors">accessor definitions</param>
            <param name="streams">streams in join</param>
            <param name="isJoin">true for join, false for single-stream</param>
            <throws>com.espertech.esper.epl.expression.ExprValidationException when validation fails</throws>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggSvcGroupByReclaimAgedImpl">
            <summary>
            Implementation for handling aggregation with grouping by group-keys.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggSvcGroupByRefcountedNoAccessFactory">
            <summary>Implementation for handling aggregation with grouping by group-keys. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggSvcGroupByRefcountedNoAccessFactory.#ctor(com.espertech.esper.epl.expression.ExprEvaluator[],com.espertech.esper.epl.agg.service.AggregationMethodFactory[])">
            <summary>Ctor. </summary>
            <param name="evaluators">evaluate the sub-expression within the aggregate function (ie. Sum(4*myNum))</param>
            <param name="prototypes">collect the aggregation state that evaluators evaluate to, act as prototypes for new aggregationsaggregation states for each group </param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggSvcGroupByRefcountedNoAccessImpl">
            <summary>
            Implementation for handling aggregation with grouping by group-keys.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggSvcGroupByRefcountedNoAccessImpl.#ctor(com.espertech.esper.epl.expression.ExprEvaluator[],com.espertech.esper.epl.agg.service.AggregationMethodFactory[],com.espertech.esper.epl.core.MethodResolutionService)">
            <summary>Ctor. </summary>
            <param name="evaluators">evaluate the sub-expression within the aggregate function (ie. Sum(4*myNum))</param>
            <param name="prototypes">collect the aggregation state that evaluators evaluate to, act as prototypes for new aggregationsaggregation states for each group </param>
            <param name="methodResolutionService">factory for creating additional aggregation method instances per group key</param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggSvcGroupByRefcountedWAccessFactory">
            <summary>
            Implementation for handling aggregation with grouping by group-keys.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggSvcGroupByRefcountedWAccessFactory.#ctor(com.espertech.esper.epl.expression.ExprEvaluator[],com.espertech.esper.epl.agg.service.AggregationMethodFactory[],com.espertech.esper.epl.agg.access.AggregationAccessorSlotPair[],System.Int32[],System.Boolean)">
            <summary>Ctor. </summary>
            <param name="evaluators">evaluate the sub-expression within the aggregate function (ie. Sum(4*myNum))</param>
            <param name="prototypes">collect the aggregation state that evaluators evaluate to, act as prototypes for new aggregationsaggregation states for each group </param>
            <param name="accessors">accessor definitions</param>
            <param name="streams">streams in join</param>
            <param name="isJoin">true for join, false for single-stream</param>
        </member>
        <member name="T:com.espertech.esper.epl.agg.service.AggSvcGroupByRefcountedWAccessImpl">
            <summary>
            Implementation for handling aggregation with grouping by group-keys.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.agg.service.AggSvcGroupByRefcountedWAccessImpl.#ctor(com.espertech.esper.epl.expression.ExprEvaluator[],com.espertech.esper.epl.agg.service.AggregationMethodFactory[],com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.agg.access.AggregationAccessorSlotPair[],System.Int32[],System.Boolean)">
            <summary>Ctor. </summary>
            <param name="evaluators">evaluate the sub-expression within the aggregate function (ie. Sum(4*myNum))</param>
            <param name="prototypes">collect the aggregation state that evaluators evaluate to, act as prototypes for new aggregationsaggregation states for each group </param>
            <param name="methodResolutionService">factory for creating additional aggregation method instances per group key</param>
            <param name="accessors">accessor definitions</param>
            <param name="streams">streams in join</param>
            <param name="isJoin">true for join, false for single-stream</param>
        </member>
        <member name="T:com.espertech.esper.epl.annotation.AnnotationAttribute">
            <summary>Represents a attribute of an annotation. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.annotation.AnnotationAttribute.#ctor(System.String,System.Type,System.Object)">
            <summary>Ctor. </summary>
            <param name="name">name of attribute</param>
            <param name="type">attribute type</param>
            <param name="defaultValue">default value, if any is specified</param>
        </member>
        <member name="P:com.espertech.esper.epl.annotation.AnnotationAttribute.Name">
            <summary>Returns attribute name. </summary>
            <value>attribute name</value>
        </member>
        <member name="P:com.espertech.esper.epl.annotation.AnnotationAttribute.AnnotationType">
            <summary>Returns attribute type. </summary>
            <value>attribute type</value>
        </member>
        <member name="P:com.espertech.esper.epl.annotation.AnnotationAttribute.DefaultValue">
            <summary>Returns default value of annotation. </summary>
            <value>default value</value>
        </member>
        <member name="T:com.espertech.esper.epl.annotation.AttributeException">
            <summary>
            Thrown to indicate a problem processing an EPL statement annotation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.annotation.AttributeException.#ctor(System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="T:com.espertech.esper.epl.annotation.AnnotationUtil">
            <summary>
            Utility to handle EPL statement annotations.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.annotation.AnnotationUtil.CompileAnnotations(System.Collections.Generic.IList{com.espertech.esper.epl.spec.AttributeDesc},com.espertech.esper.epl.core.EngineImportService,System.String)">
            <summary>
            Compile annotation objects from descriptors.
            </summary>
            <param name="annotationSpec">spec for annotations</param>
            <param name="engineImportService">engine imports</param>
            <param name="eplStatement">statement expression</param>
            <returns>
            annotations
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.annotation.AnnotationUtil.CompileAnnotations(System.Collections.Generic.IList{com.espertech.esper.epl.spec.AttributeDesc},com.espertech.esper.epl.core.EngineImportService)">
            <summary>
            Compiles attributes / annotations to an array.
            </summary>
            <param name="desc">a list of descriptors</param>
            <param name="engineImportService">for resolving the annotation/attribute class</param>
            <returns>
            attributes / annotations or empty array if none
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.annotation.AnnotationUtil.ResolveAttributeType(com.espertech.esper.epl.spec.AttributeDesc,com.espertech.esper.epl.core.EngineImportService)">
            <summary>
            Resolves the type of the attribute.
            </summary>
            <param name="desc">The desc.</param>
            <param name="engineImportService">The engine import service.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.annotation.AnnotationUtil.CompileAnnotation(com.espertech.esper.epl.spec.AttributeDesc,com.espertech.esper.epl.core.EngineImportService)">
            <summary>
            Compiles the attribute.
            </summary>
            <param name="desc">The desc.</param>
            <param name="engineImportService">The engine import service.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.annotation.AnnotationUtil.CheckTypeMismatch(System.String,System.Type,System.String,System.Object)">
            <summary>
            Checks the property type for a type mismatch.
            </summary>
            <param name="attributeTypeName">Name of the attribute type.</param>
            <param name="magicPropertyType">Type of the magic property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyValue">The property value.</param>
        </member>
        <member name="M:com.espertech.esper.epl.annotation.AnnotationUtil.CheckArray(System.String,com.espertech.esper.compat.magic.MagicPropertyInfo,System.String,System.Object)">
            <summary>
            Checks the property type for array semantics.
            </summary>
            <param name="attributeTypeName">Name of the attribute type.</param>
            <param name="propertyInfo">The property info.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyValue">The property value.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.annotation.AnnotationUtil.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value.
            </summary>
            <param name="t">The t.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.epl.core.BindProcessor">
            <summary>
            Works in conjunction with <see cref="T:com.espertech.esper.epl.core.SelectExprResultProcessor"/> to present a
            result as an object array for 'natural' delivery.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.BindProcessor.#ctor(System.Collections.Generic.IEnumerable{com.espertech.esper.epl.spec.SelectClauseElementCompiled},com.espertech.esper.client.EventType[],System.String[])">
            <summary>Ctor. </summary>
            <param name="selectionList">the select clause</param>
            <param name="typesPerStream">the event types per stream</param>
            <param name="streamNames">the stream names</param>
            <throws>ExprValidationException when the validation of the select clause failed</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.BindProcessor.Process(com.espertech.esper.client.EventBean[],System.Boolean,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Process select expressions into columns for native dispatch.
            </summary>
            <param name="eventsPerStream">each stream's events</param>
            <param name="isNewData">true for new events</param>
            <param name="exprEvaluatorContext">The expression evaluation context.</param>
            <returns>object array with select-clause results</returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.BindProcessor.ExpressionTypes">
            <summary>Returns the expression types generated by the select-clause expressions. </summary>
            <returns>types</returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.BindProcessor.ColumnNamesAssigned">
            <summary>Returns the column names of select-clause expressions. </summary>
            <returns>column names</returns>
        </member>
        <member name="T:com.espertech.esper.epl.core.ColumnNamedNodeSwapper">
            <summary>A utility class for replacing select-clause column names with their definitions in expression node trees. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ColumnNamedNodeSwapper.Swap(com.espertech.esper.epl.expression.ExprNode,System.String,com.espertech.esper.epl.expression.ExprNode)">
            <summary>Replace all instances of the node representing the colum name with the full expression. </summary>
            <param name="exprTree">the expression node tree to make the changes in</param>
            <param name="columnName">the select-clause name that is to be expanded</param>
            <param name="fullExpr">the full expression that the column name represents</param>
            <returns>exprTree with the appropriate swaps performed, or fullExpr,if all of exprTree needed to be swapped </returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ColumnNamedNodeSwapper.VisitChildren(com.espertech.esper.epl.expression.ExprNode,System.String,com.espertech.esper.epl.expression.ExprNode)">
            <summary>A recursive function that works on the child nodes of a given node, replacing any instances of the node representing the name, and visiting the children of all other nodes. </summary>
            <param name="node">the node whose children are to be examined for names</param>
            <param name="name">the name to replace</param>
            <param name="fullExpr">the full expression corresponding to the name</param>
        </member>
        <member name="T:com.espertech.esper.epl.core.DuplicatePropertyException">
            <summary>
            Indicates a property exists in multiple streams.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.core.StreamTypesException">
            <summary>Base class for stream and property name resolution errors. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.StreamTypesException.#ctor(System.String,com.espertech.esper.collection.Pair{System.Int32,System.String})">
            <summary>Ctor. </summary>
            <param name="message">message</param>
            <param name="suggestion">optional suggestion for a matching name</param>
        </member>
        <member name="P:com.espertech.esper.epl.core.StreamTypesException.OptionalSuggestion">
            <summary>Returns the optional suggestion for a matching name. </summary>
            <value>suggested match</value>
        </member>
        <member name="M:com.espertech.esper.epl.core.DuplicatePropertyException.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="msg">exception message
            </param>
        </member>
        <member name="T:com.espertech.esper.epl.core.EngineImportException">
            <summary>
            Indicates a problem importing classes, aggregation functions and the like.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportException.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="msg">exception message</param>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportException.#ctor(System.String,System.Exception)">
            <summary>Ctor.</summary>
            <param name="msg">exception message</param>
            <param name="ex">inner exception</param>
        </member>
        <member name="T:com.espertech.esper.epl.core.EngineImportService">
            <summary>
            Service for engine-level resolution of static methods and aggregation methods.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportService.GetConfigurationMethodRef(System.String)">
            <summary>Returns the method invocation caches for the from-clause for a class. </summary>
            <param name="className">the class name providing the method</param>
            <returns>cache configs</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportService.AddImport(System.String)">
            <summary>
            Add an import ...
            </summary>
            <param name="importDesc">is the import to add</param>
            <throws>EngineImportException if the information or format is invalid</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportService.AddImport(com.espertech.esper.client.AutoImportDesc)">
            <summary>
            Add an import ...
            </summary>
            <param name="importDesc">is the import to add</param>
            <throws>EngineImportException if the information or format is invalid</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportService.AddAggregation(System.String,com.espertech.esper.client.ConfigurationPlugInAggregationFunction)">
            <summary>Add an aggregation function. </summary>
            <param name="functionName">is the name of the function to make known.</param>
            <param name="aggregationDesc">is the descriptor for the aggregation function</param>
            <throws>EngineImportException throw if format or information is invalid</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportService.AddSingleRow(System.String,System.String,System.String,com.espertech.esper.client.ValueCache,com.espertech.esper.client.FilterOptimizable,System.Boolean)">
            <summary>
            Add an single-row function.
            </summary>
            <param name="functionName">is the name of the function to make known.</param>
            <param name="singleRowFuncClass">is the class that provides the single row function</param>
            <param name="methodName">is the name of the static method provided by the class that provides the single row function</param>
            <param name="valueCache">setting to control value cache behavior which may cache a result value when constant parameters are passed</param>
            <param name="filterOptimizable">The filter optimizable.</param>
            <param name="rethrowExceptions">if set to <c>true</c> [rethrow exceptions].</param>
            <throws>EngineImportException throw if format or information is invalid</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportService.ResolveAggregation(System.String)">
            <summary>Used at statement compile-time to try and resolve a given function name into an aggregation method. Matches function name case-neutral. </summary>
            <param name="functionName">is the function name</param>
            <returns>aggregation provider</returns>
            <throws>EngineImportUndefinedException if the function is not a configured aggregation function</throws>
            <throws>EngineImportException if the aggregation providing class could not be loaded or doesn't match</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportService.ResolveAggregationFactory(System.String)">
            <summary>Used at statement compile-time to try and resolve a given function name into an aggregation method. Matches function name case-neutral. </summary>
            <param name="functionName">is the function name</param>
            <returns>aggregation provider</returns>
            <throws>EngineImportUndefinedException if the function is not a configured aggregation function</throws>
            <throws>EngineImportException if the aggregation providing class could not be loaded or doesn't match</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportService.ResolveSingleRow(System.String)">
            <summary>Used at statement compile-time to try and resolve a given function name into an single-row function. Matches function name case-neutral. </summary>
            <param name="functionName">is the function name</param>
            <returns>class name and method name pair</returns>
            <throws>EngineImportUndefinedException if the function is not a configured single-row function</throws>
            <throws>EngineImportException if the function providing class could not be loaded or doesn't match</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportService.ResolveMethod(System.String,System.String,System.Type[])">
            <summary>Resolves a given class, method and list of parameter types to a static method. </summary>
            <param name="className">is the class name to use</param>
            <param name="methodName">is the method name</param>
            <param name="paramTypes">is parameter types match expression sub-nodes</param>
            <returns>method this resolves to</returns>
            <throws>EngineImportException if the method cannot be resolved to a visible static method</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportService.ResolveCtor(System.Type,System.Type[])">
            <summary>Resolves a constructor matching list of parameter types. </summary>
            <param name="clazz">is the class to use</param>
            <param name="paramTypes">is parameter types match expression sub-nodes</param>
            <returns>method this resolves to</returns>
            <throws>EngineImportException if the ctor cannot be resolved</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportService.ResolveType(System.String)">
            <summary>Resolves a given class name, either fully qualified and simple and imported to a class. </summary>
            <param name="className">is the class name to use</param>
            <returns>class this resolves to</returns>
            <throws>EngineImportException if there was an error resolving the class</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportService.ResolveAnnotation(System.String)">
            <summary>Resolves a given class name, either fully qualified and simple and imported to a annotation. </summary>
            <param name="className">is the class name to use</param>
            <returns>annotation class this resolves to</returns>
            <throws>EngineImportException if there was an error resolving the class</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportService.ResolveMethod(System.String,System.String)">
            <summary>Resolves a given class and method name to a static method, expecting the method to exist exactly once and not be overloaded, with any parameters. </summary>
            <param name="className">is the class name to use</param>
            <param name="methodName">is the method name</param>
            <returns>method this resolves to</returns>
            <throws>EngineImportException if the method cannot be resolved to a visible static method, orif the method is overloaded </throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportService.ResolveMethod(System.Type,System.String,System.Type[])">
            <summary>Resolves a given method name and list of parameter types to an instance or static method exposed by the given class. </summary>
            <param name="clazz">is the class to look for a fitting method</param>
            <param name="methodName">is the method name</param>
            <param name="paramTypes">is parameter types match expression sub-nodes</param>
            <returns>method this resolves to</returns>
            <throws>EngineImportException if the method cannot be resolved to a visible static or instance method</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportService.ResolveAggExtendedBuiltin(System.String,System.Boolean)">
            <summary>Resolve an extended (non-SQL std) builtin aggregation. </summary>
            <param name="name">of func</param>
            <param name="isDistinct">indicator</param>
            <returns>aggregation func node</returns>
        </member>
        <member name="T:com.espertech.esper.epl.core.EngineImportServiceImpl">
            <summary>
            Implementation for engine-level imports.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportServiceImpl.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Ctor
            </summary>
            <param name="allowExtendedAggregationFunc">true to allow non-SQL standard builtin agg functions.</param>
            <param name="isUdfCache">if set to <c>true</c> [is udf cache].</param>
            <param name="isDuckType">if set to <c>true</c> [is duck type].</param>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportServiceImpl.AddMethodRefs(System.Collections.Generic.IDictionary{System.String,com.espertech.esper.client.ConfigurationMethodRef})">
            <summary>Adds cache configs for method invocations for from-clause. </summary>
            <param name="configs">cache configs</param>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportServiceImpl.ResolveTypeInternal(System.String,System.Boolean)">
            <summary>
            Finds a class by class name using the auto-import information provided.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="requireAnnotation">if set to <c>true</c> [require annotation].</param>
            <returns>class</returns>
            <throws>ClassNotFoundException if the class cannot be loaded</throws>
        </member>
        <member name="P:com.espertech.esper.epl.core.EngineImportServiceImpl.Imports">
            <summary>For testing, returns imports. </summary>
            <value>returns auto-import list as array</value>
        </member>
        <member name="T:com.espertech.esper.epl.core.EngineImportSingleRowDesc">
            <summary>
            Provides information about a single-row function.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.core.EngineImportUndefinedException">
            <summary>
            Indicates a problem importing classes, aggregation functions and the like.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportUndefinedException.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="msg">exception message</param>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineImportUndefinedException.#ctor(System.String,System.Exception)">
            <summary>Ctor.</summary>
            <param name="msg">exception message</param>
            <param name="ex">inner exception</param>
        </member>
        <member name="T:com.espertech.esper.epl.core.EngineNoSuchCtorException">
            <summary>
            Exception for resolution of a method failed.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineNoSuchCtorException.#ctor(System.String,System.Reflection.ConstructorInfo)">
            <summary>Ctor. </summary>
            <param name="message">message</param>
            <param name="nearestMissCtor">best-match method</param>
        </member>
        <member name="P:com.espertech.esper.epl.core.EngineNoSuchCtorException.NearestMissCtor">
            <summary>Returns the best-match ctor. </summary>
            <value>ctor</value>
        </member>
        <member name="T:com.espertech.esper.epl.core.EngineNoSuchMethodException">
            <summary>Exception for resolution of a method failed. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineNoSuchMethodException.#ctor(System.String,System.Reflection.MethodInfo)">
            <summary>Ctor. </summary>
            <param name="message">message</param>
            <param name="nearestMissMethod">best-match method</param>
        </member>
        <member name="P:com.espertech.esper.epl.core.EngineNoSuchMethodException.NearestMissMethod">
            <summary>Returns the best-match method. </summary>
            <value>method</value>
        </member>
        <member name="T:com.espertech.esper.epl.core.EngineSettingsService">
            <summary>
            Service for engine-level settings around threading and concurrency.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.EngineSettingsService.#ctor(com.espertech.esper.client.ConfigurationEngineDefaults,System.Collections.Generic.IList{System.Uri})">
            <summary>Ctor.</summary>
            <param name="config">is the configured defaults</param>
            <param name="plugInEventTypeResolutionURIs">is URIs for resolving the event name against plug-inn event representations, if any</param>
        </member>
        <member name="P:com.espertech.esper.epl.core.EngineSettingsService.EngineSettings">
            <summary>
            Gets the engine settings.
            </summary>
            <value>The engine settings.</value>
        </member>
        <member name="P:com.espertech.esper.epl.core.EngineSettingsService.PlugInEventTypeResolutionURIs">
            <summary>
            Gets or sets the URIs for resolving the event name against plug-in event representations, if any.
            </summary>
            <value>The plug in event type resolution UR is.</value>
            <returns>URIs</returns>
        </member>
        <member name="T:com.espertech.esper.epl.core.SelectExprProcessor">
            <summary>
            Interface for processors of select-clause items, implementors are computing results based on matching events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.SelectExprProcessor.Process(com.espertech.esper.client.EventBean[],System.Boolean,System.Boolean,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Computes the select-clause results and returns an event of the result event type that contains, in it's properties, the selected items.
            </summary>
            <param name="eventsPerStream">is per stream the event</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <param name="exprEvaluatorContext">The expr evaluator context.</param>
            <returns>
            event with properties containing selected items
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.SelectExprProcessor.ResultEventType">
            <summary>
            Returns the event type that represents the select-clause items.
            </summary>
            <value>
            	event type representing select-clause items
            </value>
        </member>
        <member name="T:com.espertech.esper.epl.core.MethodPollingExecStrategy">
            <summary>
            Viewable providing historical data from a database.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.db.PollExecStrategy">
            <summary>
            Interface for polling data from a data source such as a relational database.
            Lifecycle methods are for managing connection resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.PollExecStrategy.Start">
            <summary> Start the poll, called before any poll operation.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.PollExecStrategy.Poll(System.Object[])">
            <summary> Poll events using the keys provided.</summary>
            <param name="lookupValues">is keys for exeuting a query or such
            </param>
            <returns> a list of events for the keys
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.PollExecStrategy.Done">
            <summary> Indicate we are done polling and can release resources.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodPollingExecStrategy.#ctor(com.espertech.esper.events.EventAdapterService,CGLib.FastMethod,System.Boolean,com.espertech.esper.client.EventType)">
            <summary>Ctor. </summary>
            <param name="eventAdapterService">for generating event beans</param>
            <param name="method">the method to invoke</param>
            <param name="useMapType">is true to indicate that Map-events are generated</param>
            <param name="eventType">is the event type to use</param>
        </member>
        <member name="T:com.espertech.esper.epl.core.MethodPollingViewable">
            <summary>
            Polling-data provider that calls a static method on a class and passed parameters, and wraps the
            results as object events.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.HistoricalEventViewable">
            <summary>
            Interface for views that poll data based on information from other streams.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.ValidatedView">
            <summary>Interface for views that require validation against stream event types. </summary>
        </member>
        <member name="M:com.espertech.esper.view.ValidatedView.Validate(com.espertech.esper.epl.core.EngineImportService,com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService,com.espertech.esper.script.ScriptingService,com.espertech.esper.epl.expression.ExprEvaluatorContext,com.espertech.esper.client.ConfigurationInformation,com.espertech.esper.schedule.SchedulingService,System.String,System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode}},com.espertech.esper.events.EventAdapterService,System.String,System.String,System.Attribute[])">
            <summary>
            Validate the view.
            </summary>
            <param name="engineImportService">The engine import service.</param>
            <param name="streamTypeService">supplies the types of streams against which to validate</param>
            <param name="methodResolutionService">for resolving imports and classes and methods</param>
            <param name="timeProvider">for providing current time</param>
            <param name="variableService">for access to variables</param>
            <param name="scriptingService">The scripting service.</param>
            <param name="exprEvaluatorContext">context for expression evaluation</param>
            <param name="configSnapshot">The config snapshot.</param>
            <param name="schedulingService">The scheduling service.</param>
            <param name="engineURI">The engine URI.</param>
            <param name="sqlParameters">The SQL parameters.</param>
            <param name="eventAdapterService">The event adapter service.</param>
            <param name="statementName">Name of the statement.</param>
            <param name="statementId">The statement id.</param>
            <param name="annotations">The annotations.</param>
            <throws>ExprValidationException is thrown to indicate an exception in validating the view</throws>
        </member>
        <member name="M:com.espertech.esper.view.HistoricalEventViewable.Poll(com.espertech.esper.client.EventBean[][],com.espertech.esper.epl.join.pollindex.PollResultIndexingStrategy,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Poll for stored historical or reference data using events per stream and returing for each 
            event-per-stream row a separate list with events representing the poll result.
            </summary>
            <param name="lookupEventsPerStream">is the events per stream where thefirst dimension is a number of rows (often 1 depending on windows used) and the second dimension is the number of streams participating in a join.</param>
            <param name="indexingStrategy">the strategy to use for converting poll results into a indexed table for fast lookup</param>
            <param name="exprEvaluatorContext">context for expression evalauation</param>
            <returns>
            array of lists with one list for each event-per-stream row
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.HistoricalEventViewable.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="P:com.espertech.esper.view.HistoricalEventViewable.HasRequiredStreams">
            <summary>
            Returns true if the parameters expressions to the historical require other stream's data, or 
            false if there are no parameters or all parameter expressions are only contants and variables 
            without properties of other stream events.
            </summary>
            <value>
            	indicator whether properties are required for parameter evaluation
            </value>
        </member>
        <member name="P:com.espertech.esper.view.HistoricalEventViewable.RequiredStreams">
            <summary>
            Returns the a set of stream numbers of all streams that provide property values in any of the 
            parameter expressions to the stream.
            </summary>
            <value>set of stream numbers</value>
        </member>
        <member name="P:com.espertech.esper.view.HistoricalEventViewable.DataCacheThreadLocal">
            <summary>
            Historical views are expected to provide a thread-local data cache for use in keeping row 
            (<seealso cref="T:com.espertech.esper.client.EventBean"/> references) returned during iteration 
            stable, since the concept of a primary key does not exist.
            </summary>
            <value>The data cache thread local.</value>
            <returns>thread-local cache, can be null for any thread to indicate no caching</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodPollingViewable.#ctor(com.espertech.esper.epl.spec.MethodStreamSpec,System.Int32,System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode},com.espertech.esper.epl.db.PollExecStrategy,com.espertech.esper.epl.db.DataCache,com.espertech.esper.client.EventType,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Ctor. </summary>
            <param name="methodStreamSpec">defines class and method names</param>
            <param name="myStreamNumber">is the stream number</param>
            <param name="inputParameters">the input parameter expressions</param>
            <param name="pollExecStrategy">the execution strategy</param>
            <param name="dataCache">the cache to use</param>
            <param name="eventType">the type of event returned</param>
            <param name="exprEvaluatorContext">expression evaluation context</param>
        </member>
        <member name="T:com.espertech.esper.epl.core.MethodPollingViewableFactory">
            <summary>
            Factory for method-invocation data provider streams.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodPollingViewableFactory.CreatePollMethodView(System.Int32,com.espertech.esper.epl.spec.MethodStreamSpec,com.espertech.esper.events.EventAdapterService,com.espertech.esper.core.context.util.EPStatementAgentInstanceHandle,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.core.EngineImportService,com.espertech.esper.schedule.SchedulingService,com.espertech.esper.schedule.ScheduleBucket,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Creates a method-invocation polling view for use as a stream that calls a method, or pulls results from cache. </summary>
            <param name="streamNumber">the stream number</param>
            <param name="methodStreamSpec">defines the class and method to call</param>
            <param name="eventAdapterService">for creating event types and events</param>
            <param name="epStatementAgentInstanceHandle">for time-based callbacks</param>
            <param name="methodResolutionService">for resolving classes and imports</param>
            <param name="engineImportService">for resolving configurations</param>
            <param name="schedulingService">for scheduling callbacks in expiry-time based caches</param>
            <param name="scheduleBucket">for schedules within the statement</param>
            <param name="exprEvaluatorContext">expression evaluation context</param>
            <returns>pollable view</returns>
            <throws>ExprValidationException if the expressions cannot be validated or the method descriptorhas incorrect class and method names, or parameter number and types don't match </throws>
        </member>
        <member name="T:com.espertech.esper.epl.core.MethodResolutionService">
            <summary>
            Service for resolving methods and aggregation functions, and for creating managing aggregation instances.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.ResolveMethod(System.Type,System.String,System.Type[])">
            <summary>Resolves a given method name and list of parameter types to an instance or static method exposed by the given class.  </summary>
            <param name="clazz">is the class to look for a fitting method</param>
            <param name="methodName">is the method name</param>
            <param name="paramTypes">is parameter types match expression sub-nodes</param>
            <returns>method this resolves to</returns>
            <throws>EngineImportException if the method cannot be resolved to a visible static or instance method</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.ResolveCtor(System.Type,System.Type[])">
            <summary>Resolves matching available constructors to a list of parameter types to an instance or static method exposed by the given class. </summary>
            <param name="clazz">is the class to look for a fitting method</param>
            <param name="paramTypes">is parameter types match expression sub-nodes</param>
            <returns>method this resolves to</returns>
            <throws>EngineImportException if the method cannot be resolved to a visible static or instance method</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.ResolveMethod(System.String,System.String,System.Type[])">
            <summary>Resolves a given class, method and list of parameter types to a static method. </summary>
            <param name="className">is the class name to use</param>
            <param name="methodName">is the method name</param>
            <param name="paramTypes">is parameter types match expression sub-nodes</param>
            <returns>method this resolves to</returns>
            <throws>EngineImportException if the method cannot be resolved to a visible static method</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.ResolveMethod(System.String,System.String)">
            <summary>Resolves a given class and method name to a static method, not allowing overloaded methods and expecting the method to be found exactly once with zero or more parameters. </summary>
            <param name="className">is the class name to use</param>
            <param name="methodName">is the method name</param>
            <returns>method this resolves to</returns>
            <throws>EngineImportException if the method cannot be resolved to a visible static method, or if the method exists morethen once with different parameters </throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.ResolveType(System.String)">
            <summary>Resolves a given class name, either fully qualified and simple and imported to a class. </summary>
            <param name="className">is the class name to use</param>
            <returns>class this resolves to</returns>
            <throws>EngineImportException if there was an error resolving the class</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.ResolveAggregation(System.String)">
            <summary>Returns a plug-in aggregation method for a given configured aggregation function name. </summary>
            <param name="functionName">is the aggregation function name</param>
            <returns>aggregation-providing class</returns>
            <throws>EngineImportUndefinedException is the function name cannot be found</throws>
            <throws>EngineImportException if there was an error resolving class information</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.ResolveAggregationFactory(System.String)">
            <summary>Returns a plug-in aggregation function factory for a given configured aggregation function name. </summary>
            <param name="functionName">is the aggregation function name</param>
            <returns>aggregation-factory</returns>
            <throws>EngineImportUndefinedException is the function name cannot be found</throws>
            <throws>EngineImportException if there was an error resolving class information</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.ResolveSingleRow(System.String)">
            <summary>Used at statement compile-time to try and resolve a given function name into an single-row function. Matches function name case-neutral. </summary>
            <param name="functionName">is the function name</param>
            <throws>EngineImportUndefinedException if the function is not a configured single-row function</throws>
            <throws>EngineImportException if the function providing class could not be loaded or doesn't match</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.MakePlugInAggregator(System.String)">
            <summary>Makes a new plug-in aggregation instance by name. </summary>
            <param name="name">is the plug-in aggregation function name</param>
            <returns>new instance of plug-in aggregation method</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.MakeCountAggregator(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Makes a new count-aggregator.
            </summary>
            <param name="agentInstanceId">The agent instance id.</param>
            <param name="groupId">The group id.</param>
            <param name="aggregationId">The aggregation id.</param>
            <param name="isIgnoreNull">is true to ignore nulls, or false to count nulls  @return aggregator</param>
            <param name="hasFilter">if set to <c>true</c> [has filter].</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.MakeFirstEverValueAggregator(System.Int32,System.Int32,System.Int32,System.Type,System.Boolean)">
            <summary>
            Makes a new first-value aggregator.
            </summary>
            <param name="agentInstanceId">The agent instance id.</param>
            <param name="groupId">The group id.</param>
            <param name="aggregationId">The aggregation id.</param>
            <param name="type">of value  @return aggregator</param>
            <param name="hasFilter">if set to <c>true</c> [has filter].</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.MakeLastEverValueAggregator(System.Int32,System.Int32,System.Int32,System.Type,System.Boolean)">
            <summary>
            Makes a new last-value aggregator.
            </summary>
            <param name="agentInstanceId">The agent instance id.</param>
            <param name="groupId">The group id.</param>
            <param name="aggregationId">The aggregation id.</param>
            <param name="type">of value  @return aggregator</param>
            <param name="hasFilter">if set to <c>true</c> [has filter].</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.MakeSumAggregator(System.Int32,System.Int32,System.Int32,System.Type,System.Boolean)">
            <summary>
            Makes a new sum-aggregator.
            </summary>
            <param name="agentInstanceId">The agent instance id.</param>
            <param name="groupId">The group id.</param>
            <param name="aggregationId">The aggregation id.</param>
            <param name="type">is the type to be summed up, i.e. float, long etc.  @return aggregator</param>
            <param name="hasFilter">if set to <c>true</c> [has filter].</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.MakeDistinctAggregator(System.Int32,System.Int32,System.Int32,com.espertech.esper.epl.agg.aggregator.AggregationMethod,System.Type,System.Boolean)">
            <summary>
            Makes a new distinct-value-aggregator.
            </summary>
            <param name="agentInstanceId">The agent instance id.</param>
            <param name="groupId">The group id.</param>
            <param name="aggregationId">The aggregation id.</param>
            <param name="aggregationMethod">is the inner aggregation method</param>
            <param name="childType">is the return type of the inner expression to aggregate, if any   @return aggregator</param>
            <param name="hasFilter">if set to <c>true</c> [has filter].</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.MakeAvgAggregator(System.Int32,System.Int32,System.Int32,System.Type,System.Boolean)">
            <summary>
            Makes a new avg-aggregator.
            </summary>
            <param name="agentInstanceId">The agent instance id.</param>
            <param name="groupId">The group id.</param>
            <param name="aggregationId">The aggregation id.</param>
            <param name="type">the expression return type  @return aggregator</param>
            <param name="hasFilter">if set to <c>true</c> [has filter].</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.MakeAvedevAggregator(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>Makes a new avedev-aggregator. </summary>
            <returns>aggregator</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.MakeMedianAggregator(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>Makes a new median-aggregator. </summary>
            <returns>aggregator</returns>
            <param name="agentInstanceId"></param>
            <param name="groupId"></param>
            <param name="aggregationId"></param>
            <param name="hasFilter"></param>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.MakeMinMaxAggregator(System.Int32,System.Int32,System.Int32,com.espertech.esper.type.MinMaxTypeEnum,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Makes a new min-max-aggregator.
            </summary>
            <param name="agentInstanceId">The agent instance id.</param>
            <param name="groupId">The group id.</param>
            <param name="aggregationId">The aggregation id.</param>
            <param name="minMaxType">dedicates whether to do min or max</param>
            <param name="targetType">is the type to max or min</param>
            <param name="isHasDataWindows">true for has data windows    @return aggregator to use</param>
            <param name="hasFilter">if set to <c>true</c> [has filter].</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.MakeStddevAggregator(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>Makes a new stddev-aggregator. </summary>
            <returns>aggregator</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.MakeRateAggregator(System.Int32,System.Int32,System.Int32)">
            <summary>Makes a new rate-aggregator. </summary>
            <returns>aggregator</returns>
            <param name="agentInstanceId"></param>
            <param name="groupId"></param>
            <param name="aggregationId"></param>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.MakeRateEverAggregator(System.Int32,System.Int32,System.Int32,System.Int64)">
            <summary>
            Makes a new rate-aggregator.
            </summary>
            <param name="agentInstanceId">The agent instance id.</param>
            <param name="groupId">The group id.</param>
            <param name="aggregationId">The aggregation id.</param>
            <param name="interval">seconds</param>
            <returns>aggregator to use</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.MakeNthAggregator(System.Int32,System.Int32,System.Int32,System.Type,System.Int32)">
            <summary>Makes a Nth element aggregator.  </summary>
            <param name="agentInstanceId"></param>
            <param name="groupId"></param>
            <param name="aggregationId"></param>
            <param name="returnType">of aggregation</param>
            <param name="size">of elements   @return aggregator</param>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.MakeLeavingAggregator(System.Int32,System.Int32,System.Int32)">
            <summary>Make leaving agg. </summary>
            <returns>agg</returns>
            <param name="agentInstanceId"></param>
            <param name="groupId"></param>
            <param name="aggregationId"></param>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.SetGroupKeyTypes(System.Type[])">
            <summary>Sets the group key types. </summary>
            <param name="groupKeyTypes">types of group keys</param>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.NewAggregators(com.espertech.esper.epl.agg.service.AggregationMethodFactory[],System.Int32,System.Object)">
            <summary>Returns a new set of aggregators given an existing prototype-set of aggregators for a given context partition and group key.  </summary>
            <param name="prototypes">is the prototypes</param>
            <param name="agentInstanceId">context partition</param>
            <param name="groupKey">is the key to group-by for</param>
            <returns>new set of aggregators for this group</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.NewAggregators(com.espertech.esper.epl.agg.service.AggregationMethodFactory[],System.Int32)">
            <summary>
            Returns a new set of aggregators given an existing prototype-set of aggregators for a given context partition (no groups).
            </summary>
            <param name="aggregators">The aggregators.</param>
            <param name="agentInstanceId">context partition</param>
            <returns>new set of aggregators for this group</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.RemoveAggregators(System.Int32,System.Object)">
            <summary>Opportunity to remove aggregations for a group. </summary>
            <param name="agentInstanceId"></param>
            <param name="groupKey">that is no longer used</param>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionService.GetCurrentRowCount(com.espertech.esper.epl.agg.aggregator.AggregationMethod[],com.espertech.esper.epl.agg.access.AggregationAccess[])">
            <summary>
            Returns the current row count of an aggregation, for use with resilience.
            </summary>
            <param name="aggregators">aggregators</param>
            <param name="accesses">The accesses.</param>
            <returns>row count</returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.MethodResolutionService.IsUdfCache">
            <summary>Returns true to cache UDF results for constant parameter sets. </summary>
            <value>cache UDF results config</value>
        </member>
        <member name="T:com.espertech.esper.epl.core.MethodResolutionServiceImpl">
            <summary>
            Implements method resolution.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.MethodResolutionServiceImpl.#ctor(com.espertech.esper.epl.core.EngineImportService,com.espertech.esper.schedule.TimeProvider)">
            <summary>Ctor. </summary>
            <param name="engineImportService">is the engine imports</param>
            <param name="timeProvider">returns time</param>
        </member>
        <member name="T:com.espertech.esper.epl.core.OrderByProcessor">
            <summary>
            A processor for ordering output events according to the order specified in the order-by clause.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.OrderByProcessor.Sort(com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean[][],System.Boolean,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Sort the output events. If the order-by processor needs group-by keys to evaluate the expressions in the order-by clause, these will be computed from the generating events. </summary>
            <param name="outgoingEvents">the events to be sorted</param>
            <param name="generatingEvents">the events that generated the output events (each event has a corresponding array of generating events per different event streams)</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="exprEvaluatorContext">context for expression evalauation</param>
            <returns>an array containing the output events in sorted order</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.OrderByProcessor.Sort(com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean[][],System.Object[],System.Boolean,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Sort the output events, using the provided group-by keys for evaluating grouped aggregation functions, and avoiding the cost of recomputing the keys. </summary>
            <param name="outgoingEvents">the events to sort</param>
            <param name="generatingEvents">the events that generated the output events (each event has a corresponding array of generating events per different event streams)</param>
            <param name="groupByKeys">the keys to use for determining the group-by group of output events</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="exprEvaluatorContext">context for expression evalauation</param>
            <returns>an array containing the output events in sorted order</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.OrderByProcessor.GetSortKey(com.espertech.esper.client.EventBean[],System.Boolean,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Returns the sort key for a given row. </summary>
            <param name="eventsPerStream">is the row consisting of one event per stream</param>
            <param name="isNewData">is true for new data</param>
            <param name="exprEvaluatorContext">context for expression evalauation</param>
            <returns>sort key</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.OrderByProcessor.GetSortKeyPerRow(com.espertech.esper.client.EventBean[],System.Boolean,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Returns the sort key for a each row where a row is a single event (no join, single stream). </summary>
            <param name="generatingEvents">is the rows consisting of one event per row</param>
            <param name="isNewData">is true for new data</param>
            <param name="exprEvaluatorContext">context for expression evalauation</param>
            <returns>sort key for each row</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.OrderByProcessor.Sort(com.espertech.esper.client.EventBean[],System.Object[],com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Sort a given array of outgoing events using the sort keys returning a sorted outgoing event array. </summary>
            <param name="outgoingEvents">is the events to sort</param>
            <param name="orderKeys">is the keys to sort by</param>
            <param name="exprEvaluatorContext">context for expression evalauation</param>
            <returns>sorted events</returns>
        </member>
        <member name="T:com.espertech.esper.epl.core.OrderByProcessorFactory">
            <summary>
            A processor for ordering output events according to the order specified in the order-by clause.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.core.OrderByProcessorFactoryFactory">
            <summary>Factory for <seealso cref="T:com.espertech.esper.epl.core.OrderByProcessor"/> processors. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.OrderByProcessorFactoryFactory.GetProcessor(System.Collections.Generic.List{com.espertech.esper.epl.spec.SelectClauseExprCompiledSpec},System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode},System.Collections.Generic.IList{com.espertech.esper.epl.spec.OrderByItem},com.espertech.esper.epl.spec.RowLimitSpec,com.espertech.esper.epl.variable.VariableService,System.Boolean)">
            <summary>Returns processor for order-by clauses. </summary>
            <param name="selectionList">is a list of select expressions</param>
            <param name="groupByNodes">is a list of group-by expressions</param>
            <param name="orderByList">is a list of order-by expressions</param>
            <param name="rowLimitSpec">specification for row limit, or null if no row limit is defined</param>
            <param name="variableService">for retrieving variable state for use with row limiting</param>
            <param name="isSortUsingCollator">for string value sorting using compare or Collator</param>
            <returns>ordering processor instance</returns>
            <throws>com.espertech.esper.epl.expression.ExprValidationException when validation of expressions fails</throws>
        </member>
        <member name="T:com.espertech.esper.epl.core.OrderByProcessorFactoryImpl">
            <summary>
            An order-by processor that sorts events according to the expressions in the order_by clause.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.OrderByProcessorFactoryImpl.#ctor(System.Collections.Generic.IList{com.espertech.esper.epl.spec.OrderByItem},System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode},System.Boolean,System.Boolean)">
            <summary>Ctor.  </summary>
            <param name="orderByList">the nodes that generate the keys to sort events on </param>
            <param name="groupByNodes">generate the keys for determining aggregation groups </param>
            <param name="needsGroupByKeys">indicates whether this processor needs to have individual group by keys to evaluate the sort condition successfully </param>
            <param name="isSortUsingCollator">for string value sorting using compare or Collator</param>
            <throws>com.espertech.esper.epl.expression.ExprValidationException when order-by items don't divulge a type</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.OrderByProcessorFactoryImpl.GetComparator(com.espertech.esper.epl.core.OrderByElement[],System.Boolean)">
            <summary>Returns a comparator for order items that may sort string values using Collator. </summary>
            <param name="orderBy">order-by items</param>
            <param name="isSortUsingCollator">true for Collator string sorting</param>
            <returns>comparator</returns>
            <throws>com.espertech.esper.epl.expression.ExprValidationException if the return type of order items cannot be determined</throws>
        </member>
        <member name="T:com.espertech.esper.epl.core.OrderByProcessorImpl">
            <summary>
            An order-by processor that sorts events according to the expressions in the order_by clause.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.core.OrderByProcessorOrderedLimit">
            <summary>
            Sorter and row limiter in one: sorts using a sorter and row limits
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.OrderByProcessorOrderedLimit.#ctor(com.espertech.esper.epl.core.OrderByProcessorImpl,com.espertech.esper.epl.core.OrderByProcessorRowLimit)">
            <summary>Ctor. </summary>
            <param name="orderByProcessor">the sorter</param>
            <param name="orderByProcessorRowLimit">the row limiter</param>
        </member>
        <member name="T:com.espertech.esper.epl.core.OrderByProcessorOrderedLimitFactory">
            <summary>
            Sorter and row limiter in one: sorts using a sorter and row limits
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.core.OrderByProcessorRowLimit">
            <summary>
            An order-by processor that sorts events according to the expressions in the order_by clause.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.OrderByProcessorRowLimit.ApplyLimit(com.espertech.esper.client.EventBean[])">
            <summary>Applys the limiting function to outgoing events. </summary>
            <param name="outgoingEvents">unlimited</param>
            <returns>limited</returns>
        </member>
        <member name="T:com.espertech.esper.epl.core.OrderByProcessorRowLimitFactory">
            <summary>
            An order-by processor that sorts events according to the expressions in the order_by clause.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.OrderByProcessorRowLimitFactory.#ctor(com.espertech.esper.epl.spec.RowLimitSpec,com.espertech.esper.epl.variable.VariableService)">
            <summary>Ctor. </summary>
            <param name="rowLimitSpec">specification for row limit, or null if no row limit is defined</param>
            <param name="variableService">for retrieving variable state for use with row limiting</param>
            <throws>com.espertech.esper.epl.expression.ExprValidationException if row limit specification validation fails</throws>
        </member>
        <member name="T:com.espertech.esper.epl.core.PropertyNotFoundException">
            <summary> Exception to indicate that a property name used in a filter doesn't resolve.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.PropertyNotFoundException.#ctor(System.String,com.espertech.esper.collection.Pair{System.Int32,System.String})">
            <summary>
            Ctor.
            </summary>
            <param name="msg">message</param>
            <param name="nearestMatchSuggestion">optional suggestion for a matching name</param>
        </member>
        <member name="T:com.espertech.esper.epl.core.PropertyResolutionDescriptor">
            <summary> Encapsulates the result of resolving a property and optional stream name against a supplied list of streams
            <see cref="T:com.espertech.esper.epl.core.StreamTypeService"/>.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.PropertyResolutionDescriptor.#ctor(System.String,com.espertech.esper.client.EventType,System.String,System.Int32,System.Type,com.espertech.esper.client.FragmentEventType)">
            <summary>
            Ctor.
            </summary>
            <param name="streamName">is the stream name</param>
            <param name="streamEventType">is the event type of the stream where the property was found</param>
            <param name="propertyName">is the regular name of property</param>
            <param name="streamNum">is the number offset of the stream</param>
            <param name="propertyType">is the type of the property</param>
            <param name="fragmentEventType">Type of the fragment event.</param>
        </member>
        <member name="P:com.espertech.esper.epl.core.PropertyResolutionDescriptor.StreamName">
            <summary> Returns stream name.</summary>
            <returns> stream name
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.PropertyResolutionDescriptor.StreamEventType">
            <summary> Returns event type of the stream that the property was found in.</summary>
            <returns> stream's event type
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.PropertyResolutionDescriptor.PropertyName">
            <summary> Returns resolved property name of the property as it exists in a stream.</summary>
            <returns> property name as resolved in a stream
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.PropertyResolutionDescriptor.StreamNum">
            <summary> Returns the number of the stream the property was found in.</summary>
            <returns> stream offset number Starting at zero to N-1 where N is the number of streams
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.PropertyResolutionDescriptor.PropertyType">
            <summary> Returns the property type of the resolved property.</summary>
            <returns> class of property
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.PropertyResolutionDescriptor.FragmentEventType">
            <summary>
            Gets or sets the type of the fragment event.
            </summary>
            <value>The type of the fragment event.</value>
        </member>
        <member name="T:com.espertech.esper.epl.core.ResultSetProcessor">
            <summary>
            Processor for result sets coming from 2 sources. First, out of a simple view (no join). 
            And second, out of a join of event streams. The processor must apply the select-clause,
            group-by-clause and having-clauses as supplied. It must state what the event type of 
            the result rows is.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessor.ProcessViewResult(com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean[],System.Boolean)">
            <summary>
            For use by views posting their result, process the event rows that are entered and removed 
            (new and old events). Processes according to select-clauses, group-by clauses and having-clauses 
            and returns new events and old events as specified.
            </summary>
            <param name="newData">new events posted by view</param>
            <param name="oldData">old events posted by view</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <returns>pair of new events and old events</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessor.ProcessJoinResult(System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}},System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}},System.Boolean)">
            <summary>
            For use by joins posting their result, process the event rows that are entered and removed
            (new and old events). Processes according to select-clauses, group-by clauses and having-clauses
            and returns new events and old events as specified.
            </summary>
            <param name="newEvents">new events posted by join</param>
            <param name="oldEvents">old events posted by join</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <returns>pair of new events and old events</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessor.GetEnumerator(com.espertech.esper.view.Viewable)">
            <summary>
            Returns the enumerator implementing the group-by and aggregation and order-by logic
            specific to each case of use of these construct.
            </summary>
            <param name="parent">is the parent view iterator</param>
            <returns>event iterator</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessor.GetEnumerator(System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}})">
            <summary>Returns the iterator for iterating over a join-result. </summary>
            <param name="joinSet">is the join result set</param>
            <returns>iterator over join results</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessor.Clear">
            <summary>Clear out current state. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessor.ProcessOutputLimitedJoin(System.Collections.Generic.IList{com.espertech.esper.collection.UniformPair{System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}}}},System.Boolean,com.espertech.esper.epl.spec.OutputLimitLimitType)">
            <summary>Processes batched events in case of output-rate limiting. </summary>
            <param name="joinEventsSet">the join results</param>
            <param name="generateSynthetic">flag to indicate whether synthetic events must be generated</param>
            <param name="outputLimitLimitType">the type of output rate limiting</param>
            <returns>results for dispatch</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessor.ProcessOutputLimitedView(System.Collections.Generic.IList{com.espertech.esper.collection.UniformPair{com.espertech.esper.client.EventBean[]}},System.Boolean,com.espertech.esper.epl.spec.OutputLimitLimitType)">
            <summary>Processes batched events in case of output-rate limiting. </summary>
            <param name="viewEventsList">the view results</param>
            <param name="generateSynthetic">flag to indicate whether synthetic events must be generated</param>
            <param name="outputLimitLimitType">the type of output rate limiting</param>
            <returns>results for dispatch</returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.ResultSetProcessor.ResultEventType">
            <summary>
            Returns the event type of processed results.
            </summary>
            <value>event type of the resulting events posted by the processor.</value>
        </member>
        <member name="P:com.espertech.esper.epl.core.ResultSetProcessor.AgentInstanceContext">
            <summary>
            Sets the agent instance context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="T:com.espertech.esper.epl.core.ResultSetProcessorAggregateAll">
            <summary>
            Result set processor for the case: aggregation functions used in the select clause, 
            and no group-by, and not all of the properties in the select clause are under an 
            aggregation function. 
            <para/> 
            This processor does not perform grouping, every event entering and leaving is in the 
            same group. The processor generates one row for each event entering (new event) and 
            one row for each event leaving (old event). Aggregation state is simply one row 
            holding all the state. 
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.core.ResultSetProcessorAggregateAll.SelectExprProcessor">
            <summary>Returns the select expression processor </summary>
            <value>select processor.</value>
        </member>
        <member name="P:com.espertech.esper.epl.core.ResultSetProcessorAggregateAll.OptionalHavingNode">
            <summary>Returns the optional having expression. </summary>
            <value>having expression node</value>
        </member>
        <member name="T:com.espertech.esper.epl.core.ResultSetProcessorAggregateAllFactory">
            <summary>
            Result set processor prototype for the case: aggregation functions used in the select 
            clause, and no group-by, and not all of the properties in the select clause are under 
            an aggregation function.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.core.ResultSetProcessorFactory">
            <summary>
            Processor prototype for result sets for instances that apply the select-clause, group-by-clause and having-clauses as supplied.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorFactory.Instantiate(com.espertech.esper.epl.core.OrderByProcessor,com.espertech.esper.epl.agg.service.AggregationService,com.espertech.esper.core.context.util.AgentInstanceContext)">
            <summary>
            Instantiates the specified order by processor.
            </summary>
            <param name="orderByProcessor">The order by processor.</param>
            <param name="aggregationService">The aggregation service.</param>
            <param name="agentInstanceContext">The agent instance context.</param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.ResultSetProcessorFactory.ResultEventType">
            <summary>
            Returns the event type of processed results.
            </summary>
            <value>event type of the resulting events posted by the processor.</value>
        </member>
        <member name="P:com.espertech.esper.epl.core.ResultSetProcessorFactory.HasAggregation">
            <summary>
            Gets a value indicating whether this instance has aggregation.
            </summary>
            <value>
            	<c>true</c> if this instance has aggregation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorAggregateAllFactory.#ctor(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.epl.expression.ExprEvaluator,System.Boolean,System.Boolean)">
            <summary>Ctor. </summary>
            <param name="selectExprProcessor">for processing the select expression and generting the readonly output rows</param>
            <param name="optionalHavingNode">having clause expression node</param>
            <param name="isSelectRStream">true if remove stream events should be generated</param>
            <param name="isUnidirectional">true if unidirectional join</param>
        </member>
        <member name="T:com.espertech.esper.epl.core.ResultSetProcessorAggregateGrouped">
            <summary>
            Result-set processor for the aggregate-grouped case:
             there is a group-by and one or more non-aggregation event properties in the select clause
             are not listed in the group by, and there are aggregation functions.
            <para/>
            This processor does perform grouping by computing MultiKey group-by keys for each row. The
            processor generates one row for each event entering (new event) and one row for each event 
            leaving (old event).
            <para/>
            Aggregation state is a table of rows held by <see cref="T:com.espertech.esper.epl.agg.service.AggregationService"/> where the 
            row key is the group-by MultiKey.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorAggregateGrouped.GenerateGroupKey(com.espertech.esper.client.EventBean[],System.Boolean)">
            <summary>Generates the group-by key for the row </summary>
            <param name="eventsPerStream">is the row of events</param>
            <param name="isNewData">is true for new data</param>
            <returns>grouping keys</returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.ResultSetProcessorAggregateGrouped.SelectExprProcessor">
            <summary>Returns the select expression processor </summary>
            <value>select processor.</value>
        </member>
        <member name="P:com.espertech.esper.epl.core.ResultSetProcessorAggregateGrouped.OptionalHavingNode">
            <summary>Returns the having node. </summary>
            <value>having expression</value>
        </member>
        <member name="T:com.espertech.esper.epl.core.ResultSetProcessorAggregateGroupedFactory">
            <summary>
            Result-set processor prototype for the aggregate-grouped case: there is a group-by 
            and one or more non-aggregation event properties in the select clause are not listed 
            in the group by, and there are aggregation functions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorAggregateGroupedFactory.#ctor(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.epl.expression.ExprEvaluator[],com.espertech.esper.epl.expression.ExprEvaluator,System.Boolean,System.Boolean,com.espertech.esper.epl.spec.OutputLimitSpec,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="selectExprProcessor">for processing the select expression and generting the readonly output rows</param>
            <param name="groupKeyNodes">list of group-by expression nodes needed for building the group-by keys</param>
            <param name="optionalHavingNode">expression node representing validated HAVING clause, or null if none given.Aggregation functions in the having node must have been pointed to the AggregationService for evaluation.</param>
            <param name="isSelectRStream">true if remove stream events should be generated</param>
            <param name="isUnidirectional">true if unidirectional join</param>
            <param name="outputLimitSpec">The output limit spec.</param>
            <param name="isSorting">if set to <c>true</c> [is sorting].</param>
        </member>
        <member name="T:com.espertech.esper.epl.core.ResultSetProcessorBaseSimple">
            <summary>
            Result set processor for the simplest case: no aggregation functions used in the select
            clause, and no group-by. <para/> The processor generates one row for each event entering
            (new event) and one row for each event leaving (old event).
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorBaseSimple.Clear">
            <summary>Clear out current state.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorBaseSimple.ProcessViewResult(com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean[],System.Boolean)">
            <summary>
            For use by views posting their result, process the event rows that are entered and removed (new and old events).
            Processes according to select-clauses, group-by clauses and having-clauses and returns new events and
            old events as specified.
            </summary>
            <param name="newData">new events posted by view</param>
            <param name="oldData">old events posted by view</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <returns>pair of new events and old events</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorBaseSimple.ProcessJoinResult(System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}},System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}},System.Boolean)">
            <summary>
            For use by joins posting their result, process the event rows that are entered and removed (new and old events).
            Processes according to select-clauses, group-by clauses and having-clauses and returns new events and
            old events as specified.
            </summary>
            <param name="newEvents">new events posted by join</param>
            <param name="oldEvents">old events posted by join</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <returns>pair of new events and old events</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorBaseSimple.GetEnumerator(com.espertech.esper.view.Viewable)">
            <summary>
            Returns the iterator implementing the group-by and aggregation and order-by logic
            specific to each case of use of these construct.
            </summary>
            <param name="parent">is the parent view iterator</param>
            <returns>event iterator</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorBaseSimple.GetEnumerator(System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}})">
            <summary>Returns the iterator for iterating over a join-result.</summary>
            <param name="joinSet">is the join result set</param>
            <returns>iterator over join results</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorBaseSimple.ProcessOutputLimitedJoin(System.Collections.Generic.IList{com.espertech.esper.collection.UniformPair{System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}}}},System.Boolean,com.espertech.esper.epl.spec.OutputLimitLimitType)">
            <summary>Processes batched events in case of output-rate limiting.</summary>
            <param name="joinEventsSet">the join results</param>
            <param name="generateSynthetic">flag to indicate whether synthetic events must be generated</param>
            <param name="outputLimitLimitType">the type of output rate limiting</param>
            <returns>results for dispatch</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorBaseSimple.ProcessOutputLimitedView(System.Collections.Generic.IList{com.espertech.esper.collection.UniformPair{com.espertech.esper.client.EventBean[]}},System.Boolean,com.espertech.esper.epl.spec.OutputLimitLimitType)">
            <summary>Processes batched events in case of output-rate limiting.</summary>
            <param name="viewEventsList">the view results</param>
            <param name="generateSynthetic">flag to indicate whether synthetic events must be generated</param>
            <param name="outputLimitLimitType">the type of output rate limiting</param>
            <returns>results for dispatch</returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.ResultSetProcessorBaseSimple.HasAggregation">
            <summary>
            Gets a value indicating whether this instance has aggregation.
            </summary>
            <value>
            	<c>true</c> if this instance has aggregation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:com.espertech.esper.epl.core.ResultSetProcessorBaseSimple.ResultEventType">
            <summary>
            Returns the event type of processed results.
            </summary>
            <value>The type of the result event.</value>
            <returns> event type of the resulting events posted by the processor.
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.ResultSetProcessorBaseSimple.AgentInstanceContext">
            <summary>
            Sets the agent instance context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="T:com.espertech.esper.epl.core.ResultSetProcessorFactoryDesc">
            <summary>
            Processor prototype for result sets for instances that apply the select-clause, group-by-clause and having-clauses as supplied.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.core.ResultSetProcessorFactoryFactory">
            <summary>
            Factory for output processors. Output processors process the result set of a join or of a view
            and apply aggregation/grouping, having and some output limiting logic.
            <para/>
            The instance produced by the factory depends on the presence of aggregation functions in the select list,
            the presence and nature of the group-by clause.
            <para/>
            In case (1) and (2) there are no aggregation functions in the select clause.
            <para/>
            Case (3) is without group-by and with aggregation functions and without non-aggregated properties
            in the select list: <pre>select sum(volume) </pre>.
            Always produces one row for new and old data, aggregates without grouping.
            <para/>
            Case (4) is without group-by and with aggregation functions but with non-aggregated properties
            in the select list: <pre>select price, sum(volume) </pre>.
            Produces a row for each event, aggregates without grouping.
            <para/>
            Case (5) is with group-by and with aggregation functions and all selected properties are grouped-by.
            in the select list: <pre>select customerId, sum(volume) group by customerId</pre>.
            Produces a old and new data row for each group changed, aggregates with grouping, see
            <seealso cref="T:com.espertech.esper.epl.core.ResultSetProcessorRowPerGroup"/>
            <para/>
            Case (6) is with group-by and with aggregation functions and only some selected properties are grouped-by.
            in the select list: <pre>select customerId, supplierId, sum(volume) group by customerId</pre>.
            Produces row for each event, aggregates with grouping.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorFactoryFactory.GetProcessorPrototype(com.espertech.esper.epl.spec.StatementSpecCompiled,com.espertech.esper.core.service.StatementContext,com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.ViewResourceDelegateUnverified,System.Boolean[],System.Boolean,com.espertech.esper.core.context.util.ContextPropertyRegistry,com.espertech.esper.epl.core.SelectExprProcessorDeliveryCallback)">
            <summary>
            Returns the result set process for the given select expression, group-by clause and having clause given a
            set of types describing each stream in the from-clause.
            </summary>
            <param name="statementSpec">a subset of the statement specification</param>
            <param name="stmtContext">engine and statement and agent-instance level services</param>
            <param name="typeService">for information about the streams in the from clause</param>
            <param name="viewResourceDelegate">delegates views resource factory to expression resources requirements</param>
            <param name="isUnidirectionalStream">true if unidirectional join for any of the streams</param>
            <param name="allowAggregation">indicator whether to allow aggregation functions in any expressions</param>
            <param name="contextPropertyRegistry">The context property registry.</param>
            <param name="selectExprProcessorCallback">The select expr processor callback.</param>
            <returns>result set processor instance</returns>
            <throws>ExprValidationException when any of the expressions is invalid</throws>
        </member>
        <member name="T:com.espertech.esper.epl.core.ResultSetProcessorHandThrougFactory">
            <summary>
            Result set processor prototye for the hand-through case: no aggregation functions 
            used in the select clause, and no group-by, no having and ordering.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorHandThrougFactory.#ctor(com.espertech.esper.epl.core.SelectExprProcessor,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="selectExprProcessor">for processing the select expression and generting the readonly output rows a row per group even if groups didn't change</param>
            <param name="selectRStream">true if remove stream events should be generated</param>
        </member>
        <member name="T:com.espertech.esper.epl.core.ResultSetProcessorHandThrough">
            <summary>
            Result set processor for the hand-through case: no aggregation functions used in the 
            select clause, and no group-by, no having and ordering.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorHandThrough.GetSelectEventsNoHaving(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.client.EventBean[],System.Boolean,System.Boolean,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Applies the select-clause to the given events returning the selected events. The number of events stays the same, i.e. this method does not filter it just transforms the result set.
            </summary>
            <param name="exprProcessor">processes each input event and returns output event</param>
            <param name="events">input events</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <param name="agentInstanceContext">The agent instance context.</param>
            <returns>output events, one for each input event</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorHandThrough.GetSelectEventsNoHaving(com.espertech.esper.epl.core.SelectExprProcessor,System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}},System.Boolean,System.Boolean,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Applies the select-clause to the given events returning the selected events. The number of events stays the same, i.e. this method does not filter it just transforms the result set.
            </summary>
            <param name="exprProcessor">processes each input event and returns output event</param>
            <param name="events">input events</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <param name="agentInstanceContext">The agent instance context.</param>
            <returns>output events, one for each input event</returns>
        </member>
        <member name="T:com.espertech.esper.epl.core.ResultSetProcessorRowForAll">
            <summary>
            Result set processor for the case: aggregation functions used in the select clause,
             and no group-by, and all properties in the select clause are under an aggregation 
            function.
            <para /> 
            This processor does not perform grouping, every event entering and leaving is in the 
            same group. Produces one old event and one new event row every time either at least 
            one old or new event is received. Aggregation state is simply one row holding all 
            the state.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.core.ResultSetProcessorRowForAllFactory">
            <summary>
            Result set processor prototype for the case: aggregation functions used in the 
            select clause, and no group-by, and all properties in the select clause are under 
            an aggregation function.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorRowForAllFactory.#ctor(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.epl.expression.ExprEvaluator,System.Boolean,System.Boolean)">
            <summary>Ctor. </summary>
            <param name="selectExprProcessor">for processing the select expression and generting the readonly output rows</param>
            <param name="optionalHavingNode">having clause expression node</param>
            <param name="isSelectRStream">true if remove stream events should be generated</param>
            <param name="isUnidirectional">true if unidirectional join</param>
        </member>
        <member name="T:com.espertech.esper.epl.core.ResultSetProcessorRowPerGroup">
            <summary>
            Result set processor for the fully-grouped case:
             there is a group-by and all non-aggregation event properties in the select clause are 
             listed in the group by, and there are aggregation functions.
            <para/>
            Produces one row for each group that changed (and not one row per event). Computes MultiKey
            group-by keys for each event and uses a set of the group-by keys to generate the result rows,
            using the first (old or new, anyone) event for each distinct group-by key.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorRowPerGroup.GenerateGroupKey(com.espertech.esper.client.EventBean[],System.Boolean)">
            <summary>Generates the group-by key for the row </summary>
            <param name="eventsPerStream">is the row of events</param>
            <param name="isNewData">is true for new data</param>
            <returns>grouping keys</returns>
        </member>
        <member name="P:com.espertech.esper.epl.core.ResultSetProcessorRowPerGroup.OptionalHavingNode">
            <summary>Returns the optional having expression. </summary>
            <value>having expression node</value>
        </member>
        <member name="P:com.espertech.esper.epl.core.ResultSetProcessorRowPerGroup.SelectExprProcessor">
            <summary>Returns the select expression processor </summary>
            <value>select processor.</value>
        </member>
        <member name="T:com.espertech.esper.epl.core.ResultSetProcessorRowPerGroupFactory">
            <summary>
            Result set processor prototype for the fully-grouped case: there is a group-by and all 
            non-aggregation event properties in the select clause are listed in the group by, and 
            there are aggregation functions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorRowPerGroupFactory.#ctor(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.epl.expression.ExprEvaluator[],com.espertech.esper.epl.expression.ExprEvaluator,System.Boolean,System.Boolean,com.espertech.esper.epl.spec.OutputLimitSpec,System.Boolean,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="selectExprProcessor">for processing the select expression and generting the readonly output rows</param>
            <param name="groupKeyNodes">list of group-by expression nodes needed for building the group-by keys</param>
            <param name="optionalHavingNode">expression node representing validated HAVING clause, or null if none given.Aggregation functions in the having node must have been pointed to the AggregationService for evaluation.</param>
            <param name="isSelectRStream">true if remove stream events should be generated</param>
            <param name="isUnidirectional">true if unidirectional join</param>
            <param name="outputLimitSpec">The output limit spec.</param>
            <param name="isSorting">if set to <c>true</c> [is sorting].</param>
            <param name="noDataWindowSingleStream">if set to <c>true</c> [no data window single stream].</param>
        </member>
        <member name="T:com.espertech.esper.epl.core.ResultSetProcessorSimple">
            <summary>
            Result set processor for the simplest case: no aggregation functions used in the select clause, and no group-by. 
            <para/>
            The processor generates one row for each event entering (new event) and one row for each event leaving (old event).
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimple.ProcessViewResultIterator(com.espertech.esper.client.EventBean[])">
            <summary>Process view results for the iterator. </summary>
            <param name="newData">new events</param>
            <returns>pair of insert and remove stream</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimple.GetSelectEventsNoHaving(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.epl.core.OrderByProcessor,com.espertech.esper.client.EventBean[],System.Boolean,System.Boolean,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Applies the select-clause to the given events returning the selected events. The number of events stays the same, i.e. this method does not filter it just transforms the result set. </summary>
            <param name="exprProcessor">processes each input event and returns output event</param>
            <param name="orderByProcessor">orders the outgoing events according to the order-by clause</param>
            <param name="events">input events</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <param name="exprEvaluatorContext">context for expression evalauation</param>
            <returns>output events, one for each input event</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimple.GetSelectEventsNoHaving(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.epl.core.OrderByProcessor,System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}},System.Boolean,System.Boolean,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Applies the select-clause to the given events returning the selected events. The number of events stays the same, i.e. this method does not filter it just transforms the result set. </summary>
            <param name="exprProcessor">processes each input event and returns output event</param>
            <param name="orderByProcessor">for sorting output events according to the order-by clause</param>
            <param name="events">input events</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <param name="exprEvaluatorContext">context for expression evalauation</param>
            <returns>output events, one for each input event</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimple.GetSelectEventsHaving(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.epl.core.OrderByProcessor,com.espertech.esper.client.EventBean[],com.espertech.esper.epl.expression.ExprEvaluator,System.Boolean,System.Boolean,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Applies the select-clause to the given events returning the selected events. The number of events stays the same, i.e. this method does not filter it just transforms the result set. <para/> Also applies a having clause. </summary>
            <param name="exprProcessor">processes each input event and returns output event</param>
            <param name="orderByProcessor">for sorting output events according to the order-by clause</param>
            <param name="events">input events</param>
            <param name="optionalHavingNode">supplies the having-clause expression</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <param name="exprEvaluatorContext">context for expression evalauation</param>
            <returns>output events, one for each input event</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimple.GetSelectEventsHaving(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.epl.core.OrderByProcessor,System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}},com.espertech.esper.epl.expression.ExprEvaluator,System.Boolean,System.Boolean,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Applies the select-clause to the given events returning the selected events. The number of events stays the same, i.e. this method does not filter it just transforms the result set. <para/> Also applies a having clause. </summary>
            <param name="exprProcessor">processes each input event and returns output event</param>
            <param name="orderByProcessor">for sorting output events according to the order-by clause</param>
            <param name="events">input events</param>
            <param name="optionalHavingNode">supplies the having-clause expression</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <param name="exprEvaluatorContext">context for expression evalauation</param>
            <returns>output events, one for each input event</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimple.GetSelectEventsNoHaving(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.client.EventBean[],System.Boolean,System.Boolean,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Applies the select-clause to the given events returning the selected events. The number of events stays the same, i.e. this method does not filter it just transforms the result set.
            </summary>
            <param name="exprProcessor">processes each input event and returns output event</param>
            <param name="events">input events</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <param name="exprEvaluatorContext">The expr evaluator context.</param>
            <returns>output events, one for each input event</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimple.GetSelectEventsNoHaving(com.espertech.esper.epl.core.SelectExprProcessor,System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}},System.Boolean,System.Boolean,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Applies the select-clause to the given events returning the selected events. The number of events stays the same, i.e. this method does not filter it just transforms the result set.
            </summary>
            <param name="exprProcessor">processes each input event and returns output event</param>
            <param name="events">input events</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <param name="exprEvaluatorContext">The expr evaluator context.</param>
            <returns>output events, one for each input event</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimple.GetSelectEventsHaving(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.client.EventBean[],com.espertech.esper.epl.expression.ExprEvaluator,System.Boolean,System.Boolean,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Applies the select-clause to the given events returning the selected events. The number of events stays the same, i.e. this method does not filter it just transforms the result set. <para/> Also applies a having clause. </summary>
            <param name="exprProcessor">processes each input event and returns output event</param>
            <param name="events">input events</param>
            <param name="optionalHavingNode">supplies the having-clause expression</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <param name="exprEvaluatorContext">context for expression evalauation</param>
            <returns>output events, one for each input event</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimple.GetSelectEventsHaving(com.espertech.esper.epl.core.SelectExprProcessor,System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}},com.espertech.esper.epl.expression.ExprEvaluator,System.Boolean,System.Boolean,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Applies the select-clause to the given events returning the selected events. The number of events stays the same, i.e. this method does not filter it just transforms the result set. <para/> Also applies a having clause. </summary>
            <param name="exprProcessor">processes each input event and returns output event</param>
            <param name="events">input events</param>
            <param name="optionalHavingNode">supplies the having-clause expression</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <param name="exprEvaluatorContext">context for expression evalauation</param>
            <returns>output events, one for each input event</returns>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimple.GetSelectEventsNoHaving(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.epl.core.OrderByProcessor,com.espertech.esper.client.EventBean[],System.Boolean,System.Boolean,System.Collections.Generic.ICollection{com.espertech.esper.client.EventBean},System.Collections.Generic.ICollection{System.Object},com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Applies the select-clause to the given events returning the selected events. The number of events stays the same, i.e. this method does not filter it just transforms the result set. </summary>
            <param name="exprProcessor">processes each input event and returns output event</param>
            <param name="orderByProcessor">orders the outgoing events according to the order-by clause</param>
            <param name="events">input events</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <param name="result">is the result event list to populate</param>
            <param name="exprEvaluatorContext">context for expression evalauation</param>
            <param name="optSortKeys">is the result sort key list to populate, for sorting</param>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimple.GetSelectEventsNoHaving(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.epl.core.OrderByProcessor,System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}},System.Boolean,System.Boolean,System.Collections.Generic.ICollection{com.espertech.esper.client.EventBean},System.Collections.Generic.ICollection{System.Object},com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Applies the select-clause to the given events returning the selected events. The number of events stays the same, i.e. this method does not filter it just transforms the result set. </summary>
            <param name="exprProcessor">processes each input event and returns output event</param>
            <param name="orderByProcessor">for sorting output events according to the order-by clause</param>
            <param name="events">input events</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <param name="result">is the result event list to populate</param>
            <param name="optSortKeys">is the result sort key list to populate, for sorting</param>
            <param name="exprEvaluatorContext">context for expression evalauation</param>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimple.GetSelectEventsHaving(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.epl.core.OrderByProcessor,com.espertech.esper.client.EventBean[],com.espertech.esper.epl.expression.ExprEvaluator,System.Boolean,System.Boolean,System.Collections.Generic.ICollection{com.espertech.esper.client.EventBean},System.Collections.Generic.ICollection{System.Object},com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Applies the select-clause to the given events returning the selected events. The number of events stays the same, i.e. this method does not filter it just transforms the result set. <para/> Also applies a having clause. </summary>
            <param name="exprProcessor">processes each input event and returns output event</param>
            <param name="orderByProcessor">for sorting output events according to the order-by clause</param>
            <param name="events">input events</param>
            <param name="optionalHavingNode">supplies the having-clause expression</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <param name="result">is the result event list to populate</param>
            <param name="exprEvaluatorContext">context for expression evalauation</param>
            <param name="optSortKeys">is the result sort key list to populate, for sorting</param>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimple.GetSelectEventsHaving(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.epl.core.OrderByProcessor,System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}},com.espertech.esper.epl.expression.ExprEvaluator,System.Boolean,System.Boolean,System.Collections.Generic.ICollection{com.espertech.esper.client.EventBean},System.Collections.Generic.ICollection{System.Object},com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Applies the select-clause to the given events returning the selected events. The number of events stays the same, i.e. this method does not filter it just transforms the result set. <para/> Also applies a having clause. </summary>
            <param name="exprProcessor">processes each input event and returns output event</param>
            <param name="orderByProcessor">for sorting output events according to the order-by clause</param>
            <param name="events">input events</param>
            <param name="optionalHavingNode">supplies the having-clause expression</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="isSynthesize">set to true to indicate that synthetic events are required for an iterator result set</param>
            <param name="result">is the result event list to populate</param>
            <param name="optSortKeys">is the result sort key list to populate, for sorting</param>
            <param name="exprEvaluatorContext">context for expression evalauation</param>
        </member>
        <member name="T:com.espertech.esper.epl.core.ResultSetProcessorSimpleFactory">
            <summary>
            Result set processor prototype for the simplest case: no aggregation functions used in the select clause, and no group-by.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimpleFactory.#ctor(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.epl.expression.ExprEvaluator,System.Boolean)">
            <summary>Ctor. </summary>
            <param name="selectExprProcessor">for processing the select expression and generting the readonly output rows</param>
            <param name="optionalHavingNode">having clause expression node</param>
            <param name="isSelectRStream">true if remove stream events should be generated</param>
        </member>
        <member name="T:com.espertech.esper.epl.core.ResultSetProcessorSimpleTransform">
            <summary>Method to transform an event based on the select expression. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ResultSetProcessorSimpleTransform.#ctor(com.espertech.esper.epl.core.ResultSetProcessorBaseSimple)">
            <summary>Ctor. </summary>
            <param name="resultSetProcessor">is applying the select expressions to the events for the transformation</param>
        </member>
        <member name="T:com.espertech.esper.epl.core.SelectExprEventTypeRegistry">
            <summary>Registry for event types creates as part of the select expression analysis. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.SelectExprEventTypeRegistry.#ctor(System.Collections.Generic.HashSet{System.String})">
            <summary>Ctor. </summary>
            <param name="registry">the holder of the registry</param>
        </member>
        <member name="M:com.espertech.esper.epl.core.SelectExprEventTypeRegistry.Add(com.espertech.esper.client.EventType)">
            <summary>Adds an event type. </summary>
            <param name="eventType">to add</param>
        </member>
        <member name="T:com.espertech.esper.events.EventBeanManufacturer">
            <summary>
            Factory for creating an event bean instance by writing property values to an
            underlying object.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanManufacturer.Make(System.Object[])">
            <summary>
            Make an event object populating property values.
            </summary>
            <param name="properties">values to populate</param>
            <returns>
            event object
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprEvaluator">
            <summary>
            Interface for evaluating of an event tuple.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprEvaluator.Evaluate(com.espertech.esper.epl.expression.EvaluateParams)">
            <summary>
            Evaluate event tuple and return result.
            </summary>
            <param name="evaluateParams">The evaluate params.</param>
            <returns>
            evaluation result, a bool value for OR/AND-type evalution nodes.
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprEvaluator.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <returns>
            type returned when evaluated
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprEvaluator.EventType">
            <summary>
            Returns the event type.
            </summary>
            <value>The type of the event.</value>
        </member>
        <member name="M:com.espertech.esper.epl.core.SelectExprJoinWildcardProcessorFactory.Create(System.Collections.Generic.ICollection{System.Int32},System.String,System.String[],com.espertech.esper.client.EventType[],com.espertech.esper.events.EventAdapterService,com.espertech.esper.epl.spec.InsertIntoDesc,com.espertech.esper.epl.core.SelectExprEventTypeRegistry,com.espertech.esper.epl.core.MethodResolutionService,System.Attribute[],com.espertech.esper.client.ConfigurationInformation)">
            <summary>
            Ctor.
            </summary>
            <param name="assignedTypeNumberStack">The assigned type number stack.</param>
            <param name="statementId">The statement id.</param>
            <param name="streamNames">name of each stream</param>
            <param name="streamTypes">type of each stream</param>
            <param name="eventAdapterService">service for generating events and handling event types</param>
            <param name="insertIntoDesc">describes the insert-into clause</param>
            <param name="selectExprEventTypeRegistry">registry for event type to statements</param>
            <param name="methodResolutionService">for resolving writable properties</param>
            <param name="annotations">The annotations.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
            <throws>com.espertech.esper.epl.expression.ExprValidationException if the expression validation failed</throws>
        </member>
        <member name="T:com.espertech.esper.epl.core.SelectExprJoinWildcardProcessorMap">
            <summary>
            Processor for select-clause expressions that handles wildcards. Computes results based on matching events.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.core.SelectExprJoinWildcardProcessorObjectArray">
            <summary>Processor for select-clause expressions that handles wildcards. Computes results based on matching events. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.core.SelectExprProcessorFactory">
            <summary>
            Factory for select expression processors.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.SelectExprProcessorFactory.GetProcessor(System.Collections.Generic.ICollection{System.Int32},System.Collections.Generic.IList{com.espertech.esper.epl.spec.SelectClauseElementCompiled},System.Boolean,com.espertech.esper.epl.spec.InsertIntoDesc,com.espertech.esper.epl.spec.ForClauseSpec,com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.events.EventAdapterService,com.espertech.esper.core.service.StatementResultService,com.espertech.esper.events.vaevent.ValueAddEventService,com.espertech.esper.epl.core.SelectExprEventTypeRegistry,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.expression.ExprEvaluatorContext,com.espertech.esper.epl.variable.VariableService,com.espertech.esper.script.ScriptingService,com.espertech.esper.schedule.TimeProvider,System.String,System.String,System.String,System.Attribute[],com.espertech.esper.core.context.util.ContextDescriptor,com.espertech.esper.client.ConfigurationInformation,com.espertech.esper.epl.core.SelectExprProcessorDeliveryCallback)">
            <summary>
            Returns the processor to use for a given select-clause.
            </summary>
            <param name="assignedTypeNumberStack">The assigned type number stack.</param>
            <param name="selectionList">the list of select clause elements/items, which are expected to have been validated</param>
            <param name="isUsingWildcard">true if the wildcard (*) occurs in the select clause</param>
            <param name="insertIntoDesc">contains column names for the optional insert-into clause (if supplied)</param>
            <param name="forClauseSpec">For clause spec.</param>
            <param name="typeService">serves stream type information</param>
            <param name="eventAdapterService">for generating wrapper instances for events</param>
            <param name="statementResultService">handles listeners/subscriptions awareness to reduce output result generation</param>
            <param name="valueAddEventService">service that handles update events and variant events</param>
            <param name="selectExprEventTypeRegistry">registry for event type to statements</param>
            <param name="methodResolutionService">for resolving write methods</param>
            <param name="exprEvaluatorContext">context for expression evalauation</param>
            <param name="variableService">The variable service.</param>
            <param name="scriptingService">The scripting service.</param>
            <param name="timeProvider">The time provider.</param>
            <param name="engineURI">The engine URI.</param>
            <param name="statementId">The statement id.</param>
            <param name="statementName">Name of the statement.</param>
            <param name="annotations">The annotations.</param>
            <param name="contextDescriptor">The context descriptor.</param>
            <param name="configuration">The configuration.</param>
            <param name="selectExprProcessorCallback">The select expr processor callback.</param>
            <returns>select-clause expression processor</returns>
            <throws>ExprValidationException to indicate the select expression cannot be validated</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.SelectExprProcessorFactory.VerifyNameUniqueness(System.Collections.Generic.IList{com.espertech.esper.epl.spec.SelectClauseElementCompiled})">
            <summary>Verify that each given name occurs exactly one. </summary>
            <param name="selectionList">is the list of select items to verify names</param>
            <throws>com.espertech.esper.epl.expression.ExprValidationException thrown if a name occured more then once</throws>
        </member>
        <member name="T:com.espertech.esper.epl.core.SelectExprProcessorHelper">
            <summary>
            Processor for select-clause expressions that handles a list of selection items 
            represented by expression nodes. Computes results based on matching events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.SelectExprProcessorHelper.#ctor(System.Collections.Generic.ICollection{System.Int32},System.Collections.Generic.IList{com.espertech.esper.epl.spec.SelectClauseExprCompiledSpec},System.Collections.Generic.IList{com.espertech.esper.epl.core.eval.SelectExprStreamDesc},com.espertech.esper.epl.spec.InsertIntoDesc,System.Boolean,com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.events.EventAdapterService,com.espertech.esper.events.vaevent.ValueAddEventService,com.espertech.esper.epl.core.SelectExprEventTypeRegistry,com.espertech.esper.epl.core.MethodResolutionService,System.String,System.Attribute[],com.espertech.esper.client.ConfigurationInformation)">
            <summary>
            Ctor.
            </summary>
            <param name="assignedTypeNumberStack">The assigned type number stack.</param>
            <param name="selectionList">list of select-clause items</param>
            <param name="selectedStreams">The selected streams.</param>
            <param name="insertIntoDesc">descriptor for insert-into clause contains column names overriding select clause names</param>
            <param name="isUsingWildcard">true if the wildcard (*) appears in the select clause</param>
            <param name="typeService">service for information about streams</param>
            <param name="eventAdapterService">service for generating events and handling event types</param>
            <param name="valueAddEventService">service that handles update events</param>
            <param name="selectExprEventTypeRegistry">service for statement to type registry</param>
            <param name="methodResolutionService">for resolving methods</param>
            <param name="statementId">The statement id.</param>
            <param name="annotations">The annotations.</param>
            <param name="configuration">The configuration.</param>
            <throws>com.espertech.esper.epl.expression.ExprValidationException thrown if any of the expressions don't validate</throws>
        </member>
        <member name="T:com.espertech.esper.epl.core.SelectExprProcessorWDeliveryCallback">
            <summary>Interface for processors of select-clause items, implementors are computing results based on matching events. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.core.SelectExprResultProcessor">
            <summary>
            A select expression processor that check what type of result (synthetic and natural) event is expected and produces.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.SelectExprResultProcessor.#ctor(com.espertech.esper.core.service.StatementResultService,com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.epl.core.BindProcessor)">
            <summary>
            Ctor.
            </summary>
            <param name="statementResultService">for awareness of listeners and subscribers handles output results</param>
            <param name="syntheticProcessor">is the processor generating synthetic events according to the select clause</param>
            <param name="bindProcessor">for generating natural object column results</param>
            <throws>ExprValidationException if the validation failed</throws>
        </member>
        <member name="T:com.espertech.esper.epl.core.SelectExprWildcardProcessor">
            <summary>Processor for select-clause expressions that handles wildcards for single streams with no insert-into. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.SelectExprWildcardProcessor.#ctor(com.espertech.esper.client.EventType)">
            <summary>Ctor. </summary>
            <param name="eventType">is the type of event this processor produces</param>
            <throws>com.espertech.esper.epl.expression.ExprValidationException if the expression validation failed</throws>
        </member>
        <member name="T:com.espertech.esper.epl.core.StreamNotFoundException">
            <summary> Exception to indicate that a stream name could not be resolved.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.StreamNotFoundException.#ctor(System.String,com.espertech.esper.collection.Pair{System.Int32,System.String})">
            <summary>
            Ctor.
            </summary>
            <param name="msg">message</param>
            <param name="suggestion">optional suggestion for a matching name</param>
        </member>
        <member name="T:com.espertech.esper.epl.core.StreamTypeService">
            <summary>
            Service supplying stream number and property type information.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.StreamTypeService.ResolveByPropertyName(System.String,System.Boolean)">
            <summary>
            Returns the offset of the stream and the type of the property for the given property name, by looking through the types offered and matching up.
            <para>
            This method considers only a property name and looks at all streams to resolve the property name.
            </para>
            </summary>
            <param name="propertyName">property name in event</param>
            <param name="obtainFragment">if set to <c>true</c> [obtain fragment].</param>
            <returns>
            descriptor with stream number, property type and property name
            </returns>
            <throws>DuplicatePropertyException to indicate property was found twice</throws>
            <throws>PropertyNotFoundException to indicate property could not be resolved</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.StreamTypeService.ResolveByPropertyNameExplicitProps(System.String,System.Boolean)">
            <summary>
            Returns the offset of the stream and the type of the property for the given property name, 
            by looking through the types offered considering only explicitly listed properties and matching up.
            <para>
            This method considers only a property name and looks at all streams to resolve the property name.
            </para>
            </summary>
            <param name="propertyName">property name in event</param>
            <param name="obtainFragment">if set to <c>true</c> [obtain fragment].</param>
            <returns>
            descriptor with stream number, property type and property name
            </returns>
            <throws>DuplicatePropertyException to indicate property was found twice</throws>
            <throws>PropertyNotFoundException to indicate property could not be resolved</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.StreamTypeService.ResolveByStreamAndPropName(System.String,System.String,System.Boolean)">
            <summary>
            Returns the offset of the stream and the type of the property for the given property name, 
            by using the specified stream name to resolve the property. 
            <para>
            This method considers and explicit stream name and property name, both parameters are required.
            </para>
            </summary>
            <param name="streamName">name of stream, required</param>
            <param name="propertyName">property name in event, , required</param>
            <param name="obtainFragment">if set to <c>true</c> [obtain fragment].</param>
            <returns>
            descriptor with stream number, property type and property name
            </returns>
            <throws>PropertyNotFoundException to indicate property could not be resolved</throws>
            <throws>StreamNotFoundException to indicate stream name could not be resolved</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.StreamTypeService.ResolveByStreamAndPropNameExplicitProps(System.String,System.String,System.Boolean)">
            <summary>
            Returns the offset of the stream and the type of the property for the given property name, by 
            using the specified stream name to resolve the property and considering only explicitly listed 
            properties. 
            <para>
            This method considers and explicit stream name and property name, both parameters are required.
            </para>
            </summary>
            <param name="streamName">name of stream, required</param>
            <param name="propertyName">property name in event, , required</param>
            <param name="obtainFragment">if set to <c>true</c> [obtain fragment].</param>
            <returns>
            descriptor with stream number, property type and property name
            </returns>
            <throws>PropertyNotFoundException to indicate property could not be resolved</throws>
            <throws>StreamNotFoundException to indicate stream name could not be resolved</throws>
        </member>
        <member name="M:com.espertech.esper.epl.core.StreamTypeService.ResolveByStreamAndPropName(System.String,System.Boolean)">
            <summary>
            Returns the offset of the stream and the type of the property for the given property name, by looking through the types offered and matching up.
            <para>
            This method considers a single property name that may or may not be prefixed by a stream name. The resolution first attempts to find the property 
            name itself, then attempts to consider a stream name that may be part of the property name.  
            </para>
            </summary>
            <param name="streamAndPropertyName">stream name and property name (e.g. s0.p0) or just a property name (p0)</param>
            <param name="obtainFragment"></param>
            <returns>descriptor with stream number, property type and property name</returns>
            <throws>DuplicatePropertyException to indicate property was found twice</throws>
            <throws>PropertyNotFoundException to indicate property could not be resolved</throws>
        </member>
        <member name="P:com.espertech.esper.epl.core.StreamTypeService.StreamNames">
            <summary>
            Returns an array of event stream names in the order declared.
            </summary>
            <value>stream names</value>
        </member>
        <member name="P:com.espertech.esper.epl.core.StreamTypeService.EventTypes">
            <summary>
            Returns an array of event types for each event stream in the order declared.
            </summary>
            <value>event types</value>
        </member>
        <member name="P:com.espertech.esper.epl.core.StreamTypeService.IsIStreamOnly">
            <summary>
            Returns true for each stream without a data window.
            </summary>
            <value>true for non-windowed streams.</value>
        </member>
        <member name="T:com.espertech.esper.epl.core.StreamTypeServiceImpl">
            <summary>
            Implementation that provides stream number and property type information.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.StreamTypeServiceImpl.#ctor(System.String,System.Boolean)">
            <summary>Ctor. </summary>
            <param name="engineURI">engine URI</param>
            <param name="isOnDemandStreams"></param>
        </member>
        <member name="M:com.espertech.esper.epl.core.StreamTypeServiceImpl.#ctor(com.espertech.esper.client.EventType,System.String,System.Boolean,System.String)">
            <summary>Ctor. </summary>
            <param name="eventType">a single event type for a single stream</param>
            <param name="streamName">the stream name of the single stream</param>
            <param name="engineURI">engine URI</param>
            <param name="isIStreamOnly">true for no datawindow for stream</param>
        </member>
        <member name="M:com.espertech.esper.epl.core.StreamTypeServiceImpl.#ctor(com.espertech.esper.client.EventType[],System.String[],System.Boolean[],System.String,System.Boolean)">
            <summary>Ctor. </summary>
            <param name="eventTypes">array of event types, one for each stream</param>
            <param name="streamNames">array of stream names, one for each stream</param>
            <param name="isIStreamOnly">true for no datawindow for stream</param>
            <param name="engineURI">engine URI</param>
            <param name="isOnDemandStreams">true to indicate that all streams are on-demand pull-based</param>
        </member>
        <member name="M:com.espertech.esper.epl.core.StreamTypeServiceImpl.#ctor(com.espertech.esper.compat.collections.LinkedHashMap{System.String,com.espertech.esper.collection.Pair{com.espertech.esper.client.EventType,System.String}},System.String,System.Boolean,System.Boolean)">
            <summary>Ctor. </summary>
            <param name="namesAndTypes">is the ordered list of stream names and event types available (stream zero to N)</param>
            <param name="isStreamZeroUnambigous">indicates whether when a property is found in stream zero and another stream an exception should bethrown or the stream zero should be assumed </param>
            <param name="engineURI">uri of the engine</param>
            <param name="requireStreamNames">is true to indicate that stream names are required for any non-zero streams (for subqueries)</param>
        </member>
        <member name="T:com.espertech.esper.epl.core.ViewResourceDelegateUnverified">
            <summary>
            Coordinates between view factories and requested resource (by expressions) the availability of view resources to expressions.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.core.ViewResourceDelegateVerified">
            <summary>
            Coordinates between view factories and requested resource (by expressions) the availability of view resources to expressions.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.core.ViewResourceDelegateVerifiedStream">
            <summary>
            Coordinates between view factories and requested resource (by expressions) the availability of view resources to expressions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.core.ViewResourceDelegateVerifiedStream.#ctor(System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprPreviousNode},System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprPriorNode}})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.core.ViewResourceDelegateVerifiedStream"/> class.
            </summary>
            <param name="previousRequests">The previous requests.</param>
            <param name="priorRequests">The prior requests.</param>
        </member>
        <member name="F:com.espertech.esper.epl.datetime.calop.ApacheCommonsDateUtils.MILLIS_PER_SECOND">
            <summary>
            Number of milliseconds in a standard second.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.datetime.calop.ApacheCommonsDateUtils.MILLIS_PER_MINUTE">
            <summary>
            Number of milliseconds in a standard minute.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.datetime.calop.ApacheCommonsDateUtils.MILLIS_PER_HOUR">
            <summary>
            Number of milliseconds in a standard hour.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.datetime.calop.ApacheCommonsDateUtils.MILLIS_PER_DAY">
            <summary>
            Number of milliseconds in a standard day.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.datetime.calop.ApacheCommonsDateUtils.SEMI_MONTH">
            <summary>
            This is half a month, so this represents whether a date is in the top
            or bottom half of the month.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.datetime.calop.ApacheCommonsDateUtils.MODIFY_TRUNCATE">
            <summary>
            Constant marker for truncating 
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.datetime.calop.ApacheCommonsDateUtils.MODIFY_ROUND">
            <summary>
            Constant marker for rounding
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.datetime.calop.ApacheCommonsDateUtils.MODIFY_CEILING">
            <summary>
            Constant marker for ceiling
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.datetime.calop.DateTimeFieldMath.GetActualMinimum(System.DateTime,System.Int32)">
            <summary>
            Gets the actual minimum.
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.datetime.calop.DateTimeFieldMath.GetActualMaximum(System.DateTime,System.Int32)">
            <summary>
            Gets the actual maximum.
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.datetime.calop.DateTimeFieldMath.SetFieldValue(System.DateTime,System.Int32,System.Int32)">
            <summary>
            Sets the field value.
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.datetime.calop.DateTimeFieldMath.GetFieldValue(System.DateTime,System.Int32)">
            <summary>
            Gets the field value.
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.datetime.calop.DateTimeFieldMath.AddUsingField(System.DateTime,System.Int32,System.Int32)">
            <summary>
            Adds using field to indicate which datetime field to add to.
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="field">The field.</param>
            <param name="amount">The amount.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.datetime.eval.DatetimeMethodEnumMetaData.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="F:com.espertech.esper.epl.datetime.eval.DatetimeMethodEnumParams.INPUT_INTERVAL">
            <summary>Interval. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.datetime.eval.ExprDotEvalDT.DTLocalEvaluatorIntervalComp">
            <summary>
            Interval methods.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.datetime.eval.ExprDotEvalDT.DTLocalEvaluatorIntervalComp.Evaluate(System.Object,System.Object,com.espertech.esper.client.EventBean[],System.Boolean,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Evaluates the specified start timestamp.
            </summary>
            <param name="startTimestamp">The start timestamp.</param>
            <param name="endTimestamp">The end timestamp.</param>
            <param name="eventsPerStream">The events per stream.</param>
            <param name="isNewData">if set to <c>true</c> [is new data].</param>
            <param name="exprEvaluatorContext">The expr evaluator context.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.epl.datetime.interval.IntervalComputerFactory.IntervalComputerConstantAfter">
            <summary>After. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.datetime.interval.IntervalComputerFactory.IntervalComputerConstantBefore">
            <summary>Before. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.datetime.interval.IntervalComputerFactory.IntervalComputerConstantCoincides">
            <summary>Coincides. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.datetime.interval.IntervalComputerFactory.IntervalComputerDuringNoParam">
            <summary>During And Includes. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.datetime.interval.IntervalComputerFactory.IntervalComputerFinishesNoParam">
            <summary>Finishes. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.datetime.interval.IntervalComputerFactory.IntervalComputerFinishedByNoParam">
            <summary>Finishes-By. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.datetime.interval.IntervalComputerFactory.IntervalComputerMeetsNoParam">
            <summary>Meets. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.datetime.interval.IntervalComputerFactory.IntervalComputerMetByNoParam">
            <summary>Met-By. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.datetime.interval.IntervalComputerFactory.IntervalComputerOverlapsNoParam">
            <summary>Overlaps. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.datetime.interval.IntervalComputerFactory.IntervalComputerOverlappedByNoParam">
            <summary>OverlappedBy. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.datetime.interval.IntervalComputerFactory.IntervalComputerStartsNoParam">
            <summary>Starts. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.datetime.interval.IntervalComputerFactory.IntervalComputerStartedByNoParam">
            <summary>Started-by. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.datetime.interval.IntervalOpImpl.GetFilterDesc(com.espertech.esper.client.EventType[],com.espertech.esper.epl.datetime.eval.DatetimeMethodEnum,System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode},com.espertech.esper.epl.expression.ExprDotNodeFilterAnalyzerInput)">
            <summary>
            Obtain information used by filter analyzer to handle this dot-method invocation as part of query planning/indexing.
            </summary>
            <param name="typesPerStream">The types per stream.</param>
            <param name="currentMethod">The current method.</param>
            <param name="currentParameters">The current parameters.</param>
            <param name="inputDesc">The input desc.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.epl.db.ColumnSettings">
            <summary>
            Column-level configuration settings are held in this immutable descriptor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.ColumnSettings.#ctor(com.espertech.esper.client.ConfigurationDBRef.MetadataOriginEnum,com.espertech.esper.client.ConfigurationDBRef.ColumnChangeCaseEnum,System.Collections.Generic.IDictionary{System.Type,System.Type})">
            <summary>
            Ctor.
            </summary>
            <param name="metadataOriginEnum">defines how to obtain output columnn metadata</param>
            <param name="columnCaseConversionEnum">defines if to change case on output columns</param>
            <param name="dataTypesMapping">The data types mapping.</param>
        </member>
        <member name="P:com.espertech.esper.epl.db.ColumnSettings.MetadataRetrievalEnum">
            <summary>Returns the metadata orgin.</summary>
            <returns>indicator how the engine obtains output column metadata</returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.ColumnSettings.ColumnCaseConversionEnum">
            <summary>Returns the change case policy.</summary>
            <returns>indicator how the engine should change case on output columns</returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.ColumnSettings.DataTypesMapping">
            <summary>
            Gets the data types mapping.
            </summary>
            <value>The data types mapping.</value>
        </member>
        <member name="T:com.espertech.esper.epl.db.ConnectionCache">
            <summary>
            Base class for a Connection and DbCommand cache.
            <para>
            Implementations control the lifecycle via lifecycle methods, or
            may simple obtain new resources and close new resources every time.
            </para>
            <para>
            This is not a pool - a cache is associated with one client class and that
            class is expected to use cache methods in well-defined order of get, done-with and destroy.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.ConnectionCache.GetConnection">
            <summary> Returns a cached or new connection and statement pair.</summary>
            <returns> connection and statement pair
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.ConnectionCache.DoneWith(com.espertech.esper.collection.Pair{com.espertech.esper.epl.db.DbDriver,com.espertech.esper.epl.db.DbDriverCommand})">
            <summary> Indicate to return the connection and statement pair after use.</summary>
            <param name="pair">is the resources to return
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.db.ConnectionCache.Dispose">
            <summary> Destroys cache closing all resources cached, if any.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.ConnectionCache.#ctor(com.espertech.esper.epl.db.DatabaseConnectionFactory,System.String,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Ctor.
            </summary>
            <param name="databaseConnectionFactory">connection factory</param>
            <param name="sql">statement sql</param>
            <param name="contextAttributes">The context attributes.</param>
        </member>
        <member name="M:com.espertech.esper.epl.db.ConnectionCache.Close(com.espertech.esper.collection.Pair{com.espertech.esper.epl.db.DbDriver,com.espertech.esper.epl.db.DbDriverCommand})">
            <summary> Close resources.</summary>
            <param name="pair">is the resources to close.
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.db.ConnectionCache.MakeNew">
            <summary> Make a new pair of resources.</summary>
            <returns> pair of resources
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.ConnectionCache.GetSqlFragments(System.String)">
            <summary>
            Gets the SQL fragments.
            </summary>
            <param name="sql">The SQL.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.epl.db.ConnectionCacheImpl">
            <summary>
            Caches the Connection and DbCommand instance for reuse.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.ConnectionCacheImpl.#ctor(com.espertech.esper.epl.db.DatabaseConnectionFactory,System.String,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Ctor.
            </summary>
            <param name="databaseConnectionFactory">connection factory</param>
            <param name="sql">statement sql</param>
            <param name="contextAttributes">The context attributes.</param>
        </member>
        <member name="M:com.espertech.esper.epl.db.ConnectionCacheImpl.GetConnection">
            <summary>
            Returns a cached or new connection and statement pair.
            </summary>
            <returns>connection and statement pair</returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.ConnectionCacheImpl.DoneWith(com.espertech.esper.collection.Pair{com.espertech.esper.epl.db.DbDriver,com.espertech.esper.epl.db.DbDriverCommand})">
            <summary>
            Indicate to return the connection and statement pair after use.
            </summary>
            <param name="pair">is the resources to return</param>
        </member>
        <member name="M:com.espertech.esper.epl.db.ConnectionCacheImpl.Dispose">
            <summary>
            Destroys cache closing all resources cached, if any.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.db.ConnectionNoCacheImpl">
            <summary>
            Implementation of a connection cache that simply doesn't cache but gets
            a new connection and statement every request, and closes these every time
            a client indicates done.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.ConnectionNoCacheImpl.#ctor(com.espertech.esper.epl.db.DatabaseConnectionFactory,System.String,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Ctor.
            </summary>
            <param name="databaseConnectionFactory">is the connection factory</param>
            <param name="sql">is the statement sql</param>
            <param name="contextAttributes">The context attributes.</param>
        </member>
        <member name="M:com.espertech.esper.epl.db.ConnectionNoCacheImpl.GetConnection">
            <summary>
            Returns a cached or new connection and statement pair.
            </summary>
            <returns>connection and statement pair</returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.ConnectionNoCacheImpl.DoneWith(com.espertech.esper.collection.Pair{com.espertech.esper.epl.db.DbDriver,com.espertech.esper.epl.db.DbDriverCommand})">
            <summary>
            Indicate to return the connection and statement pair after use.
            </summary>
            <param name="pair">is the resources to return</param>
        </member>
        <member name="M:com.espertech.esper.epl.db.ConnectionNoCacheImpl.Dispose">
            <summary>
            Destroys cache closing all resources cached, if any.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.db.DatabaseConfigException">
            <summary>
            Exception to indicate that a stream name could not be resolved.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabaseConfigException.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="msg">message
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabaseConfigException.#ctor(System.String,System.Exception)">
            <summary> Ctor.</summary>
            <param name="message">error message
            </param>
            <param name="cause">cause is the inner exception
            </param>
        </member>
        <member name="T:com.espertech.esper.epl.db.DatabaseConfigService">
            <summary> Service providing database connection factory and configuration information
            for use with historical data polling.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabaseConfigService.GetConnectionFactory(System.String)">
            <summary> Returns a connection factory for a configured database.</summary>
            <param name="databaseName">is the name of the database
            </param>
            <returns> is a connection factory to use to get connections to the database
            </returns>
            <throws>  DatabaseConfigException is thrown to indicate database configuration errors </throws>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabaseConfigService.GetQuerySetting(System.String)">
            <summary>
            Returns the column metadata settings for the database.
            </summary>
            <param name="databaseName">the database name</param>
            <returns>indicators for change case, metadata retrieval strategy and others</returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabaseConfigService.GetConnectionCache(System.String,System.String,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Returns true to indicate a setting to retain connections between lookups.
            </summary>
            <param name="databaseName">is the name of the database</param>
            <param name="preparedStatementText">is the sql text</param>
            <param name="contextAttributes">The context attributes.</param>
            <returns>
            a cache implementation to cache connection and prepared statements
            </returns>
            <throws>DatabaseConfigException is thrown to indicate database configuration errors</throws>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabaseConfigService.GetDataCache(System.String,com.espertech.esper.core.context.util.EPStatementAgentInstanceHandle)">
            <summary>
            Returns a new cache implementation for this database.
            </summary>
            <param name="databaseName">is the name of the database to return a new cache implementation for for</param>
            <param name="epStatementAgentInstanceHandle">is the statements-own handle for use in registering callbacks with services</param>
            <returns>cache implementation</returns>
            <throws>DatabaseConfigException is thrown to indicate database configuration errors</throws>
        </member>
        <member name="T:com.espertech.esper.epl.db.DatabaseConfigServiceImpl">
            <summary> Implementation provides database instance services such as connection factory and
            connection settings.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabaseConfigServiceImpl.#ctor(System.Collections.Generic.IDictionary{System.String,com.espertech.esper.client.ConfigurationDBRef},com.espertech.esper.schedule.SchedulingService,com.espertech.esper.schedule.ScheduleBucket)">
            <summary> Ctor.</summary>
            <param name="mapDatabaseRef">is a map of database name and database configuration entries
            </param>
            <param name="schedulingService">is for scheduling callbacks for a cache
            </param>
            <param name="scheduleBucket">is a system bucket for all scheduling callbacks for caches
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabaseConfigServiceImpl.GetConnectionCache(System.String,System.String,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Returns true to indicate a setting to retain connections between lookups.
            </summary>
            <param name="databaseName">is the name of the database</param>
            <param name="preparedStatementText">is the sql text</param>
            <param name="contextAttributes">The context attributes.</param>
            <returns>
            a cache implementation to cache connection and prepared statements
            </returns>
            <throws>  DatabaseConfigException is thrown to indicate database configuration errors </throws>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabaseConfigServiceImpl.GetConnectionFactory(System.String)">
            <summary>
            Returns a connection factory for a configured database.
            </summary>
            <param name="databaseName">is the name of the database</param>
            <returns>
            is a connection factory to use to get connections to the database
            </returns>
            <throws>  DatabaseConfigException is thrown to indicate database configuration errors </throws>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabaseConfigServiceImpl.GetDataCache(System.String,com.espertech.esper.core.context.util.EPStatementAgentInstanceHandle)">
            <summary>
            Returns a new cache implementation for this database.
            </summary>
            <param name="databaseName">the name of the database to return a new cache implementation for for</param>
            <param name="epStatementAgentInstanceHandle">is the statements-own handle for use in registering callbacks with services</param>
            <returns>cache implementation</returns>
            <throws>  DatabaseConfigException is thrown to indicate database configuration errors </throws>
        </member>
        <member name="T:com.espertech.esper.epl.db.DatabaseConnectionFactory">
            <summary>
             Factory for new database connections.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.db.DatabaseConnectionFactory.Driver">
            <summary>
            Gets the database driver.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.db.DatabaseDriverConnFactory">
            <summary>
            Database connection factory using DbProviderFactory to obtain connections.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabaseDriverConnFactory.#ctor(com.espertech.esper.client.DbDriverFactoryConnection,com.espertech.esper.client.ConnectionSettings)">
            <summary>
            Ctor.
            </summary>
            <param name="dbConfig">is the database provider configuration</param>
            <param name="connectionSettings">are connection-level settings</param>
            <throws>  DatabaseConfigException thrown if the driver class cannot be loaded </throws>
        </member>
        <member name="P:com.espertech.esper.epl.db.DatabaseDriverConnFactory.Driver">
            <summary>
            Gets the database driver.
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.epl.db.DatabasePollingViewable">
            <summary>
            Implements a poller viewable that uses a polling strategy, a cache and
            some input parameters extracted from event streams to perform the polling.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewable.#ctor(System.Int32,System.Collections.Generic.IList{System.String},com.espertech.esper.epl.db.PollExecStrategy,com.espertech.esper.epl.db.DataCache,com.espertech.esper.client.EventType)">
            <summary>
            Ctor.
            </summary>
            <param name="myStreamNumber">is the stream number of the view</param>
            <param name="inputParameters">are the event property names providing input parameter keys</param>
            <param name="pollExecStrategy">is the strategy to use for retrieving results</param>
            <param name="dataCache">is looked up before using the strategy</param>
            <param name="eventType">is the type of events generated by the view</param>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewable.Stop">
            <summary>
            Stops the view
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewable.Validate(com.espertech.esper.epl.core.EngineImportService,com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService,com.espertech.esper.script.ScriptingService,com.espertech.esper.epl.expression.ExprEvaluatorContext,com.espertech.esper.client.ConfigurationInformation,com.espertech.esper.schedule.SchedulingService,System.String,System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode}},com.espertech.esper.events.EventAdapterService,System.String,System.String,System.Attribute[])">
            <summary>
            Validate the view.
            </summary>
            <param name="engineImportService">The engine import service.</param>
            <param name="streamTypeService">supplies the types of streams against which to validate</param>
            <param name="methodResolutionService">for resolving imports and classes and methods</param>
            <param name="timeProvider">for providing current time</param>
            <param name="variableService">for access to variables</param>
            <param name="scriptingService">The scripting service.</param>
            <param name="exprEvaluatorContext">The expression evaluator context.</param>
            <param name="configSnapshot">The config snapshot.</param>
            <param name="schedulingService">The scheduling service.</param>
            <param name="engineURI">The engine URI.</param>
            <param name="sqlParameters">The SQL parameters.</param>
            <param name="eventAdapterService">The event adapter service.</param>
            <param name="statementName">Name of the statement.</param>
            <param name="statementId">The statement id.</param>
            <param name="annotations">The annotations.</param>
            <throws>  ExprValidationException is thrown to indicate an exception in validating the view </throws>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewable.Poll(com.espertech.esper.client.EventBean[][],com.espertech.esper.epl.join.pollindex.PollResultIndexingStrategy,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Poll for stored historical or reference data using events per stream and
            returing for each event-per-stream row a separate list with events
            representing the poll result.
            </summary>
            <param name="lookupEventsPerStream">is the events per stream where the
            first dimension is a number of rows (often 1 depending on windows used) and
            the second dimension is the number of streams participating in a join.</param>
            <param name="indexingStrategy">the strategy to use for converting poll results into a indexed table for fast lookup</param>
            <param name="exprEvaluatorContext">The expression evaluator context.</param>
            <returns>
            array of lists with one list for each event-per-stream row
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewable.AddView(com.espertech.esper.view.View)">
            <summary>
            Add a view to the viewable object.
            </summary>
            <param name="view">to add</param>
            <returns>view to add</returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewable.RemoveView(com.espertech.esper.view.View)">
            <summary>
            Remove a view.
            </summary>
            <param name="view">to remove</param>
            <returns>
            true to indicate that the view to be removed existed within this view, false if the view to
            remove could not be found
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewable.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.DatabasePollingViewable.RequiredStreams">
            <summary>
            Returns the a set of stream numbers of all streams that provide
            property values in any of the parameter expressions to the stream.
            </summary>
            <value></value>
            <returns>set of stream numbers</returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.DatabasePollingViewable.HasRequiredStreams">
            <summary>
            Returns true if the parameters expressions to the historical require
            other stream's data, or false if there are no parameters or all
            parameter expressions are only contants and variables without
            properties of other stream events.
            </summary>
            <value></value>
            <returns>indicator whether properties are required for parameter evaluation</returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.DatabasePollingViewable.DataCacheThreadLocal">
            <summary>
            Historical views are expected to provide a thread-local data cache
            for use in keeping row (<seealso cref="T:com.espertech.esper.client.EventBean"/> references) returned during
            iteration stable, since the concept of a primary key does not exist.
            </summary>
            <value></value>
            <returns>thread-local cache, can be null for any thread to indicate no caching</returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.DatabasePollingViewable.Views">
            <summary>
            Returns all added views.
            </summary>
            <returns>list of added views</returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.DatabasePollingViewable.HasViews">
            <summary>
            Test is there are any views to the Viewable.
            </summary>
            <value></value>
            <returns> true indicating there are child views, false indicating there are no child views
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.DatabasePollingViewable.EventType">
            <summary>
            Provides metadata information about the type of object the event collection contains.
            </summary>
            <value></value>
            <returns> metadata for the objects in the collection
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.pollindex.PollResultIndexingStrategy">
            <summary>
            A strategy for converting a poll-result into a potentially indexed table.
            <para/> 
            Some implementations may decide to not index the poll result and simply hold a reference to the result. Other implementations may use predetermined index properties to index the poll result for faster lookup.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.pollindex.PollResultIndexingStrategy.Index(System.Collections.Generic.IList{com.espertech.esper.client.EventBean},System.Boolean)">
            <summary>
            Build and index of a poll result.
            </summary>
            <param name="pollResult">result of a poll operation</param>
            <param name="isActiveCache">true to indicate that caching is active and therefore index building makes sense asthe index structure is not a throw-away.</param>
            <returns>indexed collection of poll results</returns>
        </member>
        <member name="T:com.espertech.esper.epl.db.DatabasePollingViewableFactory">
            <summary>
            Factory for a view onto historical data via SQL statement.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewableFactory.CreateDBStatementView(System.String,System.Int32,com.espertech.esper.epl.spec.DBStatementStreamSpec,com.espertech.esper.epl.db.DatabaseConfigService,com.espertech.esper.events.EventAdapterService,com.espertech.esper.core.context.util.EPStatementAgentInstanceHandle,System.Collections.Generic.IEnumerable{System.Attribute},com.espertech.esper.client.hook.SQLColumnTypeConversion,com.espertech.esper.client.hook.SQLOutputRowConversion,System.Boolean)">
            <summary>
            Creates the viewable for polling via database SQL query.
            </summary>
            <param name="statementId">The statement id.</param>
            <param name="streamNumber">is the stream number of the view</param>
            <param name="databaseStreamSpec">provides the SQL statement, database name and additional info</param>
            <param name="databaseConfigService">for getting database connection and settings</param>
            <param name="eventAdapterService">for generating event beans from database information</param>
            <param name="epStatementAgentInstanceHandle">The ep statement agent instance handle.</param>
            <param name="contextAttributes">The db attributes.</param>
            <param name="columnTypeConversionHook">The column type conversion hook.</param>
            <param name="outputRowConversionHook">The output row conversion hook.</param>
            <param name="enableJDBCLogging">if set to <c>true</c> [enable JDBC logging].</param>
            <returns>viewable providing poll functionality</returns>
            <exception cref="T:com.espertech.esper.epl.expression.ExprValidationException">the validation failed</exception>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewableFactory.GetMetaDataSettings(com.espertech.esper.epl.db.DatabaseConfigService,System.String)">
            <summary>
            Gets the meta data settings from the database configuration service for the specified
            database name.
            </summary>
            <param name="databaseConfigService"></param>
            <param name="databaseName"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewableFactory.CreateEventType(System.String,System.Int32,com.espertech.esper.epl.db.QueryMetaData,com.espertech.esper.events.EventAdapterService,com.espertech.esper.epl.spec.DBStatementStreamSpec,System.Func{com.espertech.esper.client.hook.SQLColumnTypeContext,System.Type},System.Func{com.espertech.esper.client.hook.SQLOutputRowTypeContext,System.Type})">
            <summary>
            Creates an event type from the query meta data.
            </summary>
            <param name="statementId">The statement id.</param>
            <param name="streamNumber">The stream number.</param>
            <param name="queryMetaData">The query meta data.</param>
            <param name="eventAdapterService">The event adapter service.</param>
            <param name="databaseStreamSpec">The database stream spec.</param>
            <param name="columnTypeConversionHook">The column type conversion hook.</param>
            <param name="outputRowConversionHook">The output row conversion hook.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewableFactory.GetDatabaseConnectionFactory(com.espertech.esper.epl.db.DatabaseConfigService,System.String)">
            <summary>
            Gets the database connection factory.
            </summary>
            <param name="databaseConfigService">The database config service.</param>
            <param name="databaseName">Name of the database.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewableFactory.GetSqlFragments(com.espertech.esper.epl.spec.DBStatementStreamSpec)">
            <summary>
            Gets the SQL fragments.
            </summary>
            <param name="databaseStreamSpec">The database stream spec.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewableFactory.GetQueryMetaData(com.espertech.esper.epl.spec.DBStatementStreamSpec,com.espertech.esper.epl.db.DatabaseConfigService,com.espertech.esper.epl.db.DbDriverCommand,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Gets the query meta data.
            </summary>
            <param name="databaseStreamSpec">The database stream spec.</param>
            <param name="databaseConfigService">The database config service.</param>
            <param name="dbCommand">The database command.</param>
            <param name="contextAttributes">The context attributes.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewableFactory.LexSampleSQL(System.String)">
            <summary>
            Lexes the sample SQL and inserts a "where 1=0" where-clause.
            </summary>
            <param name="querySQL">to inspect using lexer</param>
            <returns>sample SQL with where-clause inserted</returns>
            <exception cref="T:com.espertech.esper.epl.expression.ExprValidationException">indicates a lexer problem</exception>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewableFactory.GetExampleQueryMetaData(com.espertech.esper.epl.db.DbDriver,System.String,com.espertech.esper.epl.db.ColumnSettings,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Gets the example query meta data.
            </summary>
            <param name="dbDriver">The driver.</param>
            <param name="sampleSQL">The sample SQL.</param>
            <param name="metadataSetting">The metadata setting.</param>
            <param name="contextAttributes">The context attributes.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.DatabasePollingViewableFactory.CreateSamplePlaceholderStatement(System.Collections.Generic.IEnumerable{com.espertech.esper.util.PlaceholderParser.Fragment})">
            <summary>
            Creates the sample placeholder statement.
            </summary>
            <param name="parseFragements">The parse fragements.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.epl.db.DataCache">
            <summary>
            Implementations serve as caches for historical or reference data retrieved
            via lookup keys consisting or one or more rows represented by a list of events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.DataCache.GetCached(System.Object[])">
            <summary>
            Ask the cache if the keyed value is cached, returning a list or rows if the key
            is in the cache,or returning null to indicate no such key cached. Zero rows may
            also be cached.
            </summary>
            <param name="lookupKeys">is the keys to look up in the cache</param>
            <returns>
            a list of rows that can be empty is the key was found in the cache, or null if 
            the key is not found in the cache
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.DataCache.PutCached(System.Object[],com.espertech.esper.epl.join.table.EventTable)">
            <summary>
            Puts into the cache a key and a list of rows, or an empty list if zero rows.
            <para/>
            The put method is designed to be called when the cache does not contain a key as
            determined by the get method. Implementations typically simply overwrite any keys
             put into the cache that already existed in the cache.
            </summary>
            <param name="lookupKeys">is the keys to the cache entry</param>
            <param name="rows">is a number of rows</param>
        </member>
        <member name="P:com.espertech.esper.epl.db.DataCache.IsActive">
            <summary>
            Returns true if the cache is active and currently caching, or false if the
            cache is inactive and not currently caching
            </summary>
            <value><c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
            <returns>true for caching enabled, false for no caching taking place</returns>
        </member>
        <member name="T:com.espertech.esper.epl.db.DataCacheClearableMap">
            <summary>
            For use in iteration over historical joins, a <seealso cref="T:com.espertech.esper.epl.db.DataCache"/> implementation
            that serves to hold EventBean rows generated during a join evaluation involving
            historical streams stable for the same cache lookup keys.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.DataCacheClearableMap.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.DataCacheClearableMap.Clear">
            <summary>Clears the cache. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.db.DataCacheExpiringImpl">
            <summary>
            Implements an expiry-time cache that evicts data when data becomes stale after a given 
            number of seconds. 
            <para /> 
            The cache reference type indicates which backing Map is used: Weak type uses the WeakHashMap,
            Soft type uses the apache commons ReferenceMap, and Hard type simply uses a HashMap.
            </summary>
        </member>
        <member name="T:com.espertech.esper.schedule.ScheduleHandleCallback">
            <summary>Interface for scheduled callbacks. </summary>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleHandleCallback.ScheduledTrigger(com.espertech.esper.core.service.ExtensionServicesContext)">
            <summary>Callback that is invoked as indicated by a schedule added to the scheduling service. </summary>
            <param name="extensionServicesContext">is a marker interface for providing custom extension servicespassed to the triggered class </param>
        </member>
        <member name="M:com.espertech.esper.epl.db.DataCacheExpiringImpl.#ctor(System.Double,System.Double,com.espertech.esper.client.ConfigurationCacheReferenceType,com.espertech.esper.schedule.SchedulingService,com.espertech.esper.schedule.ScheduleSlot,com.espertech.esper.core.context.util.EPStatementAgentInstanceHandle)">
            <summary>Ctor. </summary>
            <param name="maxAgeSec">is the maximum age in seconds</param>
            <param name="purgeIntervalSec">is the purge interval in seconds</param>
            <param name="cacheReferenceType">indicates whether hard, soft or weak references are used in the cache</param>
            <param name="schedulingService">is a service for call backs at a scheduled time, for purging</param>
            <param name="scheduleSlot">slot for scheduling callbacks for this cache</param>
            <param name="epStatementAgentInstanceHandle">is the statements-own handle for use in registering callbacks with services</param>
        </member>
        <member name="P:com.espertech.esper.epl.db.DataCacheExpiringImpl.MaxAgeMSec">
            <summary>Returns the maximum age in milliseconds. </summary>
            <value>millisecon max age</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.DataCacheExpiringImpl.PurgeIntervalMSec">
            <summary>Returns the purge interval in milliseconds. </summary>
            <value>millisecond purge interval</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.DataCacheExpiringImpl.Count">
            <summary>Returns the current cache size. </summary>
            <value>cache size</value>
        </member>
        <member name="T:com.espertech.esper.epl.db.DataCacheFactory">
            <summary>Factory for data caches for use caching database query results and method invocation results. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.DataCacheFactory.GetDataCache(com.espertech.esper.client.ConfigurationDataCache,com.espertech.esper.core.context.util.EPStatementAgentInstanceHandle,com.espertech.esper.schedule.SchedulingService,com.espertech.esper.schedule.ScheduleBucket)">
            <summary>Creates a cache implementation for the strategy as defined by the cache descriptor. </summary>
            <param name="cacheDesc">cache descriptor</param>
            <param name="epStatementAgentInstanceHandle">statement handle for timer invocations</param>
            <param name="schedulingService">scheduling service for time-based caches</param>
            <param name="scheduleBucket">for ordered timer invokation</param>
            <returns>data cache implementation</returns>
        </member>
        <member name="T:com.espertech.esper.epl.db.DataCacheLRUImpl">
            <summary> Query result data cache implementation that uses a least-recently-used algorithm
            to store and evict query results.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.DataCacheLRUImpl.#ctor(System.Int32)">
            <summary> Ctor.</summary>
            <param name="cacheSize">is the maximum cache size
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.db.DataCacheLRUImpl.GetCached(System.Object[])">
            <summary> Retrieves an entry from the cache.
            The retrieved entry becomes the MRU (most recently used) entry.
            </summary>
            <param name="lookupKeys">the key whose associated value is to be returned.
            </param>
            <returns> the value associated to this key, or null if no value with this key exists in the cache.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.DataCacheLRUImpl.PutCached(System.Object[],com.espertech.esper.epl.join.table.EventTable)">
            <summary>
            Adds an entry to this cache.
            If the cache is full, the LRU (least recently used) entry is dropped.
            </summary>
            <param name="keys">The keys.</param>
            <param name="value">a value to be associated with the specified key.</param>
        </member>
        <member name="P:com.espertech.esper.epl.db.DataCacheLRUImpl.CacheSize">
            <summary> Returns the maximum cache size.</summary>
            <returns> maximum cache size
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.db.DataCacheNullImpl">
            <summary>
            Null implementation for a data cache that doesn't ever hit.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.DataCacheNullImpl.GetCached(System.Object[])">
            <summary>
            Ask the cache if the keyed value is cached, returning a list or rows if the key is in the cache,or returning null to indicate no such key cached. Zero rows may also be cached.
            </summary>
            <param name="lookupKeys">is the keys to look up in the cache</param>
            <returns>
            a list of rows that can be empty is the key was found in the cache, or null ifthe key is not found in the cache
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.DataCacheNullImpl.PutCached(System.Object[],com.espertech.esper.epl.join.table.EventTable)">
            <summary>
            Puts into the cache a key and a list of rows, or an empty list if zero rows.
            <para/>
            The put method is designed to be called when the cache does not contain a key as
            determined by the get method. Implementations typically simply overwrite any keys put
            into the cache that already existed in the cache.
            </summary>
            <param name="lookupKeys">is the keys to the cache entry</param>
            <param name="rows">is a number of rows</param>
        </member>
        <member name="P:com.espertech.esper.epl.db.DataCacheNullImpl.IsActive">
            <summary>
            Returns true if the cache is active and currently caching, or false if the cache is inactive and not currently caching
            </summary>
            <value><c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
            <returns>true for caching enabled, false for no caching taking place</returns>
        </member>
        <member name="T:com.espertech.esper.epl.db.DbDriver">
            <summary>
            Database driver semantics are captured in the DbDriver.  Each
            driver instance is completely separate from other instances.
            Drivers encapsulate management of the connection, so specific
            properties are given to it so that it can build its connection
            string.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.DbDriver.CreateCommand(System.Collections.Generic.IEnumerable{com.espertech.esper.util.PlaceholderParser.Fragment},com.espertech.esper.epl.db.ColumnSettings,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Creates a database driver command from a collection of fragments.
            </summary>
            <param name="sqlFragments">The SQL fragments.</param>
            <param name="metadataSettings">The metadata settings.</param>
            <param name="contextAttributes">The context attributes.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.DbDriver.CreateConnection">
            <summary>
            Creates a database connection; this should be used sparingly if possible.
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.DbDriver.DefaultMetaOriginPolicy">
            <summary>
            Gets the default meta origin policy.
            </summary>
            <value>The default meta origin policy.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.DbDriver.Properties">
            <summary>
            Gets or sets the properties for the driver.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.DbDriver.ConnectionString">
            <summary>
            Gets the connection string associated with this driver.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.db.DbDriverCommand">
            <summary>
            Minor abstraction on top of the IDbCommand.  The DbDriverCommand
            provides callers (above the driver command) to obtain information
            about the command using a notation that is similar to JDBC (i.e. it
            uses ? for parameters); below it ensures that the underlying
            connection uses proper ADO.NET conventions for the driver.  It also
            handles certain other nuances that differ between ADO.NET driver
            implementations, encapsulating that behavior within the driver.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.DbDriverCommand.Clone">
            <summary>
            Clones the driver command.
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.DbDriverCommand.Driver">
            <summary>
            Gets the driver associated with this command.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.db.DbDriverCommand.Command">
            <summary>
            Gets the actual database command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.DbDriverCommand.MetaData">
            <summary>
            Gets the meta data.
            </summary>
            <value>The meta data.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.DbDriverCommand.MetaDataSettings">
            <summary>
            Gets the meta data settings associated with this command.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.db.DbDriverCommand.ParameterDescription">
            <summary>
            Gets a list of parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.DbDriverCommand.Fragments">
            <summary>
            Gets the fragments.  If the command was not created through
            supplied fragments, this method will throw an exception.
            </summary>
            <value>The fragments.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.DbDriverCommand.CommandText">
            <summary>
            Gets the actual SQL that is sent to the driver.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.db.DbDriverCommand.PseudoText">
            <summary>
            Gets the pseudo SQL that is provided to and from the client.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.db.DbDriverSchema">
            <summary>
            Provides the schema associated with a command.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.db.DbDriverSchema.ColumnNames">
            <summary>
            Gets the column names.
            </summary>
            <value>The column names.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.DbDriverSchema.ColumnInfo">
            <summary>
            Gets the column info.
            </summary>
            <value>The column info.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.DbDriverSchema.Item(System.String)">
            <summary>
            Gets the <see cref="T:com.espertech.esper.epl.db.DBOutputTypeDesc"/> associated
            with the given column name.
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.epl.db.DBOutputTypeDesc">
            <summary>
            Descriptor for SQL output columns.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.DBOutputTypeDesc.#ctor(System.String,System.Type,com.espertech.esper.util.DatabaseTypeBinding)">
            <summary>
            Ctor.
            </summary>
            <param name="sqlType">the type of the column</param>
            <param name="dataType">the type reflecting column type</param>
            <param name="optionalBinding">the optional mapping from output column type to built-in</param>
        </member>
        <member name="M:com.espertech.esper.epl.db.DBOutputTypeDesc.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.DBOutputTypeDesc.SqlType">
            <summary> Returns the SQL type of the output column.</summary>
            <returns> sql type
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.DBOutputTypeDesc.DataType">
            <summary> Returns the type that getObject on the output column produces.</summary>
            <returns> type from statement metadata
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.DBOutputTypeDesc.OptionalBinding">
            <summary>
            Gets the optional mapping from output column type to built-in.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.db.drivers.BaseDbDriver">
            <summary>
            An abstract base driver that provides some of the functionality
            that is common to all ADO.NET based drivers, but leaves the specifics
            of the database to the driver implementation.  ADO.NET leaves some
            wholes in its implementation and advises that for maximum performance
            that you use driver specific semantics.  This code exists to allow
            developers to integrate their own database models.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.db.drivers.BaseDbDriver._name">
            <summary>
            Connection name
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.db.drivers.BaseDbDriver._connectionProperties">
            <summary>
            Connection properties
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.db.drivers.BaseDbDriver._connectionString">
            <summary>
            Connection string
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriver.CreateConnectionStringBuilder">
            <summary>
            Creates a connection string builder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriver.PositionalToNamedTextConverter(System.Int32)">
            <summary>
            Gets the text for the parameter at the given index.
            </summary>
            <param name="parameterIndex">Index of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriver.PositionalToPositionalTextConverter(System.Int32)">
            <summary>
            Gets the text for the parameter at the given index.
            </summary>
            <param name="parameterIndex">Index of the parameter.</param>
            <returns></returns>
        </member>
        <member name="F:com.espertech.esper.epl.db.drivers.BaseDbDriver.wdbConnection">
            <summary>
            Weak reference to the database connection.  Allows a thread to
            reuse an existing connection rather than opening a new one as
            opening a new connection can be considerably expensive with some
            drivers.  The reference is weak which means that after it is no
            longer is use, the weak reference will go out of scope.  To
            prevent the database connection from going out of scope prematurely
            we keep around a strong reference that is swept on a regular
            interval.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.db.drivers.BaseDbDriver.sdbConnectionTable">
            <summary>
            Collects connections across threads and stores them in a strongly
            referenced table.  The table allows us to reuse connections to
            database that are continually accessed on the same thread.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.db.drivers.BaseDbDriver.releaseTimer">
            <summary>
            Periodically removes unused connections from the sdbConnectionTable
            and allows them to be reclaimed.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriver.ReleaseConnections(System.Object)">
            <summary>
            Releases the connections.
            </summary>
            <param name="userObject">The user object.</param>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriver.CreateConnection">
            <summary>
            Factory method that is used to create instance of a connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriver.CreateConnectionInternal">
            <summary>
            Creates a connection using the internal mechanism.  Avoids having
            to make CreateConnection protected internal.  Its primary use is
            by the BaseDbDriverCommand.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriver.SetTransactionIsolation(System.Data.Common.DbConnection,System.Nullable{System.Data.IsolationLevel})">
            <summary>
            Sets the transaction isolation.
            </summary>
            <param name="connection">The connection.</param>
            <param name="isolationLevel">The isolation level.</param>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriver.SetCatalog(System.Data.Common.DbConnection,System.String)">
            <summary>
            Sets the catalog.
            </summary>
            <param name="connection">The connection.</param>
            <param name="catalog">The catalog.</param>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriver.SetAutoCommit(System.Data.Common.DbConnection,System.Nullable{System.Boolean})">
            <summary>
            Sets the automatic commits.
            </summary>
            <param name="connection">The connection.</param>
            <param name="useAutoCommit">The use auto commit.</param>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriver.ApplyConnectionOptions(System.Data.Common.DbConnection,com.espertech.esper.client.ConnectionSettings)">
            <summary> Method to set connection-level configuration settings.</summary>
            <param name="connection">is the connection to set on
            </param>
            <param name="connectionSettings">are the settings to apply
            </param>
            <throws>  DatabaseConfigException is thrown if an DbException is thrown </throws>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriver.ApplyConnectionOptions(System.Data.Common.DbConnection)">
            <summary>
            Sets the connection options using the default connection options.
            </summary>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriver.GetDetail(System.Data.Common.DbException)">
            <summary>
            Gets the detail.
            </summary>
            <param name="ex">The ex.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriver.CreateCommand(System.Collections.Generic.IEnumerable{com.espertech.esper.util.PlaceholderParser.Fragment},com.espertech.esper.epl.db.ColumnSettings,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Creates a database driver command from a collection of fragments.
            </summary>
            <param name="sqlFragments">The SQL fragments.</param>
            <param name="metadataSettings">The metadata settings.</param>
            <param name="contextAttributes">The context attributes.</param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriver.DefaultMetaOriginPolicy">
            <summary>
            Gets the default meta origin policy.
            </summary>
            <value>The default meta origin policy.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriver.ParamPrefix">
            <summary>
            Gets the parameter prefix.
            </summary>
            <value>The param prefix.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriver.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriver.UsePositionalParameters">
            <summary>
            Gets a value indicating whether [use position parameters].
            </summary>
            <value>
            	<c>true</c> if [use position parameters]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriver.ParamToTextConverter">
            <summary>
            Gets the positional to text converter.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriver.Properties">
            <summary>
            Gets or sets the properties for the driver.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriver.Name">
            <summary>
            Connection name
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.db.drivers.BaseDbDriver.PositionalToTextConverter">
            <summary>
            Converts a positional parameter into text that can be embedded
            into the command text.
            </summary>
            <param name="parameterIndex"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand">
            <summary>
            Companion to the BaseDbDriver that provides command support in
            accordance to ADO.NET and the DbDriverCommand.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand._driver">
            <summary>
            Underlying driver.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand._fragments">
            <summary>
            Fragments that were used to build the command.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand._inputParameters">
            <summary>
            List of input parameters
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand._outputParameters">
            <summary>
            Output parameters; cached upon creation
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand._dbCommandText">
            <summary>
            Command text that needs to be associated with the command.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand._dbCommandTimeout">
            <summary>
            Command timeout
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand._metadataSettings">
            <summary>
            Column settings
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand._allocLock">
            <summary>
            Private lock for connection and command.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand._theConnection">
            <summary>
            Connection allocated to this instance
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand._theCommand">
            <summary>
            Command allocated to this instance
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.#ctor(com.espertech.esper.epl.db.drivers.BaseDbDriver,System.Collections.Generic.IEnumerable{com.espertech.esper.util.PlaceholderParser.Fragment},System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{System.Int32},com.espertech.esper.epl.db.ColumnSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand"/> class.
            </summary>
            <param name="driver">The driver.</param>
            <param name="fragments">The fragments.</param>
            <param name="inputParameters">The input parameters.</param>
            <param name="dbCommandText">The command text.</param>
            <param name="dbCommandTimeout">The db command timeout.</param>
            <param name="metadataSettings">The metadata settings.</param>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand"/> class.
            Used for cloning.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.Clone">
            <summary>
            Clones the driver command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.AllocateCommand">
            <summary>
            Ensures that the command is allocated.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.GetParameters(System.Collections.Generic.IEnumerable{com.espertech.esper.util.PlaceholderParser.Fragment})">
            <summary>
            Gets the parameters.
            </summary>
            <param name="parseFragements">The parse fragements.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.CreateOutputParameters">
            <summary>
            Creates and sets the output parameters
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.GetColumnType(System.Data.DataRow)">
            <summary>
            Gets the type of the column associated with the row in the
            table schema.
            </summary>
            <param name="schemaDataRow">The schema data row.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.GetColumnSqlType(System.Data.DataRow)">
            <summary>
            Gets the SQL type of the column associated with the row in the
            table schema.
            </summary>
            <param name="schemaDataRow">The schema data row.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.CompileSchemaTable(System.Data.DataTable,com.espertech.esper.epl.db.ColumnSettings)">
            <summary>
            Compiles the schema table.
            </summary>
            <param name="schemaTable">The schema table.</param>
            <param name="columnSettings">The column settings.</param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.Command">
            <summary>
            Gets the actual database command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.Fragments">
            <summary>
            Gets the fragments.
            </summary>
            <value>The fragments.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.PseudoText">
            <summary>
            Gets the pseudo text.
            </summary>
            <value>The pseudo text.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.CommandText">
            <summary>
            Gets the command text.
            </summary>
            <value>The command text.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.Driver">
            <summary>
            Gets the driver associated with this command.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.MetaData">
            <summary>
            Gets the meta data.
            </summary>
            <value>The meta data.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.MetaDataSettings">
            <summary>
            Gets the meta data settings associated with this command.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.ParameterDescription">
            <summary>
            Gets a list of parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.InputParameters">
            <summary>
            Gets the input parameters.
            </summary>
            <value>The input parameters.</value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.BaseDbDriverCommand.OutputParameters">
            <summary>
            Gets the output parameters.
            </summary>
            <value>The output parameters.</value>
        </member>
        <member name="T:com.espertech.esper.epl.db.drivers.DbCommandFactory">
            <summary>
            Creates database command objects
            </summary>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.epl.db.drivers.DbDriverGeneric">
            <summary>
            A generic database driver.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.DbDriverGeneric.#ctor">
            <summary>
            Initializes the <see cref="T:com.espertech.esper.epl.db.drivers.DbDriverGeneric"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.DbDriverGeneric.CreateConnection">
            <summary>
            Factory method that is used to create instance of a connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.DbDriverGeneric.CreateConnectionStringBuilder">
            <summary>
            Creates a connection string builder.
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.DbDriverGeneric.UsePositionalParameters">
            <summary>
            Gets a value indicating whether [use position parameters].
            </summary>
            <value>
            	<c>true</c> if [use position parameters]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.DbDriverGeneric.ParamPrefix">
            <summary>
            Gets the parameter prefix.
            </summary>
            <value>The param prefix.</value>
        </member>
        <member name="T:com.espertech.esper.epl.db.drivers.DbDriverMySQL">
            <summary>
            A database driver specific to the MySQL driver.  The MySQL driver
            is a named positional driver.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.DbDriverMySQL.#cctor">
            <summary>
            Initializes the <see cref="T:com.espertech.esper.epl.db.drivers.DbDriverMySQL"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.DbDriverMySQL.CreateConnection">
            <summary>
            Factory method that is used to create instance of a connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.DbDriverMySQL.CreateConnectionStringBuilder">
            <summary>
            Creates a connection string builder.
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.DbDriverMySQL.UsePositionalParameters">
            <summary>
            Gets a value indicating whether [use position parameters].
            </summary>
            <value>
            	<c>true</c> if [use position parameters]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.DbDriverMySQL.ParamPrefix">
            <summary>
            Gets the parameter prefix.
            </summary>
            <value>The param prefix.</value>
        </member>
        <member name="T:com.espertech.esper.epl.db.drivers.DbDriverODBC">
            <summary>
            Generic database driver using ODBC.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.DbDriverODBC.CreateConnectionStringBuilder">
            <summary>
            Creates a connection string builder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.DbDriverODBC.CreateConnection">
            <summary>
            Factory method that is used to create instance of a connection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.DbDriverODBC.UsePositionalParameters">
            <summary>
            Gets a value indicating whether [use position parameters].
            </summary>
            <value>
            	<c>true</c> if [use position parameters]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.DbDriverODBC.ParamPrefix">
            <summary>
            Gets the parameter prefix.
            </summary>
            <value>The param prefix.</value>
        </member>
        <member name="T:com.espertech.esper.epl.db.drivers.DbDriverSqlServer">
            <summary>
            A database driver specific to the SQLServer
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.DbDriverSqlServer.CreateConnectionStringBuilder">
            <summary>
            Creates a connection string builder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.db.drivers.DbDriverSqlServer.CreateConnection">
            <summary>
            Factory method that is used to create instance of a connection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.DbDriverSqlServer.UsePositionalParameters">
            <summary>
            Gets a value indicating whether [use position parameters].
            </summary>
            <value>
            	<c>true</c> if [use position parameters]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:com.espertech.esper.epl.db.drivers.DbDriverSqlServer.ParamPrefix">
            <summary>
            Gets the parameter prefix.
            </summary>
            <value>The param prefix.</value>
        </member>
        <member name="T:com.espertech.esper.epl.db.PollExecStrategyDBQuery">
            <summary>
            Viewable providing historical data from a database.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.PollExecStrategyDBQuery.#ctor(com.espertech.esper.events.EventAdapterService,com.espertech.esper.client.EventType,com.espertech.esper.epl.db.ConnectionCache,System.String,System.Collections.Generic.IDictionary{System.String,com.espertech.esper.epl.db.DBOutputTypeDesc},com.espertech.esper.client.hook.SQLColumnTypeConversion,com.espertech.esper.client.hook.SQLOutputRowConversion)">
            <summary>Ctor. </summary>
            <param name="eventAdapterService">for generating event beans</param>
            <param name="eventType">is the event type that this poll generates</param>
            <param name="connectionCache">caches Connection and PreparedStatement</param>
            <param name="preparedStatementText">is the SQL to use for polling</param>
            <param name="outputTypes">describe columns selected by the SQL</param>
            <param name="outputRowConversionHook">hook to convert rows, if any hook is registered</param>
            <param name="columnTypeConversionHook">hook to convert columns, if any hook is registered</param>
        </member>
        <member name="M:com.espertech.esper.epl.db.PollExecStrategyDBQuery.Start">
            <summary>
            Start the poll, called before any poll operation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.PollExecStrategyDBQuery.Done">
            <summary>
            Indicate we are done polling and can release resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.PollExecStrategyDBQuery.Dispose">
            <summary>
            Indicate we are no going to use this object again.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.PollExecStrategyDBQuery.Poll(System.Object[])">
            <summary>
            Poll events using the keys provided.
            </summary>
            <param name="lookupValues">is keys for exeuting a query or such</param>
            <returns>a list of events for the keys</returns>
        </member>
        <member name="T:com.espertech.esper.epl.db.QueryMetaData">
            <summary>
            Holder for query meta data information obtained from interrogating statements.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.QueryMetaData.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IDictionary{System.String,com.espertech.esper.epl.db.DBOutputTypeDesc})">
            <summary>Ctor.</summary>
            <param name="inputParameters">is the input parameter names</param>
            <param name="outputParameters">is the output column names and types</param>
        </member>
        <member name="P:com.espertech.esper.epl.db.QueryMetaData.InputParameters">
            <summary>Return the input parameters.</summary>
            <returns>input parameter names</returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.QueryMetaData.OutputParameters">
            <summary>Returns a map of output column name and type descriptor.</summary>
            <returns>column names and types</returns>
        </member>
        <member name="T:com.espertech.esper.epl.db.SQLParameterDesc">
            <summary>
            Hold a raw SQL-statements parameter information that were specified in the form ${name}.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.db.SQLParameterDesc.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>Ctor.</summary>
            <param name="parameters">is the name of parameters</param>
            <param name="builtinIdentifiers">is the names of built-in predefined values</param>
        </member>
        <member name="P:com.espertech.esper.epl.db.SQLParameterDesc.Parameters">
            <summary>Returns parameter names.</summary>
            <returns>parameter names</returns>
        </member>
        <member name="P:com.espertech.esper.epl.db.SQLParameterDesc.BuiltinIdentifiers">
            <summary>Returns built-in identifiers.</summary>
            <returns>built-in identifiers</returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprEvaluatorEnumeration">
            <summary>
            Interface for evaluating of an event tuple.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.declexpr.ExprDeclaredNode">
            <summary>
            Expression instance as declared elsewhere.  
            (1) Statement parse: Expression tree from expression body gets deep-copied. 
            (2) Statement create (lifecyle event): Subselect visitor compiles Subselect-list 
            (3) Statement start: 
                a) event types of each stream determined 
                b) subselects filter expressions get validated and subselect started 
            (4) Remaining expressions get validated 
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprValidator">
            <summary>Validation interface for expression nodes. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNode.ToExpressionString">
            <summary>
            Returns the expression node rendered as a string.
            </summary>
            <returns>string rendering of expression</returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNode.EqualsNode(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Return true if a expression node semantically equals the current node, or false if not.
            <para/>
            Concrete implementations should compare the type and any additional information that impact the evaluation of a node.
            </summary>
            <param name="node">to compare to</param>
            <returns>
            true if semantically equal, or false if not equals
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNode.Accept(com.espertech.esper.epl.expression.ExprNodeVisitor)">
            <summary>
            Accept the visitor. The visitor will first visit the parent then visit all child nodes, then their child nodes.
            <para/>The visitor can decide to skip child nodes by returning false in isVisit.
            </summary>
            <param name="visitor">to visit each node and each child node.</param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNode.Accept(com.espertech.esper.epl.expression.ExprNodeVisitorWithParent)">
            <summary>
            Accept the visitor. The visitor will first visit the parent then visit all child nodes, then their child nodes.
            <para/>
            The visitor can decide to skip child nodes by returning false in isVisit.
            </summary>
            <param name="visitor">to visit each node and each child node.</param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNode.AcceptChildNodes(com.espertech.esper.epl.expression.ExprNodeVisitorWithParent,com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Accept a visitor that receives both parent and child node.
            </summary>
            <param name="visitor">to apply</param>
            <param name="parent">node</param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNode.AddChildNode(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Adds a child node.
            </summary>
            <param name="childNode">is the child evaluation tree node to add</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprNode.IsConstantResult">
            <summary>
            Returns true if the expression node's evaluation value doesn't depend on any events data, as must be determined at
            validation time, which is bottom-up and therefore reliably allows each node to determine constant value.
            </summary>
            <value>
            true for constant evaluation value, false for non-constant evaluation value
            </value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprNode.ChildNodes">
            <summary>
            Returns list of child nodes.
            </summary>
            <value>list of child nodes</value>
        </member>
        <member name="T:com.espertech.esper.epl.declexpr.ExprDeclaredNodeImpl">
            <summary>
            Expression instance as declared elsewhere.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprNodeBase">
            <summary>
            Superclass for filter nodes in a filter expression tree. Allow validation against stream event types and evaluation of events against filter tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNodeBase.#ctor">
            <summary>Constructor creates a list of child nodes. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNodeBase.ToExpressionString">
            <summary> Returns the expression node rendered as a string.</summary>
            <returns> string rendering of expression
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNodeBase.EqualsNode(com.espertech.esper.epl.expression.ExprNode)">
             <summary>
             Return true if a expression node semantically equals the current node, or false if not.
            
             Concrete implementations should compare the type and any additional information
             that impact the evaluation of a node.
             </summary>
             <param name="node">to compare to
             </param>
             <returns> true if semantically equal, or false if not equals
             </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNodeBase.Validate(com.espertech.esper.epl.expression.ExprValidationContext)">
            <summary>
            Validates the specified validation context.
            </summary>
            <param name="validationContext">The validation context.</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprNodeBase.ExprEvaluator">
            <summary>
            Gets the expression evaluator.
            </summary>
            <value>The expression evaluator.</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprNodeBase.ChildNodes">
            <summary>
            Returns list of child nodes.
            </summary>
            <value>list of child nodes</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprNodeBase.IsConstantResult">
            <summary>
            Returns true if the expression node's evaluation value doesn't depend on any events data,
            as must be determined at validation time, which is bottom-up and therefore
            reliably allows each node to determine constant value.
            </summary>
            <returns>
            true for constant evaluation value, false for non-constant evaluation value
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.declexpr.ExprDeclaredNodeImpl.SetSubselectOuterStreamNames(System.String[],com.espertech.esper.client.EventType[],System.String[],System.String,com.espertech.esper.epl.expression.ExprSubselectNode,System.String,com.espertech.esper.client.EventType,System.String)">
            <summary>Received indication of the streams and types available before sub-selects are started and expression validation occurs. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.enummethod.dot.ExprLambdaGoesNode">
            <summary>
            Represents the case-when-then-else control flow function is an expression tree.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprAggregateNodeBase">
            <summary>
            Base expression node that represents an aggregation function such as 'sum' or 'count'.
            <para/>
            In terms of validation each concrete aggregation node must implement it's own validation.
            <para/>
            In terms of evaluation this base class will ask the assigned <seealso cref="P:com.espertech.esper.epl.expression.ExprAggregateNodeBase.AggregationResultFuture"/> for the current state,
            using a column number assigned to the node.
            <para/>
            Concrete subclasses must supply an aggregation state prototype node <seealso cref="T:com.espertech.esper.epl.agg.aggregator.AggregationMethod"/> that reflects
            each group's (there may be group-by critera) current aggregation state.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprAggregateNode">
            <summary>
            Base expression node that represents an aggregation function such as 'sum' or 'count'.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprAggregateNodeBase.GetAggregationFunctionName">
            <summary>Returns the aggregation function name for representation in a generate expression string. </summary>
            <returns>aggregation function name</returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprAggregateNodeBase.EqualsNodeAggregate(com.espertech.esper.epl.expression.ExprAggregateNode)">
            <summary>Return true if a expression aggregate node semantically equals the current node, or false if not. <para />For use by the equalsNode implementation which compares the distinct flag. </summary>
            <param name="node">to compare to</param>
            <returns>true if semantically equal, or false if not equals</returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprAggregateNodeBase.ValidateAggregationChild(com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Gives the aggregation node a chance to validate the sub-expression types. </summary>
            <param name="streamTypeService">is the types per stream</param>
            <param name="methodResolutionService">used for resolving method and function names</param>
            <param name="exprEvaluatorContext">context for expression evaluation</param>
            <returns>aggregation function factory to use</returns>
            <throws>com.espertech.esper.epl.expression.ExprValidationException when expression validation failed</throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprAggregateNodeBase.#ctor(System.Boolean)">
            <summary>Ctor. </summary>
            <param name="distinct">sets the flag indicatating whether only unique values should be aggregated</param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprAggregateNodeBase.SetAggregationResultFuture(com.espertech.esper.epl.agg.service.AggregationResultFuture,System.Int32)">
            <summary>
            Assigns to the node the future which can be queried for the current aggregation state at evaluation time.
            </summary>
            <param name="aggregationResultFuture">future containing state</param>
            <param name="column">column to hand to future for easy access</param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprAggregateNodeBase.ValidateNumericChildAllowFilter(com.espertech.esper.epl.core.StreamTypeService,System.Boolean)">
            <summary>
            For use by implementing classes, validates the aggregation node expecting a single numeric-type child node.
            </summary>
            <param name="streamTypeService">types represented in streams</param>
            <param name="hasFilter">if set to <c>true</c> [has filter].</param>
            <returns>numeric type of single child</returns>
            <throws>com.espertech.esper.epl.expression.ExprValidationException if the validation failed</throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprAggregateNodeBase.ToExpressionString">
            <summary>Renders the aggregation function expression. </summary>
            <returns>expression string is the textual rendering of the aggregation function and it's sub-expression</returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprAggregateNodeBase.Column">
            <summary>
            Gets or sets the column.
            </summary>
            <value>The column.</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprAggregateNodeBase.Factory">
            <summary>Returns the aggregation state factory for use in grouping aggregation states per group-by keys. </summary>
            <value>prototype aggregation state as a factory for aggregation states per group-by key value</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprAggregateNodeBase.IsDistinct">
            <summary>Returns true if the aggregation node is only aggregatig distinct values, or false if aggregating all values. </summary>
            <value>true if &apos;distinct&apos; keyword was given, false if not</value>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprAccessAggNode.#ctor(com.espertech.esper.epl.agg.access.AggregationAccessType,System.Boolean,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="accessType">Type of the access.</param>
            <param name="wildcard">if set to <c>true</c> [wildcard].</param>
            <param name="streamWildcard">The stream wildcard.</param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprAggregateNodeUtil.GetAggregatesBottomUp(com.espertech.esper.epl.expression.ExprNode,System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprAggregateNode})">
            <summary>Populates into the supplied list all aggregation functions within this expression, if any. 
            <para/>
            Populates by going bottom-up such that nested aggregates appear first. 
            <para/>
            i.e. sum(volume * sum(price)) would put first A then B into the list with A=sum(price) and B=sum(volume * A) 
            </summary>
            <param name="topNode">is the expression node to deep inspect</param>
            <param name="aggregateNodes">is a list of node to populate into</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprAndNode">
            <summary>Represents an And-condition. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprAndNodeImpl">
            <summary>
            Represents an And-condition. 
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprArrayNode">
            <summary>Represents an array in a filter expressiun tree. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprArrayNode.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprAvedevNode">
            <summary>Represents the Avedev(...) aggregate function is an expression tree. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprAvedevNode.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="distinct">flag indicating unique or non-unique value aggregation</param>
            <param name="hasFilter">if set to <c>true</c> [has filter].</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprAvgNode">
            <summary>Represents the Avg(...) aggregate function is an expression tree. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprAvgNode.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="distinct">flag indicating unique or non-unique value aggregation</param>
            <param name="hasFilter">if set to <c>true</c> [has filter].</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprBetweenNode">
            <summary>Represents the between-clause function in an expression tree. </summary>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprBetweenNode.IsLowEndpointIncluded">
            <summary>Returns true if the low endpoint is included, false if not </summary>
            <value>indicator if endppoint is included</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprBetweenNode.IsHighEndpointIncluded">
            <summary>Returns true if the high endpoint is included, false if not </summary>
            <value>indicator if endppoint is included</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprBetweenNode.IsNotBetween">
            <summary>Returns true for inverted range, or false for regular (openn/close/half-open/half-closed) ranges. </summary>
            <value>true for not betwene, false for between</value>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprBetweenNodeImpl">
            <summary>
            Represents the between-clause function in an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprBetweenNodeImpl.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>Ctor. </summary>
            <param name="lowEndpointIncluded">is true for the regular 'between' or false for "val in (a:b)" (open range), orfalse if the endpoint is not included </param>
            <param name="highEndpointIncluded">indicates whether the high endpoint is included</param>
            <param name="notBetween">is true for 'not between' or 'not in (a:b), or false for a regular between</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprBetweenNodeImpl.IsLowEndpointIncluded">
            <summary>Returns true if the low endpoint is included, false if not </summary>
            <value>indicator if endppoint is included</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprBetweenNodeImpl.IsHighEndpointIncluded">
            <summary>Returns true if the high endpoint is included, false if not </summary>
            <value>indicator if endppoint is included</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprBetweenNodeImpl.IsNotBetween">
            <summary>Returns true for inverted range, or false for regular (openn/close/half-open/half-closed) ranges. </summary>
            <value>true for not betwene, false for between</value>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprBitWiseNode">
            <summary>
            Represents the bit-wise operators in an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprBitWiseNode.#ctor(com.espertech.esper.type.BitWiseOpEnum)">
            <summary>Ctor. </summary>
            <param name="bitWiseOpEnum">type of math</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprBitWiseNode.BitWiseOpEnum">
            <summary>Returns the bitwise operator. </summary>
            <value>operator</value>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprCaseNode">
            <summary>
            Represents the case-when-then-else control flow function is an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprCaseNode.#ctor(System.Boolean)">
            <summary>Ctor. </summary>
            <param name="isCase2">is an indicator of which Case statement we are working on.
            <para/> True indicates a 'Case2' statement with syntax "case a when a1 then b1 else b2".
            <para/> False indicates a 'Case1' statement with syntax "case when a=a1 then b1 else b2".
            </param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprCaseNode.IsCase2">
            <summary>Returns true if this is a switch-type case. </summary>
            <value>true for switch-type case, or false for when-then type</value>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprCastNode">
            <summary>
            Represents the CAST(expression, type) function is an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprCastNode.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="typeIdentifier">the the name of the type to cast to</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprCastNode.TypeIdentifier">
            <summary>Returns the name of the type of cast to. </summary>
            <value>type name</value>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprChainedSpec.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. 
                            </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprChainedSpec.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprCoalesceNode">
            <summary>
            Represents the COALESCE(a,b,...) function is an expression tree.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprConcatNode">
            <summary>Represents a simple Math (+/-/divide/*) in a filter expression tree. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprConcatNode.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprConstantNode">
            <summary>
            Represents a constant in an expressiun tree.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprConstantNodeImpl">
            <summary>Represents a constant in an expressiun tree. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprConstantNodeImpl.#ctor(System.Object)">
            <summary>Ctor. </summary>
            <param name="value">is the constant's value.</param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprConstantNodeImpl.#ctor(System.Object,System.Type)">
            <summary>Ctor. </summary>
            <param name="value">is the constant's value.</param>
            <param name="valueType">is the constant's value type.</param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprConstantNodeImpl.#ctor(System.Type)">
            <summary>Ctor - for use when the constant should return a given type and the actual value is always null. </summary>
            <param name="clazz">the type of the constant null.</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprContextPropertyNode">
            <summary>
            Represents an stream property identifier in a filter expressiun tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprContextPropertyNode.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprContextPropertyNode.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprCountNode">
            <summary>Represents the Count(...) and Count(*) and Count(distinct ...) aggregate function is an expression tree. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprCountNode.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="distinct">flag indicating unique or non-unique value aggregation</param>
            <param name="hasFilter">if set to <c>true</c> [has filter].</param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprDotEvalPropertyExprBase.Evaluate(com.espertech.esper.epl.expression.EvaluateParams)">
            <summary>
            Evaluate event tuple and return result.
            </summary>
            <param name="eventsPerStream">event tuple</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="exprEvaluatorContext">the expression evaluator context.</param>
            <returns>
            evaluation result, a bool value for OR/AND-type evalution nodes.
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprDotNode">
            <summary>
            Represents an Dot-operator expression, for use when "(expression).Method(...).Method(...)"
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprDotNodeRealizedChain.#ctor(com.espertech.esper.epl.expression.ExprDotEval[],com.espertech.esper.epl.expression.ExprDotEval[],com.espertech.esper.epl.datetime.eval.ExprDotNodeFilterAnalyzerDesc)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.expression.ExprDotNodeRealizedChain"/> class.
            </summary>
            <param name="chain">The chain.</param>
            <param name="chainWithUnpack">The chain with unpack.</param>
            <param name="filterAnalyzerDesc">The filter analyzer desc.</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprEqualsAllAnyNode">
            <summary>
            Represents an equals-for-group (= ANY/ALL/SOME (expression list)) comparator in
            a expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprEqualsAllAnyNode.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="isNotEquals">true if this is a (!=) not equals rather then equals, false if its a '=' equals</param>
            <param name="isAll">true if all, false for any</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprEqualsAllAnyNode.ExprEvaluator">
            <summary>
            Gets the expression evaluator.
            </summary>
            <value>The expression evaluator.</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprEqualsAllAnyNode.EventType">
            <summary>
            Returns the event type.
            </summary>
            <value>The type of the event.</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprEqualsAllAnyNode.IsNot">
            <summary>
            Returns true if this is a NOT EQUALS node, false if this is a EQUALS node.
            </summary>
            <returns>
            true for !=, false for =
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprEqualsAllAnyNode.IsAll">
            <summary>
            True if all.
            </summary>
            <returns>
            all-flag
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprEqualsNode">
            <summary>Represents an equals (=, !=, &lt;&gt;, is, is not) comparator in a filter expressiun tree. </summary>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprEqualsNode.IsNotEquals">
            <summary>Returns true if this is a NOT EQUALS node, false if this is a EQUALS node. </summary>
            <value>true for !=, false for =</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprEqualsNode.IsIs">
            <summary>Returns true if this is a "IS" or "IS NOT" node, false if this is a EQUALS or NOT EQUALS node. </summary>
            <value>true for !=, false for =</value>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprEqualsNodeImpl">
            <summary>
            Represents an equals (=) comparator in a filter expressiun tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprEqualsNodeImpl.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="isNotEquals">true if this is a (!=) not equals rather then equals, false if its a '=' equals</param>
            <param name="isIs">if set to <c>true</c> [is is].</param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprEqualsNodeImpl.Validate(com.espertech.esper.epl.expression.ExprValidationContext)">
            <summary>
            Validates the specified validation context.
            </summary>
            <param name="validationContext">The validation context.</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprEqualsNodeImpl.IsNotEquals">
            <summary>Returns true if this is a NOT EQUALS node, false if this is a EQUALS node. </summary>
            <value>true for !=, false for =</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprEqualsNodeImpl.IsIs">
            <summary>
            Returns true if this is a "IS" or "IS NOT" node, false if this is a EQUALS or NOT EQUALS node.
            </summary>
            <value>true for !=, false for =</value>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ProxyExprEvaluator.#ctor(com.espertech.esper.epl.expression.ExprEvaluatorDelegate,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.expression.ProxyExprEvaluator"/> class.
            </summary>
            <param name="procEvaluate">The @delegate.</param>
            <param name="returnType">Type of the return.</param>
            <param name="eventType">Type of the event.</param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ProxyExprEvaluator.#ctor(com.espertech.esper.epl.expression.ExprEvaluatorDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.expression.ProxyExprEvaluator"/> class.
            </summary>
            <param name="procEvaluate">The @delegate.</param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ProxyExprEvaluator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.expression.ProxyExprEvaluator"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ProxyExprEvaluator.Evaluate(com.espertech.esper.epl.expression.EvaluateParams)">
            <summary>
            Evaluate event tuple and return result.
            </summary>
            <param name="eventsPerStream">event tuple</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="exprEvaluatorContext">the expression evaluator context.</param>
            <returns>
            evaluation result, a bool value for OR/AND-type evalution nodes.
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ProxyExprEvaluator.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <value></value>
            <returns>
            type returned when evaluated
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ProxyExprEvaluator.EventType">
            <summary>
            Returns the event type.
            </summary>
            <value>The type of the event.</value>
        </member>
        <member name="M:com.espertech.esper.epl.expression.NullExprEvaluator.Evaluate(com.espertech.esper.epl.expression.EvaluateParams)">
            <summary>
            Evaluate event tuple and return result.
            </summary>
            <param name="eventsPerStream">event tuple</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="exprEvaluatorContext">the expression evaluator context.</param>
            <returns>
            evaluation result, a bool value for OR/AND-type evalution nodes.
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.NullExprEvaluator.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <value></value>
            <returns>
            type returned when evaluated
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.NullExprEvaluator.EventType">
            <summary>
            Returns the event type.
            </summary>
            <value>The type of the event.</value>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprEvaluatorContextTimeOnly">
            <summary>
            Represents a minimal enginel-level context for expression evaluation, not allowing for agents instances and result cache.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprEvaluatorContextTimeOnly.TimeProvider">
            <summary>Returns the time provider. </summary>
            <value>time provider</value>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprEvaluatorProxy.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            Intercepts the specified invocation.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprFirstEverNode">
            <summary>Represents the "firstever" aggregate function is an expression tree. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprFirstEverNode.#ctor(System.Boolean)">
            <summary>Ctor. </summary>
            <param name="distinct">flag indicating unique or non-unique value aggregation</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprIdentNode">
            <summary>
            Represents an stream property identifier in a filter expressiun tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprIdentNodeEvaluatorImpl.EvaluatePropertyExists(com.espertech.esper.client.EventBean[],System.Boolean)">
            <summary>Returns true if the property exists, or false if not. </summary>
            <param name="eventsPerStream">each stream's events</param>
            <param name="isNewData">if the stream represents insert or remove stream</param>
            <returns>true if the property exists, false if not</returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprIdentNodeImpl">
            <summary>
            Represents an stream property identifier in a filter expressiun tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprIdentNodeImpl.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="unresolvedPropertyName">is the event property name in unresolved form, ie. unvalidated against streams</param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprIdentNodeImpl.#ctor(System.String,System.String)">
            <summary>Ctor. </summary>
            <param name="unresolvedPropertyName">is the event property name in unresolved form, ie. unvalidated against streams</param>
            <param name="streamOrPropertyName">is the stream name, or if not a valid stream name a possible nested property namein one of the streams. </param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprIdentNodeImpl.UnresolvedPropertyName">
            <summary>For unit testing, returns unresolved property name. </summary>
            <value>property name</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprIdentNodeImpl.StreamOrPropertyName">
            <summary>For unit testing, returns stream or property name candidate. </summary>
            <value>stream name, or property name of a nested property of one of the streams</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprIdentNodeImpl.FullUnresolvedName">
            <summary>Returns the unresolved property name in it's complete form, including the stream name if there is one. </summary>
            <value>property name</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprIdentNodeImpl.StreamId">
            <summary>Returns stream id supplying the property value. </summary>
            <value>stream number</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprIdentNodeImpl.ResolvedStreamName">
            <summary>Returns stream name as resolved by lookup of property in streams. </summary>
            <value>stream name</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprIdentNodeImpl.ResolvedPropertyName">
            <summary>Return property name as resolved by lookup in streams. </summary>
            <value>property name</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprIdentNodeImpl.ResolvedPropertyNameRoot">
            <summary>Returns the root of the resolved property name, if any. </summary>
            <value>root</value>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprIdentNodeUtil.GetTypeFromStream(com.espertech.esper.epl.core.StreamTypeService,System.String,System.String,System.Boolean)">
            <summary>
            Determine stream id and property type given an unresolved property name and 
            a stream name that may also be part of the property name.
            <para/>
            For example: select s0.p1 from...    p1 is the property name, s0 the stream name, 
            however this could also be a nested property
            </summary>
            <param name="streamTypeService">service for type infos</param>
            <param name="unresolvedPropertyName">property name</param>
            <param name="streamOrPropertyName">stream name, this can also be the first part of the property name</param>
            <returns>pair of stream number and property type</returns>
            <throws>ExprValidationPropertyException if no such property exists</throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprIdentNodeUtil.GetTypeFromStreamExplicitProperties(com.espertech.esper.epl.core.StreamTypeService,System.String,System.String,System.Boolean)">
            <summary>This method only resolves against explicitly-listed properties (for use with XML or other types that allow any name as a property name). </summary>
            <param name="streamTypeService">stream types</param>
            <param name="unresolvedPropertyName">property name</param>
            <param name="streamOrPropertyName">optional stream name</param>
            <returns>property info</returns>
            <throws>ExprValidationPropertyException if the property could not be resolved</throws>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprInNode">
            <summary>Represents the in-clause (set check) function in an expression tree. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprInNodeImpl">
            <summary>
            Represents the in-clause (set check) function in an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprInNodeImpl.#ctor(System.Boolean)">
            <summary>Ctor. </summary>
            <param name="isNotIn">is true for "not in" and false for "in"</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprInNodeImpl.IsNotIn">
            <summary>Returns true for not-in, false for regular in </summary>
            <value>false for &quot;val in (a,b,c)&quot; or true for &quot;val not in (a,b,c)&quot;</value>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprInstanceofNode">
            <summary>
            Represents the INSTANCEOF(a,b,...) function is an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprInstanceofNode.#ctor(System.Collections.Generic.IList{System.String})">
            <summary>Ctor. </summary>
            <param name="classIdentifiers">is a list of type names to check type for</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprInstanceofNode.ClassIdentifiers">
            <summary>Returns the list of class names or types to check instance of. </summary>
            <value>class names</value>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprIStreamNode">
            <summary>
            Represents the RSTREAM() function in an expression tree.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprLastEverNode">
            <summary>Represents the "lastever" aggregate function is an expression tree. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprLastEverNode.#ctor(System.Boolean)">
            <summary>Ctor. </summary>
            <param name="distinct">flag indicating unique or non-unique value aggregation</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprLeavingAggNode">
            <summary>Represents the Leaving() aggregate function is an expression tree. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprLeavingAggNode.#ctor(System.Boolean)">
            <summary>Ctor. </summary>
            <param name="distinct">flag indicating unique or non-unique value aggregation</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprLikeNode">
            <summary>
            Represents the like-clause in an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprLikeNode.#ctor(System.Boolean)">
            <summary>Ctor. </summary>
            <param name="not">is true if this is a "not like", or false if just a like</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprLikeNode.IsNot">
            <summary>Returns true if this is a "not like", or false if just a like </summary>
            <value>indicator whether negated or not</value>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprMathNode">
            <summary>
            Represents a simple Math (+/-/divide/*) in a filter expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprMathNode.#ctor(com.espertech.esper.type.MathArithTypeEnum,System.Boolean,System.Boolean)">
            <summary>Ctor. </summary>
            <param name="mathArithTypeEnum">type of math</param>
            <param name="isIntegerDivision">false for division returns double, true for using Java-standard integer division</param>
            <param name="isDivisionByZeroReturnsNull">false for division-by-zero returns infinity, true for null</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprMathNode.MathArithTypeEnum">
            <summary>Returns the type of math. </summary>
            <value>math type</value>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprMedianNode">
            <summary>
            Represents the Median(...) aggregate function is an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprMedianNode.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="distinct">flag indicating unique or non-unique value aggregation</param>
            <param name="hasFilter">if set to <c>true</c> [has filter].</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprMinMaxAggrNode">
            <summary>Represents the min/max(distinct? ...) aggregate function is an expression tree. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprMinMaxAggrNode.#ctor(System.Boolean,com.espertech.esper.type.MinMaxTypeEnum,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="distinct">indicator whether distinct values of all values min/max</param>
            <param name="minMaxTypeEnum">enum for whether to minimum or maximum compute</param>
            <param name="hasFilter">if set to <c>true</c> [has filter].</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprMinMaxAggrNode.MinMaxTypeEnum">
            <summary>Returns the indicator for minimum or maximum. </summary>
            <value>min/max indicator</value>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprMinMaxRowNode">
            <summary>
            Represents the MAX(a,b) and MIN(a,b) functions is an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprMinMaxRowNode.#ctor(com.espertech.esper.type.MinMaxTypeEnum)">
            <summary>Ctor. </summary>
            <param name="minMaxTypeEnum">type of compare</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprMinMaxRowNode.MinMaxTypeEnum">
            <summary>Returns the indicator for minimum or maximum. </summary>
            <value>min/max indicator</value>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprNewNode">
            <summary>
            Represents the bit-wise operators in an expression tree. 
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNewNode.#ctor(System.String[])">
            <summary>Ctor. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprNodeIdentifierCollectVisitor">
            <summary>
            Visitor that collects event property identifier information under expression nodes.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprNodeVisitor">
            <summary>
            Visitor interface for use with expression node trees.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNodeVisitor.IsVisit(com.espertech.esper.epl.expression.ExprNode)">
            <summary> Allows visitor to indicate whether to visit a given node.
            Implicitly if a visitor doesn't visit a node it would also not visit any descendent child nodes of that node.
            </summary>
            <param name="exprNode">is the node in questions
            </param>
            <returns> true if the visitor wants to visit the child node (next call is visit), or false to skip child
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNodeVisitor.Visit(com.espertech.esper.epl.expression.ExprNode)">
            <summary> Visit the given expression node.</summary>
            <param name="exprNode">is the expression node to visit
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNodeIdentifierCollectVisitor.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprNodeIdentifierCollectVisitor.ExprProperties">
            <summary>Returns list of event property stream numbers and names that uniquely identify which property is from whcih stream, and the name of each. </summary>
            <value>list of event property statement-unique info</value>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprNodeIdentifierVisitor">
            <summary>
            Visitor that collects event property identifier information under expression nodes. The visitor can be configued to not 
            visit aggregation nodes thus ignoring properties under aggregation nodes such as sum, avg, min/max etc.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNodeIdentifierVisitor.#ctor(System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="visitAggregateNodes">true to indicate that the visitor should visit aggregate nodes, or falseif the visitor ignores aggregate nodes</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprNodeIdentifierVisitor.ExprProperties">
            <summary>Returns list of event property stream numbers and names that uniquely identify which property is from whcih stream, and the name of each. </summary>
            <value>list of event property statement-unique info</value>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprNodePreviousVisitorWParent">
            <summary>
            Visitor for getting a list of "prev" functions.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprNodeVisitorWithParent">
            <summary>
            Visitor interface for use with expression node trees, receives both the child
            node and the parent node (or null to indicate no parent node).
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNodeVisitorWithParent.IsVisit(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Allows visitor to indicate whether to visit a given node. Implicitly if a
            visitor doesn't visit a node it would also not visit any descendent child nodes of that
            node.
            </summary>
            <param name="exprNode">is the node in questions</param>
            <returns>
            true if the visitor wants to visit the child node (next call is visit), or false
            to skip child
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNodeVisitorWithParent.Visit(com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Visit the given expression node.
            </summary>
            <param name="exprNode">is the expression node to visit</param>
            <param name="parentExprNode">parent to visit</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprNodePreviousVisitorWParent.Previous">
            <summary>Returns the pair of previous nodes and their parent expression. </summary>
            <value>nodes</value>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNodeProxy.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            Intercepts the specified invocation.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprNodeSubselectDeclaredDotVisitor">
            <summary>
            Visitor that collects <seealso cref="T:com.espertech.esper.epl.expression.ExprSubselectNode"/> instances.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNodeSubselectDeclaredDotVisitor.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprNodeSubselectDeclaredDotVisitor.Subselects">
            <summary>Returns a list of lookup expression nodes. </summary>
            <value>lookup nodes</value>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprNodeSummaryVisitor">
            <summary>
            Visitor for compiling usage informaton of special expressions within an expression tree.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprNodeSummaryVisitor.IsPlain">
            <summary>Returns true if the expression is a plain-value expression, without any of the following: properties, aggregation, subselect, stream select, previous or prior </summary>
            <value>true for plain</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprNodeSummaryVisitor.Message">
            <summary>Returns a message if the expression contains special-instruction expressions. </summary>
            <value>message</value>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNodeUtility.GetExpressionProperties(com.espertech.esper.epl.expression.ExprNode,System.Boolean)">
            <summary>Walk expression returning properties used. </summary>
            <param name="exprNode">to walk</param>
            <param name="visitAggregateNodes">true to visit aggregation nodes</param>
            <returns>list of props</returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNodeUtility.GetValidatedSubtree(com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.epl.expression.ExprValidationContext)">
            <summary>Validates the expression node subtree that has this node as root. Some of the nodes of the tree, including the root, might be replaced in the process. </summary>
            <throws>com.espertech.esper.epl.expression.ExprValidationException when the validation fails</throws>
            <returns>the root node of the validated subtree, possiblydifferent than the root node of the unvalidated subtree </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNodeUtility.ParseMappedProperty(System.String)">
            <summary>Parse the mapped property into classname, method and string argument. Mind this has been parsed already and is a valid mapped property. </summary>
            <param name="property">is the string property to be passed as a static method invocation</param>
            <returns>descriptor object</returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNodeUtility.HasRemoveStream(com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.epl.core.StreamTypeService)">
            <summary>Returns true if all properties within the expression are witin data window'd streams. </summary>
            <param name="child">expression to interrogate</param>
            <param name="streamTypeService">streams</param>
            <returns>indicator</returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNodeUtility.ApplyFilterExpression(com.espertech.esper.epl.expression.ExprEvaluator,com.espertech.esper.client.EventBean,com.espertech.esper.client.EventBean[],com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Apply a filter expression. </summary>
            <param name="filter">expression</param>
            <param name="streamZeroEvent">the event that represents stream zero</param>
            <param name="streamOneEvents">all events thate are stream one events</param>
            <param name="exprEvaluatorContext">context for expression evaluation</param>
            <returns>filtered stream one events</returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNodeUtility.ApplyFilterExpression(com.espertech.esper.epl.expression.ExprEvaluator,com.espertech.esper.client.EventBean[],com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Apply a filter expression returning a pass indicator. </summary>
            <param name="filter">to apply</param>
            <param name="eventsPerStream">events per stream</param>
            <param name="exprEvaluatorContext">context for expression evaluation</param>
            <returns>pass indicator</returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNodeUtility.DeepEquals(com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.epl.expression.ExprNode)">
            <summary>Compare two expression nodes and their children in exact child-node sequence, returning true if the 2 expression nodes trees are equals, or false if they are not equals. <para /> Recursive call since it uses this method to compare child nodes in the same exact sequence. Nodes are compared using the equalsNode method. </summary>
            <param name="nodeOne">first expression top node of the tree to compare</param>
            <param name="nodeTwo">second expression top node of the tree to compare</param>
            <returns>false if this or all child nodes are not equal, true if equal</returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNodeUtility.DeepEquals(com.espertech.esper.epl.expression.ExprNode[],com.espertech.esper.epl.expression.ExprNode[])">
            <summary>Compares two expression nodes via deep comparison, considering all child nodes of either side. </summary>
            <param name="one">array of expressions</param>
            <param name="two">array of expressions</param>
            <returns>true if the expressions are equal, false if not</returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprNodeUtility.MappedPropertyParseResult">
            <summary>Encapsulates the parse result parsing a mapped property as a class and method name with args. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNodeUtility.MappedPropertyParseResult.#ctor(System.String,System.String,System.String)">
            <summary>Returns the parse result of the mapped property. </summary>
            <param name="className">is the class name, or null if there isn't one</param>
            <param name="methodName">is the method name</param>
            <param name="argString">is the argument</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprNodeUtility.MappedPropertyParseResult.ClassName">
            <summary>Returns class name. </summary>
            <value>name of class</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprNodeUtility.MappedPropertyParseResult.MethodName">
            <summary>Returns the method name. </summary>
            <value>method name</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprNodeUtility.MappedPropertyParseResult.ArgString">
            <summary>Returns the method argument. </summary>
            <value>arg</value>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprNodeValidated">
            <summary>A placeholder for another expression node that has been validated already. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNodeValidated.#ctor(com.espertech.esper.epl.expression.ExprNode)">
            <summary>Ctor. </summary>
            <param name="inner">nested expression node</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprNodeVariableVisitor">
            <summary>
            Visitor for expression node trees that determines if the expressions within contain a variable.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprNodeVariableVisitor.VariableNames">
            <summary> Returns the set of variable names encoountered.</summary>
            <returns>variable names</returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprNodeVariableVisitor.HasVariables">
            <summary>Returns true if the visitor finds a variable value.</summary>
            <returns>true for variable present in expression</returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprNodeViewResourceVisitor">
            <summary>
            Visitor that collects expression nodes that require view resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNodeViewResourceVisitor.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprNodeViewResourceVisitor.ExprNodes">
            <summary>
            Returns the list of expression nodes requiring view resources.
            </summary>
            <value>expr nodes such as 'prior' or 'prev'</value>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprNotNode">
            <summary>
            Represents a NOT expression in an expression tree.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprNthAggNode">
            <summary>Represents the Nth(...) and aggregate function is an expression tree. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNthAggNode.#ctor(System.Boolean)">
            <summary>Ctor. </summary>
            <param name="distinct">flag indicating unique or non-unique value aggregation</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprNumberSetCronParam">
            <summary>
            Expression for a parameter within a crontab.
            <para/>
            May have one subnode depending on the cron parameter type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprNumberSetCronParam.#ctor(com.espertech.esper.type.CronOperatorEnum)">
            <summary>Ctor. </summary>
            <param name="cronOperator">type of cron parameter</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprNumberSetCronParam.CronOperator">
            <summary>Returns the cron parameter type. </summary>
            <value>type of cron parameter</value>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprNumberSetFrequency">
            <summary>
            Expression for use within crontab to specify a frequency.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprNumberSetList">
            <summary>
            Expression for use within crontab to specify a list of values.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprNumberSetRange">
            <summary>
            Expression for use within crontab to specify a range.
            <para/> 
            Differs from the between-expression since the value returned by evaluating is a cron-value object.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprNumberSetWildcard">
            <summary>Expression for use within crontab to specify a wildcard. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprNumberSetWildcardMarker">
            <summary>Expression for use within crontab to specify a wildcard. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprOrderedExpr">
            <summary>A placeholder expression for view/pattern object parameters that allow sorting expression values ascending or descending. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprOrderedExpr.#ctor(System.Boolean)">
            <summary>Ctor. </summary>
            <param name="descending">is true for descending sorts</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprOrderedExpr.IsDescending">
            <summary>Returns true for descending sort. </summary>
            <value>indicator for ascending or descending sort</value>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprOrNode">
            <summary>
            Represents an OR expression in a filter expression tree.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprPlugInAggFunctionFactoryNode">
            <summary>Represents a custom aggregation function in an expresson tree. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprPlugInAggFunctionFactoryNode.#ctor(System.Boolean,com.espertech.esper.client.hook.AggregationFunctionFactory,System.String)">
            <summary>Ctor. </summary>
            <param name="distinct">flag indicating unique or non-unique value aggregation</param>
            <param name="aggregationFunctionFactory">is the base Type for plug-in aggregation functions</param>
            <param name="functionName">is the aggregation function name</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprPlugInAggFunctionNode">
            <summary>Represents a custom aggregation function in an expresson tree. </summary>
            <unknown>@deprecated</unknown>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprPlugInAggFunctionNode.#ctor(System.Boolean,com.espertech.esper.epl.agg.service.AggregationSupport,System.String)">
            <summary>Ctor. </summary>
            <param name="distinct">flag indicating unique or non-unique value aggregation</param>
            <param name="aggregationSupport">is the base class for plug-in aggregation functions</param>
            <param name="functionName">is the aggregation function name</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprPlugInSingleRowNode">
            <summary>Represents an invocation of a plug-in single-row function  in the expression tree. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprPlugInSingleRowNode.#ctor(System.String,System.Type,System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprChainedSpec},com.espertech.esper.epl.core.EngineImportSingleRowDesc)">
            <summary>
            Ctor.
            </summary>
            <param name="functionName">Name of the function.</param>
            <param name="clazz">The clazz.</param>
            <param name="chainSpec">the class and name of the method that this node will invoke plus parameters</param>
            <param name="config">The config.</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprPreviousMatchRecognizeNode">
            <summary>
            Represents the 'prev' previous event function in match-recognize "define" item.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprPreviousMatchRecognizeNode.SetGetter(com.espertech.esper.rowregex.RegexPartitionStateRandomAccessGetter)">
            <summary>Sets the getter to obtain the value. </summary>
            <param name="getter">to set</param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprPreviousMatchRecognizeNode.SetAssignedIndex(System.Int32)">
            <summary>Sets the index to use when accessing via getter </summary>
            <param name="assignedIndex">index</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprPreviousMatchRecognizeNode.ConstantIndexNumber">
            <summary>Returns the index number. </summary>
            <value>index number</value>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprPreviousNode">
            <summary>
            Represents the 'prev' previous event function in an expression node tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprPreviousNode.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprPreviousNode.EqualsNode(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Return true if a expression node semantically equals the current node, or false if not.
            Concrete implementations should compare the type and any additional information
            that impact the evaluation of a node.
            </summary>
            <param name="node">to compare to</param>
            <returns>
            true if semantically equal, or false if not equals
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprPriorEvalStrategyBase">
            <summary>
            Represents the 'prior' prior event function in an expression node tree.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprPriorEvalStrategyRandomAccess">
            <summary>
            Represents the 'prior' prior event function in an expression node tree.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprPriorEvalStrategyRelativeAccess">
            <summary>
            Represents the 'prior' prior event function in an expression node tree.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprPriorNode">
            <summary>
            Represents the 'prior' prior event function in an expression node tree.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprPropertyExistsNode">
            <summary>
            Represents the EXISTS(property) function in an expression tree.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprRateAggNode">
            <summary>Represents the Rate(...) and aggregate function is an expression tree. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprRateAggNode.#ctor(System.Boolean)">
            <summary>Ctor. </summary>
            <param name="distinct">flag indicating unique or non-unique value aggregation</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprRegexpNode">
            <summary>
            Represents the regexp-clause in an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprRegexpNode.#ctor(System.Boolean)">
            <summary> Ctor.</summary>
            <param name="not">is true if the it's a "not regexp" expression, of false for regular regexp
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprRegexpNode.ToExpressionString">
            <summary>
            Returns the expression node rendered as a string.
            </summary>
            <value></value>
            <returns> string rendering of expression
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprRegexpNode.Validate(com.espertech.esper.epl.expression.ExprValidationContext)">
            <summary>
            Validate node.
            </summary>
            <param name="validationContext">The validation context.</param>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprRegexpNode.Evaluate(com.espertech.esper.epl.expression.EvaluateParams)">
            <summary>
            Evaluate event tuple and return result.
            </summary>
            <param name="eventsPerStream">event tuple</param>
            <param name="isNewData">indicates whether we are dealing with new data (istream) or old data (rstream)</param>
            <param name="exprEvaluatorContext">the expression evaluator context</param>
            <returns>
            evaluation result, a bool value for OR/AND-type evalution nodes.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprRegexpNode.EqualsNode(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Returns true if the objects are equal.
            </summary>
            <param name="node">the node to compare against</param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprRegexpNode.ExprEvaluator">
            <summary>
            Gets the expression evaluator.
            </summary>
            <value>The expression evaluator.</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprRegexpNode.EventType">
            <summary>
            Returns the event type.
            </summary>
            <value>The type of the event.</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprRegexpNode.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <value>The type.</value>
            <returns> type returned when evaluated
            </returns>
            <throws>ExprValidationException thrown when validation failed </throws>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprRegexpNode.IsConstantResult">
            <summary>
            </summary>
            <value></value>
            Returns true if the expression node's evaluation value doesn't depend on any events data,
            as must be determined at validation time, which is bottom-up and therefore
            reliably allows each node to determine constant value.
            @return true for constant evaluation value, false for non-constant evaluation value
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprRegexpNode.IsNot">
            <summary>
            Returns true if this is a "not regexp", or false if just a regexp
            </summary>
            <returns>
            indicator whether negated or not
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprRelationalOpAllAnyNode">
            <summary>
            Represents a lesser or greater then (&lt;/&lt;=/&gt;/&gt;=) expression in a filter
            expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprRelationalOpAllAnyNode.#ctor(com.espertech.esper.type.RelationalOpEnum,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="relationalOpEnum">type of compare, ie. lt, gt, le, ge</param>
            <param name="isAll">true if all, false for any</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprRelationalOpAllAnyNode.IsAll">
            <summary>
            Returns true for ALL, false for ANY.
            </summary>
            <returns>
            indicator all or any
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprRelationalOpAllAnyNode.ExprEvaluator">
            <summary>
            Gets the expression evaluator.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprRelationalOpAllAnyNode.EventType">
            <summary>
            Returns the event type.
            </summary>
            <value>The type of the event.</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprRelationalOpAllAnyNode.RelationalOp">
            <summary>
            Returns the type of relational op used.
            </summary>
            <returns>
            enum with relational op type
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprRelationalOpNode">
            <summary>
            Represents a lesser or greater then (&lt;/&lt;=/&gt;/&gt;=) expression in a filter expression tree.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprRelationalOpNodeImpl">
            <summary>
            Represents a lesser or greater then (&lt;/&lt;=/&gt;/&gt;=) expression in a filter expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprRelationalOpNodeImpl.#ctor(com.espertech.esper.type.RelationalOpEnum)">
            <summary>Ctor. </summary>
            <param name="relationalOpEnum">type of compare, ie. lt, gt, le, ge</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprRelationalOpNodeImpl.RelationalOpEnum">
            <summary>Returns the type of relational op used. </summary>
            <value>enum with relational op type</value>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprStddevNode">
            <summary>Represents the Stddev(...) aggregate function is an expression tree. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprStddevNode.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="distinct">flag indicating unique or non-unique value aggregation</param>
            <param name="hasFilter">if set to <c>true</c> [has filter].</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprStreamUnderlyingNode">
            <summary>
            Represents an stream selector that returns the streams underlying event, or null if undefined.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprStreamUnderlyingNodeImpl">
            <summary>
            Represents an stream selector that returns the streams underlying event, or null if undefined.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprStreamUnderlyingNodeImpl.#ctor(System.String,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="streamName">is the name of the stream for which to return the underlying event</param>
            <param name="isWildcard">if set to <c>true</c> [is wildcard].</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprStreamUnderlyingNodeImpl.StreamName">
            <summary>Returns the stream name. </summary>
            <value>stream name</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprStreamUnderlyingNodeImpl.StreamId">
            <summary>Returns stream id supplying the property value. </summary>
            <value>stream number</value>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprSubselectAllSomeAnyNode">
            <summary>
            Represents a subselect in an expression tree.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprSubselectNode">
            <summary>
            Represents a subselect in an expression tree.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.expression.ExprSubselectNode._selectClause">
            <summary>The validated select clause. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.expression.ExprSubselectNode._filterExpr">
            <summary>The validate filter expression. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.expression.ExprSubselectNode._rawEventType">
            <summary>The event type generated for wildcard selects. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprSubselectNode.Evaluate(com.espertech.esper.client.EventBean[],System.Boolean,System.Collections.Generic.ICollection{com.espertech.esper.client.EventBean},com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Evaluate the lookup expression returning an evaluation result object. </summary>
            <param name="eventsPerStream">is the events for each stream in a join</param>
            <param name="isNewData">is true for new data, or false for old data</param>
            <param name="matchingEvents">is filtered results from the table of stored lookup events</param>
            <param name="exprEvaluatorContext">context for expression evalauation</param>
            <returns>evaluation result</returns>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprSubselectNode.#ctor(com.espertech.esper.epl.spec.StatementSpecRaw)">
            <summary>Ctor. </summary>
            <param name="statementSpec">is the lookup statement spec from the parser, unvalidated</param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprSubselectNode.SetStatementSpecCompiled(com.espertech.esper.epl.spec.StatementSpecCompiled,System.Int32)">
            <summary>
            Supplies a compiled statement spec.
            </summary>
            <param name="statementSpecCompiled">compiled validated filters</param>
            <param name="subselectNumber">The subselect number.</param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprSubselectNode.SetSelectClause(com.espertech.esper.epl.expression.ExprNode[])">
            <summary>Sets the validate select clause </summary>
            <param name="selectClause">is the expression representing the select clause</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprSubselectNode.ReturnType">
            <summary>
            Returns the type that the node's evaluate method returns an instance of.
            </summary>
            <returns>
            type returned when evaluated
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprSubselectNode.EventType">
            <summary>
            Returns the event type.
            </summary>
            <value>The type of the event.</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprSubselectNode.SelectClauseEvaluator">
            <summary>
            Gets the select clause evaluator.
            </summary>
            <value>The select clause evaluator.</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprSubselectNode.StatementSpecCompiled">
            <summary>Returns the compiled statement spec. </summary>
            <value>compiled statement</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprSubselectNode.StatementSpecRaw">
            <summary>Returns the uncompiled statement spec. </summary>
            <value>statement spec uncompiled</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprSubselectNode.SelectAsNames">
            <summary>Supplies the name of the select expression as-tag </summary>
            <value>is the as-name(s)</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprSubselectNode.Strategy">
            <summary>
            Sets the strategy for boiling down the table of lookup events into a subset against which to run the filter.
            </summary>
            <value>is the looking strategy (full table scan or indexed)</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprSubselectNode.SelectClause">
            <summary>Returns the select clause or null if none. </summary>
            <value>clause</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprSubselectNode.FilterExpr">
            <summary>Returns filter expr or null if none. </summary>
            <value>filter</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprSubselectNode.RawEventType">
            <summary>Returns the event type. </summary>
            <value>type</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprSubselectNode.FilterSubqueryStreamTypes">
            <summary>Return stream types. </summary>
            <value>types</value>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprSubselectAllSomeAnyNode.#ctor(com.espertech.esper.epl.spec.StatementSpecRaw,System.Boolean,System.Boolean,System.Nullable{com.espertech.esper.type.RelationalOpEnum})">
            <summary>Ctor. </summary>
            <param name="statementSpec">is the lookup statement spec from the parser, unvalidated</param>
            <param name="not">when NOT</param>
            <param name="all">when ALL, false for ANY</param>
            <param name="relationalOpEnum">operator</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprSubselectAllSomeAnyNode.IsNot">
            <summary>Returns true for not. </summary>
            <value>not indicator</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprSubselectAllSomeAnyNode.IsAll">
            <summary>Returns true for all. </summary>
            <value>all indicator</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprSubselectAllSomeAnyNode.RelationalOp">
            <summary>Returns relational op. </summary>
            <value>op</value>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprSubselectExistsNode">
            <summary>
            Represents an exists-subselect in an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprSubselectExistsNode.#ctor(com.espertech.esper.epl.spec.StatementSpecRaw)">
            <summary>Ctor. </summary>
            <param name="statementSpec">is the lookup statement spec from the parser, unvalidated</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprSubselectInNode">
            <summary>
            Represents a subselect in an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprSubselectInNode.#ctor(com.espertech.esper.epl.spec.StatementSpecRaw)">
            <summary>Ctor. </summary>
            <param name="statementSpec">is the lookup statement spec from the parser, unvalidated</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprSubselectInNode.IsNotIn">
            <summary>Returns true for not-in, or false for in. </summary>
            <value>true for not-in</value>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprSubselectRowNode">
            <summary>Represents a subselect in an expression tree. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprSubselectRowNode.#ctor(com.espertech.esper.epl.spec.StatementSpecRaw)">
            <summary>Ctor. </summary>
            <param name="statementSpec">is the lookup statement spec from the parser, unvalidated</param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ProxyExprSubselectStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.expression.ProxyExprSubselectStrategy"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ProxyExprSubselectStrategy.#ctor(System.Func{com.espertech.esper.client.EventBean[],com.espertech.esper.epl.expression.ExprEvaluatorContext,System.Collections.Generic.ICollection{com.espertech.esper.client.EventBean}})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.expression.ProxyExprSubselectStrategy"/> class.
            </summary>
            <param name="procEvaluateMatching">The evaluate matching.</param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ProxyExprSubselectStrategy.EvaluateMatching(com.espertech.esper.client.EventBean[],com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Evaluates the matching.
            </summary>
            <param name="eventsPerStream">The events per stream.</param>
            <param name="exprEvaluatorContext">The expr evaluator context.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprSubstitutionNode">
            <summary>Represents a substitution value to be substituted in an expression tree, not valid for any purpose of use as an expression, however can take a place in an expression tree. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprSubstitutionNode.#ctor(System.Int32)">
            <summary>Ctor. </summary>
            <param name="index">is the index of the substitution parameter</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprSubstitutionNode.Index">
            <summary>Returns the substitution parameter index. </summary>
            <value>index</value>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprSumNode">
            <summary>
            Represents the Sum(...) aggregate function is an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprSumNode.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="distinct">flag indicating unique or non-unique value aggregation</param>
            <param name="hasFilter">if set to <c>true</c> [has filter].</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprTimePeriod">
            <summary>
            Expression representing a time period.
            <para /> 
            Child nodes to this expression carry the actual parts and must return a numeric value.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprTimePeriod.HasDay">
            <summary>Indicator whether the time period has a day part child expression. </summary>
            <returns>true for part present, false for not present</returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprTimePeriod.HasHour">
            <summary>Indicator whether the time period has a hour part child expression. </summary>
            <returns>true for part present, false for not present</returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprTimePeriod.HasMinute">
            <summary>Indicator whether the time period has a minute part child expression. </summary>
            <returns>true for part present, false for not present</returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprTimePeriod.HasSecond">
            <summary>Indicator whether the time period has a second part child expression. </summary>
            <returns>true for part present, false for not present</returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprTimePeriod.HasMillisecond">
            <summary>Indicator whether the time period has a millisecond part child expression. </summary>
            <returns>true for part present, false for not present</returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprTimePeriod.HasYear">
            <summary>Indicator whether the time period has a year part child expression. </summary>
            <returns>true for part present, false for not present</returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprTimePeriod.HasMonth">
            <summary>Indicator whether the time period has a month part child expression. </summary>
            <returns>true for part present, false for not present</returns>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprTimePeriod.HasWeek">
            <summary>Indicator whether the time period has a week part child expression. </summary>
            <returns>true for part present, false for not present</returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprTimePeriodImpl">
            <summary>
            Expression representing a time period.
            <para/>
            Child nodes to this expression carry the actual parts and must return a numeric value.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprTimePeriodImpl.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="hasYear">if set to <c>true</c> [has year].</param>
            <param name="hasMonth">if set to <c>true</c> [has month].</param>
            <param name="hasWeek">if set to <c>true</c> [has week].</param>
            <param name="hasDay">true if the expression has that part, false if not</param>
            <param name="hasHour">true if the expression has that part, false if not</param>
            <param name="hasMinute">true if the expression has that part, false if not</param>
            <param name="hasSecond">true if the expression has that part, false if not</param>
            <param name="hasMillisecond">true if the expression has that part, false if not</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprTimePeriodImpl.HasDay">
            <summary>Indicator whether the time period has a day part child expression. </summary>
            <value>true for part present, false for not present</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprTimePeriodImpl.HasHour">
            <summary>Indicator whether the time period has a hour part child expression. </summary>
            <value>true for part present, false for not present</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprTimePeriodImpl.HasMinute">
            <summary>Indicator whether the time period has a minute part child expression. </summary>
            <value>true for part present, false for not present</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprTimePeriodImpl.HasSecond">
            <summary>Indicator whether the time period has a second part child expression. </summary>
            <value>true for part present, false for not present</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprTimePeriodImpl.HasMillisecond">
            <summary>Indicator whether the time period has a millisecond part child expression. </summary>
            <value>true for part present, false for not present</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprTimePeriodImpl.HasYear">
            <summary>Indicator whether the time period has a year part child expression. </summary>
            <value>true for part present, false for not present</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprTimePeriodImpl.HasMonth">
            <summary>Indicator whether the time period has a month part child expression. </summary>
            <value>true for part present, false for not present</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprTimePeriodImpl.HasWeek">
            <summary>Indicator whether the time period has a week part child expression. </summary>
            <value>true for part present, false for not present</value>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprTimePeriodImpl.HasVariable">
            <summary>Indicator whether the time period has a variable in any of the child expressions. </summary>
            <value>true for variable present, false for not present</value>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprTimestampNode">
            <summary>
            Represents the CURRENT_TIMESTAMP() function or reserved keyword in an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprTimestampNode.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprTypeofNode">
            <summary>
            Represents the TYPEOF(a) function is an expression tree.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprValidationException">
            <summary> Thrown to indicate a validation error in a filter expression.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprValidationException.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="message">validation error message
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.expression.ExprValidationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="cause">The cause.</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprValidationPropertyException">
            <summary>
            Thrown to indicate a validation error in an expression originating from a property resolution error.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprVariableNode">
            <summary>Represents a variable in an expression tree. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.expression.ExprVariableNodeImpl">
            <summary>
            Represents a variable in an expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.ExprVariableNodeImpl.#ctor(System.String,com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Ctor.
            </summary>
            <param name="variableName">is the name of the variable</param>
            <param name="variableService">The variable service.</param>
        </member>
        <member name="P:com.espertech.esper.epl.expression.ExprVariableNodeImpl.VariableName">
            <summary>Returns the name of the variable. </summary>
            <value>variable name</value>
        </member>
        <member name="T:com.espertech.esper.epl.expression.SubselectEvalStrategy">
            <summary>Strategy for evaluation of a subselect. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.SubselectEvalStrategy.Evaluate(com.espertech.esper.client.EventBean[],System.Boolean,System.Collections.Generic.ICollection{com.espertech.esper.client.EventBean},com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Evaluate. </summary>
            <param name="eventsPerStream">events per stream</param>
            <param name="isNewData">true for new data</param>
            <param name="matchingEvents">prefiltered events</param>
            <param name="exprEvaluatorContext">expression evaluation context</param>
            <returns>eval result</returns>
        </member>
        <member name="T:com.espertech.esper.epl.expression.SubselectEvalStrategyEqualsAll">
            <summary>
            Strategy for subselects with "=/!=/*&lt;&gt; ALL".
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.SubselectEvalStrategyEqualsAll.#ctor(System.Boolean,System.Boolean,System.Type,com.espertech.esper.epl.expression.ExprEvaluator,com.espertech.esper.epl.expression.ExprEvaluator,com.espertech.esper.epl.expression.ExprEvaluator)">
            <summary>
            Ctor.
            </summary>
            <param name="notIn">false for =, true for !=</param>
            <param name="mustCoerce">coercion required</param>
            <param name="coercionType">type to coerce to</param>
            <param name="valueExpr">LHS</param>
            <param name="selectClauseExpr">select clause or null</param>
            <param name="filterExpr">filter or null</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.SubselectEvalStrategyEqualsAny">
            <summary>Strategy for subselects with "=/!=/&lt;&gt; ANY". </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.SubselectEvalStrategyEqualsAny.#ctor(System.Boolean,System.Boolean,System.Type,com.espertech.esper.epl.expression.ExprEvaluator,com.espertech.esper.epl.expression.ExprEvaluator,com.espertech.esper.epl.expression.ExprEvaluator)">
            <summary>Ctor. </summary>
            <param name="notIn">false for =, true for !=</param>
            <param name="mustCoerce">coercion required</param>
            <param name="coercionType">type to coerce to</param>
            <param name="valueExpr">LHS</param>
            <param name="selectClauseExpr">select clause or null</param>
            <param name="filterExpr">filter or null</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.SubselectEvalStrategyEqualsIn">
            <summary>
            Represents a in-subselect evaluation strategy.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.SubselectEvalStrategyEqualsIn.#ctor(System.Boolean,System.Boolean,System.Type,com.espertech.esper.epl.expression.ExprEvaluator,com.espertech.esper.epl.expression.ExprEvaluator,com.espertech.esper.epl.expression.ExprEvaluator)">
            <summary>
            Ctor.
            </summary>
            <param name="notIn">false for =, true for !=</param>
            <param name="mustCoerce">coercion required</param>
            <param name="coercionType">type to coerce to</param>
            <param name="valueExpr">LHS</param>
            <param name="selectClauseExpr">select clause or null</param>
            <param name="filterExpr">filter or null</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.SubselectEvalStrategyFactory">
            <summary>Factory for subselect evaluation strategies. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.SubselectEvalStrategyFactory.CreateStrategy(com.espertech.esper.epl.expression.ExprSubselectNode,System.Boolean,System.Boolean,System.Boolean,System.Nullable{com.espertech.esper.type.RelationalOpEnum})">
            <summary>Create a strategy. </summary>
            <param name="subselectExpression">expression node</param>
            <param name="isNot">true if negated</param>
            <param name="isAll">true for ALL</param>
            <param name="isAny">true for ANY</param>
            <param name="relationalOp">relational op, if any</param>
            <returns>strategy</returns>
            <throws>ExprValidationException if expression validation fails</throws>
        </member>
        <member name="T:com.espertech.esper.epl.expression.SubselectEvalStrategyRelOpAll">
            <summary>Strategy for subselects with "&gt;/&lt;/&lt;=/&gt;= ALL". </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.SubselectEvalStrategyRelOpAll.#ctor(com.espertech.esper.type.RelationalOpEnumExtensions.Computer,com.espertech.esper.epl.expression.ExprEvaluator,com.espertech.esper.epl.expression.ExprEvaluator,com.espertech.esper.epl.expression.ExprEvaluator)">
            <summary>Ctor. </summary>
            <param name="computer">operator</param>
            <param name="valueExpr">LHS</param>
            <param name="selectClause">select or null</param>
            <param name="filterExpr">filter or null</param>
        </member>
        <member name="T:com.espertech.esper.epl.expression.SubselectEvalStrategyRelOpAny">
            <summary>Strategy for subselects with "&gt;/&lt;/&lt;=/&gt;= ANY". </summary>
        </member>
        <member name="M:com.espertech.esper.epl.expression.SubselectEvalStrategyRelOpAny.#ctor(com.espertech.esper.type.RelationalOpEnumExtensions.Computer,com.espertech.esper.epl.expression.ExprEvaluator,com.espertech.esper.epl.expression.ExprEvaluator,com.espertech.esper.epl.expression.ExprEvaluator)">
            <summary>Ctor. </summary>
            <param name="computer">operator</param>
            <param name="valueExpr">LHS</param>
            <param name="selectClause">select or null</param>
            <param name="filterExpr">filter or null</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.assemble.AssemblyStrategyTreeBuilder">
            <summary>
            Builds a tree of assembly nodes given a strategy for how to join streams.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.AssemblyStrategyTreeBuilder.Build(System.Int32,System.Collections.Generic.IDictionary{System.Int32,System.Int32[]},System.Boolean[])">
            <summary> Builds a tree of <see cref="T:com.espertech.esper.epl.join.assemble.BaseAssemblyNode"/> from join strategy information.</summary>
            <param name="rootStream">the root stream supplying the event to evaluate
            </param>
            <param name="streamsJoinedPerStream">a map in which the key is the stream number to supply an event,
            and the value is an array of streams to find events in for the given event
            </param>
            <param name="isRequiredPerStream">indicates which streams are required join streams versus optional streams
            </param>
            <returns> root assembly node
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.assemble.BaseAssemblyNode">
            <summary>
            Represents a node in a tree responsible for assembling outer join query results.
            
            The tree is double-linked, child nodes know each parent and parent know all child nodes.
            
            Each specific subclass of this abstract assembly node is dedicated to assembling results for
            a certain event stream.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.assemble.ResultAssembler">
            <summary>
            Interface for indicating a result in the form of a single row of multiple events, which could
            represent either a full result over all streams or a partial result over a subset of streams.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.ResultAssembler.Result(com.espertech.esper.client.EventBean[],System.Int32,com.espertech.esper.client.EventBean,com.espertech.esper.epl.join.rep.Node,System.Collections.Generic.ICollection{com.espertech.esper.client.EventBean[]},com.espertech.esper.client.EventBean)">
            <summary>
            Publish a result row.
            </summary>
            <param name="row">is the result to publish</param>
            <param name="fromStreamNum">is the originitor that publishes the row</param>
            <param name="myEvent">is optional and is the event that led to the row result</param>
            <param name="myNode">is optional and is the result node of the event that led to the row result</param>
            <param name="resultFinalRows">The result final rows.</param>
            <param name="resultRootEvent">The result root event.</param>
        </member>
        <member name="F:com.espertech.esper.epl.join.assemble.BaseAssemblyNode.ParentNode">
            <summary> Parent node.</summary>
        </member>
        <member name="F:com.espertech.esper.epl.join.assemble.BaseAssemblyNode._childNodes">
            <summary> Child nodes.</summary>
        </member>
        <member name="F:com.espertech.esper.epl.join.assemble.BaseAssemblyNode._streamNum">
            <summary> Stream number.</summary>
        </member>
        <member name="F:com.espertech.esper.epl.join.assemble.BaseAssemblyNode._numStreams">
            <summary> Number of streams in statement.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.BaseAssemblyNode.#ctor(System.Int32,System.Int32)">
            <summary> Ctor.</summary>
            <param name="streamNum">stream number of the event stream that this node assembles results for.
            </param>
            <param name="numStreams">number of streams
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.BaseAssemblyNode.Init(System.Collections.Generic.IList{com.espertech.esper.epl.join.rep.Node}[])">
            <summary> Provides results to assembly nodes for initialization.</summary>
            <param name="result">is a list of result nodes per stream
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.BaseAssemblyNode.Process(System.Collections.Generic.IList{com.espertech.esper.epl.join.rep.Node}[],System.Collections.Generic.ICollection{com.espertech.esper.client.EventBean[]},com.espertech.esper.client.EventBean)">
            <summary>
            Process results.
            </summary>
            <param name="result">is a list of result nodes per stream</param>
            <param name="resultFinalRows">The result final rows.</param>
            <param name="resultRootEvent">The result root event.</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.BaseAssemblyNode.Print(com.espertech.esper.util.IndentWriter)">
            <summary> Output this node using writer, not outputting child nodes.</summary>
            <param name="indentWriter">to use for output
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.BaseAssemblyNode.AddChild(com.espertech.esper.epl.join.assemble.BaseAssemblyNode)">
            <summary> Add a child node.</summary>
            <param name="childNode">to add
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.BaseAssemblyNode.PrintDescendends(com.espertech.esper.util.IndentWriter)">
            <summary> Output this node and all descendent nodes using writer, outputting child nodes.</summary>
            <param name="indentWriter">to output to
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.BaseAssemblyNode.GetDescendentNodesBottomUp(com.espertech.esper.epl.join.assemble.BaseAssemblyNode)">
            <summary> Returns all descendent nodes to the top node in a list in which the utmost descendants are
            listed first and the top node itself is listed last.
            </summary>
            <param name="topNode">is the root node of a tree structure
            </param>
            <returns> list of nodes with utmost descendants first ordered by level of depth in tree with top node last
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.assemble.BaseAssemblyNode.StreamNum">
            <summary> Returns the stream number.</summary>
            <returns> stream number
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.assemble.BaseAssemblyNode.Substreams">
            <summary> Returns an array of stream numbers that lists all child node's stream numbers.</summary>
            <returns> child node stream numbers
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.assemble.BaseAssemblyNode.ChildNodes">
            <summary> Returns child nodes.</summary>
            <returns> child nodes
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.assemble.BaseAssemblyNode.ParentAssembler">
            <summary> Gets or sets the parent node.</summary>
            <returns> parent node
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.assemble.BranchOptionalAssemblyNode">
            <summary>
            Assembly node for an event stream that is a branch with a single optional child node below it.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.BranchOptionalAssemblyNode.#ctor(System.Int32,System.Int32)">
            <summary>Ctor. </summary>
            <param name="streamNum">is the stream number</param>
            <param name="numStreams">is the number of streams</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.assemble.BranchRequiredAssemblyNode">
            <summary>
            Assembly node for an event stream that is a branch with a single required child node below it.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.BranchRequiredAssemblyNode.#ctor(System.Int32,System.Int32)">
            <summary>Ctor. </summary>
            <param name="streamNum">is the stream number</param>
            <param name="numStreams">is the number of streams</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.assemble.CartesianProdAssemblyNode">
            <summary>
            Assembly node for an event stream that is a branch with a two or more child
            nodes (required and optional) below it.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.CartesianProdAssemblyNode.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="streamNum">is the stream number</param>
            <param name="numStreams">is the number of streams</param>
            <param name="allSubStreamsOptional">true if all child nodes to this node are optional, or false ifone or more child nodes are required for a result.</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.assemble.CartesianProdAssemblyNode.ChildStreamResults">
            <summary>Structure to represent a list of event result rows per stream. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.CartesianProdAssemblyNode.ChildStreamResults.#ctor(System.Int32)">
            <summary>Ctor. </summary>
            <param name="size">number of streams</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.CartesianProdAssemblyNode.ChildStreamResults.Add(System.Int32,com.espertech.esper.client.EventBean[])">
            <summary>Add result from stream. </summary>
            <param name="fromStreamIndex">from stream</param>
            <param name="row">row to add</param>
        </member>
        <member name="P:com.espertech.esper.epl.join.assemble.CartesianProdAssemblyNode.ChildStreamResults.RowsPerStream">
            <summary>Returns rows per stream. </summary>
            <value>rows per stream</value>
        </member>
        <member name="T:com.espertech.esper.epl.join.assemble.CartesianUtil">
            <summary>
            Helper class to compute the cartesian product of the events from two streams.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.CartesianUtil.ComputeCartesian(System.Collections.Generic.IList{com.espertech.esper.client.EventBean[]},System.Int32[],System.Collections.Generic.IList{com.espertech.esper.client.EventBean[]},System.Int32[],System.Collections.Generic.IList{com.espertech.esper.client.EventBean[]})">
            <summary>
            Form the 2-ary cartesian product between zero or more events from 2 streams.
            </summary>
            <param name="streamOne">the events from stream one</param>
            <param name="subStreamNumsOne">the list of substream numbers to stream one to include in the product</param>
            <param name="streamTwo">the events from stream two</param>
            <param name="subStreamNumsTwo">the list of substream numbers to stream two to include in the product</param>
            <param name="resultList">where the result of the cartesian product is added to</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.assemble.LeafAssemblyNode">
            <summary>
            Assembly node for an event stream that is a leaf with a no child nodes below it.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.LeafAssemblyNode.#ctor(System.Int32,System.Int32)">
            <summary>Ctor. </summary>
            <param name="streamNum">is the stream number</param>
            <param name="numStreams">is the number of streams</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.assemble.RootCartProdAssemblyNode">
            <summary>
            Assembly node for an event stream that is a root with a two or more child nodes below it.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.RootCartProdAssemblyNode.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>Ctor. </summary>
            <param name="streamNum">is the stream number</param>
            <param name="numStreams">is the number of streams</param>
            <param name="allSubStreamsOptional">true if all substreams are optional and none are required</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.RootCartProdAssemblyNode.ComputeCombined(System.Int32[][])">
            <summary>Compute an array of supersets of sub stream numbers per stream, for at least 3 or more streams. </summary>
            <param name="subStreamsPerChild">is for each stream number a list of direct child sub streams</param>
            <returns>an array in with length (subStreamsPerChild.lenght - 2) in whicharray[0] contains the streams for subStreamsPerChild[0] and subStreamsPerChild[1] combined, and array[1] contains the streams for subStreamsPerChild[0], subStreamsPerChild[1] and subStreamsPerChild[2] combined </returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.assemble.RootOptionalAssemblyNode">
            <summary>
            Assembly node for an event stream that is a root with a one optional child node below it.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.RootOptionalAssemblyNode.#ctor(System.Int32,System.Int32)">
            <summary>Ctor. </summary>
            <param name="streamNum">is the stream number</param>
            <param name="numStreams">is the number of streams</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.assemble.RootRequiredAssemblyNode">
            <summary>Assembly node for an event stream that is a root with a one required child node below it. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.assemble.RootRequiredAssemblyNode.#ctor(System.Int32,System.Int32)">
            <summary>Ctor. </summary>
            <param name="streamNum">is the stream number</param>
            <param name="numStreams">is the number of streams</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.base.ExecNodeQueryStrategy">
            <summary>
            Query strategy for building a join tuple set by using an execution node tree.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.base.QueryStrategy">
            <summary>Encapsulates the strategy use to resolve the events for a stream into a tuples of events in a join. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.QueryStrategy.Lookup(com.espertech.esper.client.EventBean[],System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}},com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Look up events returning tuples of joined events. </summary>
            <param name="lookupEvents">events to use to perform the join</param>
            <param name="joinSet">result join tuples of events</param>
            <param name="exprEvaluatorContext">expression evaluation context</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.ExecNodeQueryStrategy.#ctor(System.Int32,System.Int32,com.espertech.esper.epl.join.exec.base.ExecNode)">
            <summary>CTor. </summary>
            <param name="forStream">stream the strategy is for</param>
            <param name="numStreams">number of streams in total</param>
            <param name="execNode">execution node for building join tuple set</param>
        </member>
        <member name="P:com.espertech.esper.epl.join.base.ExecNodeQueryStrategy.ForStream">
            <summary>Return stream number this strategy is for. </summary>
            <value>stream num</value>
        </member>
        <member name="P:com.espertech.esper.epl.join.base.ExecNodeQueryStrategy.NumStreams">
            <summary>Returns the total number of streams. </summary>
            <value>number of streams</value>
        </member>
        <member name="P:com.espertech.esper.epl.join.base.ExecNodeQueryStrategy.ExecNode">
            <summary>Returns execution node. </summary>
            <value>execution node</value>
        </member>
        <member name="T:com.espertech.esper.epl.join.base.HistoricalDataQueryStrategy">
            <summary>
            Query strategy for use with <see cref="T:com.espertech.esper.view.HistoricalEventViewable"/> to perform lookup for a given stream using the poll method on a viewable.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.HistoricalDataQueryStrategy.#ctor(System.Int32,System.Int32,com.espertech.esper.view.HistoricalEventViewable,System.Boolean,com.espertech.esper.epl.expression.ExprEvaluator,com.espertech.esper.epl.join.base.HistoricalIndexLookupStrategy,com.espertech.esper.epl.join.pollindex.PollResultIndexingStrategy)">
            <summary>Ctor. </summary>
            <param name="myStreamNumber">is the strategy's stream number</param>
            <param name="historicalStreamNumber">is the stream number of the view to be polled</param>
            <param name="historicalEventViewable">is the view to be polled from</param>
            <param name="isOuterJoin">is this is an outer join</param>
            <param name="outerJoinCompareNode">is the node to perform the on-comparison for outer joins</param>
            <param name="indexLookupStrategy">the strategy to use for limiting the cache result setto only those rows that match filter criteria </param>
            <param name="pollResultIndexingStrategy">the strategy for indexing poll-results such that astrategy can use the index instead of a full table scan to resolve rows </param>
        </member>
        <member name="T:com.espertech.esper.epl.join.base.HistoricalIndexLookupStrategy">
            <summary>
            Strategy for use in poll-based joins to reduce a cached result set (represented by <see cref="T:com.espertech.esper.epl.join.table.EventTable"/>), 
            in which the cache result set may have been indexed, to fewer rows following the join-criteria in a where clause.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.HistoricalIndexLookupStrategy.Lookup(com.espertech.esper.client.EventBean,com.espertech.esper.epl.join.table.EventTable,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Look up into the index, potentially using some of the properties in the lookup event, returning a partial or full result in respect to the index.
            </summary>
            <param name="lookupEvent">provides properties to use as key values for indexes</param>
            <param name="index">is the table providing the cache result set, potentially indexed by index fields</param>
            <param name="context">The context.</param>
            <returns>full set or partial index iterator</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.ProxyHistoricalIndexLookupStrategy.#ctor(System.Func{com.espertech.esper.client.EventBean,com.espertech.esper.epl.join.table.EventTable,com.espertech.esper.epl.expression.ExprEvaluatorContext,System.Collections.Generic.IEnumerator{com.espertech.esper.client.EventBean}},System.Func{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.join.base.ProxyHistoricalIndexLookupStrategy"/> class.
            </summary>
            <param name="lookup">The lookup.</param>
            <param name="toPlan">To plan.</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.ProxyHistoricalIndexLookupStrategy.Lookup(com.espertech.esper.client.EventBean,com.espertech.esper.epl.join.table.EventTable,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Look up into the index, potentially using some of the properties in the lookup event, returning a partial or full result in respect to the index.
            </summary>
            <param name="lookupEvent">provides properties to use as key values for indexes</param>
            <param name="index">is the table providing the cache result set, potentially indexed by index fields</param>
            <param name="context">The context.</param>
            <returns>full set or partial index iterator</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.base.HistoricalIndexLookupStrategyComposite">
            <summary>
            Index lookup strategy into a poll-based cache result.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.base.HistoricalIndexLookupStrategyIndex">
            <summary>
            Index lookup strategy into a poll-based cache result.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.HistoricalIndexLookupStrategyIndex.#ctor(com.espertech.esper.client.EventType,System.Int32,System.Collections.Generic.IList{com.espertech.esper.epl.join.plan.QueryGraphValueEntryHashKeyed})">
            <summary>
            Ctor.
            </summary>
            <param name="eventType">event type to expect for lookup</param>
            <param name="lookupStream">The lookup stream.</param>
            <param name="hashKeys">The hash keys.</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.base.HistoricalIndexLookupStrategyIndexSingle">
            <summary>Index lookup strategy into a poll-based cache result. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.HistoricalIndexLookupStrategyIndexSingle.#ctor(System.Int32,com.espertech.esper.epl.join.plan.QueryGraphValueEntryHashKeyed)">
            <summary>Ctor. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.base.HistoricalIndexLookupStrategyNoIndex">
            <summary>
            Full table scan strategy for a poll-based cache result.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.base.HistoricalIndexLookupStrategySorted">
            <summary>
            Index lookup strategy into a poll-based cache result.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.HistoricalIndexLookupStrategySorted.#ctor(System.Int32,com.espertech.esper.epl.join.plan.QueryGraphValueEntryRange)">
            <summary>
            Ctor.
            </summary>
            <param name="lookupStream">The lookup stream.</param>
            <param name="property">The property.</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.HistoricalIndexLookupStrategySorted.Lookup(com.espertech.esper.client.EventBean,com.espertech.esper.epl.join.table.EventTable,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Lookups the specified lookup event.
            </summary>
            <param name="lookupEvent">The lookup event.</param>
            <param name="indexTable">The index table.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.base.JoinExecStrategyDispatchable">
            <summary>
            This class reacts to any new data buffered by registring with the dispatch service. When 
            dispatched via execute, it takes the buffered events and hands these to the join execution 
            strategy.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.internals.BufferObserver">
            <summary>
            Observer interface to a stream publishing new and old events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.internals.BufferObserver.NewData(System.Int32,com.espertech.esper.collection.FlushedEventBuffer,com.espertech.esper.collection.FlushedEventBuffer)">
            <summary>
            Receive new and old events from a stream.
            </summary>
            <param name="streamId">the stream number sending the events</param>
            <param name="newEventBuffer">buffer for new events</param>
            <param name="oldEventBuffer">buffer for old events</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.JoinExecStrategyDispatchable.#ctor(com.espertech.esper.epl.join.base.JoinExecutionStrategy,System.Int32)">
            <summary>CTor. </summary>
            <param name="joinExecutionStrategy">strategy for executing the join</param>
            <param name="numStreams">number of stream</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.base.JoinExecutionStrategy">
            <summary>Strategy for executing a join. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.JoinExecutionStrategy.Join(com.espertech.esper.client.EventBean[][],com.espertech.esper.client.EventBean[][],com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Execute join. The first dimension in the 2-dim arrays is the stream that generated the events, and the second dimension is the actual events generated. </summary>
            <param name="newDataPerStream">new events for each stream</param>
            <param name="oldDataPerStream">old events for each stream</param>
            <param name="exprEvaluatorContext">expression evaluation context</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.JoinExecutionStrategy.StaticJoin">
            <summary>A static join is for use with iterating over join statements. </summary>
            <returns>set of rows, each row with two or more events, one for each stream</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.base.JoinExecutionStrategyImpl">
            <summary>
            Join execution strategy based on a 3-step getSelectListEvents of composing a join set,
            filtering the join set and indicating.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.JoinExecutionStrategyImpl.#ctor(com.espertech.esper.epl.join.base.JoinSetComposer,com.espertech.esper.epl.join.base.JoinSetProcessor,com.espertech.esper.epl.join.base.JoinSetProcessor,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Ctor. </summary>
            <param name="composer">determines join tuple set</param>
            <param name="filter">for filtering among tuples</param>
            <param name="indicator">for presenting the info to a view</param>
            <param name="staticExprEvaluatorContext">expression evaluation context for static evaluation (not for runtime eval)</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.base.JoinPreloadMethod">
            <summary>
            Method for preloading events for a given stream onto the stream's indexes, from a 
            buffer already associated with a stream.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.JoinPreloadMethod.PreloadFromBuffer(System.Int32)">
            <summary>
            Initialize a stream from the stream buffers data.
            </summary>
            <param name="stream">to initialize and load indexes</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.JoinPreloadMethod.PreloadAggregation(com.espertech.esper.epl.core.ResultSetProcessor)">
            <summary>
            Initialize the result set process for the purpose of grouping and aggregation from the join result set.
            </summary>
            <param name="resultSetProcessor">is the grouping and aggregation result processing</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.JoinPreloadMethod.SetBuffer(com.espertech.esper.view.internals.BufferView,System.Int32)">
            <summary>Sets the buffee to use. </summary>
            <param name="buffer">buffer to use</param>
            <param name="i">stream</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.base.JoinPreloadMethodImpl">
            <summary>
            Implements a method for pre-loading (initializing) join indexes from a filled buffer.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.JoinPreloadMethodImpl.#ctor(System.Int32,com.espertech.esper.epl.join.base.JoinSetComposer)">
            <summary>Ctor. </summary>
            <param name="numStreams">number of streams</param>
            <param name="joinSetComposer">the composer holding stream indexes</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.JoinPreloadMethodImpl.SetBuffer(com.espertech.esper.view.internals.BufferView,System.Int32)">
            <summary>Sets the buffer for a stream to preload events from. </summary>
            <param name="view">buffer</param>
            <param name="stream">the stream number for the buffer</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.base.JoinPreloadMethodNull">
            <summary>
            Implements a method for pre-loading (initializing) join that does not return any events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.JoinPreloadMethodNull.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.base.JoinSetComposer">
            <summary>
            Interface for populating a join tuple result set from new data and old data for each stream.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.JoinSetComposer.Init(com.espertech.esper.client.EventBean[][])">
            <summary>Provides initialization events per stream to composer to populate join indexes, if required </summary>
            <param name="eventsPerStream">is an array of events for each stream, with null elements to indicate no events for a stream</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.JoinSetComposer.Join(com.espertech.esper.client.EventBean[][],com.espertech.esper.client.EventBean[][],com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Return join tuple result set from new data and old data for each stream. </summary>
            <param name="newDataPerStream">for each stream the event array (can be null).</param>
            <param name="oldDataPerStream">for each stream the event array (can be null).</param>
            <param name="exprEvaluatorContext">expression evaluation context</param>
            <returns>join tuples</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.JoinSetComposer.StaticJoin">
            <summary>For use in iteration over join statements, this must build a join tuple result set from all events in indexes, executing query strategies for each. </summary>
            <returns>static join result</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.base.JoinSetComposerFAFImpl">
            <summary>
            Implements the function to determine a join result set using tables/indexes and query strategy instances for each stream.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.base.JoinSetComposerImpl">
            <summary>
            Implements the function to determine a join result set using tables/indexes and
            query strategy instances for each stream.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.JoinSetComposerImpl.#ctor(System.Collections.Generic.IDictionary{System.String,com.espertech.esper.epl.join.table.EventTable}[],com.espertech.esper.epl.join.base.QueryStrategy[],System.Boolean,com.espertech.esper.epl.expression.ExprEvaluatorContext,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="repositories">for each stream an array of (indexed/unindexed) tables for lookup.</param>
            <param name="queryStrategies">for each stream a strategy to execute the join</param>
            <param name="isPureSelfJoin">for self-join only</param>
            <param name="exprEvaluatorContext">expression evaluation context</param>
            <param name="joinRemoveStream">if set to <c>true</c> [join remove stream].</param>
        </member>
        <member name="P:com.espertech.esper.epl.join.base.JoinSetComposerImpl.Tables">
            <summary>Returns tables. </summary>
            <value>tables for stream.</value>
        </member>
        <member name="P:com.espertech.esper.epl.join.base.JoinSetComposerImpl.QueryStrategies">
            <summary>Returns query strategies. </summary>
            <value>query strategies</value>
        </member>
        <member name="T:com.espertech.esper.epl.join.base.JoinSetComposerHistoricalImpl">
            <summary>
            Implements the function to determine a join result set using tables/indexes and query 
            strategy instances for each stream.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.JoinSetComposerHistoricalImpl.#ctor(System.Collections.Generic.IDictionary{System.String,com.espertech.esper.epl.join.table.EventTable}[],com.espertech.esper.epl.join.base.QueryStrategy[],com.espertech.esper.view.Viewable[],com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Ctor. </summary>
            <param name="repositories">indexes for non-historical streams</param>
            <param name="queryStrategies">for each stream a strategy to execute the join</param>
            <param name="streamViews">the viewable representing each stream</param>
            <param name="staticEvalExprEvaluatorContext">expression evaluation context for static (not runtime) evaluation</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.JoinSetComposerHistoricalImpl.GetTables">
            <summary>Returns tables. </summary>
            <returns>tables for stream.</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.JoinSetComposerHistoricalImpl.GetQueryStrategies">
            <summary>Returns query strategies. </summary>
            <returns>query strategies</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.base.JoinSetComposerPrototype">
            <summary>
            Interface for a prototype populating a join tuple result set from new data and old data for 
            each stream. 
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.base.JoinSetComposerPrototypeFactory">
            <summary>
            Factory for building a <seealso cref="T:com.espertech.esper.epl.join.base.JoinSetComposer"/> from analyzing filter nodes, 
            for fast join tuple result set composition.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.JoinSetComposerPrototypeFactory.MakeComposerPrototype(System.String,System.String,System.Collections.Generic.IList{com.espertech.esper.epl.spec.OuterJoinDesc},com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.client.EventType[],System.String[],com.espertech.esper.core.service.StreamJoinAnalysisResult,System.Boolean,System.Attribute[],com.espertech.esper.epl.join.base.HistoricalViewableDesc,com.espertech.esper.epl.expression.ExprEvaluatorContext,System.Boolean,System.Boolean)">
            <summary>
            Builds join tuple composer.
            </summary>
            <param name="statementName">Name of the statement.</param>
            <param name="statementId">The statement id.</param>
            <param name="outerJoinDescList">list of descriptors for outer join criteria</param>
            <param name="optionalFilterNode">filter tree for analysis to build indexes for fast access</param>
            <param name="streamTypes">types of streams</param>
            <param name="streamNames">names of streams</param>
            <param name="streamJoinAnalysisResult">The stream join analysis result.</param>
            <param name="queryPlanLogging">if set to <c>true</c> [query plan logging].</param>
            <param name="attributes">The annotations.</param>
            <param name="historicalViewableDesc">The historical viewable desc.</param>
            <param name="exprEvaluatorContext">The expr evaluator context.</param>
            <param name="selectsRemoveStream">The selects remove stream.</param>
            <param name="hasAggregations">The has aggregations.</param>
            <returns>composer implementation</returns>
            <throws>ExprValidationException is thrown to indicate thatvalidation of view use in joins failed. </throws>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.JoinSetComposerPrototypeFactory.DetermineIndexing(com.espertech.esper.epl.join.plan.QueryGraph,com.espertech.esper.client.EventType,com.espertech.esper.client.EventType,System.Int32,System.Int32)">
            <summary>
            Constructs indexing and lookup strategy for a given relationship that a historical stream may have 
            with another stream (historical or not) that looks up into results of a poll of a historical stream. 
            <para /> 
            The term "polled" refers to the assumed-historical stream. 
            </summary>
            <param name="queryGraph">relationship representation of where-clause filter and outer join on-expressions</param>
            <param name="polledViewType">the event type of the historical that is indexed</param>
            <param name="streamViewType">the event type of the stream looking up in indexes</param>
            <param name="polledViewStreamNum">the stream number of the historical that is indexed</param>
            <param name="streamViewStreamNum">the stream number of the historical that is looking up</param>
            <returns>indexing and lookup strategy pair</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.base.JoinSetComposerStreamToWinImpl">
            <summary>
            Implements the function to determine a join result for a unidirectional stream-to-window joins, in which a
            single stream's events are ever only evaluated using a query strategy.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.JoinSetComposerStreamToWinImpl.#ctor(System.Collections.Generic.IDictionary{System.String,com.espertech.esper.epl.join.table.EventTable}[],System.Boolean,System.Int32,com.espertech.esper.epl.join.base.QueryStrategy,System.Boolean[])">
            <summary>
            Ctor.
            </summary>
            <param name="repositories">for each stream an array of (indexed/unindexed) tables for lookup.</param>
            <param name="isPureSelfJoin">for self-joins</param>
            <param name="streamNumber">is the undirectional stream</param>
            <param name="queryStrategy">is the lookup query strategy for the stream</param>
            <param name="selfJoinRepositoryResets">indicators for any stream's table that reset after strategy executon</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.base.JoinSetFilter">
            <summary>Processes join tuple set by filtering out tuples. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.base.JoinSetProcessor">
            <summary>Processes a join result set constisting of sets of tuples of events. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.JoinSetProcessor.Process(System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}},System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}},com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Process join result set. </summary>
            <param name="newEvents">set of event tuples representing new data</param>
            <param name="oldEvents">set of event tuples representing old data</param>
            <param name="exprEvaluatorContext">expression evaluation context</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.JoinSetFilter.#ctor(com.espertech.esper.epl.expression.ExprEvaluator)">
            <summary>Ctor. </summary>
            <param name="filterExprNode">filter tree</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.base.JoinSetFilter.Filter(com.espertech.esper.epl.expression.ExprEvaluator,System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}},System.Boolean,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Filter event by applying the filter nodes evaluation method. </summary>
            <param name="filterExprNode">top node of the filter expression tree.</param>
            <param name="events">set of tuples of events</param>
            <param name="isNewData">true to indicate filter new data (istream) and not old data (rstream)</param>
            <param name="exprEvaluatorContext">expression evaluation context</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.base.JoinSetIndicator">
            <summary>
            Marker interface for indicators to join set processors.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.exec.base.CompositeTableLookupStrategy">
            <summary>
            Lookup on an nested map structure that represents an index for use with at least one range and
            possibly multiple ranges and optionally keyed by one or more unique keys.
            <para/>
            Use the sorted strategy instead if supporting a single range only and no other unique keys are
            part of the index.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.exec.base.JoinExecTableLookupStrategy">
            <summary>Strategy for looking up, in some sort of table or index, an event, potentially based on the events properties, and returning a set of matched events. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.base.JoinExecTableLookupStrategy.Lookup(com.espertech.esper.client.EventBean,com.espertech.esper.epl.join.rep.Cursor,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Returns matched events for a event to look up for. Never returns an empty result set, always returns null to indicate no results.
            </summary>
            <param name="theEvent">to look up</param>
            <param name="cursor">the path in the query that the lookup took</param>
            <param name="exprEvaluatorContext">expression evaluation context</param>
            <returns>
            set of matching events, or null if none matching
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.base.CompositeTableLookupStrategy.#ctor(com.espertech.esper.client.EventType,System.Int32,System.Collections.Generic.IList{com.espertech.esper.epl.join.plan.QueryGraphValueEntryHashKeyed},System.Collections.Generic.IList{com.espertech.esper.epl.join.plan.QueryGraphValueEntryRange},com.espertech.esper.epl.join.table.PropertyCompositeEventTable)">
            <summary>
            Ctor.
            </summary>
            <param name="eventType">event type to expect for lookup</param>
            <param name="lookupStream">The lookup stream.</param>
            <param name="hashKeys">The hash keys.</param>
            <param name="rangeKeyPairs">The range key pairs.</param>
            <param name="index">index to look up in</param>
        </member>
        <member name="P:com.espertech.esper.epl.join.exec.base.CompositeTableLookupStrategy.EventType">
            <summary>Returns event type of the lookup event. </summary>
            <value>event type of the lookup event</value>
        </member>
        <member name="P:com.espertech.esper.epl.join.exec.base.CompositeTableLookupStrategy.Index">
            <summary>Returns index to look up in. </summary>
            <value>index to use</value>
        </member>
        <member name="T:com.espertech.esper.epl.join.exec.base.ExecNode">
            <summary>
            Interface for an execution node that looks up events and builds a result set contributing to an overall join result set.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.base.ExecNode.Process(com.espertech.esper.client.EventBean,com.espertech.esper.client.EventBean[],System.Collections.Generic.ICollection{com.espertech.esper.client.EventBean[]},com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Process single event using the prefill events to compile lookup results. </summary>
            <param name="lookupEvent">event to look up for or query for</param>
            <param name="prefillPath">set of events currently in the example tuple to serveas a prototype for result rows. </param>
            <param name="result">is the list of tuples to add a result row to</param>
            <param name="exprEvaluatorContext">context for expression evaluation</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.base.ExecNode.Print(com.espertech.esper.util.IndentWriter)">
            <summary>Output the execution strategy. </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.base.ExecNode.Print(com.espertech.esper.epl.join.exec.base.ExecNode)">
            <summary>Print in readable format the execution strategy. </summary>
            <param name="execNode">execution node to print</param>
            <returns>readable text with execution nodes constructed for actual streams</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.exec.base.FullTableScanLookupStrategy">
            <summary>Lookup on an unindexed table returning the full table as matching events. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.base.FullTableScanLookupStrategy.#ctor(com.espertech.esper.epl.join.table.UnindexedEventTable)">
            <summary>Ctor. </summary>
            <param name="eventIndex">table to use</param>
        </member>
        <member name="P:com.espertech.esper.epl.join.exec.base.FullTableScanLookupStrategy.EventIndex">
            <summary>Returns the associated table. </summary>
            <value>table for lookup.</value>
        </member>
        <member name="T:com.espertech.esper.epl.join.exec.base.HistoricalDataExecNode">
            <summary>
            Execution node for executing a join or outer join against a historical data source, using an lookup 
            strategy for looking up into cached indexes, and an indexing strategy for indexing poll results for 
            future lookups.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.base.HistoricalDataExecNode.#ctor(com.espertech.esper.view.HistoricalEventViewable,com.espertech.esper.epl.join.pollindex.PollResultIndexingStrategy,com.espertech.esper.epl.join.base.HistoricalIndexLookupStrategy,System.Int32,System.Int32)">
            <summary>Ctor. </summary>
            <param name="historicalEventViewable">the view of the historical</param>
            <param name="indexingStrategy">the strategy to index poll result for future use</param>
            <param name="indexLookupStrategy">the strategy to use past indexed results</param>
            <param name="numStreams">the number of streams in the join</param>
            <param name="historicalStreamNumber">the stream number of the historical</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.exec.base.HistoricalTableLookupStrategy">
            <summary>
            A lookup strategy for use in outer joins onto historical streams.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.base.HistoricalTableLookupStrategy.#ctor(com.espertech.esper.view.HistoricalEventViewable,com.espertech.esper.epl.join.pollindex.PollResultIndexingStrategy,com.espertech.esper.epl.join.base.HistoricalIndexLookupStrategy,System.Int32,System.Int32,System.Int32,com.espertech.esper.epl.expression.ExprEvaluator)">
            <summary>Ctor. </summary>
            <param name="viewable">providing the polling access</param>
            <param name="indexingStrategy">strategy for indexing results</param>
            <param name="lookupStrategy">strategy for using indexed results</param>
            <param name="numStreams">number of streams</param>
            <param name="streamNum">stream number of the historical stream</param>
            <param name="rootStreamNum">the query plan root stream number</param>
            <param name="outerJoinExprNode">an optional outer join expression</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.exec.base.IndexedTableLookupStrategy">
            <summary>
            Lookup on an index using a set of properties as key values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.base.IndexedTableLookupStrategy.#ctor(com.espertech.esper.client.EventType,System.String[],com.espertech.esper.epl.join.table.PropertyIndexedEventTable)">
            <summary>Ctor. </summary>
            <param name="eventType">event type to expect for lookup</param>
            <param name="properties">key properties</param>
            <param name="index">index to look up in</param>
        </member>
        <member name="P:com.espertech.esper.epl.join.exec.base.IndexedTableLookupStrategy.EventType">
            <summary>Returns event type of the lookup event. </summary>
            <value>event type of the lookup event</value>
        </member>
        <member name="P:com.espertech.esper.epl.join.exec.base.IndexedTableLookupStrategy.Properties">
            <summary>Returns properties to use from lookup event to look up in index. </summary>
            <value>properties to use from lookup event</value>
        </member>
        <member name="P:com.espertech.esper.epl.join.exec.base.IndexedTableLookupStrategy.Index">
            <summary>Returns index to look up in. </summary>
            <value>index to use</value>
        </member>
        <member name="T:com.espertech.esper.epl.join.exec.base.IndexedTableLookupStrategyExpr">
            <summary>
            Lookup on an index using a set of expression results as key values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.base.IndexedTableLookupStrategyExpr.#ctor(com.espertech.esper.epl.expression.ExprEvaluator[],System.Int32,com.espertech.esper.epl.join.table.PropertyIndexedEventTable)">
            <summary>
            Ctor.
            </summary>
            <param name="evaluators">The evaluators.</param>
            <param name="streamNum">The stream num.</param>
            <param name="index">index to look up in</param>
        </member>
        <member name="P:com.espertech.esper.epl.join.exec.base.IndexedTableLookupStrategyExpr.Index">
            <summary>Returns index to look up in. </summary>
            <value>index to use</value>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.base.IndexedTableLookupStrategySingle.#ctor(com.espertech.esper.client.EventType,System.String,com.espertech.esper.epl.join.table.PropertyIndexedEventTableSingle)">
            <summary>
            Ctor.
            </summary>
            <param name="eventType">event type to expect for lookup</param>
            <param name="property">The property.</param>
            <param name="index">index to look up in</param>
        </member>
        <member name="P:com.espertech.esper.epl.join.exec.base.IndexedTableLookupStrategySingle.EventType">
            <summary>Returns event type of the lookup event. </summary>
            <value>event type of the lookup event</value>
        </member>
        <member name="P:com.espertech.esper.epl.join.exec.base.IndexedTableLookupStrategySingle.Index">
            <summary>Returns index to look up in. </summary>
            <value>index to use</value>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.base.IndexedTableLookupStrategySingleExpr.#ctor(com.espertech.esper.epl.expression.ExprNode,System.Int32,com.espertech.esper.epl.join.table.PropertyIndexedEventTableSingle)">
            <summary>
            Ctor.
            </summary>
            <param name="exprNode">The expr node.</param>
            <param name="streamNum">The stream num.</param>
            <param name="index">index to look up in</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.base.IndexedTableLookupStrategySingleExpr.GetIndex">
            <summary>Returns index to look up in. </summary>
            <returns>index to use</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.exec.base.LookupInstructionExec">
            <summary>
            Execution for a lookup instruction to look up in one or more event streams with a supplied
            event and using a given set of lookup strategies, and adding any lookup results to a lighweight
            repository object for later result assembly.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.base.LookupInstructionExec.#ctor(System.Int32,System.String,System.Int32[],com.espertech.esper.epl.join.exec.base.JoinExecTableLookupStrategy[],System.Boolean[])">
            <summary>Ctor. </summary>
            <param name="fromStream">the stream supplying the lookup event</param>
            <param name="fromStreamName">the stream name supplying the lookup event</param>
            <param name="toStreams">the set of streams to look up in</param>
            <param name="lookupStrategies">the strategy to use for each stream to look up in</param>
            <param name="requiredPerStream">indicates which of the lookup streams are required to build a result and which are not</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.base.LookupInstructionExec.Process(com.espertech.esper.epl.join.rep.Repository,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Execute the instruction adding results to the repository and obtaining events for lookup from the repository. </summary>
            <param name="repository">supplies events for lookup, and place to add results to</param>
            <param name="exprEvaluatorContext">expression evaluation context</param>
            <returns>true if one or more results, false if no results</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.base.LookupInstructionExec.Print(com.espertech.esper.util.IndentWriter)">
            <summary>Output the instruction. </summary>
            <param name="writer">is the write to output to</param>
        </member>
        <member name="P:com.espertech.esper.epl.join.exec.base.LookupInstructionExec.FromStream">
            <summary>Returns the stream number of the stream supplying the event to use for lookup. </summary>
            <value>stream number</value>
        </member>
        <member name="P:com.espertech.esper.epl.join.exec.base.LookupInstructionExec.HasRequiredStream">
            <summary>Returns true if there is one or more required substreams or false if no substreams are required joins. </summary>
            <value>true if any substreams are required (inner) joins, or false if not</value>
        </member>
        <member name="T:com.espertech.esper.epl.join.exec.base.LookupInstructionExecNode">
            <summary>
            Execution for a set of lookup instructions and for a set of result assemble
            instructions to perform joins and construct a complex result.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.base.LookupInstructionExecNode.#ctor(System.Int32,System.String,System.Int32,com.espertech.esper.epl.join.exec.base.LookupInstructionExec[],System.Boolean[],com.espertech.esper.epl.join.assemble.BaseAssemblyNode[])">
            <summary>Ctor. </summary>
            <param name="rootStream">is the stream supplying the lookup event</param>
            <param name="rootStreamName">is the name of the stream supplying the lookup event</param>
            <param name="numStreams">is the number of streams</param>
            <param name="lookupInstructions">is a list of lookups to perform</param>
            <param name="requiredPerStream">indicates which streams are required and which are optional in the lookup</param>
            <param name="assemblyInstructions">is the bottom-up assembly nodes to assemble a lookup result nodes</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.exec.base.LookupInstructionExecNode.MyResultAssembler">
            <summary>Receives result rows posted by result set assembly nodes. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.base.LookupInstructionExecNode.MyResultAssembler.#ctor(System.Int32)">
            <summary>Ctor. </summary>
            <param name="rootStream">is the root stream for which we get results</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.exec.base.NestedIterationExecNode">
            <summary>
            Execution node that performs a nested iteration over all child nodes. 
            <para/>
            Each child node under this node typically represents a table lookup. The 
            implementation 'hops' from the first child to the next recursively for each row 
            returned by a child.
            <para/>
            It passes a 'prototype' row (prefillPath) to each new child which contains the 
            current partial event set.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.base.NestedIterationExecNode.#ctor(System.Int32[])">
            <summary>Ctor. </summary>
            <param name="nestedStreams">array of integers defining order of streams in nested join.</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.base.NestedIterationExecNode.AddChildNode(com.espertech.esper.epl.join.exec.base.ExecNode)">
            <summary>Add a child node. </summary>
            <param name="childNode">to add</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.base.NestedIterationExecNode.RecursiveNestedJoin(com.espertech.esper.client.EventBean,System.Int32,com.espertech.esper.client.EventBean[],System.Collections.Generic.ICollection{com.espertech.esper.client.EventBean[]},com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Recursive method to run through all child nodes and, for each result set tuple returned by a child node, execute the inner child of the child node until there are no inner child nodes. </summary>
            <param name="lookupEvent">current event to use for lookup by child node</param>
            <param name="nestingOrderIndex">index within the child nodes indicating what nesting level we are at</param>
            <param name="currentPath">prototype result row to use by child nodes for generating result rows</param>
            <param name="result">result tuple rows to be populated</param>
            <param name="exprEvaluatorContext">context for expression evalauation</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.exec.base.SortedTableLookupStrategy">
            <summary>
            Lookup on an index that is a sorted index on a single property queried as a range.
            <para/>
            Use the composite strategy if supporting multiple ranges or if range is in combination with unique key.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.base.SortedTableLookupStrategy.#ctor(System.Int32,System.Int32,com.espertech.esper.epl.join.plan.QueryGraphValueEntryRange,System.Type,com.espertech.esper.epl.join.table.PropertySortedEventTable)">
            <summary>
            Ctor.
            </summary>
            <param name="lookupStream">The lookup stream.</param>
            <param name="numStreams">The num streams.</param>
            <param name="rangeKeyPair">The range key pair.</param>
            <param name="coercionType">Type of the coercion.</param>
            <param name="index">index to look up in</param>
        </member>
        <member name="P:com.espertech.esper.epl.join.exec.base.SortedTableLookupStrategy.Index">
            <summary>Returns index to look up in. </summary>
            <value>index to use</value>
        </member>
        <member name="T:com.espertech.esper.epl.join.exec.base.TableLookupExecNode">
            <summary>
            Execution node for lookup in a table. 
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.base.TableLookupExecNode.#ctor(System.Int32,com.espertech.esper.epl.join.exec.base.JoinExecTableLookupStrategy)">
            <summary>Ctor. </summary>
            <param name="indexedStream">stream indexed for lookup</param>
            <param name="lookupStrategy">strategy to use for lookup (full table/indexed)</param>
        </member>
        <member name="P:com.espertech.esper.epl.join.exec.base.TableLookupExecNode.LookupStrategy">
            <summary>Returns strategy for lookup. </summary>
            <value>lookup strategy</value>
        </member>
        <member name="P:com.espertech.esper.epl.join.exec.base.TableLookupExecNode.IndexedStream">
            <summary>Returns target stream for lookup. </summary>
            <value>indexed stream</value>
        </member>
        <member name="T:com.espertech.esper.epl.join.exec.base.TableOuterLookupExecNode">
            <summary>
            Execution node for lookup in a table for outer joins. This execution node thus generates 
            rows even if no joined events could be found, the joined table events are set to null if 
            no joined events are found.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.exec.base.TableOuterLookupExecNode.#ctor(System.Int32,com.espertech.esper.epl.join.exec.base.JoinExecTableLookupStrategy)">
            <summary>Ctor. </summary>
            <param name="indexedStream">stream indexed for lookup</param>
            <param name="lookupStrategy">strategy to use for lookup (full table/indexed)</param>
        </member>
        <member name="P:com.espertech.esper.epl.join.exec.base.TableOuterLookupExecNode.LookupStrategy">
            <summary>Returns strategy for lookup. </summary>
            <value>lookup strategy</value>
        </member>
        <member name="P:com.espertech.esper.epl.join.exec.base.TableOuterLookupExecNode.IndexedStream">
            <summary>Returns target stream for lookup. </summary>
            <value>indexed stream</value>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.CoercionUtil.GetCoercionTypesHash(com.espertech.esper.client.EventType[],System.Int32,System.Int32,System.Collections.Generic.IList{com.espertech.esper.epl.join.plan.QueryGraphValueEntryHashKeyed},System.Collections.Generic.IList{System.String})">
            <summary>Returns null if no coercion is required, or an array of classes for use in coercing the lookup keys and index keys into a common type. </summary>
            <param name="typesPerStream">is the event types for each stream</param>
            <param name="lookupStream">is the stream looked up from</param>
            <param name="indexedStream">is the indexed stream</param>
            <param name="keyProps">is the properties to use to look up</param>
            <param name="indexProps">is the properties to index on</param>
            <returns>coercion types, or null if none required</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.CompositeTableLookupPlan">
            <summary>Plan to perform an indexed table lookup. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.TableLookupPlan">
            <summary>
            Abstract specification on how to perform a table lookup.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.TableLookupPlan.MakeStrategy(System.String,System.String,System.Attribute[],System.Collections.Generic.IDictionary{System.String,com.espertech.esper.epl.join.table.EventTable}[],com.espertech.esper.client.EventType[],com.espertech.esper.epl.virtualdw.VirtualDWView[])">
            <summary>
            Instantiates the lookup plan into a execution strategy for the lookup.
            </summary>
            <param name="statementName">Name of the statement.</param>
            <param name="statementId">The statement id.</param>
            <param name="accessedByStmtAnnotations">The accessed by STMT annotations.</param>
            <param name="indexesPerStream">tables for each stream</param>
            <param name="eventTypes">types of events in stream</param>
            <param name="viewExternals">The view externals.</param>
            <returns>lookup strategy instance</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.TableLookupPlan.#ctor(System.Int32,System.Int32,System.String)">
            <summary>Ctor. </summary>
            <param name="lookupStream">stream number of stream that supplies event to be used to look up</param>
            <param name="indexedStream">stream number of stream that is being access via index/table</param>
            <param name="indexNum">index to use for lookup</param>
        </member>
        <member name="P:com.espertech.esper.epl.join.plan.TableLookupPlan.LookupStream">
            <summary>Returns the lookup stream. </summary>
            <value>lookup stream</value>
        </member>
        <member name="P:com.espertech.esper.epl.join.plan.TableLookupPlan.IndexedStream">
            <summary>Returns indexed stream. </summary>
            <value>indexed stream</value>
        </member>
        <member name="P:com.espertech.esper.epl.join.plan.TableLookupPlan.IndexNum">
            <summary>Returns index number to use for looking up in. </summary>
            <value>index number</value>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.CompositeTableLookupPlan.#ctor(System.Int32,System.Int32,System.String,System.Collections.Generic.IList{com.espertech.esper.epl.join.plan.QueryGraphValueEntryHashKeyed},System.Collections.Generic.IList{com.espertech.esper.epl.join.plan.QueryGraphValueEntryRange})">
            <summary>
            Ctor.
            </summary>
            <param name="lookupStream">stream that generates event to look up for</param>
            <param name="indexedStream">stream to index table lookup</param>
            <param name="indexNum">index number for the table containing the full unindexed contents</param>
            <param name="hashKeys">The hash keys.</param>
            <param name="rangeKeyPairs">The range key pairs.</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.FilterExprAnalyzer">
            <summary>
            Analyzes a filter expression and builds a query graph model. The 'equals', 'and' 'between' and 
            relational operators expressions in the filter expression are extracted and placed in the query graph 
            model as navigable relationships (by key and index properties as well as ranges) between streams. 
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.FilterExprAnalyzer.Analyze(com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.epl.join.plan.QueryGraph,System.Boolean)">
            <summary>
            Analyzes filter expression to build query graph model.
            </summary>
            <param name="topNode">filter top node</param>
            <param name="queryGraph">model containing relationships between streams, to be written to</param>
            <param name="isOuterJoin">if set to <c>true</c> [is outer join].</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.FilterExprAnalyzer.AnalyzeEqualsNode(com.espertech.esper.epl.expression.ExprEqualsNode,com.espertech.esper.epl.join.plan.QueryGraph,System.Boolean)">
            <summary>
            Analye EQUALS (=) node.
            </summary>
            <param name="equalsNode">node to analyze</param>
            <param name="queryGraph">store relationships between stream properties</param>
            <param name="isOuterJoin">if set to <c>true</c> [is outer join].</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.FilterExprAnalyzer.AnalyzeAndNode(com.espertech.esper.epl.expression.ExprAndNode,com.espertech.esper.epl.join.plan.QueryGraph,System.Boolean)">
            <summary>
            Analyze the AND-node.
            </summary>
            <param name="andNode">node to analyze</param>
            <param name="queryGraph">to store relationships between stream properties</param>
            <param name="isOuterJoin">if set to <c>true</c> [is outer join].</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.FullTableScanLookupPlan">
            <summary>Plan for a full table scan. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.FullTableScanLookupPlan.#ctor(System.Int32,System.Int32,System.String)">
            <summary>Ctor. </summary>
            <param name="lookupStream">stream that generates event to look up for</param>
            <param name="indexedStream">stream to full table scan</param>
            <param name="indexNum">index number for the table containing the full unindexed contents</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.HistoricalDataPlanNode">
            <summary>
            Query plan for performing a historical data lookup. 
            <para/> Translates into a particular execution for use in regular and outer joins.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.QueryPlanNode">
            <summary>Specification node for a query execution plan to be extended by specific execution specification nodes. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryPlanNode.MakeExec(System.String,System.String,System.Attribute[],System.Collections.Generic.IDictionary{System.String,com.espertech.esper.epl.join.table.EventTable}[],com.espertech.esper.client.EventType[],com.espertech.esper.view.Viewable[],com.espertech.esper.epl.join.table.HistoricalStreamIndexList[],com.espertech.esper.epl.virtualdw.VirtualDWView[])">
            <summary>Make execution node from this specification.   </summary>
            <param name="statementName"></param>
            <param name="statementId"></param>
            <param name="annotations"></param>
            <param name="indexesPerStream">tables build for each stream</param>
            <param name="streamTypes">event type of each stream</param>
            <param name="streamViews">viewable per stream for access to historical data</param>
            <param name="historicalStreamIndexLists">index management for historical streams</param>
            <param name="viewExternal">@return execution node matching spec</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryPlanNode.Print(com.espertech.esper.util.IndentWriter)">
            <summary>Print a long readable format of the query node to the supplied PrintWriter. </summary>
            <param name="writer">is the indentation writer to print to</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryPlanNode.Print(com.espertech.esper.epl.join.plan.QueryPlanNode[])">
            <summary>Print in readable format the execution plan spec. </summary>
            <param name="planNodeSpecs">plans to print</param>
            <returns>readable text with plans</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.HistoricalDataPlanNode.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,com.espertech.esper.epl.expression.ExprNode)">
            <summary>Ctor. </summary>
            <param name="streamNum">the historical stream num</param>
            <param name="rootStreamNum">the stream number of the query plan providing incoming events</param>
            <param name="lookupStreamNum">the stream that provides polling/lookup events</param>
            <param name="numStreams">number of streams in join</param>
            <param name="exprNode">outer join expression node or null if none defined</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.HistoricalDataPlanNode.MakeOuterJoinStategy(com.espertech.esper.view.Viewable[],System.Int32,com.espertech.esper.epl.join.table.HistoricalStreamIndexList[])">
            <summary>Returns the table lookup strategy for use in outer joins. </summary>
            <param name="streamViews">all views in join</param>
            <param name="pollingStreamNum">the stream number of the stream looking up into the historical</param>
            <param name="historicalStreamIndexLists">the index management for the historical stream</param>
            <returns>strategy</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.IndexedTableLookupPlanMulti">
            <summary>
            Plan to perform an indexed table lookup.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.IndexedTableLookupPlanMulti.#ctor(System.Int32,System.Int32,System.String,System.Collections.Generic.IList{com.espertech.esper.epl.join.plan.QueryGraphValueEntryHashKeyed})">
            <summary>Ctor. </summary>
            <param name="lookupStream">stream that generates event to look up for</param>
            <param name="indexedStream">stream to index table lookup</param>
            <param name="indexNum">index number for the table containing the full unindexed contents</param>
            <param name="keyProperties">properties to use in lookup event to access index</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.IndexedTableLookupPlanSingle">
            <summary>
            Plan to perform an indexed table lookup.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.IndexedTableLookupPlanSingle.#ctor(System.Int32,System.Int32,System.String,com.espertech.esper.epl.join.plan.QueryGraphValueEntryHashKeyed)">
            <summary>Ctor. </summary>
            <param name="lookupStream">stream that generates event to look up for</param>
            <param name="indexedStream">stream to index table lookup</param>
            <param name="indexNum">index number for the table containing the full unindexed contents</param>
            <param name="hashKey">properties to use in lookup event to access index</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.LookupInstructionPlan">
            <summary>
            Plan for lookup using a from-stream event looking up one or more to-streams using a 
            specified lookup plan for each to-stream.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.LookupInstructionPlan.#ctor(System.Int32,System.String,System.Int32[],com.espertech.esper.epl.join.plan.TableLookupPlan[],com.espertech.esper.epl.join.plan.HistoricalDataPlanNode[],System.Boolean[])">
            <summary>Ctor. </summary>
            <param name="fromStream">the stream supplying the lookup event</param>
            <param name="fromStreamName">the stream name supplying the lookup event</param>
            <param name="toStreams">the set of streams to look up in</param>
            <param name="lookupPlans">the plan to use for each stream to look up in</param>
            <param name="requiredPerStream">indicates which of the lookup streams are required to build a result and which are not</param>
            <param name="historicalPlans">plans for use with historical streams</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.LookupInstructionPlan.MakeExec(System.String,System.String,System.Attribute[],System.Collections.Generic.IDictionary{System.String,com.espertech.esper.epl.join.table.EventTable}[],com.espertech.esper.client.EventType[],com.espertech.esper.view.Viewable[],com.espertech.esper.epl.join.table.HistoricalStreamIndexList[],com.espertech.esper.epl.virtualdw.VirtualDWView[])">
            <summary>
            Constructs the executable from the plan.
            </summary>
            <param name="statementName">Name of the statement.</param>
            <param name="statementId">The statement id.</param>
            <param name="annotations">The annotations.</param>
            <param name="indexesPerStream">is the index objects for use in lookups</param>
            <param name="streamTypes">is the types of each stream</param>
            <param name="streamViews">the viewable representing each stream</param>
            <param name="historicalStreamIndexLists">index management for historical streams</param>
            <param name="viewExternal">The view external.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.LookupInstructionPlan.Print(com.espertech.esper.util.IndentWriter)">
            <summary>Output the planned instruction. </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.LookupInstructionQueryPlanNode">
            <summary>
            Query plan for executing a set of lookup instructions and assembling an end result
            via a set of assembly instructions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.LookupInstructionQueryPlanNode.#ctor(System.Int32,System.String,System.Int32,System.Boolean[],System.Collections.Generic.IList{com.espertech.esper.epl.join.plan.LookupInstructionPlan},System.Collections.Generic.IList{com.espertech.esper.epl.join.assemble.BaseAssemblyNode})">
            <summary>Ctor. </summary>
            <param name="rootStream">is the stream supplying the lookup event</param>
            <param name="rootStreamName">is the name of the stream supplying the lookup event</param>
            <param name="numStreams">is the number of streams</param>
            <param name="lookupInstructions">is a list of lookups to perform</param>
            <param name="requiredPerStream">indicates which streams are required and which are optional in the lookup</param>
            <param name="assemblyInstructions">is the bottom-up assembly nodes to assemble a lookup result nodes</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.NestedIterationNode">
            <summary>Plan to perform a nested iteration over child nodes. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NestedIterationNode.#ctor(System.Int32[])">
            <summary>Ctor. </summary>
            <param name="nestingOrder">order of streams in nested iteration</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NestedIterationNode.AddChildNode(com.espertech.esper.epl.join.plan.QueryPlanNode)">
            <summary>Adds a child node. </summary>
            <param name="childNode">is the child evaluation tree node to add</param>
        </member>
        <member name="P:com.espertech.esper.epl.join.plan.NestedIterationNode.ChildNodes">
            <summary>Returns list of child nodes. </summary>
            <value>list of child nodes</value>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.NStreamOuterQueryPlanBuilder">
            <summary>
            Builds a query plan for 3 or more streams in a outer join.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NStreamOuterQueryPlanBuilder.Build(com.espertech.esper.epl.join.plan.QueryGraph,System.Collections.Generic.IList{com.espertech.esper.epl.spec.OuterJoinDesc},System.String[],com.espertech.esper.client.EventType[],com.espertech.esper.epl.join.base.HistoricalViewableDesc,com.espertech.esper.util.DependencyGraph,com.espertech.esper.epl.join.table.HistoricalStreamIndexList[],com.espertech.esper.epl.expression.ExprEvaluatorContext,System.String[][][])">
            <summary>
            Build a query plan based on the stream property relationships indicated in queryGraph.
            </summary>
            <param name="queryGraph">navigation info between streams</param>
            <param name="outerJoinDescList">descriptors for all outer joins</param>
            <param name="streamNames">stream names</param>
            <param name="typesPerStream">event types for each stream</param>
            <param name="historicalViewableDesc">The historical viewable desc.</param>
            <param name="dependencyGraph">dependencies between historical streams</param>
            <param name="historicalStreamIndexLists">index management, populated for the query plan</param>
            <param name="exprEvaluatorContext">context for expression evalauation</param>
            <param name="indexedStreamsUniqueProps">The indexed streams unique props.</param>
            <returns>query plan</returns>
            <throws>ExprValidationException if the query planning failed</throws>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NStreamOuterQueryPlanBuilder.RecursiveBuild(System.Int32,System.Collections.Generic.Stack{System.Int32},com.espertech.esper.epl.join.plan.QueryGraph,com.espertech.esper.epl.join.plan.OuterInnerDirectionalGraph,com.espertech.esper.epl.join.plan.InnerJoinGraph,System.Collections.Generic.ICollection{System.Int32},com.espertech.esper.compat.collections.LinkedHashMap{System.Int32,System.Int32[]},System.Boolean[],com.espertech.esper.util.DependencyGraph)">
            <summary>
            Recusivly builds a substream-per-stream ordered tree graph using the join information supplied for outer joins and from the query graph (where clause).
            <para/> Required streams are considered first and their lookup is placed first in the list to gain performance.
            </summary>
            <param name="streamNum">is the root stream number that supplies the incoming event to build the tree for</param>
            <param name="streamCallStack">the query plan call stack of streams available via cursor</param>
            <param name="queryGraph">contains where-clause stream relationship info</param>
            <param name="outerInnerGraph">contains the outer join stream relationship info</param>
            <param name="innerJoinGraph">The inner join graph.</param>
            <param name="completedStreams">is a temporary holder for streams already considered</param>
            <param name="substreamsPerStream">is the ordered, tree-like structure to be filled</param>
            <param name="requiredPerStream">indicates which streams are required and which are optional</param>
            <param name="dependencyGraph">dependencies between historical streams</param>
            <throws>ExprValidationException if the query planning failed</throws>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NStreamOuterQueryPlanBuilder.RecursiveBuildInnerJoin(System.Int32,System.Collections.Generic.Stack{System.Int32},com.espertech.esper.epl.join.plan.QueryGraph,System.Collections.Generic.ICollection{System.Int32},com.espertech.esper.compat.collections.LinkedHashMap{System.Int32,System.Int32[]},com.espertech.esper.util.DependencyGraph)">
            <summary>Recusivly builds a substream-per-stream ordered tree graph using the join information supplied for outer joins and from the query graph (where clause). 
            <para/> Required streams are considered first and their lookup is placed first in the list to gain performance. </summary>
            <param name="streamNum">is the root stream number that supplies the incoming event to build the tree for</param>
            <param name="queryGraph">contains where-clause stream relationship info</param>
            <param name="completedStreams">is a temporary holder for streams already considered</param>
            <param name="substreamsPerStream">is the ordered, tree-like structure to be filled</param>
            <param name="streamCallStack">the query plan call stack of streams available via cursor</param>
            <param name="dependencyGraph">dependencies between historical streams</param>
            <throws>ExprValidationException if the query planning failed</throws>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NStreamOuterQueryPlanBuilder.GraphOuterJoins(System.Int32,System.Collections.Generic.IList{com.espertech.esper.epl.spec.OuterJoinDesc})">
            <summary>Builds a graph of outer joins given the outer join information from the statement. Eliminates right and left joins and full joins by placing the information in a graph object. </summary>
            <param name="numStreams">is the number of streams</param>
            <param name="outerJoinDescList">list of outer join stream numbers and property names</param>
            <returns>graph object</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NStreamOuterQueryPlanBuilder.VerifyJoinedPerStream(System.Int32,System.Collections.Generic.IDictionary{System.Int32,System.Int32[]})">
            <summary>Verifies that the tree-like structure representing which streams join (lookup) into which sub-streams is correct, ie. all streams are included and none are listed twice. </summary>
            <param name="rootStream">is the stream supplying the incoming event</param>
            <param name="streamsJoinedPerStream">is keyed by the from-stream number and contains as values allstream numbers of lookup into to-streams. </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NStreamOuterQueryPlanBuilder.Print(System.Collections.Generic.IDictionary{System.Int32,System.Int32[]})">
            <summary>Returns textual presentation of stream-substream relationships. </summary>
            <param name="streamsJoinedPerStream">is the tree-like structure of stream-substream</param>
            <returns>textual presentation</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.NStreamQueryPlanBuilder">
            <summary>Builds a query plan for 3 or more streams in a join. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NStreamQueryPlanBuilder.Build(com.espertech.esper.epl.join.plan.QueryGraph,com.espertech.esper.client.EventType[],com.espertech.esper.epl.join.base.HistoricalViewableDesc,com.espertech.esper.util.DependencyGraph,com.espertech.esper.epl.join.table.HistoricalStreamIndexList[],System.Boolean,System.String[][][])">
            <summary>
            Build a query plan based on the stream property relationships indicated in queryGraph.
            </summary>
            <param name="queryGraph">navigation info between streams</param>
            <param name="typesPerStream">event types for each stream</param>
            <param name="historicalViewableDesc">The historical viewable desc.</param>
            <param name="dependencyGraph">dependencies between historical streams</param>
            <param name="historicalStreamIndexLists">index management, populated for the query plan</param>
            <param name="hasForceNestedIter">if set to <c>true</c> [has force nested iter].</param>
            <param name="indexedStreamsUniqueProps">The indexed streams unique props.</param>
            <returns>query plan</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NStreamQueryPlanBuilder.CreateStreamPlan(System.Int32,System.Int32[],com.espertech.esper.epl.join.plan.QueryGraph,com.espertech.esper.epl.join.plan.QueryPlanIndex[],com.espertech.esper.client.EventType[],System.Boolean[],com.espertech.esper.epl.join.table.HistoricalStreamIndexList[])">
            <summary>Walks the chain of lookups and constructs lookup strategy and plan specification based on the index specifications. </summary>
            <param name="lookupStream">the stream to construct the query plan for</param>
            <param name="bestChain">the chain that the lookup follows to make best use of indexes</param>
            <param name="queryGraph">the repository for key properties to indexes</param>
            <param name="indexSpecsPerStream">specifications of indexes</param>
            <param name="typesPerStream">event types for each stream</param>
            <param name="isHistorical">indicator for each stream if it is a historical streams or not</param>
            <param name="historicalStreamIndexLists">index management, populated for the query plan</param>
            <returns>NestedIterationNode with lookups attached underneath</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NStreamQueryPlanBuilder.CreateLookupPlan(com.espertech.esper.epl.join.plan.QueryGraph,System.Int32,System.Int32,com.espertech.esper.epl.join.plan.QueryPlanIndex,com.espertech.esper.client.EventType[])">
            <summary>Create the table lookup plan for a from-stream to look up in an indexed stream using the columns supplied in the query graph and looking at the actual indexes available and their index number. </summary>
            <param name="queryGraph">contains properties joining the 2 streams</param>
            <param name="currentLookupStream">stream to use key values from</param>
            <param name="indexedStream">stream to look up in</param>
            <param name="indexSpecs">index specification defining indexes to be created for stream</param>
            <param name="typesPerStream">event types for each stream</param>
            <returns>plan for performing a lookup in a given table using one of the indexes supplied</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NStreamQueryPlanBuilder.ComputeBestPath(System.Int32,com.espertech.esper.epl.join.plan.QueryGraph,com.espertech.esper.util.DependencyGraph)">
            <summary>Compute a best chain or path for lookups to take for the lookup stream passed in and the query property relationships. The method runs through all possible permutations of lookup path <seealso cref="T:com.espertech.esper.collection.NumberSetPermutationEnumeration"/> until a path is found in which all streams can be accessed via an index. If not such path is found, the method returns the path with the greatest depth, ie. where the first one or more streams are index accesses. If no depth other then zero is found, returns the default nesting order.  </summary>
            <param name="lookupStream">stream to start look up</param>
            <param name="queryGraph">navigability between streams</param>
            <param name="dependencyGraph">dependencies between historical streams</param>
            <returns>chain and chain depth</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NStreamQueryPlanBuilder.IsDependencySatisfied(System.Int32,System.Int32[],com.espertech.esper.util.DependencyGraph)">
            <summary>Determine if the proposed permutation of lookups passes dependencies </summary>
            <param name="lookupStream">stream to initiate</param>
            <param name="permutation">permutation of lookups</param>
            <param name="dependencyGraph">dependencies</param>
            <returns>pass or fail indication</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NStreamQueryPlanBuilder.ComputeNavigableDepth(System.Int32,System.Int32[],com.espertech.esper.epl.join.plan.QueryGraph)">
            <summary>Given a chain of streams to look up and indexing information, compute the index within the chain of the first non-index lookup. </summary>
            <param name="lookupStream">stream to start lookup for</param>
            <param name="nextStreams">list of stream numbers next in lookup</param>
            <param name="queryGraph">indexing information</param>
            <returns>value between 0 and (nextStreams.lenght - 1)</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NStreamQueryPlanBuilder.BuildDefaultNestingOrder(System.Int32,System.Int32)">
            <summary>Returns default nesting order for a given number of streams for a certain stream. Example: numStreams = 5, forStream = 2, result = {0, 1, 3, 4} The resulting array has all streams except the forStream, in ascdending order. </summary>
            <param name="numStreams">number of streams</param>
            <param name="forStream">stream to generate a nesting order for</param>
            <returns>int array with all stream numbers starting at 0 to (numStreams - 1) leaving theforStream out </returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.NStreamQueryPlanBuilder.BestChainResult">
            <summary>Encapsulates the chain information. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.NStreamQueryPlanBuilder.BestChainResult.#ctor(System.Int32,System.Int32[])">
            <summary>Ctor. </summary>
            <param name="depth">depth this chain resolves into a indexed lookup</param>
            <param name="chain">chain for nested lookup</param>
        </member>
        <member name="P:com.espertech.esper.epl.join.plan.NStreamQueryPlanBuilder.BestChainResult.Depth">
            <summary>Returns depth of lookups via index in chain. </summary>
            <value>depth</value>
        </member>
        <member name="P:com.espertech.esper.epl.join.plan.NStreamQueryPlanBuilder.BestChainResult.Chain">
            <summary>Returns chain of stream numbers. </summary>
            <value>array of stream numbers</value>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.OuterInnerDirectionalGraph">
            <summary> This class represents outer-join relationships between outer and inner tables.
            To add a left outer join between streams 0 and 1 use "Add(0, 1)".
            To add a full outer join between streams 0 and 1 use "Add(0, 1)" and "Add(1, 0)".
            To add a right outer join between streams 0 and 1 use "Add(1, 0)".
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.OuterInnerDirectionalGraph.#ctor(System.Int32)">
            <summary> Ctor.</summary>
            <param name="numStreams">number of streams
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.OuterInnerDirectionalGraph.Add(System.Int32,System.Int32)">
            <summary> Add an outer-to-inner join stream relationship.</summary>
            <param name="outerStream">is the stream number of the outer stream
            </param>
            <param name="innerStream">is the stream number of the inner stream
            </param>
            <returns> graph object
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.OuterInnerDirectionalGraph.GetInner(System.Int32)">
            <summary> Returns the set of inner streams for the given outer stream number.</summary>
            <param name="outerStream">is the stream number of the outer stream
            </param>
            <returns> set of inner streams, or null if empty
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.OuterInnerDirectionalGraph.GetOuter(System.Int32)">
            <summary> Returns the set of outer streams for the given inner stream number.</summary>
            <param name="innerStream">is the stream number of the inner stream
            </param>
            <returns> set of outer streams, or null if empty
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.OuterInnerDirectionalGraph.IsInner(System.Int32,System.Int32)">
            <summary> Returns true if the outer stream has an optional relationship to the inner stream.</summary>
            <param name="outerStream">is the stream number of the outer stream
            </param>
            <param name="innerStream">is the stream number of the inner stream
            </param>
            <returns> true if outer-inner relationship between streams, false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.OuterInnerDirectionalGraph.IsOuter(System.Int32,System.Int32)">
            <summary> Returns true if the inner stream has a relationship to the outer stream.</summary>
            <param name="outerStream">is the stream number of the outer stream
            </param>
            <param name="innerStream">is the stream number of the inner stream
            </param>
            <returns> true if outer-inner relationship between streams, false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.OuterInnerDirectionalGraph.Print">
            <summary> Prints out collection.</summary>
            <returns> textual output of keys and values
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.OuterJoinAnalyzer">
            <summary>Analyzes an outer join descriptor list and builds a query graph model from it. The 'on' expression identifiers are extracted and placed in the query graph model as navigable relationships (by key and index properties) between streams. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.OuterJoinAnalyzer.Analyze(System.Collections.Generic.IList{com.espertech.esper.epl.spec.OuterJoinDesc},com.espertech.esper.epl.join.plan.QueryGraph)">
            <summary>Analyzes the outer join descriptor list to build a query graph model. </summary>
            <param name="outerJoinDescList">list of outer join descriptors</param>
            <param name="queryGraph">model containing relationships between streams that is written into</param>
            <returns>queryGraph object</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.QueryGraph">
            <summary>
            Model of relationships between streams based on properties in both streams that are specified 
            as equal in a filter expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryGraph.#ctor(System.Int32)">
            <summary>Ctor. </summary>
            <param name="numStreams">number of streams</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryGraph.AddStrictEquals(System.Int32,System.String,com.espertech.esper.epl.expression.ExprIdentNode,System.Int32,System.String,com.espertech.esper.epl.expression.ExprIdentNode)">
            <summary>
            Add properties for 2 streams that are equal.
            </summary>
            <param name="streamLeft">left hand stream</param>
            <param name="propertyLeft">left hand stream property</param>
            <param name="nodeLeft">The node left.</param>
            <param name="streamRight">right hand stream</param>
            <param name="propertyRight">right hand stream property</param>
            <param name="nodeRight">The node right.</param>
            <returns>
            true if added and did not exist, false if already known
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryGraph.GetNavigableStreams(System.Int32)">
            <summary>Returns set of streams that the given stream is navigable to. </summary>
            <param name="streamFrom">from stream number</param>
            <returns>set of streams related to this stream, or empty set if none</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryGraph.FillEquivalentNav(com.espertech.esper.client.EventType[],com.espertech.esper.epl.join.plan.QueryGraph)">
            <summary>
            Fill in equivalent key properties (navigation entries) on all streams. For example, if 
            a=b and b=c  then addRelOpInternal a=c. The method adds new equalivalent key properties 
            until no additional entries to be added are found, ie. several passes can be made.
            </summary>
            <param name="typesPerStream">The types per stream.</param>
            <param name="queryGraph">navigablity info between streamss</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryGraph.FillEquivalentNav(com.espertech.esper.client.EventType[],com.espertech.esper.epl.join.plan.QueryGraph,System.Int32,System.String,System.Int32,System.String)">
             <summary>
             Looks at the key and index (aka. left and right) properties of the 2 streams and checks
             for each property if any equivalent index properties exist for other streams.
            
             Example:  s0.p0 = s1.p1  and  s1.p1 = s2.p2  ==> therefore s0.p0 = s2.p2
             ==> look stream s0, property p0; indexed stream s1, property p1
             Is there any other lookup stream that has stream 1 and property p1 as index property? ==> this is stream s2, p2
             Add navigation entry between stream s0 and property p0 to stream s2, property p2
             </summary>
        </member>
        <member name="P:com.espertech.esper.epl.join.plan.QueryGraph.NumStreams">
            <summary>Returns the number of streams. </summary>
            <value>number of streams</value>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.QueryGraphKey">
            <summary>
            Key consisting of 2 integer stream numbers, for use by <seealso cref="T:com.espertech.esper.epl.join.plan.QueryGraph"/>.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryGraphKey.#ctor(System.Int32,System.Int32)">
            <summary>Ctor. </summary>
            <param name="streamOne">from stream</param>
            <param name="streamTwo">to stream</param>
        </member>
        <member name="F:com.espertech.esper.epl.join.plan.QueryGraphRangeEnum.LESS">
            <summary>Less (&lt;). </summary>
        </member>
        <member name="F:com.espertech.esper.epl.join.plan.QueryGraphRangeEnum.LESS_OR_EQUAL">
            <summary>Less or equal (&lt;=). </summary>
        </member>
        <member name="F:com.espertech.esper.epl.join.plan.QueryGraphRangeEnum.GREATER_OR_EQUAL">
            <summary>Greater or equal (&gt;=). </summary>
        </member>
        <member name="F:com.espertech.esper.epl.join.plan.QueryGraphRangeEnum.GREATER">
            <summary>Greater (&gt;). </summary>
        </member>
        <member name="F:com.espertech.esper.epl.join.plan.QueryGraphRangeEnum.RANGE_OPEN">
            <summary>Range contains neither endpoint, i.e. (a,b) </summary>
        </member>
        <member name="F:com.espertech.esper.epl.join.plan.QueryGraphRangeEnum.RANGE_CLOSED">
            <summary>Range contains low and high endpoint, i.e. [a,b] </summary>
        </member>
        <member name="F:com.espertech.esper.epl.join.plan.QueryGraphRangeEnum.RANGE_HALF_OPEN">
            <summary>Range includes low endpoint but not high endpoint, i.e. [a,b) </summary>
        </member>
        <member name="F:com.espertech.esper.epl.join.plan.QueryGraphRangeEnum.RANGE_HALF_CLOSED">
            <summary>Range includes high endpoint but not low endpoint, i.e. (a,b] </summary>
        </member>
        <member name="F:com.espertech.esper.epl.join.plan.QueryGraphRangeEnum.NOT_RANGE_OPEN">
            <summary>Inverted-Range contains neither endpoint, i.e. (a,b) </summary>
        </member>
        <member name="F:com.espertech.esper.epl.join.plan.QueryGraphRangeEnum.NOT_RANGE_CLOSED">
            <summary>Inverted-Range contains low and high endpoint, i.e. [a,b] </summary>
        </member>
        <member name="F:com.espertech.esper.epl.join.plan.QueryGraphRangeEnum.NOT_RANGE_HALF_OPEN">
            <summary>Inverted-Range includes low endpoint but not high endpoint, i.e. [a,b) </summary>
        </member>
        <member name="F:com.espertech.esper.epl.join.plan.QueryGraphRangeEnum.NOT_RANGE_HALF_CLOSED">
            <summary>Inverted-Range includes high endpoint but not low endpoint, i.e. (a,b] </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.QueryGraphRangeUtil">
            <summary>
            Property lists stored as a value for each stream-to-stream relationship, for use by 
            <see cref="T:com.espertech.esper.epl.join.plan.QueryGraph"/>
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.QueryGraphValue">
            <summary>
            Property lists stored as a value for each stream-to-stream relationship, for use by <seealso cref="T:com.espertech.esper.epl.join.plan.QueryGraph"/>.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryGraphValue.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryGraphValue.AddStrictCompare(System.String,com.espertech.esper.epl.expression.ExprIdentNode,System.String,com.espertech.esper.epl.expression.ExprIdentNode)">
            <summary>
            Add key and index property.
            </summary>
            <param name="keyProperty">key property</param>
            <param name="keyPropNode">The key prop node.</param>
            <param name="indexProperty">index property</param>
            <param name="indexPropNode">The index prop node.</param>
            <returns>
            true if added and either property did not exist, false if either already existed
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryGraphValueEntryHashKeyedProp.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.QueryPlan">
            <summary>Contains the query plan for all streams. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryPlan.#ctor(com.espertech.esper.epl.join.plan.QueryPlanIndex[],com.espertech.esper.epl.join.plan.QueryPlanNode[])">
            <summary>Ctor. </summary>
            <param name="indexSpecs">specs for indexes to create</param>
            <param name="execNodeSpecs">specs for execution nodes to create</param>
        </member>
        <member name="P:com.espertech.esper.epl.join.plan.QueryPlan.IndexSpecs">
            <summary>Return index specs. </summary>
            <value>index specs</value>
        </member>
        <member name="P:com.espertech.esper.epl.join.plan.QueryPlan.ExecNodeSpecs">
            <summary>Return execution node specs. </summary>
            <value>execution node specs</value>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.QueryPlanBuilder">
            <summary>
            Build a query plan based on filtering information.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryPlanBuilder.GetPlan(com.espertech.esper.client.EventType[],System.Collections.Generic.IList{com.espertech.esper.epl.spec.OuterJoinDesc},com.espertech.esper.epl.join.plan.QueryGraph,System.String[],com.espertech.esper.epl.join.base.HistoricalViewableDesc,com.espertech.esper.util.DependencyGraph,com.espertech.esper.epl.join.table.HistoricalStreamIndexList[],com.espertech.esper.core.service.StreamJoinAnalysisResult,System.Boolean,System.Attribute[],com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Build query plan using the filter.
            </summary>
            <param name="typesPerStream">event types for each stream</param>
            <param name="outerJoinDescList">list of outer join criteria, or null if there are no outer joins</param>
            <param name="queryGraph">relationships between streams based on filter expressions and outer-join on-criteria</param>
            <param name="streamNames">names of streams</param>
            <param name="historicalViewableDesc">The historical viewable desc.</param>
            <param name="dependencyGraph">dependencies between historical streams</param>
            <param name="historicalStreamIndexLists">index management, populated for the query plan</param>
            <param name="streamJoinAnalysisResult">The stream join analysis result.</param>
            <param name="isQueryPlanLogging">if set to <c>true</c> [is query plan logging].</param>
            <param name="annotations">The annotations.</param>
            <param name="exprEvaluatorContext">The expr evaluator context.</param>
            <returns>query plan</returns>
            <throws>ExprValidationException if the query plan fails</throws>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.QueryPlanIndex">
            <summary>
            Specifies an index to build as part of an overall query plan.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryPlanIndex.GetIndexNum(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Find a matching index for the property names supplied.
            </summary>
            <param name="indexProps">property names to search for</param>
            <param name="rangeProps">The range props.</param>
            <returns>
            -1 if not found, or offset within indexes if found
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryPlanIndex.AddIndex(System.String[],System.Type[])">
            <summary>Add an index specification element. </summary>
            <param name="indexProperties">list of property names to index</param>
            <param name="coercionTypes">list of coercion types if required, or null if no coercion required</param>
            <returns>number indicating position of index that was added</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryPlanIndex.GetCoercionTypes(System.Collections.Generic.IList{System.String})">
            <summary>Returns a list of coercion types for a given index. </summary>
            <param name="indexProperties">is the index field names</param>
            <returns>coercion types, or null if no coercion is required</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryPlanIndex.SetCoercionTypes(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Type})">
            <summary>Sets the coercion types for a given index. </summary>
            <param name="indexProperties">is the index property names</param>
            <param name="coercionTypes">is the coercion types</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryPlanIndex.Print(com.espertech.esper.epl.join.plan.QueryPlanIndex[])">
            <summary>Print index specifications in readable format. </summary>
            <param name="indexSpecs">define indexes</param>
            <returns>readable format of index info</returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.plan.QueryPlanIndex.IndexProps">
            <summary>For testing - Returns property names of all indexes. </summary>
            <value>property names array</value>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.QueryPlanIndexBuilder">
            <summary>Build query index plans. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryPlanIndexBuilder.BuildIndexSpec(com.espertech.esper.epl.join.plan.QueryGraph,com.espertech.esper.client.EventType[],System.String[][][])">
            <summary>
            Build index specification from navigability info.
            <para/>
            Looks at each stream and determines which properties in the stream must be indexed
            in order for other streams to look up into the stream. Determines the unique set of
            properties to avoid building duplicate indexes on the same set of properties.
            </summary>
            <param name="queryGraph">navigability info</param>
            <param name="typePerStream">The type per stream.</param>
            <param name="indexedStreamsUniqueProps">The indexed streams unique props.</param>
            <returns>query index specs for each stream</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.QueryPlanIndexItem">
            <summary>Specifies an index to build as part of an overall query plan. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.QueryPlanIndexItem.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Type},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Type},System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="indexProps">array of property names with the first dimension suplying the number ofdistinct indexes. The second dimension can be empty and indicates a full table scan.</param>
            <param name="optIndexCoercionTypes">array of coercion types for each index, or null entry for no coercion required</param>
            <param name="rangeProps">The range props.</param>
            <param name="optRangeCoercionTypes">The opt range coercion types.</param>
            <param name="unique">if set to <c>true</c> [unique].</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.SortedTableLookupPlan">
            <summary>Plan to perform an indexed table lookup. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.SortedTableLookupPlan.#ctor(System.Int32,System.Int32,System.String,com.espertech.esper.epl.join.plan.QueryGraphValueEntryRange)">
            <summary>
            Ctor.
            </summary>
            <param name="lookupStream">stream that generates event to look up for</param>
            <param name="indexedStream">stream to index table lookup</param>
            <param name="indexNum">index number for the table containing the full unindexed contents</param>
            <param name="rangeKeyPair">The range key pair.</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.TableLookupNode">
            <summary>
            Specifies exection of a table lookup using the supplied plan for performing the lookup.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.TableLookupNode.#ctor(com.espertech.esper.epl.join.plan.TableLookupPlan)">
            <summary>Ctor. </summary>
            <param name="tableLookupPlan">plan for performing lookup</param>
        </member>
        <member name="P:com.espertech.esper.epl.join.plan.TableLookupNode.LookupStrategySpec">
            <summary>Returns lookup plan. </summary>
            <value>lookup plan</value>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.TableOuterLookupNode">
            <summary>
            Specifies exection of a table lookup with outer join using the a specified lookup plan.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.TableOuterLookupNode.#ctor(com.espertech.esper.epl.join.plan.TableLookupPlan)">
            <summary>Ctor. </summary>
            <param name="tableLookupPlan">plan for performing lookup</param>
        </member>
        <member name="P:com.espertech.esper.epl.join.plan.TableOuterLookupNode.LookupStrategySpec">
            <summary>Returns lookup plan. </summary>
            <value>lookup plan</value>
        </member>
        <member name="T:com.espertech.esper.epl.join.plan.TwoStreamQueryPlanBuilder">
            <summary>Builds a query plan for the simple 2-stream scenario. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.plan.TwoStreamQueryPlanBuilder.Build(com.espertech.esper.client.EventType[],com.espertech.esper.epl.join.plan.QueryGraph,System.Nullable{com.espertech.esper.type.OuterJoinType},System.String[][][])">
            <summary>Build query plan. </summary>
            <param name="queryGraph">navigability info</param>
            <param name="optionalOuterJoinType">outer join type, null if not an outer join</param>
            <param name="typesPerStream">event types for each stream</param>
            <returns>query plan</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.pollindex.IPollResultIndexingStrategy">
            <summary>
            A strategy for converting a poll-result into a potentially indexed table.
            <para/>
            Some implementations may decide to not index the poll result and simply hold a reference
            to the result. Other implementations may use predetermined index properties to index the
            poll result for faster lookup.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.pollindex.IPollResultIndexingStrategy.Index(System.Collections.Generic.IList{com.espertech.esper.client.EventBean},System.Boolean)">
            <summary>Build and index of a poll result. </summary>
            <param name="pollResult">result of a poll operation</param>
            <param name="isActiveCache">true to indicate that caching is active and therefore index building makes sense asthe index structure is not a throw-away. </param>
            <returns>indexed collection of poll results</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.pollindex.ProxyPollResultIndexingStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.join.pollindex.ProxyPollResultIndexingStrategy"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.pollindex.ProxyPollResultIndexingStrategy.#ctor(System.Func{System.Collections.Generic.IList{com.espertech.esper.client.EventBean},System.Boolean,com.espertech.esper.epl.join.table.EventTable},System.Func{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.join.pollindex.ProxyPollResultIndexingStrategy"/> class.
            </summary>
            <param name="indexF">The index.</param>
            <param name="toPlanF">To plan.</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.pollindex.ProxyPollResultIndexingStrategy.Index(System.Collections.Generic.IList{com.espertech.esper.client.EventBean},System.Boolean)">
            <summary>
            Build and index of a poll result.
            </summary>
            <param name="pollResult">result of a poll operation</param>
            <param name="isActiveCache">true to indicate that caching is active and therefore index building makes sense asthe index structure is not a throw-away.</param>
            <returns>indexed collection of poll results</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.pollindex.PollResultIndexingStrategyComposite">
            <summary>
            Strategy for building an index out of poll-results knowing the properties to base 
            6athe index on.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.pollindex.PollResultIndexingStrategyComposite.#ctor(System.Int32,com.espertech.esper.client.EventType,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Type},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Type})">
            <summary>
            Ctor.
            </summary>
            <param name="streamNum">is the stream number of the indexed stream</param>
            <param name="eventType">is the event type of the indexed stream</param>
            <param name="indexPropertiesJoin">The index properties join.</param>
            <param name="keyCoercionTypes">The key coercion types.</param>
            <param name="rangePropertiesJoin">The range properties join.</param>
            <param name="rangeCoercionTypes">The range coercion types.</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.pollindex.PollResultIndexingStrategyIndex">
            <summary>
            Strategy for building an index out of poll-results knowing the properties to base the index on.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.pollindex.PollResultIndexingStrategyIndex.#ctor(System.Int32,com.espertech.esper.client.EventType,System.Collections.Generic.IList{System.String})">
            <summary>Ctor. </summary>
            <param name="streamNum">is the stream number of the indexed stream</param>
            <param name="eventType">is the event type of the indexed stream</param>
            <param name="propertyNames">is the property names to be indexed</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.pollindex.PollResultIndexingStrategyIndexCoerce">
            <summary>
            Strategy for building an index out of poll-results knowing the properties to base the index on,
            and their coercion types.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.pollindex.PollResultIndexingStrategyIndexCoerce.#ctor(System.Int32,com.espertech.esper.client.EventType,System.Collections.Generic.IList{System.String},System.Type[])">
            <summary>Ctor. </summary>
            <param name="streamNum">is the stream number of the indexed stream</param>
            <param name="eventType">is the event type of the indexed stream</param>
            <param name="propertyNames">is the property names to be indexed</param>
            <param name="coercionTypes">is the types to coerce to for keys and values</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.pollindex.PollResultIndexingStrategyIndexCoerceSingle">
            <summary>
            Strategy for building an index out of poll-results knowing the properties to base the index 
            on, and their coercion types.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.pollindex.PollResultIndexingStrategyIndexCoerceSingle.#ctor(System.Int32,com.espertech.esper.client.EventType,System.String,System.Type)">
            <summary>
            Ctor.
            </summary>
            <param name="streamNum">is the stream number of the indexed stream</param>
            <param name="eventType">is the event type of the indexed stream</param>
            <param name="propertyName">Name of the property.</param>
            <param name="coercionType">Type of the coercion.</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.pollindex.PollResultIndexingStrategyIndexSingle">
            <summary>Strategy for building an index out of poll-results knowing the properties to base the index on. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.pollindex.PollResultIndexingStrategyIndexSingle.#ctor(System.Int32,com.espertech.esper.client.EventType,System.String)">
            <summary>Ctor. </summary>
            <param name="streamNum">is the stream number of the indexed stream</param>
            <param name="eventType">is the event type of the indexed stream</param>
            <param name="propertyName">is the property names to be indexed</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.pollindex.PollResultIndexingStrategyNoIndex">
            <summary>
            Strategy of indexing that simply builds an unindexed table of poll results.
            <para/>
            For use when caching is disabled or when no proper index could be build because no where-clause 
            or on-clause exists or these clauses don't yield indexable columns on analysis.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.pollindex.PollResultIndexingStrategySorted">
            <summary>
            Strategy for building an index out of poll-results knowing the properties to base the index on.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.pollindex.PollResultIndexingStrategySorted.#ctor(System.Int32,com.espertech.esper.client.EventType,System.String,System.Type)">
            <summary>
            Ctor.
            </summary>
            <param name="streamNum">is the stream number of the indexed stream</param>
            <param name="eventType">is the event type of the indexed stream</param>
            <param name="propertyName">Name of the property.</param>
            <param name="coercionType">Type of the coercion.</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.rep.Cursor">
            <summary>
            This class supplies position information for <seealso cref="T:com.espertech.esper.epl.join.exec.base.LookupInstructionExec"/>
            to use for iterating over events for lookup.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.rep.Cursor.#ctor(com.espertech.esper.client.EventBean,System.Int32,com.espertech.esper.epl.join.rep.Node)">
            <summary>Ctor. </summary>
            <param name="theEvent">is the current event</param>
            <param name="stream">is the current stream</param>
            <param name="node">is the node containing the set of events to which the event belongs to</param>
        </member>
        <member name="P:com.espertech.esper.epl.join.rep.Cursor.Event">
            <summary>Supplies current event. </summary>
            <value>event</value>
        </member>
        <member name="P:com.espertech.esper.epl.join.rep.Cursor.Stream">
            <summary>Returns current stream the event belongs to. </summary>
            <value>stream number for event</value>
        </member>
        <member name="P:com.espertech.esper.epl.join.rep.Cursor.Node">
            <summary>Returns current result node the event belong to. </summary>
            <value>result node of event</value>
        </member>
        <member name="T:com.espertech.esper.epl.join.rep.Node">
            <summary>
            Node is the structure to hold results of event lookups in joined streams. A node holds
            a set of event which are the result of a lookup in a stream's table. A Node can be
            linked to its parent node and the event within the parent node, which was the event 
            that was used to perform a lookup.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.rep.Node.#ctor(System.Int32)">
            <summary> Ctor.</summary>
            <param name="stream">this node stores results for
            </param>
        </member>
        <member name="P:com.espertech.esper.epl.join.rep.Node.Stream">
            <summary> Returns the stream number of the stream that supplied the event results.</summary>
            <returns> stream number for results
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.rep.Node.Parent">
            <summary>
            Gets or sets the parent node, or null if this is a root node.
            </summary>
            <value>The parent.</value>
            <returns> parent node or null for root node
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.rep.Node.ParentEvent">
            <summary>
            Gets or sets lookup event.
            </summary>
            <value>The parent event.</value>
            <returns> parent node's event that was used to lookup
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.rep.Node.Events">
            <summary>
            Gets or sets the events.
            </summary>
            <value>The events.</value>
        </member>
        <member name="T:com.espertech.esper.epl.join.rep.Repository">
            <summary>
            An interface for a repository of events in a lookup/join scheme that
            supplies events for event stream table lookups and receives results
            of lookups.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.rep.Repository.GetCursors(System.Int32)">
            <summary>
            Supply events for performing look ups for a given stream.
            </summary>
            <param name="lookupStream">is the stream to perform lookup for</param>
            <returns>
            an iterator over events with additional positioning information
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.rep.Repository.AddResult(com.espertech.esper.epl.join.rep.Cursor,System.Collections.Generic.ICollection{com.espertech.esper.client.EventBean},System.Int32)">
            <summary>
            Add a lookup result.
            </summary>
            <param name="cursor">provides result position and parent event and node information</param>
            <param name="lookupResults">is the events found</param>
            <param name="resultStream">is the stream number of the stream providing the results</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.rep.RepositoryImpl">
            <summary>
            Implements a repository for join events and lookup results.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.rep.RepositoryImpl.#ctor(System.Int32,com.espertech.esper.client.EventBean,System.Int32)">
            <summary>
            Ctor.
            </summary>
            <param name="rootStream">is the stream supplying the root event</param>
            <param name="rootEvent">is the root event</param>
            <param name="numStreams">is the number of streams</param>
        </member>
        <member name="P:com.espertech.esper.epl.join.rep.RepositoryImpl.NodesPerStream">
            <summary>
            Returns a list of nodes that are the lookup results per stream.
            </summary>
            <value>
            	result nodes per stream
            </value>
        </member>
        <member name="T:com.espertech.esper.epl.join.table.EventTable">
            <summary>
            Table of events allowing add and remove. Lookup in table is coordinated through 
            the underlying implementation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.EventTable.AddRemove(System.Collections.Generic.IList{com.espertech.esper.client.EventBean},System.Collections.Generic.IList{com.espertech.esper.client.EventBean})">
            <summary>
            Add and remove events from table.
            <para/>
            It is up to the index to decide whether to add first and then remove, or whether
            to remove and then add.
            <para/>
            It is important to note that a given event can be in both the removed and the added 
            events. This means that unique indexes probably need to remove first and then add. 
            Most other non-unique indexes will add first and then remove since the an event can 
            be both in the add and the remove stream.
            </summary>
            <param name="newData">to add</param>
            <param name="oldData">to remove</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.EventTable.Add(System.Collections.Generic.IList{com.espertech.esper.client.EventBean})">
            <summary>
            Add events to table.
            </summary>
            <param name="events">to add</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.EventTable.Remove(System.Collections.Generic.IList{com.espertech.esper.client.EventBean})">
            <summary>
            Remove events from table.
            </summary>
            <param name="events">to remove</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.EventTable.IsEmpty">
            <summary>Returns true if the index is empty, or false if not </summary>
            <returns>true for empty index</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.EventTable.Clear">
            <summary>Clear out index. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.table.EventTableFactory">
            <summary>
            Table of events allowing add and remove. Lookup in table is coordinated through 
            the underlying implementation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.EventTableUtil.BuildIndex(System.Int32,com.espertech.esper.epl.join.plan.QueryPlanIndexItem,com.espertech.esper.client.EventType,System.Boolean,System.Boolean,System.String)">
            <summary>Build an index/table instance using the event properties for the event type. </summary>
            <param name="indexedStreamNum">number of stream indexed</param>
            <param name="eventType">type of event to expect</param>
            <param name="optionalIndexName"></param>
            <returns>table build</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.table.HistoricalStreamIndexDesc">
            <summary>
            Descriptor for an index requirement on a historical stream.
            <para/>
            Saves and compares the properties indexed and their types, as well as the types 
            of key properties to account for coercion.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.HistoricalStreamIndexDesc.#ctor(System.Collections.Generic.IList{System.String},System.Type[],System.Type[])">
            <summary>Ctor. </summary>
            <param name="indexProperties">index properties</param>
            <param name="indexPropTypes">index property types</param>
            <param name="keyPropTypes">key property types</param>
        </member>
        <member name="F:com.espertech.esper.epl.join.table.HistoricalStreamIndexDesc.IndexProperties">
            <summary>Returns index properties. </summary>
            <value>index properties</value>
        </member>
        <member name="F:com.espertech.esper.epl.join.table.HistoricalStreamIndexDesc.IndexPropTypes">
            <summary>Returns index property types. </summary>
            <value>index property types</value>
        </member>
        <member name="F:com.espertech.esper.epl.join.table.HistoricalStreamIndexDesc.KeyPropTypes">
            <summary>Returns key property types. </summary>
            <value>key property types</value>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.HistoricalStreamIndexDesc.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.HistoricalStreamIndexDesc.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.table.HistoricalStreamIndexList">
            <summary>
            Manages index-building and sharing for historical streams by collecting required indexes during
            the query planning phase, and by providing the right lookup strategy and indexing strategy during 
            query execution node creation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.HistoricalStreamIndexList.#ctor(System.Int32,com.espertech.esper.client.EventType[],com.espertech.esper.epl.join.plan.QueryGraph)">
            <summary>Ctor. </summary>
            <param name="historicalStreamNum">number of the historical stream</param>
            <param name="typesPerStream">event types for each stream</param>
            <param name="queryGraph">relationship between key and index properties</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.HistoricalStreamIndexList.AddIndex(System.Int32)">
            <summary>Used during query plan phase to indicate that an index must be provided for use in lookup of historical events by using a stream's events. </summary>
            <param name="streamViewStreamNum">the stream providing lookup events</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.HistoricalStreamIndexList.GetStrategy(System.Int32)">
            <summary>Get the strategies to use for polling from a given stream. </summary>
            <param name="streamViewStreamNum">the stream providing the polling events</param>
            <returns>looking and indexing strategy</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.table.MultiIndexEventTable">
            <summary>
            An event table for holding multiple tables for use when multiple indexes of the 
            same dataset must be entered into a cache for use in historical data lookup.
            <para/>
            Does not allow iteration, adding and removing events. Does allow clearing all 
            tables and asking for filled or empty tables. All tables are expected to be filled
            and empty at the same time, reflecting multiple indexes on a single set of data.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.MultiIndexEventTable.#ctor(com.espertech.esper.epl.join.table.EventTable[])">
            <summary>Ctor. </summary>
            <param name="tables">tables to hold</param>
        </member>
        <member name="P:com.espertech.esper.epl.join.table.MultiIndexEventTable.Tables">
            <summary>Returns all tables. </summary>
            <value>tables</value>
        </member>
        <member name="T:com.espertech.esper.epl.join.table.PropertyCompositeEventTable">
            <summary>
            For use when the index comprises of either two or more ranges or a unique key in 
            combination with a range. Expected at least either (A) one key and one range or 
            (B) zero keys and 2 ranges. <para/>- not applicable for range-only lookups (since there 
            the key can be the value itself - not applicable for multiple nested range as ordering 
            not nested - each add/remove and lookup would also need to construct a key object.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.join.table.PropertyCompositeEventTable._index">
            <summary>Index table (sorted and/or keyed, always nested). </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyCompositeEventTable.Add(System.Collections.Generic.IList{com.espertech.esper.client.EventBean})">
            <summary>Add an array of events. Same event instance is not added twice. Event properties should be immutable. Allow null passed instead of an empty array. </summary>
            <param name="events">to add</param>
            <throws>ArgumentException if the event was already existed in the index</throws>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyCompositeEventTable.Remove(System.Collections.Generic.IList{com.espertech.esper.client.EventBean})">
            <summary>Remove events. </summary>
            <param name="events">to be removed, can be null instead of an empty array.</param>
            <throws>ArgumentException when the event could not be removed as its not in the index</throws>
        </member>
        <member name="T:com.espertech.esper.epl.join.table.PropertyCompositeEventTableFactory">
            <summary>
            For use when the index comprises of either two or more ranges or a unique key in 
            combination with a range. Expected at least either (A) one key and one range or 
            (B) zero keys and 2 ranges. <para/>- not applicable for range-only lookups (since 
            there the key can be the value itself - not applicable for multiple nested range 
            as ordering not nested - each add/remove and lookup would also need to construct
            a key object.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyCompositeEventTableFactory.#ctor(System.Int32,com.espertech.esper.client.EventType,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Type},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Type})">
            <summary>
            Ctor.
            </summary>
            <param name="streamNum">the stream number that is indexed</param>
            <param name="eventType">types of events indexed</param>
            <param name="optionalKeyedProps">The optional keyed props.</param>
            <param name="optKeyCoercedTypes">The opt key coerced types.</param>
            <param name="rangeProps">The range props.</param>
            <param name="optRangeCoercedTypes">property types</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.table.PropertyIndexedEventTable">
            <summary>
            Index that organizes events by the event property values into hash buckets. Based on 
            a HashMap with <seealso cref="T:com.espertech.esper.collection.MultiKeyUntyped"/> keys 
            that store the property values. Takes a list of property names as parameter. Doesn't 
            care which event type the events have as long as the properties exist. If the same event 
            is added twice, the class throws an exception on add.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndexedEventTable.GetMultiKey(com.espertech.esper.client.EventBean)">
            <summary>Determine multikey for index access. </summary>
            <param name="theEvent">to get properties from for key</param>
            <returns>multi key</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndexedEventTable.Add(System.Collections.Generic.IList{com.espertech.esper.client.EventBean})">
            <summary>Add an array of events. Same event instance is not added twice. Event properties should be immutable. Allow null passed instead of an empty array. </summary>
            <param name="events">to add</param>
            <throws>ArgumentException if the event was already existed in the index</throws>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndexedEventTable.Remove(System.Collections.Generic.IList{com.espertech.esper.client.EventBean})">
            <summary>Remove events. </summary>
            <param name="events">to be removed, can be null instead of an empty array.</param>
            <throws>ArgumentException when the event could not be removed as its not in the index</throws>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndexedEventTable.Lookup(System.Object[])">
            <summary>Returns the set of events that have the same property value as the given event. </summary>
            <param name="keys">to compare against</param>
            <returns>set of events with property value, or null if none found (never returns zero-sized set)</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.table.PropertyIndexedEventTableCoerceAdd">
            <summary>
            Index that organizes events by the event property values into hash buckets. Based on a 
            HashMap with <see cref="T:com.espertech.esper.collection.MultiKeyUntyped"/> keys that 
            store the property values.
            <para/>
            Performs coercion of the index keys before storing the keys.
            <para/>
            Takes a list of property names as parameter. Doesn't care which event type the events 
            have as long as the properties exist. If the same event is added twice, the class throws 
            an exception on add.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.table.PropertyIndexedEventTableCoerceAddFactory">
            <summary>
            Index that organizes events by the event property values into hash buckets. Based on 
            a HashMap with <seealso cref="T:com.espertech.esper.collection.MultiKeyUntyped"/>
            keys that store the property values. <para/>Performs coercion of the index keys before 
            storing the keys. 
            <para/>
            Takes a list of property names as parameter. Doesn't care which event type the events 
            have as long as the properties exist. If the same event is added twice, the class throws 
            an exception on add.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.table.PropertyIndexedEventTableFactory">
            <summary>
            Index factory that organizes events by the event property values into hash buckets. 
            Based on a HashMap with <seealso cref="T:com.espertech.esper.collection.MultiKeyUntyped"/>
            keys that store the property values. Takes a list of property names as parameter. 
            Doesn't care which event type the events have as long as the properties exist. If
            the same event is added twice, the class throws an exception on add.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.join.table.PropertyIndexedEventTableFactory.PropertyGetters">
            <summary>Getters for properties. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndexedEventTableFactory.#ctor(System.Int32,com.espertech.esper.client.EventType,System.Collections.Generic.IList{System.String},System.Boolean,System.String)">
            <summary>Ctor. </summary>
            <param name="streamNum">the stream number that is indexed</param>
            <param name="eventType">types of events indexed</param>
            <param name="propertyNames">property names to use for indexing</param>
            <param name="unique"></param>
            <param name="optionalIndexName"></param>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndexedEventTableCoerceAddFactory.#ctor(System.Int32,com.espertech.esper.client.EventType,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Type})">
            <summary>Ctor. </summary>
            <param name="streamNum">is the stream number of the indexed stream</param>
            <param name="eventType">is the event type of the indexed stream</param>
            <param name="propertyNames">are the property names to get property values</param>
            <param name="coercionType">are the classes to coerce indexed values to</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.table.PropertyIndexedEventTableCoerceAll">
            <summary>
            Index that organizes events by the event property values into hash buckets. Based on 
            a HashMap with <seealso cref="T:com.espertech.esper.collection.MultiKeyUntyped"/> keys 
            that store the property values.
            <para/>
            Performs coercion of the index keys before storing the keys, and coercion of the lookup 
            keys before lookup.
            <para/> 
            Takes a list of property names as parameter. Doesn't care which event type the events 
            have as long as the properties exist. If the same event is added twice, the class throws 
            an exception on add.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndexedEventTableCoerceAll.#ctor(System.Int32,System.Collections.Generic.IList{com.espertech.esper.client.EventPropertyGetter},System.Collections.Generic.IList{com.espertech.esper.util.Coercer},System.Collections.Generic.IList{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.join.table.PropertyIndexedEventTableCoerceAll"/> class.
            </summary>
            <param name="streamNum">The stream num.</param>
            <param name="propertyGetters">The property getters.</param>
            <param name="coercers">The coercers.</param>
            <param name="coercionType">Type of the coercion.</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndexedEventTableCoerceAll.Lookup(System.Object[])">
            <summary>Returns the set of events that have the same property value as the given event. </summary>
            <param name="keys">to compare against</param>
            <returns>set of events with property value, or null if none found (never returns zero-sized set)</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.table.PropertyIndexedEventTableCoerceAllFactory">
            <summary>
            Index that organizes events by the event property values into hash buckets. Based on a 
            HashMap with <seealso cref="T:com.espertech.esper.collection.MultiKeyUntyped"/> keys that 
            store the property values.
            <para/>
            Performs coercion of the index keys before storing the keys, and coercion of the lookup
            keys before lookup.
            <para/>
            Takes a list of property names as parameter. Doesn't care which event type the events 
            have as long as the properties exist. If the same event is added twice, the class throws 
            an exception on add.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndexedEventTableCoerceAllFactory.#ctor(System.Int32,com.espertech.esper.client.EventType,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Type})">
            <summary>Ctor. </summary>
            <param name="streamNum">is the stream number of the indexed stream</param>
            <param name="eventType">is the event type of the indexed stream</param>
            <param name="propertyNames">are the property names to get property values</param>
            <param name="coercionType">are the classes to coerce indexed values to</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.table.PropertyIndexedEventTableSingle">
            <summary>
            Index that organizes events by the event property values into hash buckets. Based
            on a HashMap with <seealso cref="T:com.espertech.esper.collection.MultiKeyUntyped"/> keys 
            that store the property values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndexedEventTableSingle.GetKey(com.espertech.esper.client.EventBean)">
            <summary>Determine multikey for index access. </summary>
            <param name="theEvent">to get properties from for key</param>
            <returns>multi key</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndexedEventTableSingle.Add(System.Collections.Generic.IList{com.espertech.esper.client.EventBean})">
            <summary>
            Add an array of events. Same event instance is not added twice. Event properties should 
            be immutable. Allow null passed instead of an empty array.
            </summary>
            <param name="events">to add</param>
            <throws>ArgumentException if the event was already existed in the index</throws>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndexedEventTableSingle.Remove(System.Collections.Generic.IList{com.espertech.esper.client.EventBean})">
            <summary>Remove events. </summary>
            <param name="events">to be removed, can be null instead of an empty array.</param>
            <throws>ArgumentException when the event could not be removed as its not in the index</throws>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndexedEventTableSingle.Lookup(System.Object)">
            <summary>Returns the set of events that have the same property value as the given event. </summary>
            <param name="key">to compare against</param>
            <returns>set of events with property value, or null if none found (never returns zero-sized set)</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndexedEventTableSingle.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndexedEventTableSingle.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.table.PropertyIndexedEventTableSingleFactory">
            <summary>
            Index factory that organizes events by the event property values into hash buckets. 
            Based on a HashMap with <seealso cref="T:com.espertech.esper.collection.MultiKeyUntyped"/>
            keys that store the property values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndexedEventTableSingleFactory.#ctor(System.Int32,com.espertech.esper.client.EventType,System.String,System.Boolean,System.String)">
            <summary>Ctor. </summary>
            <param name="streamNum">the stream number that is indexed</param>
            <param name="eventType">types of events indexed</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndexedEventTableSingleCoerceAddFactory.#ctor(System.Int32,com.espertech.esper.client.EventType,System.String,System.Type)">
            <summary>Ctor. </summary>
            <param name="streamNum">is the stream number of the indexed stream</param>
            <param name="eventType">is the event type of the indexed stream</param>
            <param name="propertyName">are the property names to get property values</param>
            <param name="coercionType">are the classes to coerce indexed values to</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndexedEventTableSingleCoerceAll.#ctor(System.Int32,com.espertech.esper.client.EventPropertyGetter,com.espertech.esper.util.Coercer,System.Type)">
            <summary>
            Ctor.
            </summary>
            <param name="streamNum">is the stream number of the indexed stream</param>
            <param name="propertyGetter">The property getter.</param>
            <param name="coercer">The coercer.</param>
            <param name="coercionType">are the classes to coerce indexed values to</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndexedEventTableSingleCoerceAll.Lookup(System.Object)">
            <summary>Returns the set of events that have the same property value as the given event. </summary>
            <returns>set of events with property value, or null if none found (never returns zero-sized set)</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndexedEventTableSingleCoerceAllFactory.#ctor(System.Int32,com.espertech.esper.client.EventType,System.String,System.Type)">
            <summary>
            Ctor.
            </summary>
            <param name="streamNum">is the stream number of the indexed stream</param>
            <param name="eventType">is the event type of the indexed stream</param>
            <param name="propertyName">are the property names to get property values</param>
            <param name="coercionType">are the classes to coerce indexed values to</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.table.PropertyIndexedEventTableSingleUnique">
            <summary>
            Unique index.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndexedEventTableSingleUnique.AddRemove(System.Collections.Generic.IList{com.espertech.esper.client.EventBean},System.Collections.Generic.IList{com.espertech.esper.client.EventBean})">
            <summary>Remove then add events. </summary>
            <param name="newData">to add</param>
            <param name="oldData">to remove</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndexedEventTableUnique.AddRemove(System.Collections.Generic.IList{com.espertech.esper.client.EventBean},System.Collections.Generic.IList{com.espertech.esper.client.EventBean})">
            <summary>Remove then add events. </summary>
            <param name="newData">to add</param>
            <param name="oldData">to remove</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndexedEventTableUnique.Add(System.Collections.Generic.IList{com.espertech.esper.client.EventBean})">
            <summary>Add an array of events. Same event instance is not added twice. Event properties should be immutable. Allow null passed instead of an empty array. </summary>
            <param name="events">to add</param>
            <throws>ArgumentException if the event was already existed in the index</throws>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndexedEventTableUnique.Remove(System.Collections.Generic.IList{com.espertech.esper.client.EventBean})">
            <summary>Remove events. </summary>
            <param name="events">to be removed, can be null instead of an empty array.</param>
            <throws>ArgumentException when the event could not be removed as its not in the index</throws>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertyIndexedEventTableUnique.Lookup(System.Object[])">
            <summary>Returns the set of events that have the same property value as the given event. </summary>
            <param name="keys">to compare against</param>
            <returns>set of events with property value, or null if none found (never returns zero-sized set)</returns>
        </member>
        <member name="T:com.espertech.esper.epl.join.table.PropertySortedEventTable">
            <summary>
            Index that organizes events by the event property values into a single TreeMap 
            sortable non-nested index with Object keys that store the property values. 
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.join.table.PropertySortedEventTable.PropertyGetter">
            <summary>Getters for properties. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.join.table.PropertySortedEventTable.PropertyIndex">
            <summary>Index table. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertySortedEventTable.#ctor(System.Int32,com.espertech.esper.client.EventPropertyGetter)">
            <summary>
            Ctor.
            </summary>
            <param name="streamNum">the stream number that is indexed</param>
            <param name="propertyGetter">The property getter.</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertySortedEventTable.GetIndexedValue(com.espertech.esper.client.EventBean)">
            <summary>
            Determine multikey for index access.
            </summary>
            <param name="theEvent">The event.</param>
            <returns>multi key</returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertySortedEventTable.Add(System.Collections.Generic.IList{com.espertech.esper.client.EventBean})">
            <summary>Add an array of events. Same event instance is not added twice. Event properties should be immutable. Allow null passed instead of an empty array. </summary>
            <param name="events">to add</param>
            <throws>ArgumentException if the event was already existed in the index</throws>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertySortedEventTable.Remove(System.Collections.Generic.IList{com.espertech.esper.client.EventBean})">
            <summary>Remove events. </summary>
            <param name="events">to be removed, can be null instead of an empty array.</param>
            <throws>ArgumentException when the event could not be removed as its not in the index</throws>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertySortedEventTable.LookupRange(System.Object,System.Boolean,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Returns the set of events that have the same property value as the given event.
            </summary>
            <param name="keyStart">to compare against</param>
            <param name="includeStart">if set to <c>true</c> [include start].</param>
            <param name="keyEnd">to compare against</param>
            <param name="includeEnd">if set to <c>true</c> [include end].</param>
            <param name="allowRangeReversal">indicate whether "a between 60 and 50" should return no results (equivalent to a&gt;= X and a &lt;=Y) or should return results (equivalent to 'between' and 'in'</param>
            <returns>
            set of events with property value, or null if none found (never returns zero-sized set)
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertySortedEventTable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertySortedEventTableCoerced.#ctor(System.Int32,com.espertech.esper.client.EventPropertyGetter,System.Type)">
            <summary>
            Ctor.
            </summary>
            <param name="streamNum">the stream number that is indexed</param>
            <param name="propertyGetter">The property getter.</param>
            <param name="coercionType">property types</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.table.PropertySortedEventTableFactory">
            <summary>
            Index that organizes events by the event property values into a single TreeMap 
            sortable non-nested index with Object keys that store the property values.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.join.table.PropertySortedEventTableFactory.PropertyGetter">
            <summary>Getters for properties. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertySortedEventTableFactory.#ctor(System.Int32,com.espertech.esper.client.EventType,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="streamNum">the stream number that is indexed</param>
            <param name="eventType">types of events indexed</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.PropertySortedEventTableCoercedFactory.#ctor(System.Int32,com.espertech.esper.client.EventType,System.String,System.Type)">
            <summary>Ctor. </summary>
            <param name="streamNum">the stream number that is indexed</param>
            <param name="eventType">types of events indexed</param>
            <param name="propertyName">property names to use for indexing</param>
            <param name="coercionType">property types</param>
        </member>
        <member name="T:com.espertech.esper.epl.join.table.PropertySortedEventTableEnumerator">
            <summary>
            Enumerator for use by <seealso cref="T:com.espertech.esper.epl.join.table.PropertySortedEventTable"/>.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.table.UnindexedEventTable">
            <summary>
            Simple table of events without an index.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.UnindexedEventTable.#ctor(System.Int32)">
            <summary>Ctor. </summary>
            <param name="streamNum">is the indexed stream's number</param>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.UnindexedEventTable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.UnindexedEventTable.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.epl.join.table.UnindexedEventTable.EventSet">
            <summary>Returns events in table. </summary>
            <value>all events</value>
        </member>
        <member name="T:com.espertech.esper.epl.join.table.UnindexedEventTableFactory">
            <summary>
            Factory for simple table of events without an index.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.join.table.UnindexedEventTableList">
            <summary>
            Simple table of events without an index, based on a List implementation rather then 
            a set since we know there cannot be duplicates (such as a poll returning individual rows).
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.join.table.UnindexedEventTableList.#ctor(System.Collections.Generic.IList{com.espertech.esper.client.EventBean})">
            <summary>Ctor. </summary>
            <param name="eventSet">is a list initializing the table</param>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.SubordCompositeTableLookupStrategy">
            <summary>
            Index lookup strategy for subqueries.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.SubordTableLookupStrategy">
            <summary>
            Strategy for looking up, in some sort of table or index, or a set of events, potentially based on the events properties, and returning a set of matched events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.SubordTableLookupStrategy.Lookup(com.espertech.esper.client.EventBean[],com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Returns matched events for a set of events to look up for. Never returns an empty result set, always returns null to indicate no results.
            </summary>
            <param name="events">to look up</param>
            <param name="context">The context.</param>
            <returns>
            set of matching events, or null if none matching
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.SubordCompositeTableLookupStrategyFactory">
            <summary>
            Index lookup strategy for subqueries.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.SubordTableLookupStrategyFactory">
            <summary>
            Strategy for looking up, in some sort of table or index, or a set of events, potentially based on the
            events properties, and returning a set of matched events.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.SubordFullTableScanLookupStrategy">
            <summary>
            Lookup on an unindexed table returning the full table as matching events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.SubordFullTableScanLookupStrategy.#ctor(com.espertech.esper.epl.join.table.UnindexedEventTable)">
            <summary>Ctor. </summary>
            <param name="eventIndex">table to use</param>
        </member>
        <member name="P:com.espertech.esper.epl.lookup.SubordFullTableScanLookupStrategy.EventIndex">
            <summary>Returns the associated table. </summary>
            <value>table for lookup.</value>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.SubordFullTableScanLookupStrategyFactory">
            <summary>
            Factory for lookup on an unindexed table returning the full table as matching events.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.SubordFullTableScanLookupStrategyLocking">
            <summary>
            Index lookup strategy for subqueries.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategyCoercing">
            <summary>
            Index lookup strategy that coerces the key values before performing a lookup.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategyExpr">
            <summary>Index lookup strategy for subqueries. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategyExpr.#ctor(System.Int32,System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprEvaluator},com.espertech.esper.epl.join.table.PropertyIndexedEventTable)">
            <summary>Ctor. </summary>
            <param name="index">is the table carrying the data to lookup into</param>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategyExpr.GetKeys(com.espertech.esper.client.EventBean[],com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Get the index lookup keys.
            </summary>
            <param name="eventsPerStream">is the events for each stream</param>
            <param name="context">The context.</param>
            <returns>key object</returns>
        </member>
        <member name="P:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategyExpr.Index">
            <summary>Returns index to look up in. </summary>
            <value>index to use</value>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategyCoercingFactory">
            <summary>
            Index lookup strategy that coerces the key values before performing a lookup.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategyExprFactory">
            <summary>
            Index lookup strategy for subqueries.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategyCoercingNW">
            <summary>Index lookup strategy that coerces the key values before performing a lookup. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategyExprNW">
            <summary>Index lookup strategy for subqueries. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategyExprNW.#ctor(com.espertech.esper.epl.expression.ExprEvaluator[],com.espertech.esper.epl.join.table.PropertyIndexedEventTable)">
            <summary>
            Ctor.
            </summary>
            <param name="evaluators">The evaluators.</param>
            <param name="index">is the table carrying the data to lookup into</param>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategyExprNW.GetKeys(com.espertech.esper.client.EventBean[],com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Get the index lookup keys.
            </summary>
            <param name="eventsPerStream">is the events for each stream</param>
            <param name="context">The context.</param>
            <returns>key object</returns>
        </member>
        <member name="P:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategyExprNW.Index">
            <summary>Returns index to look up in. </summary>
            <value>index to use</value>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategyLocking">
            <summary>Index lookup strategy for subqueries. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategyProp">
            <summary>Index lookup strategy for subqueries. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategyProp.KeyStreamNums">
            <summary>Stream numbers to get key values from. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategyProp.PropertyGetters">
            <summary>Getters to use to get key values. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategyProp.#ctor(System.Int32[],com.espertech.esper.client.EventPropertyGetter[],com.espertech.esper.epl.join.table.PropertyIndexedEventTable)">
            <summary>
            Ctor.
            </summary>
            <param name="keyStreamNums">The key stream nums.</param>
            <param name="propertyGetters">The property getters.</param>
            <param name="index">is the table carrying the data to lookup into</param>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategyProp.GetKeys(com.espertech.esper.client.EventBean[])">
            <summary>Get the index lookup keys. </summary>
            <param name="eventsPerStream">is the events for each stream</param>
            <returns>key object</returns>
        </member>
        <member name="P:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategyProp.Index">
            <summary>Returns index to look up in. </summary>
            <value>index to use</value>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategyPropFactory">
            <summary>Index lookup strategy for subqueries. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategyPropFactory.KeyStreamNums">
            <summary>Stream numbers to get key values from. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategyPropFactory.PropertyGetters">
            <summary>Getters to use to get key values. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategyPropFactory.#ctor(System.Boolean,com.espertech.esper.client.EventType[],System.Int32[],System.String[])">
            <summary>
            Ctor.
            </summary>
            <param name="isNWOnTrigger">if set to <c>true</c> [is NW on trigger].</param>
            <param name="eventTypes">is the event types per stream</param>
            <param name="keyStreamNumbers">is the stream number per property</param>
            <param name="properties">is the key properties</param>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategyPropFactory.GetProperties">
            <summary>Returns properties to use from lookup event to look up in index. </summary>
            <returns>properties to use from lookup event</returns>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategySingleCoercing">
            <summary>
            Index lookup strategy that coerces the key values before performing a lookup.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategySingleExpr">
            <summary>Index lookup strategy for subqueries. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategySingleExpr._evaluator">
            <summary>Stream numbers to get key values from. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategySingleExpr.#ctor(System.Int32,com.espertech.esper.epl.expression.ExprEvaluator,com.espertech.esper.epl.join.table.PropertyIndexedEventTableSingle)">
            <summary>
            Ctor.
            </summary>
            <param name="streamCountOuter">The stream count outer.</param>
            <param name="evaluator">The evaluator.</param>
            <param name="index">is the table carrying the data to lookup into</param>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategySingleExpr.GetKey(com.espertech.esper.client.EventBean[],com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Get the index lookup keys.
            </summary>
            <param name="eventsPerStream">is the events for each stream</param>
            <param name="context">The context.</param>
            <returns>key object</returns>
        </member>
        <member name="P:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategySingleExpr.Index">
            <summary>Returns index to look up in. </summary>
            <value>index to use</value>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategySingleCoercingFactory">
            <summary>
            Index lookup strategy that coerces the key values before performing a lookup.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategySingleExprFactory">
            <summary>
            Index lookup strategy for subqueries.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategySingleCoercingFactory.#ctor(System.Boolean,System.Int32,com.espertech.esper.epl.lookup.SubordPropHashKey,System.Type)">
            <summary>Ctor. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategySingleCoercingNW">
            <summary>
            Index lookup strategy that coerces the key values before performing a lookup.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategySingleExprNW">
            <summary>
            Index lookup strategy for subqueries.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategySingleExprNW.Evaluator">
            <summary>Stream numbers to get key values from. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategySingleExprNW.GetKey(com.espertech.esper.client.EventBean[],com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Get the index lookup keys.
            </summary>
            <param name="eventsPerStream">is the events for each stream</param>
            <param name="context">The context.</param>
            <returns>key object</returns>
        </member>
        <member name="P:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategySingleExprNW.Index">
            <summary>Index to look up in. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategySingleProp">
            <summary>
            Index lookup strategy for subqueries.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategySingleProp._keyStreamNum">
            <summary>Stream numbers to get key values from. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategySingleProp._propertyGetter">
            <summary>Getters to use to get key values. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategySingleProp.#ctor(System.Int32,com.espertech.esper.client.EventPropertyGetter,com.espertech.esper.epl.join.table.PropertyIndexedEventTableSingle)">
            <summary>
            Ctor.
            </summary>
            <param name="keyStreamNum">is the stream number per property</param>
            <param name="propertyGetter">The property getter.</param>
            <param name="index">is the table carrying the data to lookup into</param>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategySingleProp.GetKey(com.espertech.esper.client.EventBean[])">
            <summary>Get the index lookup keys. </summary>
            <param name="eventsPerStream">is the events for each stream</param>
            <returns>key object</returns>
        </member>
        <member name="P:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategySingleProp.Index">
            <summary>Returns index to look up in. </summary>
            <value>index to use</value>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategySinglePropFactory">
            <summary>
            Index lookup strategy for subqueries.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategySinglePropFactory._keyStreamNum">
            <summary>Stream numbers to get key values from. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategySinglePropFactory._propertyGetter">
            <summary>Getters to use to get key values. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategySinglePropFactory.#ctor(System.Boolean,com.espertech.esper.client.EventType[],System.Int32,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="isNWOnTrigger">if set to <c>true</c> [is NW on trigger].</param>
            <param name="eventTypes">is the event types per stream</param>
            <param name="keyStreamNum">is the stream number per property</param>
            <param name="property">is the key properties</param>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategySinglePropUnique">
            <summary>Index lookup strategy for subqueries. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategySinglePropUnique.KeyStreamNum">
            <summary>Stream numbers to get key values from. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategySinglePropUnique.PropertyGetter">
            <summary>Getters to use to get key values. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategySinglePropUnique.GetKey(com.espertech.esper.client.EventBean[])">
            <summary>Get the index lookup keys. </summary>
            <param name="eventsPerStream">is the events for each stream</param>
            <returns>key object</returns>
        </member>
        <member name="P:com.espertech.esper.epl.lookup.SubordIndexedTableLookupStrategySinglePropUnique.Index">
            <summary>Returns index to look up in. </summary>
            <value>index to use</value>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.SubordPropHashKey">
            <summary>Holds property information for joined properties in a lookup. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.SubordPropUtil.GetKeyStreamNums(System.Collections.Generic.ICollection{com.espertech.esper.epl.lookup.SubordPropHashKey})">
            <summary>Returns the key stream numbers. </summary>
            <param name="descList">a list of descriptors</param>
            <returns>key stream numbers</returns>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.SubordPropUtil.GetKeyProperties(System.Collections.Generic.ICollection{com.espertech.esper.epl.lookup.SubordPropHashKey})">
            <summary>Returns the key property names. </summary>
            <param name="descList">a list of descriptors</param>
            <returns>key property names</returns>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.SubordPropUtil.GetKeyProperties(com.espertech.esper.epl.lookup.SubordPropHashKey[])">
            <summary>Returns the key property names. </summary>
            <param name="descList">a list of descriptors</param>
            <returns>key property names</returns>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.SubordPropUtil.GetCoercionTypes(System.Collections.Generic.ICollection{com.espertech.esper.epl.lookup.SubordPropHashKey})">
            <summary>Returns the key coercion types. </summary>
            <param name="descList">a list of descriptors</param>
            <returns>key coercion types</returns>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.SubordPropUtil.GetCoercionTypes(com.espertech.esper.epl.lookup.SubordPropHashKey[])">
            <summary>Returns the key coercion types. </summary>
            <param name="descList">a list of descriptors</param>
            <returns>key coercion types</returns>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.SubordSortedTableLookupStrategy">
            <summary>
            Index lookup strategy for subqueries.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.lookup.SubordSortedTableLookupStrategy.#ctor(com.espertech.esper.epl.join.exec.sorted.SortedAccessStrategy,com.espertech.esper.epl.join.table.PropertySortedEventTable)">
            <summary>
            Ctor.
            </summary>
            <param name="strategy">The strategy.</param>
            <param name="index">is the table carrying the data to lookup into</param>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.SubordSortedTableLookupStrategyFactory">
            <summary>Index lookup strategy for subqueries. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.lookup.SubordTableLookupStrategyNullRow">
            <summary>
            Implementation for a table lookup strategy that returns exactly one row but leaves
            that row as an undefined value.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.metric.MetricEventRouter">
            <summary>
            Interface for routing metric events for processing.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.metric.MetricEventRouter.Route(com.espertech.esper.client.metric.MetricEvent)">
            <summary>Process metric event. </summary>
            <param name="metricEvent">metric event to process</param>
        </member>
        <member name="T:com.espertech.esper.epl.metric.MetricExec">
            <summary>
            Interface for producing a metric events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.metric.MetricExec.Execute(com.espertech.esper.epl.metric.MetricExecutionContext)">
            <summary>Execute the production of metric events. </summary>
            <param name="context">provides services and scheduling</param>
        </member>
        <member name="T:com.espertech.esper.epl.metric.MetricExecEngine">
            <summary>Metrics execution producing engine metric events. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.metric.MetricExecEngine.#ctor(com.espertech.esper.epl.metric.MetricEventRouter,System.String,com.espertech.esper.epl.metric.MetricScheduleService,System.Int64)">
            <summary>Ctor. </summary>
            <param name="metricEventRouter">for routing metric events</param>
            <param name="engineURI">engine uri</param>
            <param name="metricScheduleService">for scheduling a new execution</param>
            <param name="interval">for rescheduling the execution</param>
        </member>
        <member name="P:com.espertech.esper.epl.metric.MetricExecEngine.Interval">
            <summary>Returns reporting interval. </summary>
            <value>reporting interval</value>
        </member>
        <member name="T:com.espertech.esper.epl.metric.MetricExecStatement">
            <summary>Metrics execution producing statement metric events. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.metric.MetricExecStatement.#ctor(com.espertech.esper.epl.metric.MetricEventRouter,com.espertech.esper.epl.metric.MetricScheduleService,System.Int64,System.Int32)">
            <summary>Ctor. </summary>
            <param name="metricEventRouter">for routing metric events</param>
            <param name="metricScheduleService">for scheduling a new execution</param>
            <param name="interval">for rescheduling the execution</param>
            <param name="statementGroup">group number of statement group</param>
        </member>
        <member name="P:com.espertech.esper.epl.metric.MetricExecStatement.Interval">
            <summary>
            Set a new interval, cancels the existing schedule, re-establishes the new schedule if the interval is a positive number.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.metric.MetricExecutionContext">
            <summary>Execution context for metrics reporting executions. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.metric.MetricExecutionContext.#ctor(com.espertech.esper.core.service.EPServicesContext,com.espertech.esper.client.EPRuntime,com.espertech.esper.epl.metric.StatementMetricRepository)">
            <summary>Ctor. </summary>
            <param name="epServicesContext">services context</param>
            <param name="runtime">for routing events</param>
            <param name="statementMetricRepository">for getting statement data</param>
        </member>
        <member name="P:com.espertech.esper.epl.metric.MetricExecutionContext.Services">
            <summary>Returns services. </summary>
            <value>services</value>
        </member>
        <member name="P:com.espertech.esper.epl.metric.MetricExecutionContext.Runtime">
            <summary>Returns runtime </summary>
            <value>runtime</value>
        </member>
        <member name="P:com.espertech.esper.epl.metric.MetricExecutionContext.StatementMetricRepository">
            <summary>Returns statement metric holder </summary>
            <value>holder for metrics</value>
        </member>
        <member name="T:com.espertech.esper.epl.metric.MetricReportingPath">
            <summary>
            Global bool for enabling and disable metrics reporting.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.metric.MetricReportingPath.IsMetricsEnabled">
            <summary>Public access. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.metric.MetricReportingService">
            <summary>
            Metrics reporting service for instrumentation data publishing, if enabled.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.metric.MetricReportingService.SetContext(com.espertech.esper.client.EPRuntime,com.espertech.esper.core.service.EPServicesContext)">
            <summary>Sets runtime and services. </summary>
            <param name="runtime">runtime</param>
            <param name="servicesContext">services</param>
        </member>
        <member name="M:com.espertech.esper.epl.metric.MetricReportingService.ProcessTimeEvent(System.Int64)">
            <summary>Indicates current engine time. </summary>
            <param name="currentTime">engine time</param>
        </member>
        <member name="M:com.espertech.esper.epl.metric.MetricReportingService.AccountTime(com.espertech.esper.epl.metric.StatementMetricHandle,System.Int64,System.Int64,System.Int32)">
            <summary>
            Account for statement execution time.
            </summary>
            <param name="metricsHandle">statement handle</param>
            <param name="cpuTime">The cpu time.</param>
            <param name="wallTime">The wall time.</param>
            <param name="numInput">The num input.</param>
        </member>
        <member name="M:com.espertech.esper.epl.metric.MetricReportingService.AccountOutput(com.espertech.esper.epl.metric.StatementMetricHandle,System.Int32,System.Int32)">
            <summary>Account for statement output row counting. </summary>
            <param name="handle">statement handle</param>
            <param name="numIStream">number of insert stream rows</param>
            <param name="numRStream">number of remove stream rows</param>
        </member>
        <member name="M:com.espertech.esper.epl.metric.MetricReportingService.GetStatementHandle(System.String,System.String)">
            <summary>Returns for a new statement a handle for later accounting. </summary>
            <param name="statementId">statement id</param>
            <param name="statementName">statement name</param>
            <returns>handle</returns>
        </member>
        <member name="M:com.espertech.esper.epl.metric.MetricReportingService.SetMetricsReportingInterval(System.String,System.Int64)">
            <summary>Change the reporting interval for the given statement group name. </summary>
            <param name="stmtGroupName">group name</param>
            <param name="newInterval">new interval, or zero or negative value to disable reporting</param>
        </member>
        <member name="M:com.espertech.esper.epl.metric.MetricReportingService.SetMetricsReportingStmtDisabled(System.String)">
            <summary>Disable metrics reporting for statement. </summary>
            <param name="statementName">statement name</param>
        </member>
        <member name="M:com.espertech.esper.epl.metric.MetricReportingService.SetMetricsReportingStmtEnabled(System.String)">
            <summary>Enable metrics reporting for statement. </summary>
            <param name="statementName">statement name</param>
        </member>
        <member name="M:com.espertech.esper.epl.metric.MetricReportingService.SetMetricsReportingEnabled">
            <summary>Enables metrics reporting globally. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.metric.MetricReportingService.SetMetricsReportingDisabled">
            <summary>Disables metrics reporting globally. </summary>
        </member>
        <member name="P:com.espertech.esper.epl.metric.MetricReportingService.PerformanceCollector">
            <summary>
            Gets the performance collector.
            </summary>
            <value>The performance collector.</value>
        </member>
        <member name="T:com.espertech.esper.epl.metric.MetricReportingServiceImpl">
            <summary>
            Metrics reporting.
            <para/>
            Reports for all statements even if not in a statement group, i.e. statement in default group.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.metric.MetricReportingServiceSPI">
            <summary>SPI for metrics activity. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.metric.MetricReportingServiceSPI.AddStatementResultListener(com.espertech.esper.core.service.StatementResultListener)">
            <summary>Add stmt result listener. </summary>
            <param name="listener">to add</param>
        </member>
        <member name="M:com.espertech.esper.epl.metric.MetricReportingServiceSPI.RemoveStatementResultListener(com.espertech.esper.core.service.StatementResultListener)">
            <summary>Remove stmt result listener. </summary>
            <param name="listener">to remove</param>
        </member>
        <member name="P:com.espertech.esper.epl.metric.MetricReportingServiceSPI.StatementOutputHooks">
            <summary>Returns output hooks. </summary>
            <value>hooks.</value>
        </member>
        <member name="M:com.espertech.esper.epl.metric.MetricReportingServiceImpl.#ctor(com.espertech.esper.client.ConfigurationMetricsReporting,System.String)">
            <summary>Ctor. </summary>
            <param name="specification">configuration</param>
            <param name="engineUri">engine URI</param>
        </member>
        <member name="P:com.espertech.esper.epl.metric.MetricReportingServiceImpl.PerformanceCollector">
            <summary>
            Gets the performance collector.
            </summary>
            <value>The performance collector.</value>
        </member>
        <member name="T:com.espertech.esper.epl.metric.MetricScheduleService">
            <summary>
            Scheduling for metrics execution is handled by this service. 
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.metric.MetricTimeSource">
            <summary>
            Interface for the time of the metrics generation.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.metric.MetricTimeSource.CurrentTime">
            <summary>Returns current time for metrics reporting. </summary>
            <returns>metrics current time</returns>
        </member>
        <member name="M:com.espertech.esper.epl.metric.MetricScheduleService.#ctor">
            <summary>Constructor. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.metric.MetricScheduleService.Clear">
            <summary>Clears the schedule. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.metric.MetricScheduleService.Add(System.Int64,com.espertech.esper.epl.metric.MetricExec)">
            <summary>Adds an execution to the schedule. </summary>
            <param name="afterMSec">offset to add at</param>
            <param name="execution">execution to add</param>
        </member>
        <member name="M:com.espertech.esper.epl.metric.MetricScheduleService.Evaluate(System.Collections.Generic.ICollection{com.espertech.esper.epl.metric.MetricExec})">
            <summary>Evaluate the schedule and populates executions, if any. </summary>
            <param name="handles">to populate</param>
        </member>
        <member name="M:com.espertech.esper.epl.metric.MetricScheduleService.Remove(com.espertech.esper.epl.metric.MetricExec)">
            <summary>Remove from schedule an execution. </summary>
            <param name="metricExec">to remove</param>
        </member>
        <member name="P:com.espertech.esper.epl.metric.MetricScheduleService.CurrentTime">
            <summary>
            Gets or sets the current time.
            </summary>
            <value>The current time.</value>
        </member>
        <member name="P:com.espertech.esper.epl.metric.MetricScheduleService.NearestTime">
            <summary>Returns nearest scheduled time. </summary>
            <returns>nearest scheduled time, or null if none/empty schedule.</returns>
        </member>
        <member name="T:com.espertech.esper.epl.metric.MetricsExecutor">
            <summary>Executor for metrics executions. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.metric.MetricsExecutor.Execute(com.espertech.esper.epl.metric.MetricExec,com.espertech.esper.epl.metric.MetricExecutionContext)">
            <summary>Execute a metrics execution. </summary>
            <param name="execution">to execute</param>
            <param name="executionContext">context in which to execute</param>
        </member>
        <member name="T:com.espertech.esper.epl.metric.MetricsExecutorThreaded">
            <summary>
            Metrics executor relying on a cached threadpool.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.metric.MetricsExecutorThreaded.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="engineURI">engine URI</param>
        </member>
        <member name="T:com.espertech.esper.epl.metric.MetricsExecutorUnthreaded">
            <summary>Metrics executor executing in-thread. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.metric.StatementMetricArray">
            <summary>
            Holder for statement group's statement metrics.
            <para/>
            Changes to StatementMetric instances must be done in a read-lock:
            <pre>
            getRwLock.readLock.Lock()
            metric = GetAddMetric(index) metric.AccountFor(cpu, wall, etc)
            getRwLock.readLock.unLock()
            </pre>
             namespace com.espertech.esper.epl.metric {
            <para/>
            All other changes are done under write lock for this class.
            <para/>
            This is a collection backed by an array that grows by 50% each time expanded, maintains
            a free/busy list of statement names, maintains an element number of last used element.
            <para/>
            The flush operaton copies the complete array, thereby keeping array size. Statement names
            are only removed on the next flush.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.metric.StatementMetricArray.#ctor(System.String,System.String,System.Int32,System.Boolean)">
            <summary>Ctor. </summary>
            <param name="engineURI">engine URI</param>
            <param name="name">name of statement group</param>
            <param name="initialSize">initial size of array</param>
            <param name="isReportInactive">true to indicate to report on inactive statements</param>
        </member>
        <member name="M:com.espertech.esper.epl.metric.StatementMetricArray.RemoveStatement(System.String)">
            <summary>
            Remove a statement.
            <para/>
            Next flush actually frees the slot that this statement occupied.
            </summary>
            <param name="statementName">to remove</param>
        </member>
        <member name="M:com.espertech.esper.epl.metric.StatementMetricArray.AddStatementGetIndex(System.String)">
            <summary>
            Adds a statement and returns the index added at.
            <para/>
            May reuse an empty slot, grow the underlying array, or append to the end.
            </summary>
            <param name="statementName">to add</param>
            <returns>index added to</returns>
        </member>
        <member name="M:com.espertech.esper.epl.metric.StatementMetricArray.FlushMetrics">
            <summary>
            Flushes the existing metrics via array copy and swap.
            <para/>
            May report all statements (empty and non-empty slots) and thereby null values. 
            <para/>
            Returns null to indicate no reports to do.
            </summary>
            <returns>metrics</returns>
        </member>
        <member name="M:com.espertech.esper.epl.metric.StatementMetricArray.GetAddMetric(System.Int32)">
            <summary>Returns an existing or creates a new statement metric for the index. </summary>
            <param name="index">of statement</param>
            <returns>metric to modify under read lock</returns>
        </member>
        <member name="P:com.espertech.esper.epl.metric.StatementMetricArray.RWLock">
            <summary>Returns the read-write lock, for read-lock when modifications are made. </summary>
            <returns>lock</returns>
        </member>
        <member name="P:com.espertech.esper.epl.metric.StatementMetricArray.SizeLastElement">
            <summary>Returns maximum collection size (last used element), which may not truely reflect the number of actual statements held as some slots may empty up when statements are removed. </summary>
            <returns>known maximum size</returns>
        </member>
        <member name="T:com.espertech.esper.epl.metric.StatementMetricHandle">
            <summary>Handle for statements metric reporting by runtime. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.metric.StatementMetricHandle.#ctor(System.Int32,System.Int32)">
            <summary>Ctor. </summary>
            <param name="groupNum">group number, zero for default group</param>
            <param name="index">index slot</param>
        </member>
        <member name="P:com.espertech.esper.epl.metric.StatementMetricHandle.GroupNum">
            <summary>Returns group number for statement. </summary>
            <returns>group number</returns>
        </member>
        <member name="P:com.espertech.esper.epl.metric.StatementMetricHandle.Index">
            <summary>Returns slot number of metric. </summary>
            <returns>metric index</returns>
        </member>
        <member name="P:com.espertech.esper.epl.metric.StatementMetricHandle.IsEnabled">
            <summary>Gets or sets an indicator that if true is enabled for statement. </summary>
            <returns>enabled flag</returns>
        </member>
        <member name="M:com.espertech.esper.epl.metric.StatementMetricHandleExtension.Call(com.espertech.esper.epl.metric.StatementMetricHandle,com.espertech.esper.epl.metric.PerformanceCollector,System.Action,System.Int32)">
            <summary>
            Calls the specified observable call.
            </summary>
            <param name="statementMetricHandle">The statement metric handle.</param>
            <param name="perfCollector">The perf collector.</param>
            <param name="observableCall">The observable call.</param>
            <param name="numInput">The num input.</param>
        </member>
        <member name="T:com.espertech.esper.epl.metric.StatementMetricRepository">
            <summary>
            A repository for all statement metrics that organizes statements into statement groups. 
            <para /> 
            At a minimum there is one group (the default) of index zero. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.metric.StatementMetricRepository.#ctor(System.String,com.espertech.esper.client.ConfigurationMetricsReporting)">
            <summary>Ctor. </summary>
            <param name="engineURI">engine URI</param>
            <param name="specification">specifies statement groups</param>
        </member>
        <member name="M:com.espertech.esper.epl.metric.StatementMetricRepository.AddStatement(System.String)">
            <summary>Add a statement, inspecting the statement name and adding it to a statement group or the default group, if none. </summary>
            <param name="stmtName">name to inspect</param>
            <returns>handle for statement</returns>
        </member>
        <member name="M:com.espertech.esper.epl.metric.StatementMetricRepository.RemoveStatement(System.String)">
            <summary>Remove statement. </summary>
            <param name="stmtName">to remove</param>
        </member>
        <member name="M:com.espertech.esper.epl.metric.StatementMetricRepository.AccountTimes(com.espertech.esper.epl.metric.StatementMetricHandle,System.Int64,System.Int64,System.Int32)">
            <summary>
            Account statement times.
            </summary>
            <param name="handle">statement handle</param>
            <param name="cpu">time</param>
            <param name="wall">time</param>
            <param name="numInput">The num input.</param>
        </member>
        <member name="M:com.espertech.esper.epl.metric.StatementMetricRepository.AccountOutput(com.espertech.esper.epl.metric.StatementMetricHandle,System.Int32,System.Int32)">
            <summary>Account row output. </summary>
            <param name="handle">statement handle</param>
            <param name="numIStream">num rows insert stream</param>
            <param name="numRStream">num rows remove stream</param>
        </member>
        <member name="M:com.espertech.esper.epl.metric.StatementMetricRepository.ReportGroup(System.Int32)">
            <summary>Report for a given statement group. </summary>
            <param name="group">to report</param>
            <returns>metrics or null if none</returns>
        </member>
        <member name="T:com.espertech.esper.epl.named.IndexedPropDesc">
            <summary>
            Holds property information for joined properties in a lookup.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.IndexedPropDesc.#ctor(System.String,System.Type)">
            <summary>Ctor. </summary>
            <param name="indexPropName">is the property name of the indexed field</param>
            <param name="coercionType">is the type to coerce to</param>
        </member>
        <member name="M:com.espertech.esper.epl.named.IndexedPropDesc.GetIndexProperties(com.espertech.esper.epl.named.IndexedPropDesc[])">
            <summary>Returns the index property names given an array of descriptors. </summary>
            <param name="descList">descriptors of joined properties</param>
            <returns>array of index property names</returns>
        </member>
        <member name="M:com.espertech.esper.epl.named.IndexedPropDesc.GetCoercionTypes(com.espertech.esper.epl.named.IndexedPropDesc[])">
            <summary>Returns the key coercion types. </summary>
            <param name="descList">a list of descriptors</param>
            <returns>key coercion types</returns>
        </member>
        <member name="M:com.espertech.esper.epl.named.IndexedPropDesc.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:com.espertech.esper.epl.named.IndexedPropDesc.IndexPropName">
            <summary>Returns the property name of the indexed field. </summary>
            <value>property name of indexed field</value>
        </member>
        <member name="P:com.espertech.esper.epl.named.IndexedPropDesc.CoercionType">
            <summary>Returns the coercion type of key to index field. </summary>
            <value>type to coerce to</value>
        </member>
        <member name="M:com.espertech.esper.epl.named.IndexMultiKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.epl.named.IndexMultiKey.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.epl.named.IndexMultiKey.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.epl.named.ProxyNamedWindowConsumerCallback.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.named.ProxyNamedWindowConsumerCallback"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.ProxyNamedWindowConsumerCallback.#ctor(System.Func{System.Collections.Generic.IEnumerator{com.espertech.esper.client.EventBean}},System.Action{com.espertech.esper.epl.named.NamedWindowConsumerView})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.named.ProxyNamedWindowConsumerCallback"/> class.
            </summary>
            <param name="procGetEnumerator">The get enumerator.</param>
            <param name="procStopped">The stopped.</param>
        </member>
        <member name="M:com.espertech.esper.epl.named.ProxyNamedWindowConsumerCallback.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.named.ProxyNamedWindowConsumerCallback.Stopped(com.espertech.esper.epl.named.NamedWindowConsumerView)">
            <summary>
            Stoppeds the specified named window consumer view.
            </summary>
            <param name="namedWindowConsumerView">The named window consumer view.</param>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowConsumerDispatchUnit">
            <summary>
            Holds a unit of dispatch that is a result of a named window processing incoming or timer events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowConsumerDispatchUnit.#ctor(com.espertech.esper.epl.named.NamedWindowDeltaData,System.Collections.Generic.IDictionary{com.espertech.esper.core.context.util.EPStatementAgentInstanceHandle,System.Collections.Generic.IList{com.espertech.esper.epl.named.NamedWindowConsumerView}})">
            <summary>
            Ctor.
            </summary>
            <param name="deltaData">the insert and remove stream posted by the named window</param>
            <param name="dispatchTo">the list of consuming statements, and for each the list of consumer views</param>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowConsumerDispatchUnit.DeltaData">
            <summary>
            Returns the data to dispatch.
            </summary>
            <value>dispatch insert and remove stream events</value>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowConsumerDispatchUnit.DispatchTo">
            <summary>
            Returns the destination of the dispatch: a map of statements and their consuming views (one or multiple)
            </summary>
            <value>map of statement to consumer views</value>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowConsumerView">
            <summary>
            Represents a consumer of a named window that selects from a named window via a from-clause.
            <para/> 
            The view simply dispatches directly to child views, and keeps the last new event for iteration.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowConsumerView.#ctor(com.espertech.esper.epl.expression.ExprEvaluator[],com.espertech.esper.epl.property.PropertyEvaluator,com.espertech.esper.client.EventType,com.espertech.esper.epl.named.NamedWindowConsumerCallback,com.espertech.esper.epl.expression.ExprEvaluatorContext,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="filterList">is a list of filter expressions</param>
            <param name="optPropertyEvaluator">The opt property evaluator.</param>
            <param name="eventType">the event type of the named window</param>
            <param name="consumerCallback">The consumer callback.</param>
            <param name="exprEvaluatorContext">context for expression evalauation</param>
            <param name="audit">if set to <c>true</c> [audit].</param>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowDeltaData">
            <summary>
            A holder for events posted by a named window as an insert and remove stream.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowDeltaData.#ctor(com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean[])">
            <summary>Ctor.</summary>
            <param name="newData">is the insert stream events, or null if none</param>
            <param name="oldData">is the remove stream events, or null if none</param>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowDeltaData.#ctor(com.espertech.esper.epl.named.NamedWindowDeltaData,com.espertech.esper.epl.named.NamedWindowDeltaData)">
            <summary>Ctor aggregates two deltas into a single delta.</summary>
            <param name="deltaOne">
            is the insert and remove stream events of a first result
            </param>
            <param name="deltaTwo">
            is the insert and remove stream events of a second result
            </param>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowDeltaData.NewData">
            <summary>Returns the insert stream events.</summary>
            <returns>insert stream</returns>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowDeltaData.OldData">
            <summary>Returns the remove stream events.</summary>
            <returns>remove stream</returns>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowIndexRepository">
            <summary>
            A repository of index tables for use with a single named window and all it's deleting 
            statements that may use the indexes to correlate triggering events with indexed events of 
            the named window.
            <para/>
            Maintains index tables and keeps a reference count for user. Allows reuse of indexes for
            multiple deleting statements.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowIndexRepository.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowIndexRepository.RemoveTableReference(com.espertech.esper.epl.join.table.EventTable)">
            <summary>Remove a reference to an index table, decreasing its reference count. If the table is no longer used, discard it and no longer update events into the index. </summary>
            <param name="table">to remove a reference to</param>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowIndexRepository.Dispose">
            <summary>Destroy indexes. </summary>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowIndexRepository.Tables">
            <summary>Returns a list of current index tables in the repository. </summary>
            <value>index tables</value>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowLifecycleEvent">
            <summary>Event indicating named window lifecycle management. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowLifecycleEvent.#ctor(System.String,com.espertech.esper.epl.named.NamedWindowProcessor,com.espertech.esper.epl.named.NamedWindowLifecycleEvent.LifecycleEventType,System.Object[])">
            <summary>
            Ctor.
            </summary>
            <param name="name">is the name of the named window</param>
            <param name="processor">instance for processing the named window contents</param>
            <param name="eventType">the type of event</param>
            <param name="paramList">event parameters</param>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowLifecycleEvent.Name">
            <summary>Returns the named window name. </summary>
            <value>name</value>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowLifecycleEvent.Processor">
            <summary>Return the processor originating the event. </summary>
            <value>processor</value>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowLifecycleEvent.EventType">
            <summary>Returns the event type. </summary>
            <value>type of event</value>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowLifecycleEvent.Params">
            <summary>Returns event parameters. </summary>
            <value>paramList</value>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowLifecycleEvent.LifecycleEventType">
            <summary>Event types. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.named.NamedWindowLifecycleEvent.LifecycleEventType.CREATE">
            <summary>Named window created. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.named.NamedWindowLifecycleEvent.LifecycleEventType.DESTROY">
            <summary>Named window removed. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowLifecycleObserver">
            <summary>Observer named window events. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowLifecycleObserver.Observe(com.espertech.esper.epl.named.NamedWindowLifecycleEvent)">
            <summary>Observer named window changes. </summary>
            <param name="theEvent">indicates named window action</param>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowLookupStrategy">
            <summary>
            A deletion strategy is for use with named window in on-delete statements and encapsulates
            the strategy for resolving one or more events arriving in the on-clause of an on-delete 
            statement to one or more events to be deleted from the named window.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowLookupStrategy.Lookup(com.espertech.esper.client.EventBean[],com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Determines the events to be deleted from a named window. </summary>
            <param name="newData">is the correlation events</param>
            <returns>the events to delete from the named window</returns>
            <param name="exprEvaluatorContext">expression evaluation context</param>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowLookupStrategyAllRows">
            <summary>
            Deletes from a named window all events simply using the named window's data window iterator.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowLookupStrategyAllRows.#ctor(System.Collections.Generic.IEnumerable{com.espertech.esper.client.EventBean})">
            <summary>Ctor. </summary>
            <param name="source">iterator of the data window under the named window</param>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowLookupStrategyIndexed">
            <summary>Uses an index to determine event to be deleted or selected from a named window. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowLookupStrategyIndexed.#ctor(com.espertech.esper.epl.expression.ExprEvaluator,com.espertech.esper.epl.lookup.SubordTableLookupStrategy)">
            <summary>Ctor. </summary>
            <param name="joinExpr">the validated where clause of the on-delete</param>
            <param name="tableLookupStrategy">the strategy for looking up in an index the matching events using correlation</param>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowLookupStrategyIndexedUnfiltered">
            <summary>Uses an index to determine event to be deleted or selected from a named window. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowLookupStrategyIndexedUnfiltered.#ctor(com.espertech.esper.epl.lookup.SubordTableLookupStrategy)">
            <summary>Ctor. </summary>
            <param name="tableLookupStrategy">the strategy for looking up in an index the matching events using correlation</param>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowLookupStrategyTableScan">
            <summary>
            Determine events to be deleted from a named window using the where-clause and full table scan.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowLookupStrategyTableScan.#ctor(com.espertech.esper.epl.expression.ExprEvaluator,System.Collections.Generic.IEnumerable{com.espertech.esper.client.EventBean})">
            <summary>Ctor. </summary>
            <param name="joinExpr">is the where clause</param>
            <param name="iterable">is the named window's data window iterator</param>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowOnDeleteView">
            <summary>View for the on-delete statement that handles removing events from a named window. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowOnExprBaseView">
            <summary>
            View for the on-delete statement that handles removing events from a named window.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.named.NamedWindowOnExprBaseView._lookupStrategy">
            <summary>The event type of the events hosted in the named window. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.named.NamedWindowOnExprBaseView.RootView">
            <summary>The root view accepting removals (old data). </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowOnExprBaseView.#ctor(com.espertech.esper.epl.named.NamedWindowLookupStrategy,com.espertech.esper.epl.named.NamedWindowRootViewInstance,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Ctor.
            </summary>
            <param name="lookupStrategy">for handling trigger events to determine deleted events</param>
            <param name="rootView">to indicate which events to delete</param>
            <param name="exprEvaluatorContext">context for expression evalauation</param>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowOnExprBaseView.HandleMatching(com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean[])">
            <summary>
            Implemented by on-trigger views to action on the combination of trigger and matching events in the named window.
            </summary>
            <param name="triggerEvents">is the trigger events (usually 1)</param>
            <param name="matchingEvents">is the matching events retrieved via lookup strategy</param>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowOnExprBaseView.ExprEvaluatorContext">
            <summary>returns expr context. </summary>
            <value>context</value>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowOnDeleteViewFactory">
            <summary>View for the on-delete statement that handles removing events from a named window. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowOnExprBaseViewFactory">
            <summary>
            View for the on-delete statement that handles removing events from a named window.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowOnExprFactory">
            <summary>View for the on-delete statement that handles removing events from a named window. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowOnExprFactoryFactory">
            <summary>View for the on-delete statement that handles removing events from a named window. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowOnMergeHelper">
            <summary>Factory for handles for updates/inserts/deletes/select </summary>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowOnMergeView">
            <summary>View for the on-delete statement that handles removing events from a named window. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowOnMergeViewFactory">
            <summary>View for the on-delete statement that handles removing events from a named window. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowOnSelectView">
            <summary>
            View for the on-select statement that handles selecting events from a named window.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowOnSelectViewFactory">
            <summary>
            View for the on-select statement that handles selecting events from a named window.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowOnUpdateView">
            <summary>
            View for the on-delete statement that handles removing events from a named window.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowOnUpdateViewFactory">
            <summary>View for the on-delete statement that handles removing events from a named window. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowProcessor">
            <summary>
            An instance of this class is associated with a specific named window. The processor provides the views to create-window, on-delete statements and statements selecting from a named window.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowProcessor.#ctor(System.String,com.espertech.esper.epl.named.NamedWindowService,System.String,System.Boolean,com.espertech.esper.client.EventType,com.espertech.esper.core.service.StatementResultService,com.espertech.esper.events.vaevent.ValueAddEventProcessor,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,com.espertech.esper.epl.metric.MetricReportingService,System.Boolean,System.Boolean,com.espertech.esper.epl.metric.StatementMetricHandle,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Ctor.
            </summary>
            <param name="namedWindowName">Name of the named window.</param>
            <param name="namedWindowService">service for dispatching results</param>
            <param name="contextName">Name of the context.</param>
            <param name="singleInstanceContext">if set to <c>true</c> [single instance context].</param>
            <param name="eventType">the type of event held by the named window</param>
            <param name="statementResultService">for coordinating on whether insert and remove stream events should be posted</param>
            <param name="revisionProcessor">for revision processing</param>
            <param name="eplExpression">epl expression</param>
            <param name="statementName">statement name</param>
            <param name="isPrioritized">if the engine is running with prioritized execution</param>
            <param name="isEnableSubqueryIndexShare">if set to <c>true</c> [is enable subquery index share].</param>
            <param name="enableQueryPlanLog">if set to <c>true</c> [enable query plan log].</param>
            <param name="metricReportingService">The metric reporting service.</param>
            <param name="isBatchingDataWindow">if set to <c>true</c> [is batching data window].</param>
            <param name="isVirtualDataWindow">if set to <c>true</c> [is virtual data window].</param>
            <param name="statementMetricHandle">The statement metric handle.</param>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowProcessor.Dispose">
            <summary>Deletes a named window and removes any associated resources. </summary>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowProcessor.TailView">
            <summary>Returns the tail view of the named window, hooked into the view chain after the named window's data window views, as the last view. </summary>
            <value>tail view</value>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowProcessor.RootView">
            <summary>Returns the root view of the named window, hooked into the view chain before the named window's data window views, right after the filter stream that filters for insert-into events. </summary>
            <value>tail view</value>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowProcessor.NamedWindowType">
            <summary>Returns the event type of the named window. </summary>
            <value>event type</value>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowProcessor.EplExpression">
            <summary>Returns the EPL expression. </summary>
            <value>epl</value>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowProcessor.StatementName">
            <summary>Returns the statement name. </summary>
            <value>name</value>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowProcessorInstance">
            <summary>
            An instance of this class is associated with a specific named window. The processor 
            provides the views to create-window, on-delete statements and statements selecting 
            from a named window.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowProcessorInstance.Dispose">
            <summary>Deletes a named window and removes any associated resources. </summary>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowProcessorInstance.CountDataWindow">
            <summary>Returns the number of events held. </summary>
            <value>number of events</value>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowRootView">
            <summary>
            The root window in a named window plays multiple roles: It holds the indexes for 
            deleting rows, if any on-delete statement requires such indexes. Such indexes are 
            updated when events arrive, or remove from when a data window or on-delete statement 
            expires events. The view keeps track of on-delete statements their indexes used.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowRootViewInstance">
            <summary>
            The root window in a named window plays multiple roles:
                It holds the indexes for deleting rows, if any on-delete statement requires such indexes.
                Such indexes are updated when events arrive, or remove from when a data window or on-delete 
                statement expires events. The view keeps track of on-delete statements their indexes used.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowRootViewInstance.RemoveOldData(com.espertech.esper.client.EventBean[])">
            <summary>Called by tail view to indicate that the data window view exired events that must be removed from index tables. </summary>
            <param name="oldData">removed stream of the data window</param>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowRootViewInstance.AddNewData(com.espertech.esper.client.EventBean[])">
            <summary>Called by tail view to indicate that the data window view has new events that must be added to index tables. </summary>
            <param name="newData">new event</param>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowRootViewInstance.Dispose">
            <summary>Destroy and clear resources. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowRootViewInstance.Snapshot(com.espertech.esper.filter.FilterSpecCompiled,System.Attribute[])">
            <summary>Return a snapshot using index lookup filters. </summary>
            <param name="optionalFilter">to index lookup</param>
            <returns>events</returns>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowRootViewInstance.AddExplicitIndex(System.Boolean,System.String,System.String,System.Collections.Generic.IList{com.espertech.esper.epl.spec.CreateIndexItem})">
            <summary>Add an explicit index. </summary>
            <param name="unique">indicator whether unique</param>
            <param name="namedWindowName">window name</param>
            <param name="indexName">indexname</param>
            <param name="columns">properties indexed</param>
            <throws>com.espertech.esper.epl.expression.ExprValidationException if the index fails to be valid</throws>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowRootViewInstance.AddOnExpr(com.espertech.esper.epl.named.NamedWindowOnExprFactory,com.espertech.esper.core.context.util.AgentInstanceContext,com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.client.EventType,com.espertech.esper.epl.core.ResultSetProcessor)">
            <summary>
            Add an on-trigger view that, using a lookup strategy, looks up from the named window and may select or delete rows.
            </summary>
            <param name="onExprFactory">The on expr factory.</param>
            <param name="agentInstanceContext">The agent instance context.</param>
            <param name="joinExpr">The join expr.</param>
            <param name="filterEventType">Type of the filter event.</param>
            <param name="resultSetProcessor">The result set processor.</param>
            <returns>base view for on-trigger expression</returns>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowRootViewInstance.RemoveOnExpr(com.espertech.esper.epl.named.NamedWindowLookupStrategy)">
            <summary>Unregister an on-delete statement view, using the strategy as a key to remove a reference to the index table used by the strategy. </summary>
            <param name="strategy">to use for deleting events</param>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowRootViewInstance.RemoveExplicitIndex(System.String)">
            <summary>Drop an explicit index. </summary>
            <param name="indexName">to drop</param>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowRootViewInstance.DataWindowContents">
            <summary>Sets the iterator to use to obtain current named window data window contents. </summary>
            <value>iterator over events help by named window</value>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowService">
            <summary>
            Service to manage named window dispatches, locks and processors on an engine level.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowService.IsNamedWindow(System.String)">
            <summary>Returns true to indicate that the name is a named window. </summary>
            <param name="name">is the window name</param>
            <returns>true if a named window, false if not a named window</returns>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowService.AddProcessor(System.String,System.String,System.Boolean,com.espertech.esper.client.EventType,com.espertech.esper.core.service.StatementResultService,com.espertech.esper.events.vaevent.ValueAddEventProcessor,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,com.espertech.esper.epl.metric.StatementMetricHandle,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Create a new named window.
            </summary>
            <param name="name">window name</param>
            <param name="contextName">Name of the context.</param>
            <param name="singleInstanceContext">if set to <c>true</c> [single instance context].</param>
            <param name="eventType">the event type of the window</param>
            <param name="statementResultService">for coordinating on whether insert and remove stream events should be posted</param>
            <param name="revisionProcessor">handles update events</param>
            <param name="eplExpression">is the expression</param>
            <param name="statementName">the name of the statement</param>
            <param name="isPrioritized">if the engine is running with prioritized execution</param>
            <param name="isEnableSubqueryIndexShare">if set to <c>true</c> [is enable subquery index share].</param>
            <param name="isBatchingDataWindow">if set to <c>true</c> [is batching data window].</param>
            <param name="isVirtualDataWindow">if set to <c>true</c> [is virtual data window].</param>
            <param name="statementMetricHandle">The statement metric handle.</param>
            <param name="optionalUniqueKeyProps">The optional unique key props.</param>
            <returns>processor for the named window</returns>
            <throws>ViewProcessingException if the named window already exists</throws>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowService.GetProcessor(System.String)">
            <summary>Returns the processing instance for a given named window. </summary>
            <param name="name">window name</param>
            <returns>processor for the named window</returns>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowService.RemoveProcessor(System.String)">
            <summary>Upon destroy of the named window creation statement, the named window processor must be removed. </summary>
            <param name="name">is the named window name</param>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowService.Dispatch(com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Dispatch events of the insert and remove stream of named windows to consumers, as part of the main event processing or dispatch loop. </summary>
            <param name="exprEvaluatorContext">context for expression evalauation</param>
            <returns>send events to consuming statements</returns>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowService.AddDispatch(com.espertech.esper.epl.named.NamedWindowDeltaData,System.Collections.Generic.IDictionary{com.espertech.esper.core.context.util.EPStatementAgentInstanceHandle,System.Collections.Generic.IList{com.espertech.esper.epl.named.NamedWindowConsumerView}})">
            <summary>For use to add a result of a named window that must be dispatched to consuming views. </summary>
            <param name="delta">is the result to dispatch</param>
            <param name="consumers">is the destination of the dispatch, a map of statements to one or more consuming views</param>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowService.GetNamedWindowLock(System.String)">
            <summary>Returns the statement lock for the named window, to be shared with on-delete statements for the same named window. </summary>
            <param name="windowName">is the window name</param>
            <returns>the lock for the named window, or null if the window dos not yet exists</returns>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowService.AddNamedWindowLock(System.String,com.espertech.esper.compat.threading.IReaderWriterLock,System.String)">
            <summary>Sets the lock to use for a named window. </summary>
            <param name="windowName">is the named window name</param>
            <param name="statementResourceLock">is the statement lock for the create window statement</param>
            <param name="statementName">the name of the statement that is the "create window"</param>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowService.RemoveNamedWindowLock(System.String)">
            <summary>Remove the lock associated to the named window. </summary>
            <param name="statementName">the name of the statement that is the "create window"</param>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowService.AddObserver(com.espertech.esper.epl.named.NamedWindowLifecycleObserver)">
            <summary>Add an observer to be called back when named window state changes occur.
            <para/> Observers have set-semantics: the same Observer cannot be added twice
            </summary>
            <param name="observer">to add</param>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowService.RemoveObserver(com.espertech.esper.epl.named.NamedWindowLifecycleObserver)">
            <summary>Remove an observer to be called back when named window state changes occur. </summary>
            <param name="observer">to remove</param>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowService.GetNamedWindowIndexes(System.String)">
            <summary>Returns an index descriptor array describing all available indexes for the named window. </summary>
            <param name="windowName">window name</param>
            <returns>indexes</returns>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowService.NamedWindows">
            <summary>Returns the names of all named windows known. </summary>
            <value>named window names</value>
        </member>
        <member name="F:com.espertech.esper.epl.named.NamedWindowServiceConstants.ERROR_MSG_DATAWINDOWS">
            <summary>Error message for data windows required. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.named.NamedWindowServiceConstants.ERROR_MSG_NO_DATAWINDOW_ALLOWED">
            <summary>Error message for no data window allowed. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowServiceImpl">
            <summary>
            This service hold for each named window a dedicated processor and a lock to the named window. 
            This lock is shrared between the named window and on-delete statements.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowServiceImpl.#ctor(com.espertech.esper.core.service.StatementLockFactory,com.espertech.esper.epl.variable.VariableService,System.Boolean,com.espertech.esper.compat.threading.IReaderWriterLock,com.espertech.esper.core.service.ExceptionHandlingService,System.Boolean,com.espertech.esper.epl.metric.MetricReportingService)">
            <summary>
            Ctor.
            </summary>
            <param name="statementLockFactory">statement lock factory</param>
            <param name="variableService">is for variable access</param>
            <param name="isPrioritized">if the engine is running with prioritized execution</param>
            <param name="eventProcessingRWLock">The event processing RW lock.</param>
            <param name="exceptionHandlingService">The exception handling service.</param>
            <param name="enableQueryPlanLog">if set to <c>true</c> [enable query plan log].</param>
            <param name="metricReportingService">The metric reporting service.</param>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowTailView">
            <summary>
            This view is hooked into a named window's view chain as the last view and handles 
            dispatching of named window insert and remove stream results via 
            <seealso cref="T:com.espertech.esper.epl.named.NamedWindowService"/> to consuming statements. 
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowTailView.RemoveConsumer(com.espertech.esper.epl.named.NamedWindowConsumerView)">
            <summary>Called by the consumer view to indicate it was stopped or destroyed, such that the consumer can be deregistered and further dispatches disregard this consumer. </summary>
            <param name="namedWindowConsumerView">is the consumer representative view</param>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowTailView.IsParentBatchWindow">
            <summary>Returns true to indicate that the data window view is a batch view. </summary>
            <value>true if batch view</value>
        </member>
        <member name="T:com.espertech.esper.epl.named.NamedWindowTailViewInstance">
            <summary>
            This view is hooked into a named window's view chain as the last view and handles dispatching
            of named window insert and remove stream results via {@link com.espertech.esper.epl.named.NamedWindowService} 
            to consuming statements.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowTailViewInstance.AddConsumer(com.espertech.esper.epl.named.NamedWindowConsumerDesc,System.Boolean)">
            <summary>Adds a consuming (selecting) statement to the named window. </summary>
            <returns>consumer view</returns>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowTailViewInstance.RemoveConsumer(com.espertech.esper.epl.named.NamedWindowConsumerView)">
            <summary>Called by the consumer view to indicate it was stopped or destroyed, such that the consumer can be deregistered and further dispatches disregard this consumer. </summary>
            <param name="namedWindowConsumerView">is the consumer representative view</param>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowTailViewInstance.Snapshot(com.espertech.esper.filter.FilterSpecCompiled,System.Attribute[])">
            <summary>
            Returns a snapshot of window contents, thread-safely
            </summary>
            <param name="filter">filters if any</param>
            <param name="attributes">The attributes.</param>
            <returns>window contents</returns>
        </member>
        <member name="M:com.espertech.esper.epl.named.NamedWindowTailViewInstance.Dispose">
            <summary>Destroy the view. </summary>
        </member>
        <member name="P:com.espertech.esper.epl.named.NamedWindowTailViewInstance.NumberOfEvents">
            <summary>Returns the number of events held. </summary>
            <value>number of events</value>
        </member>
        <member name="T:com.espertech.esper.epl.parse.ASTAnnotationHelper">
            <summary>Walker to annotation stuctures. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ASTAnnotationHelper.Walk(Antlr.Runtime.Tree.ITree,com.espertech.esper.epl.core.EngineImportService)">
            <summary>Walk an annotation root name or child node (nested annotations). </summary>
            <param name="node">annotation walk node</param>
            <param name="engineImportService">for engine imports</param>
            <returns>annotation descriptor</returns>
            <throws>ASTWalkException if the walk failed</throws>
        </member>
        <member name="T:com.espertech.esper.epl.parse.ASTConstantHelper">
            <summary>
            Parses constant strings and returns the constant Object.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ASTConstantHelper.RemoveTicks(System.String)">
            <summary>
            Remove tick '`' character from a string start and end.
            </summary>
            <param name="tickedString">delimited string</param>
            <returns>
            delimited string with ticks removed, if starting and ending with tick
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ASTConstantHelper.Parse(Antlr.Runtime.Tree.ITree)">
            <summary> Parse the AST constant node and return Object value.</summary>
            <param name="node">parse node for which to parse the string value
            </param>
            <returns> value matching AST node type
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ASTExprHelper.GetRemoveExpr(Antlr.Runtime.Tree.ITree,System.Collections.Generic.IDictionary{Antlr.Runtime.Tree.ITree,com.espertech.esper.epl.expression.ExprNode})">
            <summary>For the given child, return the expression for that child and remove from node-to-expression map </summary>
            <param name="child">to ask for expression</param>
            <param name="astExprNodeMap">map to remove node from</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ASTExprHelper.GetOnTriggerSetAssignments(Antlr.Runtime.Tree.ITree,System.Collections.Generic.IDictionary{Antlr.Runtime.Tree.ITree,com.espertech.esper.epl.expression.ExprNode})">
            <summary>Returns the list of set-variable assignments under the given node. </summary>
            <param name="node">node to inspect</param>
            <param name="astExprNodeMap">map of AST to expression</param>
            <returns>list of assignments</returns>
        </member>
        <member name="T:com.espertech.esper.epl.parse.ASTFilterSpecHelper">
            <summary>Builds a filter specification from filter AST nodes. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ASTFilterSpecHelper.GetPropertyName(Antlr.Runtime.Tree.ITree,System.Int32)">
            <summary>Return the generated property name that is defined by the AST child node and it's siblings. </summary>
            <param name="parentNode">the AST node to consider as the parent for the child nodes to look at</param>
            <param name="startIndex">the index of the child node to start looking at</param>
            <returns>property name, ie. indexed[1] or Mapped('key') or nested.nested or a combination or just 'simple'.</returns>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ASTFilterSpecHelper.EscapeDot(System.String)">
            <summary>
            Escape all unescape dot characters in the text (identifier only) passed in.
            </summary>
            <param name="identifierToEscape">text to escape</param>
            <returns>text where dots are escaped</returns>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ASTFilterSpecHelper.UnescapedIndexOfDot(System.String)">
            <summary>Find the index of an unescaped dot (.) character, or return -1 if none found.</summary>
            <param name="identifier">text to find an un-escaped dot character</param>
            <returns>index of first unescaped dot</returns>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ASTFilterSpecHelper.UnescapeDot(System.String)">
            <summary>Un-Escape all escaped dot characters in the text (identifier only) passed in.</summary>
            <param name="identifierToUnescape">text to un-escape</param>
            <returns>string</returns>
        </member>
        <member name="T:com.espertech.esper.epl.parse.ASTFilterSpecValidationException">
            <summary>
            This exception is thrown to indicate a problem in a filter specification.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.parse.ASTWalkException">
            <summary>
            This exception is thrown to indicate a problem in statement creation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ASTWalkException.#ctor(System.String,System.Exception)">
            <summary> Ctor.</summary>
            <param name="message">is the error message
            </param>
            <param name="t">is the inner throwable
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ASTWalkException.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="message">is the error message
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ASTFilterSpecValidationException.#ctor(System.String,System.Exception)">
            <summary> Ctor.</summary>
            <param name="message">error message
            </param>
            <param name="t">inner throwable
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ASTFilterSpecValidationException.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="message">error message
            </param>
        </member>
        <member name="T:com.espertech.esper.epl.parse.ASTJsonHelper">
            <summary>Walker to annotation stuctures. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ASTJsonHelper.Walk(Antlr.Runtime.Tree.ITree)">
            <summary>Walk an annotation root name or child node (nested annotations). </summary>
            <param name="node">annotation walk node</param>
            <returns>annotation descriptor</returns>
            <throws>com.espertech.esper.epl.parse.ASTWalkException if the walk failed</throws>
        </member>
        <member name="T:com.espertech.esper.epl.parse.ASTMatchRecognizeHelper">
            <summary>
            Helper class for walking the match-recognize AST.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ASTMatchRecognizeHelper.ParseSkip(Antlr.Runtime.Tree.ITree)">
            <summary>Parse the skip clause. </summary>
            <param name="node">parent AST node</param>
            <returns>skip node enum</returns>
        </member>
        <member name="T:com.espertech.esper.epl.parse.ASTMatchUntilHelper">
            <summary>
            Helper for walking a pattern match-until clause.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ASTMatchUntilHelper.Validate(com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.epl.expression.ExprNode,System.Boolean)">
            <summary>
            Validate.
            </summary>
            <param name="lowerBounds">is the lower bounds, or null if none supplied</param>
            <param name="upperBounds">is the upper bounds, or null if none supplied</param>
            <param name="isAllowLowerZero">true to allow zero value for lower range</param>
            <returns>
            true if closed range of constants and the constants are the same value
            </returns>
            <throws>ASTWalkException if the AST is incorrect</throws>
        </member>
        <member name="T:com.espertech.esper.epl.parse.ASTOutputLimitHelper">
            <summary>
            Builds an output limit spec from an output limit AST node.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ASTOutputLimitHelper.BuildOutputLimitSpec(Antlr.Runtime.Tree.ITree,System.Collections.Generic.IDictionary{Antlr.Runtime.Tree.ITree,com.espertech.esper.epl.expression.ExprNode},com.espertech.esper.epl.variable.VariableService,System.String,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Build an output limit spec from the AST node supplied.  </summary>
            <param name="node">parse node</param>
            <param name="astExprNodeMap">is the map of current AST tree nodes to their respective expression root node</param>
            <param name="engineURI">the engine uri</param>
            <param name="timeProvider">provides time</param>
            <param name="variableService">provides variable resolution</param>
            <param name="exprEvaluatorContext">context for expression evaluatiom</param>
            <returns>output limit spec</returns>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ASTOutputLimitHelper.BuildRowLimitSpec(Antlr.Runtime.Tree.ITree)">
            <summary>Builds a row limit specification. </summary>
            <param name="node">to interrogate</param>
            <returns>row limit spec</returns>
        </member>
        <member name="T:com.espertech.esper.epl.parse.EPLTreeWalker">
            <summary>
            Called during the walks of a EPL expression AST tree as specified in the grammar
            file. Constructs filter and view specifications etc.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.parse.EPLTreeWalker.#ctor(Antlr.Runtime.Tree.ITreeNodeStream,Antlr.Runtime.CommonTokenStream,com.espertech.esper.epl.core.EngineImportService,com.espertech.esper.epl.variable.VariableService,com.espertech.esper.schedule.SchedulingService,System.Nullable{com.espertech.esper.epl.spec.SelectClauseStreamSelectorEnum},System.String,com.espertech.esper.client.ConfigurationInformation,com.espertech.esper.pattern.PatternNodeFactory,com.espertech.esper.core.context.mgr.ContextManagementService,System.Collections.Generic.IList{System.String},com.espertech.esper.epl.declexpr.ExprDeclaredService)">
            <summary>
            Ctor.
            </summary>
            <param name="input">is the tree nodes to walk</param>
            <param name="tokenStream">The token stream.</param>
            <param name="engineImportService">is required to resolve lib-calls into static methods or configured aggregation functions</param>
            <param name="variableService">for variable access</param>
            <param name="schedulingService">The scheduling service.</param>
            <param name="defaultStreamSelector">the configuration for which insert or remove streams (or both) to produce</param>
            <param name="engineURI">engine URI</param>
            <param name="configurationInformation">configuration info</param>
            <param name="patternNodeFactory">The pattern node factory.</param>
            <param name="contextManagementService">The context management service.</param>
            <param name="scriptBodies">The script bodies.</param>
            <param name="exprDeclaredService">The expr declared service.</param>
        </member>
        <member name="M:com.espertech.esper.epl.parse.EPLTreeWalker.PushStmtContext">
            <summary>
            Pushes a statement into the stack, creating a new empty statement to fill in.
            The leave node method for lookup statements pops from the stack. The leave node
            method for lookup statements pops from the stack.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.parse.EPLTreeWalker.LeaveNode(Antlr.Runtime.Tree.ITree)">
            <summary>Leave AST node and process it's type and child nodes. </summary>
            <param name="node">is the node to complete</param>
            <throws>ASTWalkException if the node tree walk operation failed</throws>
        </member>
        <member name="M:com.espertech.esper.epl.parse.EPLTreeWalker.EndPattern">
            <summary>End processing of the AST tree for stand-alone pattern expressions. </summary>
            <throws>ASTWalkException is the walk failed</throws>
        </member>
        <member name="M:com.espertech.esper.epl.parse.EPLTreeWalker.End">
            <summary>End processing of the AST tree, check that expression nodes found their homes. </summary>
            <throws>ASTWalkException is the walk failed</throws>
        </member>
        <member name="P:com.espertech.esper.epl.parse.EPLTreeWalker.StatementSpec">
            <summary>Returns statement specification. </summary>
            <value>statement spec.</value>
        </member>
        <member name="T:com.espertech.esper.epl.parse.ExceptionConvertor">
            <summary>Converts recognition exceptions. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ExceptionConvertor.ConvertStatement(Antlr.Runtime.RecognitionException,System.String,System.Boolean,com.espertech.esper.epl.generated.EsperEPL2GrammarParser)">
            <summary>Converts from a syntax error to a nice statement exception. </summary>
            <param name="e">is the syntax error</param>
            <param name="expression">is the expression text</param>
            <param name="parser">the parser that parsed the expression</param>
            <param name="addPleaseCheck">indicates to add "please check" paraphrases</param>
            <returns>syntax exception</returns>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ExceptionConvertor.ConvertProperty(Antlr.Runtime.RecognitionException,System.String,System.Boolean,com.espertech.esper.epl.generated.EsperEPL2GrammarParser)">
            <summary>Converts from a syntax error to a nice property exception. </summary>
            <param name="e">is the syntax error</param>
            <param name="expression">is the expression text</param>
            <param name="parser">the parser that parsed the expression</param>
            <param name="addPleaseCheck">indicates to add "please check" paraphrases</param>
            <returns>syntax exception</returns>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ExceptionConvertor.Convert(Antlr.Runtime.RecognitionException,System.String,System.Boolean,com.espertech.esper.epl.generated.EsperEPL2GrammarParser)">
            <summary>Converts from a syntax error to a nice exception. </summary>
            <param name="e">is the syntax error</param>
            <param name="expression">is the expression text</param>
            <param name="parser">the parser that parsed the expression</param>
            <param name="addPleaseCheck">indicates to add "please check" paraphrases</param>
            <returns>syntax exception</returns>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ExceptionConvertor.Convert(Antlr.Runtime.RecognitionException,System.String,com.espertech.esper.epl.generated.EsperEPL2Ast)">
            <summary>Converts from a syntax error to a nice statement exception. </summary>
            <param name="e">is the syntax error</param>
            <param name="expression">is the expression text</param>
            <param name="treeWalker">the tree walker that walked the tree</param>
            <returns>syntax exception</returns>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ExceptionConvertor.GetPositionInfo(Antlr.Runtime.IToken)">
            <summary>Returns the position information string for a parser exception. </summary>
            <param name="t">the token to return the information for</param>
            <returns>is a string with line and column information</returns>
        </member>
        <member name="T:com.espertech.esper.epl.parse.ParseHelper">
            <summary>
            Helper class for parsing an expression and walking a parse tree.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.parse.ParseHelper.Newline">
            <summary>Newline. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ParseHelper.Walk(Antlr.Runtime.Tree.ITree,com.espertech.esper.epl.parse.EPLTreeWalker,com.espertech.esper.epl.parse.WalkRuleSelector,System.String,System.String)">
            <summary>Walk parse tree starting at the rule the walkRuleSelector supplies.  </summary>
            <param name="ast">ast to walk</param>
            <param name="walker">walker instance</param>
            <param name="walkRuleSelector">walk rule</param>
            <param name="expression">the expression we are walking in string form</param>
            <param name="eplStatementForErrorMsg">statement text for error messages</param>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ParseHelper.Parse(System.String,System.String,System.Boolean,com.espertech.esper.epl.parse.ParseRuleSelector,System.Boolean)">
            <summary>
            Parse expression using the rule the ParseRuleSelector instance supplies.
            </summary>
            <param name="expression">text to parse</param>
            <param name="eplStatementErrorMsg">text for error</param>
            <param name="addPleaseCheck">true to include depth paraphrase</param>
            <param name="parseRuleSelector">parse rule to select</param>
            <param name="rewriteScript">if set to <c>true</c> [rewrite script].</param>
            <returns>AST - syntax tree</returns>
            <throws>EPException when the AST could not be parsed</throws>
        </member>
        <member name="T:com.espertech.esper.epl.parse.ParseResult">
            <summary>Result of a parse action. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.parse.ParseResult.#ctor(Antlr.Runtime.Tree.ITree,System.String,Antlr.Runtime.CommonTokenStream,System.Collections.Generic.IList{System.String})">
            <summary>
            Ctor.
            </summary>
            <param name="tree">parse tree</param>
            <param name="expressionWithoutAnnotations">expression text no annotations, or null if same</param>
            <param name="tokenStream">The token stream.</param>
            <param name="scripts">The scripts.</param>
        </member>
        <member name="P:com.espertech.esper.epl.parse.ParseResult.Tree">
            <summary>
            AST.
            </summary>
            <value>ast</value>
        </member>
        <member name="P:com.espertech.esper.epl.parse.ParseResult.ExpressionWithoutAnnotations">
            <summary>
            Returns the expression text no annotations.
            </summary>
            <value>expression text no annotations.</value>
        </member>
        <member name="P:com.espertech.esper.epl.parse.ParseResult.TokenStream">
            <summary>
            Gets or sets the token stream.
            </summary>
            <value>The token stream.</value>
        </member>
        <member name="P:com.espertech.esper.epl.parse.ParseResult.Scripts">
            <summary>
            Gets or sets the scripts.
            </summary>
            <value>The scripts.</value>
        </member>
        <member name="T:com.espertech.esper.epl.parse.ParseRuleSelector">
            <summary>
            Implementations can invoke a parse rule of their choice on the parser.
            </summary>
            <param name="parser">parser to invoke parse rule on</param>
        </member>
        <member name="T:com.espertech.esper.epl.parse.WalkRuleSelector">
            <summary>
            For selection of the AST tree walk rule to use.
            Implementations can invoke a walk rule of their choice on the walker and AST passed in.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.property.PropertyEvaluator">
            <summary>
            Interface for a function that evaluates the properties of an event and returns event representing the properties.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.property.PropertyEvaluator.GetProperty(com.espertech.esper.client.EventBean,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Returns the result events based on property values, or null if none found.
            </summary>
            <param name="theEvent">to inspect</param>
            <param name="exprEvaluatorContext">expression evaluation context</param>
            <returns>events representing Property(s)</returns>
        </member>
        <member name="M:com.espertech.esper.epl.property.PropertyEvaluator.CompareTo(com.espertech.esper.epl.property.PropertyEvaluator)">
            <summary>
            Compare to another property evaluator.
            </summary>
            <param name="otherFilterPropertyEval">other</param>
            <returns>equals or not</returns>
        </member>
        <member name="P:com.espertech.esper.epl.property.PropertyEvaluator.FragmentEventType">
            <summary>
            Returns the result type of the events generated by evaluating a property expression.
            </summary>
            <value>result event type</value>
        </member>
        <member name="T:com.espertech.esper.epl.property.PropertyEvaluatorAccumulative">
            <summary>A property evaluator that returns a full row of events for each stream, i.e. flattened inner-join results for property-upon-property. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.property.PropertyEvaluatorAccumulative.#ctor(com.espertech.esper.epl.property.ContainedEventEval[],com.espertech.esper.client.FragmentEventType[],com.espertech.esper.epl.expression.ExprEvaluator[],System.Collections.Generic.List{System.String})">
            <summary>Ctor. </summary>
            <param name="containedEventEvals">property getters or other evaluators</param>
            <param name="fragmentEventType">property fragment types</param>
            <param name="whereClauses">filters, if any</param>
            <param name="propertyNames">the property names that are staggered</param>
        </member>
        <member name="M:com.espertech.esper.epl.property.PropertyEvaluatorAccumulative.GetAccumulative(com.espertech.esper.client.EventBean,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Returns the accumulative events for the input event. </summary>
            <param name="theEvent">is the input event</param>
            <param name="exprEvaluatorContext">expression evaluation context</param>
            <returns>events per stream for each row</returns>
        </member>
        <member name="T:com.espertech.esper.epl.property.PropertyEvaluatorFactory">
            <summary>Factory for property evaluators. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.property.PropertyEvaluatorFactory.MakeEvaluator(com.espertech.esper.epl.spec.PropertyEvalSpec,com.espertech.esper.client.EventType,System.String,com.espertech.esper.events.EventAdapterService,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.epl.variable.VariableService,com.espertech.esper.script.ScriptingService,System.String,System.String,System.String,System.Attribute[],System.Collections.Generic.ICollection{System.Int32},com.espertech.esper.client.ConfigurationInformation)">
            <summary>
            Makes the property evaluator.
            </summary>
            <param name="spec">is the property specification</param>
            <param name="sourceEventType">the event type</param>
            <param name="optionalSourceStreamName">the source stream name</param>
            <param name="eventAdapterService">for event instances</param>
            <param name="methodResolutionService">for resolving UDF</param>
            <param name="timeProvider">provides time</param>
            <param name="variableService">for resolving variables</param>
            <param name="scriptingService">The scripting service.</param>
            <param name="engineURI">engine URI</param>
            <param name="statementId">The statement id.</param>
            <param name="statementName">Name of the statement.</param>
            <param name="annotations">The annotations.</param>
            <param name="assignedTypeNumberStack">The assigned type number stack.</param>
            <param name="configuration">The configuration.</param>
            <returns>propert evaluator</returns>
            <throws>ExprValidationException if any expressions could not be verified</throws>
        </member>
        <member name="T:com.espertech.esper.epl.property.PropertyEvaluatorNested">
            <summary>
            A property evaluator that considers nested properties and that considers where-clauses but does not consider select-clauses.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.property.PropertyEvaluatorNested.#ctor(com.espertech.esper.epl.property.ContainedEventEval[],com.espertech.esper.client.FragmentEventType[],com.espertech.esper.epl.expression.ExprEvaluator[],System.Collections.Generic.List{System.String})">
            <summary>Ctor. </summary>
            <param name="containedEventEvals">property getters or other evaluators</param>
            <param name="fragmentEventType">the fragments</param>
            <param name="whereClauses">the where clauses</param>
            <param name="expressionTexts">the property names that are staggered</param>
        </member>
        <member name="T:com.espertech.esper.epl.property.PropertyEvaluatorSelect">
            <summary>
            Property evaluator that considers a select-clauses and relies on an accumulative 
            property evaluator that presents events for all columns and rows.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.property.PropertyEvaluatorSelect.#ctor(com.espertech.esper.epl.core.SelectExprProcessor,com.espertech.esper.epl.property.PropertyEvaluatorAccumulative)">
            <summary>Ctor. </summary>
            <param name="selectExprProcessor">evaluates the select clause</param>
            <param name="accumulative">provides property events for input events</param>
        </member>
        <member name="T:com.espertech.esper.epl.property.PropertyEvaluatorSimple">
            <summary>
            Property evaluator that considers only level one and considers a where-clause, but does not consider a select clause or N-level.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.property.PropertyEvaluatorSimple.#ctor(com.espertech.esper.epl.property.ContainedEventEval,com.espertech.esper.client.FragmentEventType,com.espertech.esper.epl.expression.ExprEvaluator,System.String)">
            <summary>Ctor. </summary>
            <param name="containedEventEval">property getter or other evaluator</param>
            <param name="fragmentEventType">property event type</param>
            <param name="filter">optional where-clause expression</param>
            <param name="expressionText">the property name</param>
        </member>
        <member name="M:com.espertech.esper.epl.property.PropertyEvaluatorSimple.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.epl.property.PropertyEvaluatorSimple.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.epl.property.PropertyEvaluatorSimple.CompareTo(com.espertech.esper.epl.property.PropertyEvaluator)">
            <summary>
            Compares the object to another evaluator.
            </summary>
            <param name="otherEval">The other eval.</param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.epl.property.PropertyEvaluatorSimple.ExpressionText">
            <summary>Returns the property name. </summary>
            <value>property name</value>
        </member>
        <member name="P:com.espertech.esper.epl.property.PropertyEvaluatorSimple.Filter">
            <summary>Returns the filter. </summary>
            <value>filter</value>
        </member>
        <member name="T:com.espertech.esper.epl.script.AgentInstanceScriptContext">
            <summary>Context-partition local script context. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.script.ExpressionScriptCompiledImpl.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.script.ExpressionScriptCompiledImpl"/> class.
            </summary>
            <param name="scriptMethod">The script method.</param>
        </member>
        <member name="M:com.espertech.esper.epl.script.ExpressionScriptCompiledImpl.InvokeMethod(com.espertech.esper.script.ScriptArgs)">
            <summary>
            Invokes the method.
            </summary>
            <param name="scriptArgs">The script args.</param>
        </member>
        <member name="M:com.espertech.esper.script.ScriptArgs.GetParameter(System.String)">
            <summary>
            Gets the parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.script.ScriptArgs.Bindings">
            <summary>
            Gets or sets the bindings.
            </summary>
            <value>The bindings.</value>
        </member>
        <member name="M:com.espertech.esper.script.ScriptCompilationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.script.ScriptCompilationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:com.espertech.esper.script.ScriptCompilationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.script.ScriptCompilationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:com.espertech.esper.script.ScriptCompilationException.#ctor(System.String,System.Collections.Generic.ICollection{System.CodeDom.Compiler.CompilerError})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.script.ScriptCompilationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="compilerErrors">The compiler errors.</param>
        </member>
        <member name="M:com.espertech.esper.script.ScriptCompilationException.#ctor(System.String,System.Exception,System.Collections.Generic.ICollection{System.CodeDom.Compiler.CompilerError})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.script.ScriptCompilationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
            <param name="compilerErrors">The compiler errors.</param>
        </member>
        <member name="P:com.espertech.esper.script.ScriptCompilationException.CompilerErrors">
            <summary>
            Gets or sets the compiler errors.
            </summary>
            <value>The compiler errors.</value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.AttributeDesc">
            <summary>
            Describes an annotation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.AttributeDesc.#ctor(System.String,System.Collections.Generic.IList{com.espertech.esper.collection.Pair{System.String,System.Object}},System.Collections.Generic.IList{com.espertech.esper.collection.Pair{System.String,System.Object}})">
            <summary>
            Ctor.
            </summary>
            <param name="name">name of annotation</param>
            <param name="attributes">are the attribute values</param>
            <param name="ctorParameters">The constructor parameters.</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.AttributeDesc.Name">
            <summary>
            Returns annotation interface class name.
            </summary>
            <returns>
            name of class, can be fully qualified
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.AttributeDesc.NamedAttributes">
            <summary>
            Returns annotation attributes.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.spec.AttributeDesc.CtorParameters">
            <summary>
            Returns constructor parameters.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.spec.AttributeDesc.CtorValues">
            <summary>
            Gets the constructor values.
            </summary>
            <value>The ctor values.</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.AttributeDesc.CtorTypeList">
            <summary>
            Gets the constructor type list.
            </summary>
            <value>The ctor type list.</value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.ColumnDesc">
            <summary>
            Describes a column name and type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.ColumnDesc.#ctor(System.String,System.String,System.Boolean)">
            <summary>Ctor. </summary>
            <param name="name">column name</param>
            <param name="type">type</param>
            <param name="array">true for array</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.ColumnDesc.Name">
            <summary>Returns column name. </summary>
            <value>name</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.ColumnDesc.Type">
            <summary>Return column type </summary>
            <value>type</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.ColumnDesc.IsArray">
            <summary>Return true for array </summary>
            <value>array indicator</value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.CreateIndexDesc">
            <summary>Specification for creating a named window. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.CreateIndexDesc.#ctor(System.Boolean,System.String,System.String,System.Collections.Generic.IList{com.espertech.esper.epl.spec.CreateIndexItem})">
            <summary>
            Ctor.
            </summary>
            <param name="isUnique">indicator whether unique or not</param>
            <param name="indexName">index name</param>
            <param name="windowName">window name</param>
            <param name="columns">properties to index</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.CreateIndexDesc.IndexName">
            <summary>Returns index name. </summary>
            <value>index name</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.CreateIndexDesc.WindowName">
            <summary>Returns window name. </summary>
            <value>window name</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.CreateIndexDesc.Columns">
            <summary>Returns columns. </summary>
            <value>columns</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.CreateIndexDesc.IsUnique">
            <summary>
            Gets or sets a value indicating whether this instance is unique.
            </summary>
            <value><c>true</c> if this instance is unique; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.CreateIndexItem">
            <summary>
            Specification for creating a named window index column.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.spec.CreateIndexType">
            <summary>
            Specification for creating a named window index column type.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.spec.CreateSchemaDesc">
            <summary>Specification for creating an event type/schema. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.CreateSchemaDesc.#ctor(System.String,System.Collections.Generic.ICollection{System.String},System.Collections.Generic.IList{com.espertech.esper.epl.spec.ColumnDesc},System.Collections.Generic.ICollection{System.String},com.espertech.esper.epl.spec.AssignedType,System.String,System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Ctor.
            </summary>
            <param name="schemaName">name</param>
            <param name="types">event type Name(s)</param>
            <param name="columns">column definition</param>
            <param name="inherits">supertypes</param>
            <param name="assignedType">any type assignment such as Map, Object-array or variant or none-specified</param>
            <param name="startTimestampProperty">The start timestamp property.</param>
            <param name="endTimestampProperty">The end timestamp property.</param>
            <param name="copyFrom">The copy from.</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.CreateSchemaDesc.SchemaName">
            <summary>Returns schema name. </summary>
            <value>schema name</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.CreateSchemaDesc.Columns">
            <summary>Returns column definitions. </summary>
            <value>column defs</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.CreateSchemaDesc.Inherits">
            <summary>Returns supertypes. </summary>
            <value>supertypes</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.CreateSchemaDesc.Types">
            <summary>Returns type Name(s). </summary>
            <value>types</value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.CreateVariableDesc">
            <summary>Descriptor for create-variable statements. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.CreateVariableDesc.#ctor(System.String,System.String,com.espertech.esper.epl.expression.ExprNode,System.Boolean,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="variableType">type of the variable</param>
            <param name="variableName">name of the variable</param>
            <param name="assignment">expression assigning the initial value, or null if none</param>
            <param name="constant">if set to <c>true</c> [constant].</param>
            <param name="isArray">if set to <c>true</c> [is array].</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.CreateVariableDesc.VariableType">
            <summary>Returns the variable type. </summary>
            <value>type of variable</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.CreateVariableDesc.VariableName">
            <summary>Returns the variable name </summary>
            <value>name</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.CreateVariableDesc.Assignment">
            <summary>Returns the assignment expression, or null if none </summary>
            <value>expression or null</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.CreateVariableDesc.IsConstant">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:com.espertech.esper.epl.spec.CreateVariableDesc"/> is constant.
            </summary>
            <value><c>true</c> if constant; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.CreateVariableDesc.IsArray">
            <summary>
            Gets or sets a value indicating whether this instance is array.
            </summary>
            <value><c>true</c> if this instance is array; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.CreateWindowDesc">
            <summary>
            Specification for creating a named window.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.CreateWindowDesc.#ctor(System.String,System.Collections.Generic.IList{com.espertech.esper.epl.spec.ViewSpec},com.espertech.esper.epl.spec.StreamSpecOptions,System.Boolean,com.espertech.esper.epl.expression.ExprNode,System.Collections.Generic.IList{com.espertech.esper.epl.spec.ColumnDesc},System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="windowName">the window name</param>
            <param name="viewSpecs">the view definitions</param>
            <param name="streamSpecOptions">options such as retain-union etc</param>
            <param name="insert">true for insert-info</param>
            <param name="insertFilter">optional filter expression</param>
            <param name="columns">list of columns, if using column syntax</param>
            <param name="asEventTypeName">Name of as event type.</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.CreateWindowDesc.WindowName">
            <summary>Returns the window name. </summary>
            <value>window name</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.CreateWindowDesc.ViewSpecs">
            <summary>Returns the view specifications. </summary>
            <value>view specs</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.CreateWindowDesc.IsInsert">
            <summary>Returns true for insert-from. </summary>
            <value>indicator to insert from another named window</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.CreateWindowDesc.InsertFilter">
            <summary>Returns the expression to filter insert-from events, or null if none supplied. </summary>
            <value>insert filter expression</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.CreateWindowDesc.InsertFromWindow">
            <summary>Returns the window name to insert from. </summary>
            <value>window name to insert from</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.CreateWindowDesc.StreamSpecOptions">
            <summary>Returns the options for the stream such as unidirectional, retain-union etc. </summary>
            <value>stream options</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.CreateWindowDesc.Columns">
            <summary>Returns column names and types. </summary>
            <value>column descriptors</value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.DBStatementStreamSpec">
            <summary>Specification object for historical data poll via database SQL statement. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.spec.StreamSpecBase">
            <summary>
            Abstract base specification for a stream, consists simply of an optional stream name and a list of views
            on to of the stream.
            <para>
            Implementation classes for views and patterns add additional information defining the
            stream of events.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StreamSpecBase.#ctor(System.String,System.Collections.Generic.IEnumerable{com.espertech.esper.epl.spec.ViewSpec},com.espertech.esper.epl.spec.StreamSpecOptions)">
            <summary>
            Ctor.
            </summary>
            <param name="optionalStreamName">stream name, or null if none supplied</param>
            <param name="viewSpecs">specifies what view to use to derive data</param>
            <param name="streamSpecOptions">indicates additional options such as unidirectional stream or retain-union or retain-intersection</param>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StreamSpecBase.#ctor">
            <summary>Default ctor.</summary>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StreamSpecBase.OptionalStreamName">
            <summary>Returns the name assigned.</summary>
            <returns>stream name or null if not assigned</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StreamSpecBase.ViewSpecs">
            <summary>
            Returns view definitions to use to construct views to derive data on stream.
            </summary>
            <returns>view defs</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StreamSpecBase.Options">
            <summary>
            Returns the options for the stream such as unidirectional, retain-union etc.
            </summary>
            <returns>
            stream options
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.StreamSpecRaw">
            <summary>An uncompiled, unoptimize for of stream specification created by a parser. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.spec.StreamSpec">
            <summary>
            Specification for a stream, consists simply of an optional stream name and a list of views
            on to of the stream.
            <para>
            Implementation classes for views and patterns add additional information defining the
            stream of events.
            </para>
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StreamSpec.OptionalStreamName">
            <summary>
            Returns the stream name, or null if undefined.
            </summary>
            <value>The name of the optional stream.</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StreamSpec.ViewSpecs">
            <summary>
            Returns views definitions onto the stream.
            </summary>
            <value>The view specs.</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StreamSpec.Options">
            <summary>
            Returns the options for the stream such as unidirectional, retain-union etc.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StreamSpecRaw.Compile(com.espertech.esper.core.service.StatementContext,System.Collections.Generic.ICollection{System.String},System.Boolean,System.Collections.Generic.ICollection{System.Int32})">
            <summary>
            Compiles a raw stream specification consisting event type information and filter expressions to an validated, optimized form for use with filter service
            </summary>
            <param name="statementContext">statement-level services</param>
            <param name="eventTypeReferences">event type names used by the statement</param>
            <param name="isInsertInto">true for insert-into</param>
            <param name="assignedTypeNumberStack">The assigned type number stack.</param>
            <returns>compiled stream</returns>
            <throws>ExprValidationException to indicate validation errors</throws>
        </member>
        <member name="T:com.espertech.esper.epl.spec.StreamSpecCompiled">
            <summary>
            Validated stream specifications generally have expression nodes that are valid and event types exist.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.DBStatementStreamSpec.#ctor(System.String,System.Collections.Generic.IEnumerable{com.espertech.esper.epl.spec.ViewSpec},System.String,System.String,System.String)">
            <summary>Ctor. </summary>
            <param name="optionalStreamName">is a stream name optionally given to stream</param>
            <param name="viewSpecs">is a list of views onto the stream</param>
            <param name="databaseName">is the database name to poll</param>
            <param name="sqlWithSubsParams">is the SQL with placeholder parameters</param>
            <param name="metadataSQL">is the sample SQL to retrieve statement metadata, if any was supplied</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.DBStatementStreamSpec.DatabaseName">
            <summary>Returns the database name. </summary>
            <value>name of database.</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.DBStatementStreamSpec.SqlWithSubsParams">
            <summary>Returns the SQL with substitution parameters. </summary>
            <value>SQL with parameters embedded as ${stream.param}</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.DBStatementStreamSpec.MetadataSQL">
            <summary>Returns the optional sample metadata SQL </summary>
            <value>null if not supplied, or SQL to fire to retrieve metadata</value>
        </member>
        <member name="M:com.espertech.esper.epl.spec.ExpressionDeclDesc.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.spec.ExpressionDeclDesc"/> class.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.spec.FilterSpecRaw">
            <summary>
            Filter definition in an un-validated and un-resolved form.
            <para/>
            Event type and expression nodes in this filter specification are not yet
            validated, optimized for resolved against actual streams.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.FilterSpecRaw.#ctor(System.String,System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode},com.espertech.esper.epl.spec.PropertyEvalSpec)">
            <summary>
            Ctor.
            </summary>
            <param name="eventTypeName">is the name of the event type</param>
            <param name="filterExpressions">is a list of expression nodes representing individual filter expressions</param>
            <param name="optionalPropertyEvalSpec">specification for a property select</param>
        </member>
        <member name="M:com.espertech.esper.epl.spec.FilterSpecRaw.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.spec.FilterSpecRaw.EventTypeName">
            <summary>
            Returns the event type name of the events we are looking for.
            </summary>
            <returns>
            event name
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.FilterSpecRaw.FilterExpressions">
            <summary>
            Returns the list of filter expressions.
            </summary>
            <returns>
            filter expression list
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.FilterSpecRaw.OptionalPropertyEvalSpec">
            <summary>
            Returns the property evaluation specification, if any, or null if no properties
            evaluated.
            </summary>
            <returns>
            property eval spec
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.FilterStreamSpecCompiled">
            <summary>
            Specification for building an event stream out of a filter for events (supplying type and basic filter criteria)
            and views onto these events which are staggered onto each other to supply a final stream of events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.FilterStreamSpecCompiled.#ctor(com.espertech.esper.filter.FilterSpecCompiled,System.Collections.Generic.IEnumerable{com.espertech.esper.epl.spec.ViewSpec},System.String,com.espertech.esper.epl.spec.StreamSpecOptions)">
            <summary>
            Ctor.
            </summary>
            <param name="filterSpec">specifies what events we are interested in.</param>
            <param name="viewSpecs">specifies what view to use to derive data</param>
            <param name="optionalStreamName">stream name, or null if none supplied</param>
            <param name="streamSpecOptions">additional options such as unidirectional stream in a join</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.FilterStreamSpecCompiled.FilterSpec">
            <summary>
            Gets or sets the filter specification for which events the stream will getSelectListEvents.
            </summary>
            <returns>filter spec</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.FilterStreamSpecRaw">
            <summary>Unvalided filter-based stream specification. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.FilterStreamSpecRaw.#ctor(com.espertech.esper.epl.spec.FilterSpecRaw,System.Collections.Generic.IEnumerable{com.espertech.esper.epl.spec.ViewSpec},System.String,com.espertech.esper.epl.spec.StreamSpecOptions)">
            <summary>Ctor. </summary>
            <param name="rawFilterSpec">is unvalidated filter specification</param>
            <param name="viewSpecs">is the view definition</param>
            <param name="optionalStreamName">is the stream name if supplied, or null if not supplied</param>
            <param name="streamSpecOptions">additional options, such as unidirectional stream in a join</param>
        </member>
        <member name="M:com.espertech.esper.epl.spec.FilterStreamSpecRaw.#ctor">
            <summary>Default ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.FilterStreamSpecRaw.ResolveType(System.String,System.String,com.espertech.esper.events.EventAdapterService,System.Collections.Generic.IList{System.Uri})">
            <summary>Resolves a given event name to an event type. </summary>
            <param name="eventName">is the name to resolve</param>
            <param name="eventAdapterService">for resolving event types</param>
            <param name="engineURI">the provider URI</param>
            <param name="optionalResolutionURIs">is URIs for resolving the event name against plug-inn event representations, if any</param>
            <returns>event type</returns>
            <throws>ExprValidationException if the info cannot be resolved</throws>
        </member>
        <member name="P:com.espertech.esper.epl.spec.FilterStreamSpecRaw.RawFilterSpec">
            <summary>Returns the unvalided filter spec. </summary>
            <value>filter def</value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.InsertIntoDesc">
            <summary>
            Descriptor generated by INSERT-INTO clauses specified in expressions to insert
            the results of statement as a stream to further statements.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.InsertIntoDesc.#ctor(com.espertech.esper.epl.spec.SelectClauseStreamSelectorEnum,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="streamSelector">selects insert, remove or insert+remove stream</param>
            <param name="eventTypeName">is the event type name</param>
        </member>
        <member name="M:com.espertech.esper.epl.spec.InsertIntoDesc.Add(System.String)">
            <summary>
            Add a column name to the insert-into clause.
            </summary>
            <param name="columnName">to add</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.InsertIntoDesc.StreamSelector">
            <summary>
            Returns the stream(s) selected for inserting into.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.spec.InsertIntoDesc.EventTypeName">
            <summary>
            Returns name of event type to use for insert-into stream.
            </summary>
            <returns>
            event type name
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.InsertIntoDesc.ColumnNames">
            <summary>
            Returns a list of column names specified optionally in the insert-into clause,
            or empty if none specified.
            </summary>
            <returns>
            column names or empty list if none supplied
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.MatchEventSpec">
            <summary>
            Specification of matches available.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.spec.MatchRecognizeDefineItem">
            <summary>
            Specification for a "define" construct within a match_recognize.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.MatchRecognizeDefineItem.#ctor(System.String,com.espertech.esper.epl.expression.ExprNode)">
            <summary>Ctor. </summary>
            <param name="identifier">variable name</param>
            <param name="expression">expression</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.MatchRecognizeDefineItem.Identifier">
            <summary>Returns the variable name. </summary>
            <value>name</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.MatchRecognizeDefineItem.Expression">
            <summary>Returns the expression. </summary>
            <value>expression</value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.MatchRecognizeInterval">
            <summary>Interval specification within match_recognize. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.MatchRecognizeInterval.#ctor(com.espertech.esper.epl.expression.ExprTimePeriod)">
            <summary>Ctor. </summary>
            <param name="timePeriodExpr">time period</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.MatchRecognizeInterval.TimePeriodExpr">
            <summary>Returns the time period. </summary>
            <value>time period</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.MatchRecognizeInterval.Milliseconds">
            <summary>Returns the number of milliseconds. </summary>
            <value>msec</value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.MatchRecognizeMeasureItem">
            <summary>
            Specification for measure definition item within match_recognize.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.MatchRecognizeMeasureItem.#ctor(com.espertech.esper.epl.expression.ExprNode,System.String)">
            <summary>Ctor. </summary>
            <param name="expr">expression</param>
            <param name="name">as name</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.MatchRecognizeMeasureItem.Name">
            <summary>Returns the as-name. </summary>
            <value>name</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.MatchRecognizeMeasureItem.Expr">
            <summary>Gets or sets the validated expression. </summary>
            <value>expression</value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.MatchRecognizeSkip">
            <summary>
            Specification for the skip-part of match_recognize.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.MatchRecognizeSkip.#ctor(com.espertech.esper.epl.spec.MatchRecognizeSkipEnum)">
            <summary>
            Ctor.
            </summary>
            <param name="skip">enum</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.MatchRecognizeSkip.Skip">
            <summary>Skip enum. </summary>
            <value>skip value</value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.MatchRecognizeSkipEnum">
            <summary>Skip-enum for match_recognize. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.MatchRecognizeSkipEnum.TO_CURRENT_ROW">
            <summary>Skip to current row. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.MatchRecognizeSkipEnum.TO_NEXT_ROW">
            <summary>Skip to next row. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.MatchRecognizeSkipEnum.PAST_LAST_ROW">
            <summary>Skip past last row. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.spec.MatchRecognizeSpec">
            <summary>
            Specification for match_recognize.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.MatchRecognizeSpec.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.MatchRecognizeSpec.AddMeasureItem(com.espertech.esper.epl.spec.MatchRecognizeMeasureItem)">
            <summary>
            Add a measure item.
            </summary>
            <param name="item">to add</param>
        </member>
        <member name="M:com.espertech.esper.epl.spec.MatchRecognizeSpec.AddDefine(com.espertech.esper.epl.spec.MatchRecognizeDefineItem)">
            <summary>
            Adds a define item.
            </summary>
            <param name="define">to add</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.MatchRecognizeSpec.Interval">
            <summary>
            Interval part of null.
            </summary>
            <returns>
            interval
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.MatchRecognizeSpec.IsAllMatches">
            <summary>
            True for all-matches.
            </summary>
            <returns>
            indicator all-matches
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.MatchRecognizeSpec.PartitionByExpressions">
            <summary>
            Returns partition expressions.
            </summary>
            <returns>
            partition expressions
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.MatchRecognizeSpec.Defines">
            <summary>
            Returns the define items.
            </summary>
            <returns>
            define items
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.MatchRecognizeSpec.Measures">
            <summary>
            Returns measures.
            </summary>
            <returns>
            measures
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.MatchRecognizeSpec.Pattern">
            <summary>
            Returns the pattern.
            </summary>
            <returns>
            pattern
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.MatchRecognizeSpec.Skip">
            <summary>
            Returns the skip.
            </summary>
            <returns>
            skip
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.MethodStreamSpec">
            <summary>
            Specification object for historical data poll via database SQL statement.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.MethodStreamSpec.#ctor(System.String,System.Collections.Generic.IEnumerable{com.espertech.esper.epl.spec.ViewSpec},System.String,System.String,System.String,System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode})">
            <summary>Ctor. </summary>
            <param name="optionalStreamName">is the stream name or null if none defined</param>
            <param name="viewSpecs">is an list of view specifications</param>
            <param name="ident">the prefix in the clause</param>
            <param name="className">the class name</param>
            <param name="methodName">the method name</param>
            <param name="expressions">the parameter expressions</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.MethodStreamSpec.Ident">
            <summary>Returns the prefix (method) for the method invocation syntax. </summary>
            <value>identifier</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.MethodStreamSpec.ClassName">
            <summary>Returns the class name. </summary>
            <value>class name</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.MethodStreamSpec.MethodName">
            <summary>Returns the method name. </summary>
            <value>method name</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.MethodStreamSpec.Expressions">
            <summary>Returns the parameter expressions. </summary>
            <value>parameter expressions</value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.NamedWindowConsumerStreamSpec">
            <summary>
            Specification for use of an existing named window.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.NamedWindowConsumerStreamSpec.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{com.espertech.esper.epl.spec.ViewSpec},System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode},com.espertech.esper.epl.spec.StreamSpecOptions,com.espertech.esper.epl.property.PropertyEvaluator)">
            <summary>
            Ctor.
            </summary>
            <param name="windowName">specifies the name of the named window</param>
            <param name="optionalAsName">a name or null if none defined</param>
            <param name="viewSpecs">is the view specifications</param>
            <param name="filterExpressions">the named window filters</param>
            <param name="streamSpecOptions">additional options such as unidirectional stream in a join</param>
            <param name="optPropertyEvaluator">The opt property evaluator.</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.NamedWindowConsumerStreamSpec.WindowName">
            <summary>Returns the window name.</summary>
            <returns>window name</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.NamedWindowConsumerStreamSpec.FilterExpressions">
            <summary>
            Returns list of filter expressions onto the named window, or no filter expressions if none defined.
            </summary>
            <returns>list of filter expressions</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.NamedWindowConsumerStreamSpec.OptPropertyEvaluator">
            <summary>
            Gets the opt property evaluator.
            </summary>
            <value>The opt property evaluator.</value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.ObjectSpec">
            <summary>
            Encapsulates the information required to specify an object identification and construction.
            <para>
            Abstract class for use with any object, such as views, pattern guards or pattern observers.
            </para>
            <para>
            A object construction specification can be equal to another specification. This information can be
            important to determine reuse of any object.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.ObjectSpec.#ctor(System.String,System.String,System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode})">
            <summary>Constructor.</summary>
            <param name="_namespace">if the namespace the object is in</param>
            <param name="objectName">is the name of the object</param>
            <param name="objectParameters">
            is a list of values representing the object parameters
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.spec.ObjectSpec.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.spec.ObjectSpec.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.ObjectSpec.ObjectNamespace">
            <summary>Returns namespace for view object.</summary>
            <returns>namespace</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.ObjectSpec.ObjectName">
            <summary>Returns the object name.</summary>
            <returns>object name</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.ObjectSpec.ObjectParameters">
            <summary>Returns the list of object parameters.</summary>
            <returns>list of values representing object parameters</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.OnTriggerDesc">
            <summary>Specification for on-trigger statements.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.OnTriggerDesc.#ctor(com.espertech.esper.epl.spec.OnTriggerType)">
            <summary>Ctor.</summary>
            <param name="onTriggerType">the type of on-trigger</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OnTriggerDesc.OnTriggerType">
            <summary>Returns the type of the on-trigger statement.</summary>
            <returns>trigger type</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.OnTriggerMergeAction">
            <summary>Specification for the merge statement insert/update/delete-part. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.OnTriggerMergeAction.#ctor(com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.spec.OnTriggerMergeAction"/> class.
            </summary>
            <param name="optionalWhereClause">The optional where clause.</param>
        </member>
        <member name="T:com.espertech.esper.epl.spec.OnTriggerMergeActionDelete">
            <summary>Specification for the merge statement delete-part. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.spec.OnTriggerMergeActionInsert">
            <summary>Specification for the merge statement insert-part. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.spec.OnTriggerMergeActionUpdate">
            <summary>Specification for the merge statement update-part. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.OnTriggerMergeActionUpdate.#ctor(com.espertech.esper.epl.expression.ExprNode,System.Collections.Generic.IList{com.espertech.esper.epl.spec.OnTriggerSetAssignment})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.spec.OnTriggerMergeActionUpdate"/> class.
            </summary>
            <param name="optionalMatchCond">The optional match cond.</param>
            <param name="assignments">The assignments.</param>
        </member>
        <member name="T:com.espertech.esper.epl.spec.OnTriggerMergeDesc">
            <summary>
            Specification for the merge statement.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.spec.OnTriggerWindowDesc">
            <summary>
            Specification for the on-select, on-delete and on-update (via subclass) (no split-stream) statement.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.OnTriggerWindowDesc.#ctor(System.String,System.String,com.espertech.esper.epl.spec.OnTriggerType,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="windowName">the window name</param>
            <param name="optionalAsName">the optional name</param>
            <param name="onTriggerType">for indicationg on-delete, on-select or on-update</param>
            <param name="deleteAndSelect">if set to <c>true</c> [delete and select].</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OnTriggerWindowDesc.WindowName">
            <summary>
            Returns the window name.
            </summary>
            <value>The name of the window.</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OnTriggerWindowDesc.OptionalAsName">
            <summary>
            Returns the name, or null if none defined.
            </summary>
            <value>The name of the optional as.</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OnTriggerWindowDesc.IsDeleteAndSelect">
            <summary>
            Gets or sets a value indicating whether [delete and select].
            </summary>
            <value><c>true</c> if [delete and select]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:com.espertech.esper.epl.spec.OnTriggerMergeDesc.#ctor(System.String,System.String,System.Collections.Generic.IList{com.espertech.esper.epl.spec.OnTriggerMergeMatched})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.spec.OnTriggerMergeDesc"/> class.
            </summary>
            <param name="windowName">Name of the window.</param>
            <param name="optionalAsName">Name of the optional as.</param>
            <param name="items">The items.</param>
        </member>
        <member name="T:com.espertech.esper.epl.spec.OnTriggerMergeEntry">
            <summary>Specification for the merge statement insert/update/delete-part. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.spec.OnTriggerMergeMatched">
            <summary>Specification for the merge statement insert/update/delete-part. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.spec.OnTriggerSetAssignment">
            <summary>
            Descriptor for an on-set assignment.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.OnTriggerSetAssignment.#ctor(System.String,com.espertech.esper.epl.expression.ExprNode)">
            <summary>Ctor. </summary>
            <param name="variableName">variable name</param>
            <param name="expression">expression providing new variable value</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OnTriggerSetAssignment.VariableName">
            <summary>Returns the variable name </summary>
            <value>variable name</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OnTriggerSetAssignment.Expression">
            <summary>Returns the expression providing the new variable value, or null if none </summary>
            <value>assignment expression</value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.OnTriggerSetDesc">
            <summary>Specification for the on-set statement.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.OnTriggerSetDesc.#ctor(System.Collections.Generic.IList{com.espertech.esper.epl.spec.OnTriggerSetAssignment})">
            <summary> Ctor.</summary>
            <param name="assignments">is a list of assignments</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OnTriggerSetDesc.Assignments">
            <summary>Returns a list of all variables assignment by the on-set</summary>
            <returns>list of assignments</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.OnTriggerSplitStream">
            <summary>
            Split-stream description.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.OnTriggerSplitStream.#ctor(com.espertech.esper.epl.spec.InsertIntoDesc,com.espertech.esper.epl.spec.SelectClauseSpecRaw,com.espertech.esper.epl.expression.ExprNode)">
            <summary>Ctor. </summary>
            <param name="insertInto">the insert-into clause</param>
            <param name="selectClause">the select-clause</param>
            <param name="whereClause">where-expression or null</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OnTriggerSplitStream.InsertInto">
            <summary>Returns the insert-into clause. </summary>
            <value>insert-into</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OnTriggerSplitStream.SelectClause">
            <summary>Returns the select clause. </summary>
            <value>select</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OnTriggerSplitStream.WhereClause">
            <summary>Returns the where clause or null if not defined </summary>
            <value>where clause</value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.OnTriggerSplitStreamDesc">
            <summary>
            Specification for the on-select splitstream statement.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.OnTriggerSplitStreamDesc.#ctor(com.espertech.esper.epl.spec.OnTriggerType,System.Boolean,System.Collections.Generic.IList{com.espertech.esper.epl.spec.OnTriggerSplitStream})">
            <summary>
            Ctor.
            </summary>
            <param name="onTriggerType">type of trigger</param>
            <param name="isFirst">true for use the first-matching where clause, false for all</param>
            <param name="splitStreams">streams</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OnTriggerSplitStreamDesc.SplitStreams">
            <summary>
            Returns the remaining insert-into and select-clauses in the split-stream clause.
            </summary>
            <returns>
            clauses.
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OnTriggerSplitStreamDesc.IsFirst">
            <summary>
            Returns indicator whether only the first or all where-clauses are triggering.
            </summary>
            <returns>
            first or all
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.OnTriggerType">
            <summary>Enum for the type of on-trigger statement.</summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.OnTriggerType.ON_DELETE">
            <summary>
            For on-delete triggers that delete from a named window when a triggering event arrives.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.OnTriggerType.ON_SELECT">
            <summary>
            For on-select triggers that selected from a named window when a triggering event arrives.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.OnTriggerType.ON_SPLITSTREAM">
            <summary>
            For the on-insert split-stream syntax allowing multiple insert-into streams.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.OnTriggerType.ON_SET">
            <summary>
            For on-set triggers that set variable values when a triggering event arrives.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.OnTriggerType.ON_UPDATE">
            <summary>
            For on-update triggers that update an event in a named window when a
            triggering event arrives.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.OnTriggerType.ON_MERGE">
            <summary>
            For on-merge triggers that insert/update an event in a named window when a
            triggering event arrives.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.spec.OnTriggerWindowUpdateDesc">
            <summary>
            Specification for the on-select and on-delete (no split-stream) statement.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.OnTriggerWindowUpdateDesc.#ctor(System.String,System.String,System.Collections.Generic.IList{com.espertech.esper.epl.spec.OnTriggerSetAssignment})">
            <summary>Ctor. </summary>
            <param name="windowName">the window name</param>
            <param name="optionalAsName">the optional name</param>
            <param name="assignments">set-assignments</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OnTriggerWindowUpdateDesc.Assignments">
            <summary>Returns assignments. </summary>
            <returns>assignments</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.OrderByItem">
            <summary>
            Specification object to an element in the order-by expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.OrderByItem.#ctor(com.espertech.esper.epl.expression.ExprNode,System.Boolean)">
            <summary>Ctor. </summary>
            <param name="exprNode">is the order-by expression node</param>
            <param name="ascending">is true for ascending, or false for descending sort</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OrderByItem.ExprNode">
            <summary>Returns the order-by expression node. </summary>
            <value>expression node.</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OrderByItem.IsDescending">
            <summary>Returns true for ascending, false for descending. </summary>
            <value>indicator if ascending or descending</value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.OuterJoinDesc">
            <summary>Contains the ON-clause criteria in an outer join. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.OuterJoinDesc.#ctor(com.espertech.esper.type.OuterJoinType,com.espertech.esper.epl.expression.ExprIdentNode,com.espertech.esper.epl.expression.ExprIdentNode,com.espertech.esper.epl.expression.ExprIdentNode[],com.espertech.esper.epl.expression.ExprIdentNode[])">
            <summary>Ctor. </summary>
            <param name="outerJoinType">type of the outer join</param>
            <param name="optLeftNode">left hand identifier node</param>
            <param name="optRightNode">right hand identifier node</param>
            <param name="optAddLeftNode">additional optional left hand identifier nodes for the on-clause in a logical-and</param>
            <param name="optAddRightNode">additional optional right hand identifier nodes for the on-clause in a logical-and</param>
        </member>
        <member name="M:com.espertech.esper.epl.spec.OuterJoinDesc.MakeExprNode(com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Make an expression node that represents the outer join criteria as specified in the on-clause. </summary>
            <param name="exprEvaluatorContext">context for expression evalauation</param>
            <returns>expression node for outer join criteria</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OuterJoinDesc.OuterJoinType">
            <summary>Returns the type of outer join (left/right/full). </summary>
            <value>outer join type</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OuterJoinDesc.OptLeftNode">
            <summary>Returns left hand identifier node. </summary>
            <value>left hand</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OuterJoinDesc.OptRightNode">
            <summary>Returns right hand identifier node. </summary>
            <value>right hand</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OuterJoinDesc.AdditionalLeftNodes">
            <summary>Returns additional properties in the on-clause, if any, that are connected via logical-and </summary>
            <value>additional properties</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.OuterJoinDesc.AdditionalRightNodes">
            <summary>Returns additional properties in the on-clause, if any, that are connected via logical-and </summary>
            <value>additional properties</value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.OutputLimitLimitType">
            <summary>Enum for describing the type of output limit within an interval.</summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.OutputLimitLimitType.FIRST">
            <summary>
            Output first event, relative to the output batch.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.OutputLimitLimitType.LAST">
            <summary>
            Output last event, relative to the output batch.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.OutputLimitLimitType.ALL">
            <summary>
            The ALL keyword has been explicitly specified: Output all events,
            relative to the output batch.
            <para/>
            In the fully-grouped and aggregated case, the explicit ALL outputs one row for each group.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.OutputLimitLimitType.DEFAULT">
            <summary>
            The ALL keyword has not been explicitly specified: Output all events, relative
            to the output batch.
            <para/>
            In the fully-grouped and aggregated case, the
            default ALL outputs all events of the batch row-by-row, multiple per group.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.OutputLimitLimitType.SNAPSHOT">
            <summary>
            Output a snapshot of the current state, relative to the full historical state of a statement.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.spec.OutputLimitRateType">
            <summary>Enum for the type of rate for output-rate limiting. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.OutputLimitRateType.EVENTS">
            <summary>Output by number of events. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.OutputLimitRateType.CRONTAB">
            <summary>Output following a crontab-like schedule. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.OutputLimitRateType.WHEN_EXPRESSION">
            <summary>Output when an expression turns true. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.OutputLimitRateType.TIME_PERIOD">
            <summary>Output based on a time period passing. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.OutputLimitRateType.AFTER">
            <summary>Output after a given time period </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.OutputLimitRateType.TERM">
            <summary>Output upon context partition (agent instance) termination </summary>
        </member>
        <member name="T:com.espertech.esper.epl.spec.OutputLimitSpec">
            <summary>Spec for defining an output rate </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.OutputLimitSpec.#ctor(System.Nullable{System.Double},System.String,com.espertech.esper.epl.spec.OutputLimitRateType,com.espertech.esper.epl.spec.OutputLimitLimitType,com.espertech.esper.epl.expression.ExprNode,System.Collections.Generic.IList{com.espertech.esper.epl.spec.OnTriggerSetAssignment},System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode},com.espertech.esper.epl.expression.ExprTimePeriod,com.espertech.esper.epl.expression.ExprTimePeriod,System.Nullable{System.Int32},System.Boolean,com.espertech.esper.epl.expression.ExprNode,System.Collections.Generic.IList{com.espertech.esper.epl.spec.OnTriggerSetAssignment})">
            <summary>
            Ctor. For batching events by event count.
            </summary>
            <param name="rate">is the fixed output rate, or null if by variable</param>
            <param name="variableForRate">an optional variable name instead of the rate</param>
            <param name="rateType">type of the rate</param>
            <param name="displayLimit">indicates whether to output only the first, only the last, or all events</param>
            <param name="whenExpressionNode">for controlling output by a bool expression</param>
            <param name="thenExpressions">variable assignments, if null if none</param>
            <param name="crontabAtSchedule">crontab parameters</param>
            <param name="timePeriodExpr">the time period, or null if none</param>
            <param name="afterTimePeriodExpr">after-keyword time period</param>
            <param name="afterNumberOfEvents">after-keyword number of events</param>
            <param name="isAndAfterTerminate">if set to <c>true</c> [and after terminate].</param>
            <param name="andAfterTerminateExpr">The and after terminate expr.</param>
            <param name="andAfterTerminateSetExpressions">The and after terminate set expressions.</param>
        </member>
        <member name="T:com.espertech.esper.epl.spec.PatternGuardSpec">
            <summary>
            Specification for a pattern guard object consists of a namespace, name and guard object parameters.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.PatternGuardSpec.#ctor(System.String,System.String,System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode})">
            <summary>Constructor.</summary>
            <param name="_namespace">if the namespace the object is in</param>
            <param name="objectName">is the name of the object</param>
            <param name="objectParameters">
            is a list of values representing the object parameters
            </param>
        </member>
        <member name="T:com.espertech.esper.epl.spec.PatternObserverSpec">
            <summary>
            Specification for a pattern observer object consists of a namespace, name and object parameters.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.PatternObserverSpec.#ctor(System.String,System.String,System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode})">
            <summary>Constructor.</summary>
            <param name="_namespace">if the namespace the object is in</param>
            <param name="objectName">is the name of the object</param>
            <param name="objectParameters">
            is a list of values representing the object parameters
            </param>
        </member>
        <member name="T:com.espertech.esper.epl.spec.PatternStreamSpecCompiled">
            <summary>
            Specification for building an event stream out of a pattern statement and views staggered onto the pattern statement.
            <para/> 
            The pattern statement is represented by the top EvalNode evaluation node. A pattern statement contains tagged events 
            (i.e. a=A -&gt; b=B). Thus the resulting event type is has properties "a" and "b" of the type of A and B.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.PatternStreamSpecCompiled.#ctor(com.espertech.esper.pattern.EvalFactoryNode,System.Collections.Generic.IDictionary{System.String,com.espertech.esper.collection.Pair{com.espertech.esper.client.EventType,System.String}},System.Collections.Generic.IDictionary{System.String,com.espertech.esper.collection.Pair{com.espertech.esper.client.EventType,System.String}},com.espertech.esper.compat.collections.LinkedHashSet{System.String},System.Collections.Generic.IList{com.espertech.esper.epl.spec.ViewSpec},System.String,com.espertech.esper.epl.spec.StreamSpecOptions)">
            <summary>Ctor. </summary>
            <param name="evalFactoryNode">pattern evaluation node representing pattern statement</param>
            <param name="viewSpecs">specifies what view to use to derive data</param>
            <param name="taggedEventTypes">event tags and their types as specified in the pattern, copied to allow original collection to change</param>
            <param name="arrayEventTypes">event tags and their types as specified in the pattern for any repeat-expressions that generate an array of events</param>
            <param name="optionalStreamName">stream name, or null if none supplied</param>
            <param name="streamSpecOptions">additional stream options such as unidirectional stream in a join, applicable for joins</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.PatternStreamSpecCompiled.EvalFactoryNode">
            <summary>Returns the pattern expression evaluation node for the top pattern operator. </summary>
            <value>parent pattern expression node</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.PatternStreamSpecCompiled.TaggedEventTypes">
            <summary>Returns event types tagged in the pattern expression. </summary>
            <value>map of tag and event type tagged in pattern expression</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.PatternStreamSpecCompiled.ArrayEventTypes">
            <summary>Returns event types tagged in the pattern expression under a repeat-operator. </summary>
            <value>map of tag and event type tagged in pattern expression, repeated an thus producing array events</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.PatternStreamSpecCompiled.AllTags">
            <summary>
            Gets or sets all tags.
            </summary>
            <value>All tags.</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.PatternStreamSpecCompiled.MatchedEventMapMeta">
            <summary>
            Gets the matched event map meta.
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.PatternStreamSpecRaw">
            <summary>Pattern specification in unvalidated, unoptimized form. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.PatternStreamSpecRaw.#ctor(com.espertech.esper.pattern.EvalFactoryNode,System.Collections.Generic.IDictionary{com.espertech.esper.pattern.EvalFactoryNode,System.String},System.Collections.Generic.IEnumerable{com.espertech.esper.epl.spec.ViewSpec},System.String,com.espertech.esper.epl.spec.StreamSpecOptions)">
            <summary>
            Ctor.
            </summary>
            <param name="evalFactoryNode">pattern evaluation node representing pattern statement</param>
            <param name="evalNodeExpressions">The eval node expressions.</param>
            <param name="viewSpecs">specifies what view to use to derive data</param>
            <param name="optionalStreamName">stream name, or null if none supplied</param>
            <param name="streamSpecOptions">additional options, such as unidirectional stream in a join</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.PatternStreamSpecRaw.EvalFactoryNode">
            <summary>Returns the pattern expression evaluation node for the top pattern operator. </summary>
            <value>parent pattern expression node</value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.PluggableObjectCollection">
            <summary>
            Repository for pluggable objects of different types that follow a "namespace:name" notation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.PluggableObjectCollection.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.PluggableObjectCollection.AddViews(System.Collections.Generic.IList{com.espertech.esper.client.ConfigurationPlugInView},System.Collections.Generic.IList{com.espertech.esper.client.ConfigurationPlugInVirtualDataWindow})">
            <summary>
            Add a plug-in view.
            </summary>
            <param name="configurationPlugInViews">is a list of configured plug-in view objects.</param>
            <param name="configurationPlugInVirtualDW">The configuration plug in virtual DW.</param>
            <throws>ConfigurationException if the configured views don't resolve</throws>
        </member>
        <member name="M:com.espertech.esper.epl.spec.PluggableObjectCollection.AddPatternObjects(System.Collections.Generic.IList{com.espertech.esper.client.ConfigurationPlugInPatternObject})">
            <summary>Add a plug-in pattern object. </summary>
            <param name="configPattern">is a list of configured plug-in pattern objects.</param>
            <throws>ConfigurationException if the configured patterns don't resolve</throws>
        </member>
        <member name="M:com.espertech.esper.epl.spec.PluggableObjectCollection.AddObjects(com.espertech.esper.epl.spec.PluggableObjectCollection)">
            <summary>Add the plug-in objects for another collection. </summary>
            <param name="other">is the collection to add</param>
        </member>
        <member name="M:com.espertech.esper.epl.spec.PluggableObjectCollection.AddObject(System.String,System.String,System.Type,com.espertech.esper.epl.spec.PluggableObjectType)">
            <summary>Add a single object to the collection. </summary>
            <param name="namespace">is the object's namespace</param>
            <param name="name">is the object's name</param>
            <param name="clazz">is the class the object resolves to</param>
            <param name="type">is the object type</param>
        </member>
        <member name="M:com.espertech.esper.epl.spec.PluggableObjectCollection.AddObject(System.String,System.String,System.Type,com.espertech.esper.epl.spec.PluggableObjectType,System.Object)">
            <summary>
            Add a single object to the collection also adding additional configuration.
            </summary>
            <param name="namespace">is the object's namespace</param>
            <param name="name">is the object's name</param>
            <param name="clazz">is the class the object resolves to</param>
            <param name="type">is the object type</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.PluggableObjectCollection.Pluggables">
            <summary>
            The underlying nested map of namespace keys and name-to-object maps.
            </summary>
            <value>pluggable object collected</value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.PluggableObjectType">
            <summary>Enumeration for types of plug-in objects. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.PluggableObjectType.PATTERN_GUARD">
            <summary>Pattern guard object type. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.PluggableObjectType.PATTERN_OBSERVER">
            <summary>Pattern observer object type. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.PluggableObjectType.VIEW">
            <summary>View object type. </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.PluggableObjectType.VIRTUALDW">
            <summary>Virtual data window object type. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.spec.PropertyEvalAtom">
            <summary>
            Atom in a specification for property evaluation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.PropertyEvalAtom.#ctor(com.espertech.esper.epl.expression.ExprNode,System.String,System.String,com.espertech.esper.epl.spec.SelectClauseSpecRaw,com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Ctor.
            </summary>
            <param name="splitterExpression">The splitter expression.</param>
            <param name="optionalResultEventType">Type of the optional result event.</param>
            <param name="optionalAsName">column name assigned, if any</param>
            <param name="optionalSelectClause">select clause, if any</param>
            <param name="optionalWhereClause">where clause, if any</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.PropertyEvalAtom.OptionalAsName">
            <summary>Returns the column name if assigned. </summary>
            <value>column name</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.PropertyEvalAtom.OptionalSelectClause">
            <summary>Returns the select clause if specified. </summary>
            <value>select clause</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.PropertyEvalAtom.OptionalWhereClause">
            <summary>Returns the where clause, if specified. </summary>
            <value>filter expression</value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.PropertyEvalSpec">
            <summary>
            Specification for property evaluation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.PropertyEvalSpec.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.PropertyEvalSpec.Add(com.espertech.esper.epl.spec.PropertyEvalAtom)">
            <summary>Add an atom. </summary>
            <param name="atom">to add</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.PropertyEvalSpec.Atoms">
            <summary>
            Return a list of atoms.
            </summary>
            <value>atoms</value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.RowLimitSpec">
            <summary>Spec for defining a row limit. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.RowLimitSpec.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>Ctor. </summary>
            <param name="numRows">max num rows constant, null if using variable</param>
            <param name="optionalOffset">offset or null</param>
            <param name="numRowsVariable">max num rows variable, null if using constant</param>
            <param name="optionalOffsetVariable">offset variable or null</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.RowLimitSpec.NumRows">
            <summary>Returns max num rows constant or null if using variable. </summary>
            <returns>limit</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.RowLimitSpec.OptionalOffset">
            <summary>Returns offset constant or null. </summary>
            <returns>offset</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.RowLimitSpec.NumRowsVariable">
            <summary>Returns max num rows variable or null if using constant. </summary>
            <returns>limit</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.RowLimitSpec.OptionalOffsetVariable">
            <summary>Returns offset variable or null </summary>
            <returns>offset variable</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.SelectClauseElementCompiled">
            <summary>Marker interface for elements in a select clause that is in the compiled form. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.spec.SelectClauseElementRaw">
            <summary>
            Marker interface for elements in a select clause that is in the raw (storable) form.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.spec.SelectClauseElementWildcard">
            <summary>
            Represents a wildcard as a select clause element.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.spec.SelectClauseExprCompiledSpec">
            <summary>
            Represents a single item in a SELECT-clause, with a name assigned either by the engine or by the user specifying an "as" tag name.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.SelectClauseExprCompiledSpec.#ctor(com.espertech.esper.epl.expression.ExprNode,System.String,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="selectExpression">the expression node to evaluate for matching events</param>
            <param name="assignedName">cannot be null as a name is always assigned orsystem-determined</param>
            <param name="providedName">Name of the provided.</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseExprCompiledSpec.SelectExpression">
            <summary>Returns the expression node representing the item in the select clause. </summary>
            <value>expression node for item</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseExprCompiledSpec.AssignedName">
            <summary>Returns the name of the item in the select clause. </summary>
            <value>name of item</value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.SelectClauseExprRawSpec">
            <summary>
            Represents a single item in a SELECT-clause, potentially unnamed as no "as" tag may have been
            supplied in the syntax.
            <para/> 
            Compare to <see cref="T:com.espertech.esper.epl.spec.SelectClauseExprCompiledSpec"/> which carries a determined name.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.SelectClauseExprRawSpec.#ctor(com.espertech.esper.epl.expression.ExprNode,System.String)">
            <summary>Ctor. </summary>
            <param name="selectExpression">the expression node to evaluate for matching events</param>
            <param name="optionalAsName">the name of the item, null if not name supplied</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseExprRawSpec.SelectExpression">
            <summary>Returns the expression node representing the item in the select clause. </summary>
            <returns>expression node for item</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseExprRawSpec.OptionalAsName">
            <summary>Returns the name of the item in the select clause. </summary>
            <returns>name of item</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.SelectClauseSpecCompiled">
            <summary>
            Encapsulates the parsed select expressions in a select-clause in an EPL statement.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.SelectClauseSpecCompiled.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.spec.SelectClauseSpecCompiled"/> class.
            </summary>
            <param name="isDistinct">if set to <c>true</c> for distinct output</param>
        </member>
        <member name="M:com.espertech.esper.epl.spec.SelectClauseSpecCompiled.#ctor(System.Collections.Generic.IList{com.espertech.esper.epl.spec.SelectClauseElementCompiled},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.epl.spec.SelectClauseSpecCompiled"/> class.
            </summary>
            <param name="selectList">for a populates list of select expressions</param>
            <param name="isDistinct">if set to <c>true</c> for distinct output</param>
        </member>
        <member name="M:com.espertech.esper.epl.spec.SelectClauseSpecCompiled.Add(com.espertech.esper.epl.spec.SelectClauseElementCompiled)">
            <summary>Adds an select expression within the select clause. </summary>
            <param name="element">is the expression to add</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseSpecCompiled.SelectExprList">
            <summary>Returns the list of select expressions. </summary>
            <returns>list of expressions</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseSpecCompiled.IsUsingWildcard">
            <summary>Returns true if the select clause contains at least one wildcard. </summary>
            <returns>true if clause contains wildcard, false if not</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseSpecCompiled.IsDistinct">
            <summary>
            Returns indictor whether distinct or not.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.spec.SelectClauseSpecRaw">
            <summary>
            Encapsulates the parsed select expressions in a select-clause in an EPL statement.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.SelectClauseSpecRaw.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.SelectClauseSpecRaw.Add(com.espertech.esper.epl.spec.SelectClauseElementRaw)">
            <summary>
            Adds an select expression within the select clause.
            </summary>
            <param name="element">is the expression to add</param>
        </member>
        <member name="M:com.espertech.esper.epl.spec.SelectClauseSpecRaw.AddAll(System.Collections.Generic.IEnumerable{com.espertech.esper.epl.spec.SelectClauseElementRaw})">
            <summary>
            Adds select expressions within the select clause.
            </summary>
            <param name="elements">is the expressions to add</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseSpecRaw.IsOnlyWildcard">
            <summary>
            Gets a value indicating whether this instance is only wildcard.
            </summary>
            <value>
            	<c>true</c> if this instance is only wildcard; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseSpecRaw.IsDistinct">
            <summary>
            Gets or sets a value indicating whether this instance is distinct.
            </summary>
            <value>
            	<c>true</c> if this instance is distinct; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseSpecRaw.SelectExprList">
            <summary>Returns the list of select expressions. </summary>
            <returns>list of expressions</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseSpecRaw.IsUsingWildcard">
            <summary>Returns true if the select clause contains at least one wildcard. </summary>
            <returns>true if clause contains wildcard, false if not</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.SelectClauseStreamCompiledSpec">
            <summary>
            Mirror class to <seealso cref="T:com.espertech.esper.epl.spec.SelectClauseStreamRawSpec"/> but added the stream
            number for the name.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.SelectClauseStreamCompiledSpec.#ctor(System.String,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="streamName">is the stream name of the stream to select</param>
            <param name="optionalColumnName">is the column name</param>
        </member>
        <member name="M:com.espertech.esper.epl.spec.SelectClauseStreamCompiledSpec.SetProperty(System.Boolean,System.Type)">
            <summary>
            Sets an indicate that a property was selected with wildcard.
            </summary>
            <param name="property">selected</param>
            <param name="propertyType">the return type</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseStreamCompiledSpec.StreamName">
            <summary>
            Returns the stream name (e.g. select streamName from MyEvent as streamName).
            </summary>
            <returns>
            name
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseStreamCompiledSpec.OptionalName">
            <summary>
            Returns the column name.
            </summary>
            <returns>
            name
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseStreamCompiledSpec.StreamNumber">
            <summary>
            Returns the stream number of the stream for the stream name.
            </summary>
            <returns>
            stream number
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseStreamCompiledSpec.IsFragmentEvent">
            <summary>
            Returns true to indicate that we are meaning to select a tagged event in a
            pattern, or false if selecting an event from a stream.
            </summary>
            <returns>
            true for tagged event in pattern, false for stream
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseStreamCompiledSpec.IsProperty">
            <summary>
            True if selecting from a property, false if not
            </summary>
            <returns>
            indicator whether property or not
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseStreamCompiledSpec.PropertyType">
            <summary>
            Returns property type.
            </summary>
            <returns>
            property type
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.SelectClauseStreamRawSpec">
            <summary>
            For use in select clauses for specifying a selected stream:
                select a.* from MyEvent as a, MyOther as b
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.SelectClauseStreamRawSpec.#ctor(System.String,System.String)">
            <summary>Ctor. </summary>
            <param name="streamName">is the stream name of the stream to select</param>
            <param name="optionalAsName">is the column name</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseStreamRawSpec.StreamName">
            <summary>
            Returns the stream name (e.g. select streamName from MyEvent as streamName).
            </summary>
            <value>The name of the stream.</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SelectClauseStreamRawSpec.OptionalAsName">
            <summary>
            Returns the column alias (e.g. select streamName as mycol from MyEvent as streamName).
            </summary>
            <value>The name of the optional as.</value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.SelectClauseStreamSelectorEnum">
            <summary>
            Enumeration for representing select-clause selection of the remove stream or the insert stream, or both.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.SelectClauseStreamSelectorEnum.RSTREAM_ONLY">
            <summary> Indicates selection of the remove stream only.</summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.SelectClauseStreamSelectorEnum.ISTREAM_ONLY">
            <summary> Indicates selection of the insert stream only.</summary>
        </member>
        <member name="F:com.espertech.esper.epl.spec.SelectClauseStreamSelectorEnum.RSTREAM_ISTREAM_BOTH">
            <summary> Indicates selection of both the insert and the remove stream.  </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.SelectClauseStreamSelectorEnumHelper.MapFromSODA(com.espertech.esper.client.soda.StreamSelector)">
            <summary>Maps the SODA-selector to the internal representation</summary>
            <param name="selector">is the SODA-selector to map</param>
            <returns>internal stream selector</returns>
        </member>
        <member name="M:com.espertech.esper.epl.spec.SelectClauseStreamSelectorEnumHelper.MapFromSODA(com.espertech.esper.epl.spec.SelectClauseStreamSelectorEnum)">
            <summary>Maps the internal stream selector to the SODA-representation</summary>
            <param name="selector">is the internal selector to map</param>
            <returns>SODA stream selector</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.StatementSpecCompiled">
            <summary>
            Specification object representing a complete EPL statement including all EPL constructs.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StatementSpecCompiled.#ctor(com.espertech.esper.epl.spec.OnTriggerDesc,com.espertech.esper.epl.spec.CreateWindowDesc,com.espertech.esper.epl.spec.CreateIndexDesc,com.espertech.esper.epl.spec.CreateVariableDesc,com.espertech.esper.epl.spec.CreateSchemaDesc,com.espertech.esper.epl.spec.InsertIntoDesc,com.espertech.esper.epl.spec.SelectClauseStreamSelectorEnum,com.espertech.esper.epl.spec.SelectClauseSpecCompiled,System.Collections.Generic.IList{com.espertech.esper.epl.spec.StreamSpecCompiled},System.Collections.Generic.IList{com.espertech.esper.epl.spec.OuterJoinDesc},com.espertech.esper.epl.expression.ExprNode,System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode},com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.epl.spec.OutputLimitSpec,System.Collections.Generic.IList{com.espertech.esper.epl.spec.OrderByItem},System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprSubselectNode},System.Collections.Generic.IList{com.espertech.esper.epl.declexpr.ExprDeclaredNode},System.Collections.Generic.ICollection{System.String},com.espertech.esper.epl.spec.RowLimitSpec,System.Collections.Generic.ICollection{System.String},System.Attribute[],com.espertech.esper.epl.spec.UpdateDesc,com.espertech.esper.epl.spec.MatchRecognizeSpec,com.espertech.esper.epl.spec.ForClauseSpec,System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode}},com.espertech.esper.epl.spec.CreateContextDesc,System.String,com.espertech.esper.epl.spec.CreateDataFlowDesc,com.espertech.esper.epl.spec.CreateExpressionDesc)">
            <summary>
            Ctor.
            </summary>
            <param name="onTriggerDesc">describes on-delete statements</param>
            <param name="createWindowDesc">describes create-window statements</param>
            <param name="createIndexDesc">when an index get</param>
            <param name="createVariableDesc">describes create-variable statements</param>
            <param name="createSchemaDesc">The create schema desc.</param>
            <param name="insertIntoDesc">insert into def</param>
            <param name="selectClauseStreamSelectorEnum">stream selection</param>
            <param name="selectClauseSpec">select clause</param>
            <param name="streamSpecs">specs for streams</param>
            <param name="outerJoinDescList">outer join def</param>
            <param name="filterExprRootNode">where filter expr nodes</param>
            <param name="groupByExpressions">group by expression</param>
            <param name="havingExprRootNode">having expression</param>
            <param name="outputLimitSpec">output limit</param>
            <param name="orderByList">order by</param>
            <param name="subSelectExpressions">list of subqueries</param>
            <param name="declaredExpressions">The declared expressions.</param>
            <param name="variableReferences">variables referenced</param>
            <param name="rowLimitSpec">row limit specification, or null if none supplied</param>
            <param name="eventTypeReferences">event type names statically determined</param>
            <param name="annotations">statement annotations</param>
            <param name="updateSpec">update specification if used</param>
            <param name="matchRecognizeSpec">if provided</param>
            <param name="forClauseSpec">For clause spec.</param>
            <param name="sqlParameters">The SQL parameters.</param>
            <param name="contextDesc">The context desc.</param>
            <param name="optionalContextName">Name of the optional context.</param>
            <param name="createGraphDesc">The create graph desc.</param>
            <param name="createExpressionDesc">The create expression desc.</param>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StatementSpecCompiled.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.CreateWindowDesc">
            <summary>Returns the specification for an create-window statement. </summary>
            <value>create-window spec, or null if not such a statement</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.CreateVariableDesc">
            <summary>Returns the create-variable statement descriptor. </summary>
            <value>create-variable spec</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.StreamSpecs">
            <summary>Returns the FROM-clause stream definitions. </summary>
            <value>list of stream specifications</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.SelectClauseSpec">
            <summary>Returns SELECT-clause list of expressions. </summary>
            <value>list of expressions and optional name</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.FilterRootNode">
            <summary>Returns the WHERE-clause root node of filter expression. </summary>
            <value>filter expression root node</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.OuterJoinDescList">
            <summary>Returns the LEFT/RIGHT/FULL OUTER JOIN-type and property name descriptor, if applicable. Returns null if regular join. </summary>
            <value>outer join type, stream names and property names</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.GroupByExpressions">
            <summary>Returns list of group-by expressions. </summary>
            <value>group-by expression nodes as specified in group-by clause</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.HavingExprRootNode">
            <summary>Returns expression root node representing the having-clause, if present, or null if no having clause was supplied. </summary>
            <value>having-clause expression top node</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.OutputLimitSpec">
            <summary>Returns the output limit definition, if any. </summary>
            <value>output limit spec</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.InsertIntoDesc">
            <summary>Return a descriptor with the insert-into event name and optional list of columns. </summary>
            <value>insert into specification</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.OrderByList">
            <summary>Returns the list of order-by expression as specified in the ORDER BY clause. </summary>
            <value>Returns the orderByList.</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.SelectStreamSelectorEnum">
            <summary>Returns the stream selector (rstream/istream). </summary>
            <value>stream selector</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.FilterExprRootNode">
            <summary>Set the where clause filter node. </summary>
            <value>is the where-clause filter node</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.SubSelectExpressions">
            <summary>Returns the list of lookup expression nodes. </summary>
            <value>lookup nodes</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.OnTriggerDesc">
            <summary>Returns the specification for an on-delete or on-select statement. </summary>
            <value>on-trigger spec, or null if not such a statement</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.IsHasVariables">
            <summary>Returns true to indicate the statement has variables. </summary>
            <value>true for statements that use variables</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.SelectStreamDirEnum">
            <summary>Sets the stream selection. </summary>
            <value>stream selection</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.RowLimitSpec">
            <summary>Returns the row limit specification, or null if none supplied. </summary>
            <value>row limit spec if any</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.EventTypeReferences">
            <summary>Returns the event type name in used by the statement. </summary>
            <value>set of event type name</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.Annotations">
            <summary>Returns annotations or empty array if none. </summary>
            <value>annotations</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.UpdateSpec">
            <summary>Returns the update spec if update clause is used. </summary>
            <value>update desc</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.MatchRecognizeSpec">
            <summary>Returns the match recognize spec, if used </summary>
            <value>match recognize spec</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.VariableReferences">
            <summary>Return variables referenced. </summary>
            <value>variables</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecCompiled.CreateIndexDesc">
            <summary>Returns create index </summary>
            <value>create index</value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.StatementSpecMapContext">
            <summary>
            Context for mapping a SODA statement to a statement specification, or multiple for subqueries, and 
            obtaining certain optimization information from a statement.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StatementSpecMapContext.#ctor(com.espertech.esper.epl.core.EngineImportService,com.espertech.esper.epl.variable.VariableService,com.espertech.esper.client.ConfigurationInformation,com.espertech.esper.schedule.SchedulingService,System.String,com.espertech.esper.pattern.PatternNodeFactory,com.espertech.esper.epl.named.NamedWindowService,com.espertech.esper.core.context.mgr.ContextManagementService,com.espertech.esper.epl.declexpr.ExprDeclaredService)">
            <summary>
            Ctor.
            </summary>
            <param name="engineImportService">engine imports</param>
            <param name="variableService">variable names</param>
            <param name="configuration">the configuration</param>
            <param name="schedulingService">The scheduling service.</param>
            <param name="engineURI">The engine URI.</param>
            <param name="patternNodeFactory">The pattern node factory.</param>
            <param name="namedWindowService">The named window service.</param>
            <param name="contextManagementService">The context management service.</param>
            <param name="exprDeclaredService">The expr declared service.</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecMapContext.EngineImportService">
            <summary>Returns the engine import service. </summary>
            <value>service</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecMapContext.VariableService">
            <summary>Returns the variable service. </summary>
            <value>service</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecMapContext.HasVariables">
            <summary>Returns true if a statement has variables. </summary>
            <value>true for variables found</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecMapContext.Configuration">
            <summary>Returns the configuration. </summary>
            <value>config</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecMapContext.VariableNames">
            <summary>Returns variables. </summary>
            <value>variables</value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.StatementSpecMapper">
            <summary>Helper for mapping internal representations of a statement to the SODA object model for statements. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StatementSpecMapper.Unmap(com.espertech.esper.epl.expression.ExprNode)">
            <summary>Unmap expresission. </summary>
            <param name="expression">to unmap</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StatementSpecMapper.Unmap(com.espertech.esper.pattern.EvalFactoryNode)">
            <summary>Unmap pattern. </summary>
            <param name="node">to unmap</param>
            <returns>pattern</returns>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StatementSpecMapper.Unmap(com.espertech.esper.epl.spec.AttributeDesc)">
            <summary>Unmap annotation. </summary>
            <param name="node">to unmap</param>
            <returns>annotation</returns>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StatementSpecMapper.Unmap(com.espertech.esper.rowregex.RowRegexExprNode)">
            <summary>Unmap match recognize pattern. </summary>
            <param name="pattern">recognize pattern to unmap</param>
            <returns>match recognize pattern</returns>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StatementSpecMapper.Map(com.espertech.esper.client.soda.EPStatementObjectModel,com.espertech.esper.epl.core.EngineImportService,com.espertech.esper.epl.variable.VariableService,com.espertech.esper.client.ConfigurationInformation,com.espertech.esper.schedule.SchedulingService,System.String,com.espertech.esper.pattern.PatternNodeFactory,com.espertech.esper.epl.named.NamedWindowService,com.espertech.esper.core.context.mgr.ContextManagementService,com.espertech.esper.epl.declexpr.ExprDeclaredService)">
            <summary>
            Maps the SODA object model to a statement specification.
            </summary>
            <param name="sodaStatement">is the object model to map</param>
            <param name="engineImportService">for resolving imports such as plug-in aggregations</param>
            <param name="variableService">provides variable values</param>
            <param name="configuration">supplies config values</param>
            <param name="schedulingService">The scheduling service.</param>
            <param name="engineURI">The engine URI.</param>
            <param name="patternNodeFactory">The pattern node factory.</param>
            <param name="namedWindowService">The named window service.</param>
            <param name="contextManagementService">The context management service.</param>
            <param name="exprDeclaredService">The expr declared service.</param>
            <returns>
            statement specification, and internal representation of a statement
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StatementSpecMapper.Unmap(com.espertech.esper.epl.spec.StatementSpecRaw)">
            <summary>Maps the internal representation of a statement to the SODA object model. </summary>
            <param name="statementSpec">is the internal representation</param>
            <returns>object model of statement</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.StatementSpecRaw">
            <summary>
            Specification object representing a complete EPL statement including all EPL constructs.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StatementSpecRaw.#ctor(com.espertech.esper.epl.spec.SelectClauseStreamSelectorEnum)">
            <summary>Ctor. </summary>
            <param name="defaultStreamSelector">stream selection for the statement</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.StreamSpecs">
            <summary>Returns the FROM-clause stream definitions. </summary>
            <value>list of stream specifications</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.SelectClauseSpec">
            <summary>Returns SELECT-clause list of expressions. </summary>
            <value>list of expressions and optional name</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.FilterRootNode">
            <summary>Returns the WHERE-clause root node of filter expression. </summary>
            <value>filter expression root node</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.OuterJoinDescList">
            <summary>Returns the LEFT/RIGHT/FULL OUTER JOIN-type and property name descriptor, if applicable. Returns null if regular join. </summary>
            <value>outer join type, stream names and property names</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.GroupByExpressions">
            <summary>Returns list of group-by expressions. </summary>
            <value>group-by expression nodes as specified in group-by clause</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.HavingExprRootNode">
            <summary>Returns expression root node representing the having-clause, if present, or null if no having clause was supplied. </summary>
            <value>having-clause expression top node</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.OutputLimitSpec">
            <summary>Returns the output limit definition, if any. </summary>
            <value>output limit spec</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.InsertIntoDesc">
            <summary>Return a descriptor with the insert-into event name and optional list of columns. </summary>
            <value>insert into specification</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.OrderByList">
            <summary>Returns the list of order-by expression as specified in the ORDER BY clause. </summary>
            <value>Returns the orderByList.</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.SelectStreamSelectorEnum">
            <summary>Returns the stream selector (rstream/istream). </summary>
            <value>stream selector</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.SelectStreamDirEnum">
            <summary>Sets the stream selector (rstream/istream/both etc). </summary>
            <value>to be set</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.CreateWindowDesc">
            <summary>Returns the create-window specification. </summary>
            <value>descriptor for creating a named window</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.OnTriggerDesc">
            <summary>Returns the on-delete statement specification. </summary>
            <value>descriptor for creating a an on-delete statement</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.FilterExprRootNode">
            <summary>Gets the where clause. </summary>
            <value>where clause or null if none</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.HasVariables">
            <summary>Returns true if a statement (or subquery sub-statements) use variables. </summary>
            <value>indicator if variables are used</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.CreateVariableDesc">
            <summary>Returns the descriptor for create-variable statements. </summary>
            <value>create-variable info</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.RowLimitSpec">
            <summary>Returns the row limit, or null if none. </summary>
            <value>row limit</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.Annotations">
            <summary>Returns a list of annotation descriptors. </summary>
            <value>annotation descriptors</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.UpdateDesc">
            <summary>Returns the update specification. </summary>
            <value>update spec</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.ExpressionNoAnnotations">
            <summary>Returns the expression text without annotations. </summary>
            <value>expressionNoAnnotations text</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.MatchRecognizeSpec">
            <summary>Returns the match recognize spec. </summary>
            <value>spec</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.ReferencedVariables">
            <summary>Returns variables referenced </summary>
            <value>vars</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecRaw.CreateIndexDesc">
            <summary>Returns create-index if any. </summary>
            <value>index create</value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.StatementSpecUnMapContext">
            <summary>
            Un-mapping context for mapping from an internal specifications to an SODA object model.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StatementSpecUnMapContext.#ctor">
            <summary>Ctor.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StatementSpecUnMapContext.Add(System.Int32,com.espertech.esper.epl.spec.SubstitutionParameterExpression)">
            <summary>Adds a substitution parameters.</summary>
            <param name="index">is the index of the parameter</param>
            <param name="subsParam">is the parameter expression node</param>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StatementSpecUnMapContext.AddAll(System.Collections.Generic.IDictionary{System.Int32,com.espertech.esper.epl.spec.SubstitutionParameterExpression})">
            <summary>
            Adds all substitution parameters. Checks if indexes already exists
            and throws an exception if they do.
            </summary>
            <param name="inner">to indexes and parameters to add</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecUnMapContext.IndexedParams">
            <summary>Returns all indexed parameters.</summary>
            <returns>map of parameter index and parameter expression node</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.StatementSpecUnMapResult">
            <summary>
            Return result for unmap operators unmapping an intermal statement representation to the SODA object model.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StatementSpecUnMapResult.#ctor(com.espertech.esper.client.soda.EPStatementObjectModel,System.Collections.Generic.IDictionary{System.Int32,com.espertech.esper.epl.spec.SubstitutionParameterExpression})">
            <summary>Ctor.</summary>
            <param name="objectModel">of the statement</param>
            <param name="indexedParams">a map of parameter index and parameter</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecUnMapResult.ObjectModel">
            <summary>Returns the object model.</summary>
            <returns>object model</returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StatementSpecUnMapResult.IndexedParams">
            <summary>
            Returns the substitution paremeters keyed by the parameter's index.
            </summary>
            <returns>map of index and parameter</returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.StreamSpecOptions">
            <summary>
            Abstract base specification for a stream, consists simply of an optional stream
            name and a list of views on to of the stream.
            <para/>
            Implementation classes for views and patterns add additional information
            defining the stream of events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StreamSpecOptions.#ctor">
            <summary>
            Ctor, sets all options off.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.StreamSpecOptions.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="isUnidirectional">true to indicate a unidirectional stream in a join, applicable for joins</param>
            <param name="isRetainUnion">for retaining the union of multiple data windows</param>
            <param name="isRetainIntersection">for retaining the intersection of multiple data windows</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StreamSpecOptions.IsRetainUnion">
            <summary>
            Indicator for retaining the union of multiple expiry policies.
            </summary>
            <returns>
            true for retain union
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StreamSpecOptions.IsRetainIntersection">
            <summary>
            Indicator for retaining the intersection of multiple expiry policies.
            </summary>
            <returns>
            true for retain intersection
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.spec.StreamSpecOptions.IsUnidirectional">
            <summary>
            Returns true to indicate a unidirectional stream in a join, applicable for
            joins.
            </summary>
            <returns>
            indicator whether the stream is unidirectional in a join
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.spec.SubstitutionParameterExpression">
            <summary>
            Substitution parameter that represents a node in an expression tree for which to 
            supply a parameter value before statement creation time.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.SubstitutionParameterExpression.#ctor(System.Int32)">
            <summary>
            Ctor.
            </summary>
            <param name="index">is the index of the substitution parameter</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SubstitutionParameterExpression.Constant">
            <summary>Returns the constant value that the expression represents. </summary>
            <value>value of constant</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SubstitutionParameterExpression.IsSatisfied">
            <summary>Returns true if the parameter is satisfied, or false if not. </summary>
            <value>true if the actual value is supplied, false if not</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.SubstitutionParameterExpression.Index">
            <summary>Returns the index of the parameter. </summary>
            <value>parameter index.</value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.UpdateDesc">
            <summary>Specification for the update statement. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.UpdateDesc.#ctor(System.String,System.Collections.Generic.IList{com.espertech.esper.epl.spec.OnTriggerSetAssignment},com.espertech.esper.epl.expression.ExprNode)">
            <summary>Ctor. </summary>
            <param name="optionalStreamName">a stream name if provided for the update</param>
            <param name="assignments">the individual assignments made</param>
            <param name="optionalWhereClause">the where-clause expression if provided</param>
        </member>
        <member name="P:com.espertech.esper.epl.spec.UpdateDesc.Assignments">
            <summary>Returns a list of all assignment </summary>
            <value>list of assignments</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.UpdateDesc.OptionalStreamName">
            <summary>Returns the stream name if defined. </summary>
            <value>stream name</value>
        </member>
        <member name="P:com.espertech.esper.epl.spec.UpdateDesc.OptionalWhereClause">
            <summary>Returns the where-clause if defined. </summary>
            <value>where clause</value>
        </member>
        <member name="T:com.espertech.esper.epl.spec.ViewSpec">
            <summary>
            Specification for a view object consists of a namespace, name and view object parameters.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.spec.ViewSpec.#ctor(System.String,System.String,System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode})">
            <summary>
            Constructor.
            </summary>
            <param name="namespace">if the namespace the object is in</param>
            <param name="objectName">is the name of the object</param>
            <param name="viewParameters">is a list of expressions representing the view parameters</param>
        </member>
        <member name="T:com.espertech.esper.epl.subquery.SubqueryStopCallback">
            <summary>Implements a stop callback for use with subqueries to clear their indexes when a statement is stopped. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.subquery.SubqueryStopCallback.#ctor(com.espertech.esper.epl.join.table.EventTable)">
            <summary>Ctor. </summary>
            <param name="eventIndex">index to clear</param>
        </member>
        <member name="T:com.espertech.esper.epl.subquery.SubselectAggregatorView">
            <summary>
            View handling the insert and remove stream generated by a subselect
            for application to aggregation state.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.subquery.SubselectAggregatorView.#ctor(com.espertech.esper.epl.agg.service.AggregationService,com.espertech.esper.epl.expression.ExprEvaluator,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Ctor. </summary>
            <param name="aggregationService">for aggregating</param>
            <param name="optionalFilterExpr">for filtering the view-posted events before aggregation</param>
            <param name="exprEvaluatorContext">expression evaluation context</param>
        </member>
        <member name="T:com.espertech.esper.epl.subquery.SubselectBufferObserver">
            <summary>
            Observer to a buffer that is filled by a subselect view when it posts events,
            to be added and removed from indexes.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.subquery.SubselectBufferObserver.#ctor(com.espertech.esper.epl.join.table.EventTable)">
            <summary>Ctor.</summary>
            <param name="eventIndex">index to update</param>
        </member>
        <member name="T:com.espertech.esper.epl.variable.CreateVariableView">
            <summary>View for handling create-variable syntax. 
            <para/> The view posts to listeners when a variable changes, if it has subviews. 
            <para/> The view returns the current variable value for the iterator. 
            <para/> The event type for such posted events is a single field Map with the variable value. 
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.CreateVariableView.#ctor(System.String,com.espertech.esper.events.EventAdapterService,com.espertech.esper.epl.variable.VariableService,System.String,com.espertech.esper.core.service.StatementResultService)">
            <summary>
            Ctor.
            </summary>
            <param name="statementId">The statement id.</param>
            <param name="eventAdapterService">for creating events</param>
            <param name="variableService">for looking up variables</param>
            <param name="variableName">is the name of the variable to create</param>
            <param name="statementResultService">for coordinating on whether insert and remove stream events should be posted</param>
        </member>
        <member name="T:com.espertech.esper.epl.variable.CurrentValue`1">
            <summary>
            A holder for versioned values that holds a current version-value and a prior version-value pair.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.CurrentValue`1.#ctor(com.espertech.esper.epl.variable.VersionedValue{`0},com.espertech.esper.epl.variable.VersionedValue{`0})">
            <summary>Ctor.</summary>
            <param name="currentVersion">current version and value</param>
            <param name="priorVersion">prior version and value</param>
        </member>
        <member name="P:com.espertech.esper.epl.variable.CurrentValue`1.CurrentVersion">
            <summary>Returns the current version.</summary>
            <returns>current version</returns>
        </member>
        <member name="P:com.espertech.esper.epl.variable.CurrentValue`1.PriorVersion">
            <summary>Returns the prior version.</summary>
            <returns>prior version</returns>
        </member>
        <member name="T:com.espertech.esper.epl.variable.OnSetVariableView">
            <summary>
            A view that handles the setting of variables upon receipt of a triggering event.
            <para/>
            Variables are updated atomically and thus a separate commit actually updates the new 
            variable values, or a rollback if an exception occured during validation.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.variable.OnSetVariableViewFactory">
            <summary>
            A factory for a view that handles the setting of variables upon receipt of a triggering event.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.OnSetVariableViewFactory.#ctor(System.String,com.espertech.esper.epl.spec.OnTriggerSetDesc,com.espertech.esper.events.EventAdapterService,com.espertech.esper.epl.variable.VariableService,com.espertech.esper.core.service.StatementResultService,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Ctor.
            </summary>
            <param name="statementId">The statement id.</param>
            <param name="desc">specification for the on-set statement</param>
            <param name="eventAdapterService">for creating statements</param>
            <param name="variableService">for setting variables</param>
            <param name="statementResultService">for coordinating on whether insert and remove stream events should be posted</param>
            <param name="exprEvaluatorContext">context for expression evalauation</param>
            <throws>com.espertech.esper.epl.expression.ExprValidationException if the assignment expressions are invalid</throws>
        </member>
        <member name="T:com.espertech.esper.epl.variable.VariableChangeCallback">
            <summary>
            A callback interface for indicating a change in variable value.
            <param name="newValue">new value</param>
            <param name="oldValue">old value</param>
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.variable.VariableDeclarationException">
            <summary>
            Exception indicating a problem in a variable declaration.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableDeclarationException.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="msg">the exception message.</param>
        </member>
        <member name="T:com.espertech.esper.epl.variable.VariableExistsException">
            <summary>
            Exception indicating a a variable already exists.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableExistsException.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="msg">the exception message.</param>
        </member>
        <member name="T:com.espertech.esper.epl.variable.VariableNotFoundException">
            <summary>
            Exception indicating a variable does not exists.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableNotFoundException.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="msg">the exception message.</param>
        </member>
        <member name="T:com.espertech.esper.epl.variable.VariableReader">
            <summary>
            Reads and writes variable values.
            <para/>
            Works closely with <seealso cref="T:com.espertech.esper.epl.variable.VariableService"/> in determining the version to read.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableReader.#ctor(com.espertech.esper.epl.variable.VariableVersionThreadLocal,System.Type,com.espertech.esper.client.EventType,System.String,System.Int32,com.espertech.esper.epl.variable.VersionedValueList{System.Object},System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="versionThreadLocal">service for returning the threads current version of variable</param>
            <param name="type">is the type of the variable returned</param>
            <param name="eventType">if variable is an event then the type otherwise null</param>
            <param name="variableName">variable name</param>
            <param name="variableNumber">number of the variable</param>
            <param name="versions">a list of versioned-values to ask for the version</param>
            <param name="constant">if set to <c>true</c> [constant].</param>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VariableReader.VariableName">
            <summary>Returns the variable name. </summary>
            <value>variable name</value>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VariableReader.VariableNumber">
            <summary>Returns the variable number. </summary>
            <value>variable index number</value>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VariableReader.VariableType">
            <summary>Returns the type of the variable. </summary>
            <value>type</value>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VariableReader.VersionsHigh">
            <summary>For roll-over (overflow) in version numbers, sets a new collection of versioned-values for the variable to use when requests over the version rollover boundary are made. </summary>
            <value>the list of versions for roll-over</value>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VariableReader.VersionsLow">
            <summary>Sets a new list of versioned-values to inquire against, for use when version numbers roll-over. </summary>
            <value>the list of versions for read</value>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VariableReader.EventType">
            <summary>Returns the event type if the variable hold Event(s). </summary>
            <value>type</value>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VariableReader.Value">
            <summary>Returns the value of a variable. <para /> Considers the version set via thread-local for the thread's atomic read of variable values. </summary>
            <value>value of variable at the version applicable for the thead</value>
        </member>
        <member name="T:com.espertech.esper.epl.variable.VariableReadWritePackage">
            <summary>
            A convenience class for dealing with reading and updating multiple variable values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableReadWritePackage.#ctor(System.Collections.Generic.IList{com.espertech.esper.epl.spec.OnTriggerSetAssignment},com.espertech.esper.epl.variable.VariableService,com.espertech.esper.events.EventAdapterService)">
            <summary>Ctor. </summary>
            <param name="assignments">the list of variable assignments</param>
            <param name="variableService">variable service</param>
            <param name="eventAdapterService">event adapters</param>
            <throws>ExprValidationException when variables cannot be found</throws>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableReadWritePackage.WriteVariables(com.espertech.esper.epl.variable.VariableService,com.espertech.esper.client.EventBean[],System.Collections.Generic.IDictionary{System.String,System.Object},com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Write new variable values and commit, evaluating assignment expressions using the given events per stream.
            <para/>
            Populates an optional map of new values if a non-null map is passed.
            </summary>
            <param name="variableService">variable service</param>
            <param name="eventsPerStream">events per stream</param>
            <param name="valuesWritten">null or an empty map to populate with written values</param>
            <param name="exprEvaluatorContext">expression evaluation context</param>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableReadWritePackage.GetReaders">
            <summary>Returns the readers to all variables. </summary>
            <returns>readers</returns>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableReadWritePackage.AsDictionary">
            <summary>Iterate returning all values. </summary>
            <returns>map of values</returns>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VariableReadWritePackage.VariableTypes">
            <summary>Returns a map of variable names and type of variable. </summary>
            <returns>variables</returns>
        </member>
        <member name="T:com.espertech.esper.epl.variable.VariableService">
            <summary>
            Variables service for reading and writing variables, and for setting a version number for the current thread to
            consider variables for.
            <para>
            See implementation class for further details.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableService.SetLocalVersion">
            <summary>Sets the variable version that subsequent reads consider.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableService.CreateNewVariable(System.String,System.String,System.Object,System.Boolean,System.Boolean,com.espertech.esper.core.service.StatementExtensionSvcContext,com.espertech.esper.epl.core.EngineImportService)">
            <summary>
            Creates a new variable.
            </summary>
            <param name="variableName">name of the variable</param>
            <param name="type">variable type</param>
            <param name="value">initialization value; String values are allowed and parsed according to type</param>
            <param name="constant">if set to <c>true</c> [constant].</param>
            <param name="array">if set to <c>true</c> [array].</param>
            <param name="extensionServicesContext">is extensions for implementing resilience attributes of variables</param>
            <param name="engineImportService">The engine import service.</param>
            <throws>VariableExistsException if the variable name is already in use</throws>
            <throws>VariableTypeException if the variable type cannot be recognized</throws>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableService.CreateNewVariable``1(System.String,``0,System.Boolean,com.espertech.esper.core.service.StatementExtensionSvcContext,com.espertech.esper.epl.core.EngineImportService)">
            <summary>
            Creates a new variable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="variableName">name of the variable</param>
            <param name="value">initialization value; String values are allowed and parsed according to type</param>
            <param name="constant">if set to <c>true</c> [constant].</param>
            <param name="extensionServicesContext">is extensions for implementing resilience attributes of variables</param>
            <param name="engineImportService">The engine import service.</param>
            <throws>VariableExistsException if the variable name is already in use</throws>
            <throws>VariableTypeException if the variable type cannot be recognized</throws>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableService.GetReader(System.String)">
            <summary>
            Returns a reader that provides access to variable values. The reader considers the
            version currently set via setLocalVersion.
            </summary>
            <param name="variableName">the variable that the reader should read</param>
            <returns>reader</returns>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableService.RegisterCallback(System.Int32,com.espertech.esper.epl.variable.VariableChangeCallback)">
            <summary>
            Registers a callback invoked when the variable is written with a new value.
            </summary>
            <param name="variableNumber">the variable index number</param>
            <param name="variableChangeCallback">a callback</param>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableService.UnregisterCallback(System.Int32,com.espertech.esper.epl.variable.VariableChangeCallback)">
            <summary>
            Removes a callback.
            </summary>
            <param name="variableNumber">the variable index number</param>
            <param name="variableChangeCallback">a callback</param>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableService.CheckAndWrite(System.Int32,System.Object)">
            <summary>
            Check type of the value supplied and writes the new variable value.
            <para/>
            Must be followed by either a commit or rollback.
            </summary>
            <param name="variableNumber">the index number of the variable to write (from VariableReader)</param>
            <param name="newValue">the new value</param>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableService.Write(System.Int32,System.Object)">
            <summary>
            Writes a new variable value.
            <para>
            Must be followed by either a commit or rollback.
            </para>
            </summary>
            <param name="variableNumber">
            the index number of the variable to write (from VariableReader)
            </param>
            <param name="newValue">the new value</param>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableService.Commit">
            <summary>Commits the variable outstanding changes.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableService.Rollback">
            <summary>Rolls back the variable outstanding changes.</summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableService.RemoveVariable(System.String)">
            <summary>Removes a variable. </summary>
            <param name="name">to remove</param>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VariableService.ReadWriteLock">
            <summary>Lock for use in atomic writes to the variable space.</summary>
            <returns>read write lock for external coordinated write</returns>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VariableService.Variables">
            <summary>Returns a map of variable name and reader, for thread-safe iteration.</summary>
            <returns>variable names and readers</returns>
        </member>
        <member name="T:com.espertech.esper.epl.variable.VariableServiceImpl">
            <summary>
            Variables service for reading and writing variables, and for setting a version number for the current thread to
            consider variables for.
            <para>
            Consider a statement as follows: select * from MyEvent as A where A.val &gt; var1 and A.val2 &gt; var1 and A.val3 &gt; var2
            </para>
            <para>
            Upon statement execution we need to guarantee that the same atomic value for all variables is applied for all
            variable reads (by expressions typically) within the statement.
            </para>
            <para>
            Designed to support:
            <ol>
            <li>lock-less read of the current and prior version, locked reads for older versions</li>
            <li>atomicity by keeping multiple versions for each variable and a threadlocal that receives the current version each call</li>
            <li>one write lock for all variables (required to coordinate with single global version number),
            however writes are very fast (entry to collection plus increment an int) and therefore blocking should not be an issue</li>
            </ol>
            </para>
            <para>
            As an alternative to a version-based design, a read-lock for the variable space could also be used, with the following
            disadvantages: The write lock may just not be granted unless fair locks are used which are more expensive; And
            a read-lock is more expensive to acquire for multiple CPUs; A thread-local is still need to deal with
            "set var1=3, var2=var1+1" assignments where the new uncommitted value must be visible in the local evaluation.
            </para>
            <para>
            Every new write to a variable creates a new version. Thus when reading variables, readers can ignore newer versions
            and a read lock is not required in most circumstances.
            </para>
            <para>
            This algorithm works as follows:
            </para>
            <para>
            A thread processing an event into the engine via SendEvent() calls the "setLocalVersion" method once
            before processing a statement that has variables.
            This places into a threadlocal variable the current version number, say version 570.
            </para>
            <para>
            A statement that reads a variable has an <see cref="T:com.espertech.esper.epl.expression.ExprVariableNode"/> that has a <see cref="T:com.espertech.esper.epl.variable.VariableReader"/> handle
            obtained during validation (example).
            </para>
            <para>
            The <see cref="T:com.espertech.esper.epl.variable.VariableReader"/> takes the version from the threadlocal (570) and compares the version number with the
            version numbers held for the variable.
            If the current version is same or lower (520, as old or older) then the threadlocal version,
            then use the current value.
            If the current version is higher (571, newer) then the threadlocal version, then go to the prior value.
            Use the prior value until a version is found that as old or older then the threadlocal version.
            </para>
            <para>
            If no version can be found that is old enough, output a warning and return the newest version.
            This should not happen, unless a thread is executing for very long within a single statement such that
            lifetime-old-version time speriod passed before the thread asks for variable values.
            </para>
            <para>
            As version numbers are counted up they may reach a boundary. Any write transaction after the boundary
            is reached performs a roll-over. In a roll-over, all variables version lists are
            newly created and any existing threads that read versions go against a (old) high-collection,
            while new threads reading the reset version go against a new low-collection.
            </para>
            <para>
            The class also allows an optional state handler to be plugged in to handle persistence for variable state.
            The state handler gets invoked when a variable changes value, and when a variable gets created
            to obtain the current value from persistence, if any.
            </para>
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.variable.VariableServiceImpl.ROLLOVER_READER_BOUNDARY">
            <summary>
            Sets the boundary above which a reader considers the high-version list of variable values.
            For use in roll-over when the current version number overflows the ROLLOVER_WRITER_BOUNDARY.
            </summary>
        </member>
        <member name="F:com.espertech.esper.epl.variable.VariableServiceImpl.HIGH_WATERMARK_VERSIONS">
            <summary>
            Applicable for each variable if more then the number of versions accumulated, check
            timestamps to determine if a version can be expired.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableServiceImpl.#ctor(System.Int64,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.events.EventAdapterService,com.espertech.esper.epl.variable.VariableStateHandler)">
            <summary>Ctor. </summary>
            <param name="millisecondLifetimeOldVersions">number of milliseconds a version may hang around before expiry</param>
            <param name="timeProvider">provides the current time</param>
            <param name="optionalStateHandler">a optional plug-in that may store variable state and retrieve state upon creation</param>
            <param name="eventAdapterService">event adapters</param>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableServiceImpl.#ctor(System.Int32,System.Int64,com.espertech.esper.schedule.TimeProvider,com.espertech.esper.events.EventAdapterService,com.espertech.esper.epl.variable.VariableStateHandler)">
            <summary>Ctor. </summary>
            <param name="startVersion">the first version number to start from</param>
            <param name="millisecondLifetimeOldVersions">number of milliseconds a version may hang around before expiry</param>
            <param name="timeProvider">provides the current time</param>
            <param name="optionalStateHandler">a optional plug-in that may store variable state and retrieve state upon creation</param>
            <param name="eventAdapterService">for finding event types</param>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableServiceImpl.RollOver">
            <summary>Rollover includes creating a new</summary>
        </member>
        <member name="T:com.espertech.esper.epl.variable.VariableStateHandler">
            <summary>Interface for a plug-in to <seealso cref="T:com.espertech.esper.epl.variable.VariableService"/> to handle variable persistent state. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableStateHandler.GetHasState(System.String,System.Int32,System.Type,com.espertech.esper.client.EventType,com.espertech.esper.core.service.StatementExtensionSvcContext)">
            <summary>Returns the current variable state plus Boolean.TRUE if there is a current state since the variable may have the value of null; returns Boolean.FALSE and null if there is no current state </summary>
            <param name="variableName">variable name</param>
            <param name="variableNumber">number of the variable</param>
            <param name="type">type of the variable</param>
            <param name="eventType">event type or null if not a variable that represents an event</param>
            <param name="statementExtContext">for caches etc.</param>
            <returns>indicator whether the variable is known and it's state, or whether it doesn't have state (false)</returns>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableStateHandler.SetState(System.String,System.Int32,System.Object)">
            <summary>Sets the new variable value </summary>
            <param name="variableName">name of the variable</param>
            <param name="variableNumber">number of the variable</param>
            <param name="newValue">new variable value, null values allowed</param>
        </member>
        <member name="T:com.espertech.esper.epl.variable.VariableTypeException">
            <summary>
            Exception indicating a variable type error.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableTypeException.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="msg">the exception message.</param>
        </member>
        <member name="T:com.espertech.esper.epl.variable.VariableVersionThreadEntry">
            <summary>
            Thread-specific state in regards to variable versions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableVersionThreadEntry.#ctor(System.Int32,System.Collections.Generic.IDictionary{System.Int32,System.Object})">
            <summary>Ctor.</summary>
            <param name="version">
            current version number of the variables visible to thread
            </param>
            <param name="uncommitted">
            the uncommitted values of variables for the thread, if any
            </param>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VariableVersionThreadEntry.Version">
            <summary>Gets or sets the version visible for a thread.</summary>
            <returns>version number</returns>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VariableVersionThreadEntry.Uncommitted">
            <summary>
            Gets or sets a map of variable number and uncommitted value, or empty
            map or null if none exist
            </summary>
            <returns>uncommitted values</returns>
        </member>
        <member name="T:com.espertech.esper.epl.variable.VariableVersionThreadLocal">
            <summary>
            A wrapper for a thread-local to hold the current version for variables visible
            for a thread, as well as uncommitted values of variables for a thread.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableVersionThreadLocal.CreateEntry">
            <summary>
            Creates a new variable version thread entry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VariableVersionThreadLocal.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VariableVersionThreadLocal.CurrentThread">
            <summary>
            Returns the version and uncommitted values for the current thread.
            </summary>
            <returns>entry for current thread</returns>
        </member>
        <member name="T:com.espertech.esper.epl.variable.VersionedValue`1">
            <summary>
            Holds a version of a value and a timestamp when that version is taken.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VersionedValue`1.#ctor(System.Int32,`0,System.Int64)">
            <summary>Ctor.</summary>
            <param name="version">version number</param>
            <param name="value">value at that version</param>
            <param name="timestamp">time when version was taken</param>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VersionedValue`1.Version">
            <summary>Returns the version.</summary>
            <returns>version</returns>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VersionedValue`1.Value">
            <summary>Returns the value.</summary>
            <returns>value</returns>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VersionedValue`1.Timestamp">
            <summary>Returns the time the version was taken.</summary>
            <returns>time of version</returns>
        </member>
        <member name="T:com.espertech.esper.epl.variable.VersionedValueList`1">
            <summary>
            A self-cleaning list of versioned-values.
            <para/>
            The current and prior version are held for lock-less read access in a transient variable.
            <para/>
            The list relies on transient as well as a read-lock to guard against concurrent modification. However a read lock is only
            taken when a list of old versions must be updated.
            <para/>
            When a high watermark is reached, the list on write access removes old versions up to the
            number of milliseconds compared to current write timestamp.
            <para/>
            If an older version is requested then held by the list, the list can either throw an exception
            or return the current value.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VersionedValueList`1.#ctor(System.String,System.Int32,`0,System.Int64,System.Int64,com.espertech.esper.compat.threading.ILockable,System.Int32,System.Boolean)">
            <summary>Ctor.</summary>
            <param name="name">variable name</param>
            <param name="initialVersion">first version number</param>
            <param name="initialValue">first value</param>
            <param name="timestamp">timestamp of first version</param>
            <param name="millisecondLifetimeOldVersions">
            number of milliseconds after which older versions get expired and removed
            </param>
            <param name="readLock">for coordinating update to old versions</param>
            <param name="highWatermark">
            when the number of old versions reached high watermark, the list inspects size on every write
            </param>
            <param name="errorWhenNotFound">
            true if an exception should be throw if the requested version cannot be found,
            or false if the engine should log a warning
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VersionedValueList`1.GetVersion(System.Int32)">
            <summary>
            Retrieve a value for the given version or older then then given version.
            <para/>
            The implementaton only locks the read lock if an older version the the prior version is requested.
            </summary>
            <param name="versionAndOlder">the version we are looking for</param>
            <returns>
            value for the version or the next older version, ignoring newer versions
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.variable.VersionedValueList`1.AddValue(System.Int32,`0,System.Int64)">
            <summary>
            Add a value and version to the list, returning the prior value of the variable.
            </summary>
            <param name="version">for the value to add</param>
            <param name="value">to add</param>
            <param name="timestamp">the time associated with the version</param>
            <returns>prior value</returns>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VersionedValueList`1.Name">
            <summary>Returns the name of the value stored.</summary>
            <returns>value name</returns>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VersionedValueList`1.CurrentAndPriorValue">
            <summary>Returns the current and prior version.</summary>
            <returns>value</returns>
        </member>
        <member name="P:com.espertech.esper.epl.variable.VersionedValueList`1.OlderVersions">
            <summary>Returns the list of old versions, for testing purposes.</summary>
            <returns>list of versions older then current and prior version</returns>
        </member>
        <member name="T:com.espertech.esper.epl.view.FilterExprView">
            <summary>
            Simple filter view filtering events using a filter expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.FilterExprView.#ctor(com.espertech.esper.epl.expression.ExprEvaluator,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Ctor.
            </summary>
            <param name="exprEvaluator">Filter expression evaluation impl</param>
            <param name="exprEvaluatorContext">The expression evaluator context.</param>
        </member>
        <member name="M:com.espertech.esper.epl.view.FilterExprView.GetEnumerator(System.Collections.Generic.IEnumerator{com.espertech.esper.client.EventBean},com.espertech.esper.epl.expression.ExprEvaluator,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Gets the enumerator.
            </summary>
            <param name="source">The source.</param>
            <param name="filter">The filter.</param>
            <param name="exprEvaluatorContext">The expr evaluator context.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.epl.view.FilterExprView.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.view.FilterExprView.Update(com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean[])">
            <summary>
            Notify that data has been added or removed from the Viewable parent.
            The last object in the newData array of objects would be the newest object added to the parent view.
            The first object of the oldData array of objects would be the oldest object removed from the parent view.
            <para>
            If the call to update contains new (inserted) data, then the first argument will be a non-empty list and the
            second will be empty. Similarly, if the call is a notification of deleted data, then the first argument will be
            empty and the second will be non-empty. Either the newData or oldData will be non-null.
            This method won't be called with both arguments being null, but either one could be null.
            The same is true for zero-length arrays. Either newData or oldData will be non-empty.
            If both are non-empty, then the update is a modification notification.
            </para>
            	<para>
            When update() is called on a view by the parent object, the data in newData will be in the collection of the
            parent, and its data structures will be arranged to reflect that.
            The data in oldData will not be in the parent's data structures, and any access to the parent will indicate that
            that data is no longer there.
            </para>
            </summary>
            <param name="newData">is the new data that has been added to the parent view</param>
            <param name="oldData">is the old data that has been removed from the parent view</param>
        </member>
        <member name="M:com.espertech.esper.epl.view.FilterExprView.FilterEvents(com.espertech.esper.epl.expression.ExprEvaluator,com.espertech.esper.client.EventBean[],System.Boolean,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Filters events using the supplied evaluator.
            </summary>
            <param name="exprEvaluator">evaluator to use</param>
            <param name="events">events to filter</param>
            <param name="isNewData">true to indicate filter new data (istream) and not old data (rstream)</param>
            <param name="exprEvaluatorContext">The expression evaluator context.</param>
            <returns>
            filtered events, or null if no events got through the filter
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.view.FilterExprView.EventType">
            <summary>
            Provides metadata information about the type of object the event collection contains.
            </summary>
            <value></value>
            <returns>
            metadata for the objects in the collection
            </returns>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputCallback">
            <summary> Invoked to perform output processing.</summary>
            <param name="doOutput">true if the batched events should actually be output as well as processed, false if they should just be processed
            </param>
            <param name="forceUpdate">true if output should be made even when no updating events have arrived
            </param>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputCondition">
            <summary>
            A condition that must be satisfied before output processing is allowed to continue. 
            Once the condition is satisfied, it makes a callback to continue output processing.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputCondition.UpdateOutputCondition(System.Int32,System.Int32)">
            <summary>Update the output condition. </summary>
            <param name="newEventsCount">number of new events incoming</param>
            <param name="oldEventsCount">number of old events incoming</param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputConditionBase.UpdateOutputCondition(System.Int32,System.Int32)">
            <summary>Update the output condition. </summary>
            <param name="newEventsCount">number of new events incoming</param>
            <param name="oldEventsCount">number of old events incoming</param>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputConditionCount">
            <summary>
            Output limit condition that is satisfied when either the total number of new events arrived or the total number of old events arrived is greater than a preset value.
            </summary>
        </member>
        <member name="P:com.espertech.esper.epl.view.OutputConditionCount.NewEventsCount">
            <summary>Returns the number of new events. </summary>
            <value>number of new events</value>
        </member>
        <member name="P:com.espertech.esper.epl.view.OutputConditionCount.OldEventsCount">
            <summary>Returns the number of old events. </summary>
            <value>number of old events</value>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputConditionCountFactory.#ctor(System.Int32,com.espertech.esper.epl.variable.VariableReader)">
            <summary>Constructor. </summary>
            <param name="eventRate">is the number of old or new events thatmust arrive in order for the condition to be satisfied </param>
            <param name="variableReader">is for reading the variable value, if a variable was supplied, else null</param>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputConditionCrontab">
            <summary>
            Output condition handling crontab-at schedule output.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputConditionCrontabFactory">
            <summary>
            Output condition handling crontab-at schedule output.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputConditionExpression">
            <summary>
            Output condition for output rate limiting that handles when-then expressions for controlling output.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputConditionExpressionFactory">
            <summary>
            Output condition for output rate limiting that handles when-then expressions for controlling output.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputConditionExpressionFactory.GetBuiltInEventType(com.espertech.esper.events.EventAdapterService)">
            <summary>Build the event type for built-in properties. </summary>
            <param name="eventAdapterService">event adapters</param>
            <returns>event type</returns>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputConditionFactoryFactory">
            <summary>Factory for output condition instances. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputConditionFactoryFactory.CreateCondition(com.espertech.esper.epl.spec.OutputLimitSpec,com.espertech.esper.core.service.StatementContext,System.Boolean,System.Boolean)">
            <summary>
            Creates an output condition instance.
            </summary>
            <param name="outputLimitSpec">specifies what kind of condition to create</param>
            <param name="statementContext">The statement context.</param>
            <param name="isGrouped">if set to <c>true</c> [is grouped].</param>
            <param name="isWithHavingClause">if set to <c>true</c> [is with having clause].</param>
            <returns>instance for performing output</returns>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputConditionFirst">
            <summary>
            An output condition that is satisfied at the first event of either a time-based or count-based batch.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputConditionFirstFactory">
            <summary>An output condition that is satisfied at the first event of either a time-based or count-based batch. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputConditionNull">
            <summary>An empty output condition that is always satisfied. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputConditionNull.#ctor(com.espertech.esper.epl.view.OutputCallback)">
            <summary>Ctor. </summary>
            <param name="outputCallback">is the callback to make once the condition is satisfied</param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputConditionPolled.UpdateOutputCondition(System.Int32,System.Int32)">
            <summary>Update the output condition. </summary>
            <param name="newEventsCount">number of new events incoming</param>
            <param name="oldEventsCount">number of old events incoming</param>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputConditionPolledCount">
            <summary>
            Output limit condition that is satisfied when either the total number of new events arrived or the total number of old events arrived is greater than a preset value.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputConditionPolledCount.#ctor(System.Int32,com.espertech.esper.epl.variable.VariableReader)">
            <summary>Constructor. </summary>
            <param name="eventRate">is the number of old or new events thatmust arrive in order for the condition to be satisfied </param>
            <param name="variableReader">is for reading the variable value, if a variable was supplied, else null</param>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputConditionPolledCrontab">
            <summary>
            Output condition handling crontab-at schedule output.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputConditionPolledCrontab.#ctor(System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode},com.espertech.esper.core.context.util.AgentInstanceContext)">
            <summary>Constructor. </summary>
            <param name="agentInstanceContext">is the view context for time scheduling</param>
            <param name="scheduleSpecExpressionList">list of schedule parameters</param>
            <throws>com.espertech.esper.epl.expression.ExprValidationException if the crontab expression failed to validate</throws>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputConditionPolledExpression">
            <summary>
            Output condition for output rate limiting that handles when-then expressions for controlling output.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputConditionPolledExpression.#ctor(com.espertech.esper.epl.expression.ExprNode,System.Collections.Generic.IList{com.espertech.esper.epl.spec.OnTriggerSetAssignment},com.espertech.esper.core.context.util.AgentInstanceContext)">
            <summary>
            Ctor.
            </summary>
            <param name="whenExpressionNode">the expression to evaluate, returning true when to output</param>
            <param name="assignments">is the optional then-clause variable assignments, or null or empty if none</param>
            <param name="agentInstanceContext">The agent instance context.</param>
            <throws>com.espertech.esper.epl.expression.ExprValidationException when validation fails</throws>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputConditionPolledExpression.GetBuiltInEventType(com.espertech.esper.events.EventAdapterService)">
            <summary>Build the event type for built-in properties. </summary>
            <param name="eventAdapterService">event adapters</param>
            <returns>event type</returns>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputConditionPolledFactory">
            <summary>
            Factory for output condition instances that are polled/queried only.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputConditionPolledFactory.CreateCondition(com.espertech.esper.epl.spec.OutputLimitSpec,com.espertech.esper.core.context.util.AgentInstanceContext)">
            <summary>
            Creates an output condition instance.
            </summary>
            <param name="outputLimitSpec">specifies what kind of condition to create</param>
            <param name="agentInstanceContext">The agent instance context.</param>
            <returns>instance for handling output condition</returns>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputConditionPolledTime.#ctor(com.espertech.esper.epl.expression.ExprTimePeriod,com.espertech.esper.core.context.util.AgentInstanceContext)">
            <summary>Constructor. </summary>
            <param name="timePeriod">is the number of minutes or seconds to batch events for, may include variables</param>
            <param name="context">is the view context for time scheduling</param>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputConditionTime">
            <summary>
            Output condition that is satisfied at the end of every time interval of a given length.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputConditionTime.ComputeWaitMSec(System.Int64,System.Int64,System.Int64)">
            <summary>Given a current time and a reference time and an interval size, compute the amount of milliseconds till the next interval. </summary>
            <param name="current">is the current time</param>
            <param name="reference">is the reference point</param>
            <param name="interval">is the interval size</param>
            <returns>milliseconds after current time that marks the end of the current interval</returns>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputConditionTimeFactory">
            <summary>
            Output condition that is satisfied at the end of every time interval of a given length.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputConditionTimeFactory.#ctor(com.espertech.esper.epl.expression.ExprTimePeriod,com.espertech.esper.core.service.StatementContext)">
            <summary>
            Constructor.
            </summary>
            <param name="timePeriod">is the number of minutes or seconds to batch events for, may include variables</param>
            <param name="statementContext">The statement context.</param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewBase.AddView(com.espertech.esper.view.View)">
            <summary>
            Add a view to the viewable object.
            </summary>
            <param name="view">to add</param>
            <returns>view to add</returns>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewBase.RemoveAllViews">
            <summary>
            Remove all views.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewBase.RemoveView(com.espertech.esper.view.View)">
            <summary>
            Remove a view.
            </summary>
            <param name="view">to remove</param>
            <returns>
            true to indicate that the view to be removed existed within this view, false if the view to
            remove could not be found
            </returns>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewBase.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewBase.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewBase.Update(com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean[])">
            <summary>
            Notify that data has been added or removed from the Viewable parent.
            The last object in the newData array of objects would be the newest object added to the parent view.
            The first object of the oldData array of objects would be the oldest object removed from the parent view.
            <para>
            If the call to update contains new (inserted) data, then the first argument will be a non-empty list and the
            second will be empty. Similarly, if the call is a notification of deleted data, then the first argument will be
            empty and the second will be non-empty. Either the newData or oldData will be non-null.
            This method won't be called with both arguments being null, but either one could be null.
            The same is true for zero-length arrays. Either newData or oldData will be non-empty.
            If both are non-empty, then the update is a modification notification.
            </para>
            <para>
            When update() is called on a view by the parent object, the data in newData will be in the collection of the
            parent, and its data structures will be arranged to reflect that.
            The data in oldData will not be in the parent's data structures, and any access to the parent will indicate that
            that data is no longer there.
            </para>
            </summary>
            <param name="newData">is the new data that has been added to the parent view
            </param>
            <param name="oldData">is the old data that has been removed from the parent view
            </param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewBase.Process(System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}},System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}},com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Process join result set. </summary>
            <param name="newEvents">set of event tuples representing new data</param>
            <param name="oldEvents">set of event tuples representing old data</param>
            <param name="exprEvaluatorContext">expression evaluation context</param>
        </member>
        <member name="P:com.espertech.esper.epl.view.OutputProcessViewBase.Parent">
            <summary>
            Gets or sets the View's parent Viewable.
            </summary>
            <value></value>
            <returns> viewable
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.view.OutputProcessViewBase.Views">
            <summary>
            Returns all added views.
            </summary>
            <value></value>
            <returns> list of added views
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.view.OutputProcessViewBase.HasViews">
            <summary>
            Test is there are any views to the Viewable.
            </summary>
            <value></value>
            <returns> true indicating there are child views, false indicating there are no child views
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.view.OutputProcessViewBase.EventType">
            <summary>
            Provides metadata information about the type of object the event collection contains.
            </summary>
            <value></value>
            <returns> metadata for the objects in the collection
            </returns>
        </member>
        <member name="P:com.espertech.esper.epl.view.OutputProcessViewBase.JoinExecutionStrategy">
            <summary>
            For joins, supplies the join execution strategy that provides iteration over statement results.
            </summary>
            <value>executes joins including static (non-continuous) joins</value>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputProcessViewBaseCallback">
            <summary>Factory for output processing views. </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewBaseWAfter.CheckAfterCondition(com.espertech.esper.client.EventBean[],com.espertech.esper.core.service.StatementContext)">
            <summary>
            Returns true if the after-condition is satisfied.
            </summary>
            <param name="newEvents">is the view new events</param>
            <param name="statementContext">The statement context.</param>
            <returns>indicator for output condition</returns>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewBaseWAfter.CheckAfterCondition(System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}},com.espertech.esper.core.service.StatementContext)">
            <summary>
            Returns true if the after-condition is satisfied.
            </summary>
            <param name="newEvents">is the join new events</param>
            <param name="statementContext">The statement context.</param>
            <returns>indicator for output condition</returns>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewBaseWAfter.CheckAfterCondition(com.espertech.esper.collection.UniformPair{com.espertech.esper.client.EventBean[]},com.espertech.esper.core.service.StatementContext)">
            <summary>
            Returns true if the after-condition is satisfied.
            </summary>
            <param name="newOldEvents">is the new and old events pair</param>
            <param name="statementContext">The statement context.</param>
            <returns>indicator for output condition</returns>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputProcessViewConditionDefault">
            <summary>
            A view that prepares output events, batching incoming events and invoking the result set processor as necessary. 
            <para/> 
            Handles output rate limiting or stabilizing.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewConditionDefault.Update(com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean[])">
            <summary>The update method is called if the view does not participate in a join. </summary>
            <param name="newData">new events</param>
            <param name="oldData">old events</param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewConditionDefault.Process(System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}},System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}},com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            This process (update) method is for participation in a join.
            </summary>
            <param name="newEvents">new events</param>
            <param name="oldEvents">old events</param>
            <param name="exprEvaluatorContext">expression evaluation context</param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewConditionDefault.ContinueOutputProcessingView(System.Boolean,System.Boolean)">
            <summary>
            Called once the output condition has been met.
            Invokes the result set processor.
            Used for non-join event data.
            </summary>
            <param name="doOutput">true if the batched events should actually be output as well as processed, false if they should just be processed</param>
            <param name="forceUpdate">true if output should be made even when no updating events have arrived</param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewConditionDefault.ContinueOutputProcessingJoin(System.Boolean,System.Boolean)">
            <summary>Called once the output condition has been met. Invokes the result set processor. Used for non-join event data. </summary>
            <param name="doOutput">true if the batched events should actually be output as well as processed, false if they should just be processed</param>
            <param name="forceUpdate">true if output should be made even when no updating events have arrived</param>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputProcessViewConditionDefaultPostProcess">
            <summary>
            A view that prepares output events, batching incoming events and invoking the 
            result set processor as necessary. 
            <para/> 
            Handles output rate limiting or stabilizing. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputProcessViewConditionFactory">
            <summary>
            A view that handles the "output snapshot" keyword in output rate stabilizing.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputProcessViewDirectDistinctOrAfterFactory">
            <summary>
            Output process view that does not enforce any output policies and may simply hand over events to child views, but works with distinct and after-output policies
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputProcessViewDirectFactory">
            <summary>
            Factory for output process view that does not enforce any output policies and may simply hand over events to child views, does not handle distinct.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputProcessViewFactory">
            <summary>Factory for output processing views. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputProcessViewConditionFirst">
            <summary>
            Handles output rate limiting for FIRST, only applicable with a having-clause and no group-by clause.
            <para/> 
            Without having-clause the order of processing won't matter therefore its handled by the <seealso cref="T:com.espertech.esper.epl.view.OutputProcessViewConditionDefault"/>. 
            With group-by the <seealso cref="T:com.espertech.esper.epl.core.ResultSetProcessor"/> handles the per-group first criteria.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewConditionFirst.Update(com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean[])">
            <summary>The update method is called if the view does not participate in a join. </summary>
            <param name="newData">new events</param>
            <param name="oldData">old events</param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewConditionFirst.Process(System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}},System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}},com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            This process (update) method is for participation in a join.
            </summary>
            <param name="newEvents">new events</param>
            <param name="oldEvents">old events</param>
            <param name="exprEvaluatorContext">expression evaluation context</param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewConditionFirst.ContinueOutputProcessingJoin(System.Boolean,System.Boolean)">
            <summary>Called once the output condition has been met. Invokes the result set processor. Used for non-join event data. </summary>
            <param name="doOutput">true if the batched events should actually be output as well as processed, false if they should just be processed</param>
            <param name="forceUpdate">true if output should be made even when no updating events have arrived</param>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputProcessViewConditionFirstPostProcess">
            <summary>
            Handles output rate limiting for FIRST, only applicable with a having-clause 
            and no group-by clause. 
            <para/>
            Without having-clause the order of processing won't matter therefore its 
            handled by the <seealso cref="T:com.espertech.esper.epl.view.OutputProcessViewConditionDefault"/>. With 
            group-by the <seealso cref="T:com.espertech.esper.epl.core.ResultSetProcessor"/> 
            handles the per-group first criteria. 
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputProcessViewConditionSnapshot">
            <summary>
            A view that handles the "output snapshot" keyword in output rate stabilizing.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewConditionSnapshot.Update(com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean[])">
            <summary>The update method is called if the view does not participate in a join. </summary>
            <param name="newData">new events</param>
            <param name="oldData">old events</param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewConditionSnapshot.Process(System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}},System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}},com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            This process (update) method is for participation in a join.
            </summary>
            <param name="newEvents">new events</param>
            <param name="oldEvents">old events</param>
            <param name="exprEvaluatorContext">expression evaluation context</param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewConditionSnapshot.ContinueOutputProcessingView(System.Boolean,System.Boolean)">
            <summary>
            Called once the output condition has been met.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewConditionSnapshot.ContinueOutputProcessingJoin(System.Boolean,System.Boolean)">
            <summary>Called once the output condition has been met. Invokes the result set processor. Used for non-join event data. </summary>
            <param name="doOutput">true if the batched events should actually be output as well as processed, false if they should just be processed</param>
            <param name="forceUpdate">true if output should be made even when no updating events have arrived</param>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputProcessViewConditionSnapshotPostProcess">
            <summary>A view that handles the "output snapshot" keyword in output rate stabilizing. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputProcessViewDirect">
            <summary>
            Output process view that does not enforce any output policies and may simply hand over events to child views, does not handle distinct.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewDirect.Update(com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean[])">
            <summary>The update method is called if the view does not participate in a join. </summary>
            <param name="newData">new events</param>
            <param name="oldData">old events</param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewDirect.Process(System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}},System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}},com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            This process (update) method is for participation in a join.
            </summary>
            <param name="newEvents">new events</param>
            <param name="oldEvents">old events</param>
            <param name="exprEvaluatorContext">expression evaluation context</param>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputProcessViewDirectDistinctOrAfter">
            <summary>
            Output process view that does not enforce any output policies and may simply hand over events to child views, but works with distinct and after-output policies
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewDirectDistinctOrAfter.Update(com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean[])">
            <summary>The update method is called if the view does not participate in a join. </summary>
            <param name="newData">new events</param>
            <param name="oldData">old events</param>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputProcessViewDirectDistinctOrAfter.Process(System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}},System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}},com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            This process (update) method is for participation in a join.
            </summary>
            <param name="newEvents">new events</param>
            <param name="oldEvents">old events</param>
            <param name="exprEvaluatorContext">expression evaluation context</param>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputProcessViewDirectDistinctOrAfterPostProcess">
            <summary>
            Output process view that does not enforce any output policies and may simply hand over events to child views, but works with distinct and after-output policies
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputProcessViewFactoryCallback">
            <summary>Factory for output processing views. </summary>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputProcessViewFactoryFactory">
            <summary>
            Factory for factories for output processing views.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputStrategyPostProcess">
            <summary>
            An output strategy that handles routing (insert-into) and stream selection.
            </summary>
        </member>
        <member name="T:com.espertech.esper.epl.view.OutputStrategyPostProcessFactory">
            <summary>
            An output strategy that handles routing (insert-into) and stream selection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.epl.view.OutputStrategyUtil.IndicateEarlyReturn(com.espertech.esper.core.service.StatementContext,com.espertech.esper.collection.UniformPair{com.espertech.esper.client.EventBean[]})">
            <summary>
            Indicate statement result.
            </summary>
            <param name="statementContext">The statement context.</param>
            <param name="newOldEvents">result</param>
        </member>
        <member name="T:com.espertech.esper.view.ViewFactory">
            <summary>
            Factory interface for a factory responsible for creating a <seealso cref="T:com.espertech.esper.view.View"/> instance and for determining if an existing view meets requirements.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewFactory.SetViewParameters(com.espertech.esper.view.ViewFactoryContext,System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode})">
            <summary>Indicates user EPL query view parameters to the view factory. </summary>
            <param name="viewFactoryContext">supplied context information for the view factory</param>
            <param name="viewParameters">is the objects representing the view parameters</param>
            <throws>ViewParameterException if the parameters don't match view parameter needs</throws>
        </member>
        <member name="M:com.espertech.esper.view.ViewFactory.Attach(com.espertech.esper.client.EventType,com.espertech.esper.core.service.StatementContext,com.espertech.esper.view.ViewFactory,System.Collections.Generic.IList{com.espertech.esper.view.ViewFactory})">
            <summary>Attaches the factory to a parent event type such that the factory can validate attach requirements and determine an event type for resulting views. </summary>
            <param name="parentEventType">is the parent event stream's or view factory's event type</param>
            <param name="statementContext">contains the services needed for creating a new event type</param>
            <param name="optionalParentFactory">is null when there is no parent view factory, or contains theparent view factory </param>
            <param name="parentViewFactories">is a list of all the parent view factories or empty list if there are none</param>
            <throws>ViewParameterException is thrown to indicate that this view factories's view would not playwith the parent view factories view </throws>
        </member>
        <member name="M:com.espertech.esper.view.ViewFactory.MakeView(com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext)">
            <summary>Create a new view.  </summary>
            <param name="agentInstanceViewFactoryContext"></param>
        </member>
        <member name="M:com.espertech.esper.view.ViewFactory.CanReuse(com.espertech.esper.view.View)">
            <summary>Determines if the given view could be used instead of creating a new view, requires the view factory to compare view type, parameters and other capabilities provided. </summary>
            <param name="view">is the candidate view to compare to</param>
            <returns>true if the given view can be reused instead of creating a new view, or false to indicatethe view is not right for reuse </returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewFactory.EventType">
            <summary>Returns the event type that the view that is created by the view factory would create for events posted by the view. </summary>
            <value>event type of view&apos;s created by the view factory</value>
        </member>
        <member name="T:com.espertech.esper.view.DataWindowViewFactory">
            <summary>
            Marker interface for use with view factories that create data window views only.
            <para/>
            Please <see cref="T:com.espertech.esper.view.DataWindowView"/> for details on views that meet data window requirements.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.arr.ObjectArrayArrayPONOBeanEntryIndexedPropertyGetter">
            <summary>
            A getter that works on PONO events residing within a Map as an event property.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.bean.BaseNativePropertyGetter">
            <summary>Base getter for native fragments. </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.BaseNativePropertyGetter.#ctor(com.espertech.esper.events.EventAdapterService,System.Type,System.Type)">
            <summary>Constructor. </summary>
            <param name="eventAdapterService">factory for event beans and event types</param>
            <param name="returnType">type of the entry returned</param>
            <param name="genericType">type generic parameter, if any</param>
        </member>
        <member name="M:com.espertech.esper.events.bean.BaseNativePropertyGetter.GetFragmentDynamic(System.Object,com.espertech.esper.events.EventAdapterService)">
            <summary>Returns the fragment for dynamic properties. </summary>
            <param name="object">to inspect</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
            <returns>fragment</returns>
        </member>
        <member name="T:com.espertech.esper.events.arr.ObjectArrayEventPropertyGetter">
            <summary>
            Property getter for Objectarray-underlying events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.arr.ObjectArrayEventPropertyGetter.GetObjectArray(System.Object[])">
            <summary>Returns a property of an event. </summary>
            <param name="array">to interrogate</param>
            <returns>property value</returns>
            <throws>com.espertech.esper.client.PropertyAccessException for property access errors</throws>
        </member>
        <member name="M:com.espertech.esper.events.arr.ObjectArrayEventPropertyGetter.IsObjectArrayExistsProperty(System.Object[])">
            <summary>Exists-function for properties in a object array-type event. </summary>
            <param name="array">to interrogate</param>
            <returns>indicator</returns>
        </member>
        <member name="M:com.espertech.esper.events.arr.ObjectArrayArrayPONOBeanEntryIndexedPropertyGetter.#ctor(System.Int32,System.Int32,com.espertech.esper.events.bean.BeanEventPropertyGetter,com.espertech.esper.events.EventAdapterService,System.Type)">
            <summary>Ctor. </summary>
            <param name="propertyIndex">the property to look at</param>
            <param name="nestedGetter">the getter for the map entry</param>
            <param name="eventAdapterService">for producing wrappers to objects</param>
            <param name="index">the index to fetch the array element for</param>
            <param name="returnType">type of the entry returned</param>
        </member>
        <member name="T:com.espertech.esper.events.arr.ObjectArrayArrayPONOEntryIndexedPropertyGetter">
            <summary>
            A getter that works on arrays residing within a Map as an event property.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.arr.ObjectArrayEventPropertyGetterAndIndexed">
            <summary>
            Property getter for Object-array-underlying events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.arr.ObjectArrayArrayPONOEntryIndexedPropertyGetter.#ctor(System.Int32,System.Int32,com.espertech.esper.events.EventAdapterService,System.Type)">
            <summary>
            Ctor.
            </summary>
            <param name="propertyIndex">Index of the property.</param>
            <param name="index">the index to fetch the array element for</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
            <param name="returnType">type of the entry returned</param>
        </member>
        <member name="T:com.espertech.esper.events.arr.ObjectArrayArrayPropertyGetter">
            <summary>
            Getter for Map-entries with well-defined fragment type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.arr.ObjectArrayArrayPropertyGetter.#ctor(System.Int32,System.Int32,com.espertech.esper.events.EventAdapterService,com.espertech.esper.client.EventType)">
            <summary>Ctor. </summary>
            <param name="propertyIndex">property index</param>
            <param name="index">array index</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
            <param name="fragmentType">type of the entry returned</param>
        </member>
        <member name="T:com.espertech.esper.events.arr.ObjectArrayDynamicPropertyGetter">
            <summary>
            Getter for a dynamic property (syntax field.inner?), using vanilla reflection.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.arr.ObjectArrayEntryPropertyGetter">
            <summary>
            A getter for use with Map-based events simply returns the value for the key.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.arr.ObjectArrayEntryPropertyGetter.#ctor(System.Int32,com.espertech.esper.events.bean.BeanEventType,com.espertech.esper.events.EventAdapterService)">
            <summary>Ctor. </summary>
            <param name="propertyIndex">index</param>
            <param name="eventType">type of the entry returned</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
        </member>
        <member name="T:com.espertech.esper.events.ObjectArrayBackedEventBean">
            <summary>For events that are array of properties. </summary>
        </member>
        <member name="P:com.espertech.esper.events.ObjectArrayBackedEventBean.Properties">
            <summary>Returns property array. </summary>
            <value>properties</value>
        </member>
        <member name="M:com.espertech.esper.events.arr.ObjectArrayEventBean.Get(System.String)">
            <summary>
            Gets the specified property.
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.events.arr.ObjectArrayEventBean.Item(System.String)">
            <summary>
            Returns the value of an event property for the given property name or property expression.
            <para/> Returns null if the property value is null. Throws an exception if the expression is not valid against the event type.
            <para/> The method takes a property name or property expression as a parameter. Property expressions may include indexed properties
            via the syntax "name[index]", mapped properties via the syntax "name('key')", nested properties via the syntax "outer.inner" or
            combinations thereof.
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.events.arr.ObjectArrayEventBeanArrayIndexedElementPropertyGetter">
            <summary>
            Getter for an array of event bean using a nested getter.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.arr.ObjectArrayEventBeanArrayIndexedElementPropertyGetter.#ctor(System.Int32,System.Int32,com.espertech.esper.client.EventPropertyGetter)">
            <summary>Ctor. </summary>
            <param name="propertyIndex">property index</param>
            <param name="index">array index</param>
            <param name="nestedGetter">nested getter</param>
        </member>
        <member name="T:com.espertech.esper.events.arr.ObjectArrayEventBeanArrayIndexedPropertyGetter">
            <summary>Getter for array events. </summary>
        </member>
        <member name="M:com.espertech.esper.events.arr.ObjectArrayEventBeanArrayIndexedPropertyGetter.#ctor(System.Int32,System.Int32)">
            <summary>Ctor. </summary>
            <param name="propertyIndex">property index</param>
            <param name="index">array index</param>
        </member>
        <member name="T:com.espertech.esper.events.arr.ObjectArrayEventBeanArrayPropertyGetter">
            <summary>
            Returns the event bean or the underlying array.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.arr.ObjectArrayEventBeanArrayPropertyGetter.#ctor(System.Int32,System.Type)">
            <summary>Ctor. </summary>
            <param name="propertyIndex">property to get</param>
            <param name="underlyingType">type of property</param>
        </member>
        <member name="T:com.espertech.esper.events.arr.ObjectArrayEventBeanCopyMethod">
            <summary>
            Copy method for Object array-underlying events.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.EventBeanCopyMethod">
            <summary>Implementations copy the event object for controlled modification (shallow copy). </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanCopyMethod.Copy(com.espertech.esper.client.EventBean)">
            <summary>Copy the event bean returning a shallow copy. </summary>
            <param name="theEvent">to copy</param>
            <returns>shallow copy</returns>
        </member>
        <member name="M:com.espertech.esper.events.arr.ObjectArrayEventBeanCopyMethod.#ctor(com.espertech.esper.events.arr.ObjectArrayEventType,com.espertech.esper.events.EventAdapterService)">
            <summary>Ctor. </summary>
            <param name="objectArrayEventType">map event type</param>
            <param name="eventAdapterService">for copying events</param>
        </member>
        <member name="T:com.espertech.esper.events.arr.ObjectArrayEventBeanCopyMethodWithArrayMap">
            <summary>
            Copy method for Map-underlying events.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.arr.ObjectArrayEventBeanEntryPropertyGetter">
            <summary>
            A getter that works on EventBean events residing within a Map as an event property.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.arr.ObjectArrayEventBeanEntryPropertyGetter.#ctor(System.Int32,com.espertech.esper.client.EventPropertyGetter)">
            <summary>Ctor. </summary>
            <param name="propertyIndex">the property to look at</param>
            <param name="eventBeanEntryGetter">the getter for the map entry</param>
        </member>
        <member name="T:com.espertech.esper.events.arr.ObjectArrayEventBeanPropertyGetter">
            <summary>
            A getter for use with Map-based events simply returns the value for the key.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.arr.ObjectArrayEventBeanPropertyGetter.#ctor(System.Int32)">
            <summary>Ctor. </summary>
            <param name="propertyIndex">property to get</param>
        </member>
        <member name="T:com.espertech.esper.events.EventPropertyWriter">
            <summary>
            Writer for a single property value to an event.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventPropertyWriter.Write(System.Object,com.espertech.esper.client.EventBean)">
            <summary>
            Value to write to a property.
            </summary>
            <param name="value">value to write</param>
            <param name="target">property to write to</param>
        </member>
        <member name="T:com.espertech.esper.events.arr.ObjectArrayEventBeanWriterPerProp">
            <summary>
            Writer method for writing to Object-array-type events.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.EventBeanWriter">
            <summary>
            Interface for writing a set of event properties to an event.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanWriter.Write(System.Object[],com.espertech.esper.client.EventBean)">
            <summary>
            Write property values to the event.
            </summary>
            <param name="values">to write</param>
            <param name="theEvent">to write to</param>
        </member>
        <member name="M:com.espertech.esper.events.arr.ObjectArrayEventBeanWriterPerProp.#ctor(com.espertech.esper.events.arr.ObjectArrayEventBeanPropertyWriter[])">
            <summary>Ctor. </summary>
            <param name="writers">names of properties to write</param>
        </member>
        <member name="M:com.espertech.esper.events.arr.ObjectArrayEventBeanWriterPerProp.Write(System.Object[],com.espertech.esper.client.EventBean)">
            <summary>Write values to an event. </summary>
            <param name="values">to write</param>
            <param name="theEvent">to write to</param>
        </member>
        <member name="T:com.espertech.esper.events.arr.ObjectArrayEventBeanWriterSimpleProps">
            <summary>
            Writer method for writing to Object-Array-type events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.arr.ObjectArrayEventBeanWriterSimpleProps.#ctor(System.Int32[])">
            <summary>Ctor. </summary>
            <param name="indexes">indexes of properties to write</param>
        </member>
        <member name="M:com.espertech.esper.events.arr.ObjectArrayEventBeanWriterSimpleProps.Write(System.Object[],com.espertech.esper.client.EventBean)">
            <summary>Write values to an event. </summary>
            <param name="values">to write</param>
            <param name="theEvent">to write to</param>
        </member>
        <member name="T:com.espertech.esper.events.arr.ObjectArrayEventPropertyGetterAndMapped">
            <summary>
            Property getter for Map-underlying events.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.BaseNestableEventType">
            <summary>
            Implementation of the <seealso cref="T:com.espertech.esper.client.EventType"/> interface for 
            handling name value pairs.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.EventTypeSPI">
            <summary>
            Service provider interface for internal use for event types.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventTypeSPI.GetWriter(System.String)">
            <summary>Return a writer for writing a single property value. </summary>
            <param name="propertyName">to write to</param>
            <returns>null or writer if writable</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventTypeSPI.GetWritableProperty(System.String)">
            <summary>Returns the descriptor for a writable property. </summary>
            <param name="propertyName">to Get descriptor for</param>
            <returns>descriptor</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventTypeSPI.GetCopyMethod(System.String[])">
            <summary>Returns the copy method, considering only the attached properties for a write operation onto the copy </summary>
            <param name="properties">to write after copy</param>
            <returns>copy method</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventTypeSPI.GetWriter(System.String[])">
            <summary>Returns the write for writing a set of properties. </summary>
            <param name="properties">to write</param>
            <returns>writer</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventTypeSPI.GetReader">
            <summary>Returns a reader for reading all properties of an event. This is completely optional and need only be implemented for performance. </summary>
            <returns>reader</returns>
        </member>
        <member name="P:com.espertech.esper.events.EventTypeSPI.Metadata">
            <summary>
            Returns the type metadata.
            </summary>
            <returns>
            type metadata
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.EventTypeSPI.WriteableProperties">
            <summary>Returns the writable properties. </summary>
            <value>properties that can be written</value>
        </member>
        <member name="F:com.espertech.esper.events.BaseNestableEventType._propertyGetterCache">
            <summary>
            Mapping of all property names and getters
            </summary>
        </member>
        <member name="F:com.espertech.esper.events.BaseNestableEventType.PropertyGetters">
            <summary>
            Mapping of simple property name and getters
            </summary>
        </member>
        <member name="F:com.espertech.esper.events.BaseNestableEventType.NestableTypes">
            <summary>
            Deep definition of the map-type, containing nested maps and objects
            </summary>
        </member>
        <member name="F:com.espertech.esper.events.BaseNestableEventType._propertyDescriptorMap">
            <summary>
            Simple (not-nested) properties are stored here
            </summary>
        </member>
        <member name="F:com.espertech.esper.events.BaseNestableEventType.SimpleFragmentTypes">
            <summary>
            Mapping of property name (fragment-only) and type
            </summary>
        </member>
        <member name="F:com.espertech.esper.events.BaseNestableEventType.SimplePropertyTypes">
            <summary>
            Mapping of property name (simple-only) and type
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.BaseNestableEventType.#ctor(com.espertech.esper.events.EventTypeMetadata,System.String,System.Int32,com.espertech.esper.events.EventAdapterService,System.Collections.Generic.IDictionary{System.String,System.Object},com.espertech.esper.client.EventType[],System.Collections.Generic.ICollection{com.espertech.esper.client.EventType},com.espertech.esper.client.ConfigurationEventTypeWithSupertype,com.espertech.esper.events.EventTypeNestableGetterFactory)">
            <summary>
            Constructor takes a type name, map of property names and types, for use with nestable Map events.
            </summary>
            <param name="metadata">event type metadata</param>
            <param name="typeName">is the event type name used to distinquish map types that have the same property types,empty string for anonymous maps, or for insert-into statements generating map events the stream name</param>
            <param name="eventTypeId">The event type id.</param>
            <param name="eventAdapterService">is required for access to objects properties within map values</param>
            <param name="propertyTypes">is pairs of property name and type</param>
            <param name="optionalSuperTypes">the supertypes to this type if any, or null if there are no supertypes</param>
            <param name="optionalDeepSupertypes">the deep supertypes to this type if any, or null if there are no deep supertypes</param>
            <param name="typeConfig">The type config.</param>
            <param name="getterFactory">The getter factory.</param>
        </member>
        <member name="M:com.espertech.esper.events.BaseNestableEventType.AddAdditionalProperties(System.Collections.Generic.IDictionary{System.String,System.Object},com.espertech.esper.events.EventAdapterService)">
            <summary>
            Adds additional properties that do not yet exist on the given type. 
            Ignores properties already present. Allows nesting.
            </summary>
            <param name="typeMap">properties to add</param>
            <param name="eventAdapterService">for resolving further map event types that are property types</param>
        </member>
        <member name="M:com.espertech.esper.events.BaseNestableEventType.IsDeepEqualsProperties(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Compares two sets of properties and determines if they are the same, allowing for boxed/unboxed types, and nested map types. </summary>
            <param name="setOne">is the first set of properties</param>
            <param name="setTwo">is the second set of properties</param>
            <param name="otherName">name of the type compared to</param>
            <returns>null if the property set is equivalent or message if not</returns>
        </member>
        <member name="M:com.espertech.esper.events.BaseNestableEventType.GetEqualsMessage(com.espertech.esper.client.EventType)">
            <summary>Returns a message if the type, compared to this type, is not compatible in regards to the property numbers and types. </summary>
            <param name="otherType">to compare to</param>
            <returns>message</returns>
        </member>
        <member name="P:com.espertech.esper.events.BaseNestableEventType.PropertyDescriptors">
            <summary>
            Get property descriptors for the event type.
            <para>
            Note that properties do not have a defined order. Your application should not rely
            on the order of properties returned by this method.
            </para>
            <para>
            The method does not return property information of inner or nested types.
            </para>
            </summary>
            <value></value>
            <returns>descriptors for all known properties of the event type.</returns>
        </member>
        <member name="P:com.espertech.esper.events.BaseNestableEventType.MapTypes">
            <summary>Returns the name-type map of map properties, each value in the map can be a Class or a Map&lt;String, Object&gt; (for nested maps). </summary>
            <value>is the property name and types</value>
        </member>
        <member name="P:com.espertech.esper.events.BaseNestableEventType.Metadata">
            <summary>
            Returns the type metadata.
            </summary>
            <value></value>
            <returns>
            type metadata
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.BaseNestableEventType.EventAdapterService">
            <summary>
            Gets the event adapter service.
            </summary>
            <value>The event adapter service.</value>
        </member>
        <member name="P:com.espertech.esper.events.BaseNestableEventType.GetterFactory">
            <summary>
            Gets the getter factory.
            </summary>
            <value>The getter factory.</value>
        </member>
        <member name="T:com.espertech.esper.events.arr.ObjectArrayFragmentArrayPropertyGetter">
            <summary>
            Getter for map array.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.arr.ObjectArrayFragmentArrayPropertyGetter.#ctor(System.Int32,com.espertech.esper.client.EventType,com.espertech.esper.events.EventAdapterService)">
            <summary>Ctor. </summary>
            <param name="propertyIndex">property index</param>
            <param name="fragmentEventType">event type of fragment</param>
            <param name="eventAdapterService">for creating event instances</param>
        </member>
        <member name="T:com.espertech.esper.events.arr.ObjectArrayIndexedPropertyGetter">
            <summary>
            Getter for a dynamic indexed property for maps.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.arr.ObjectArrayIndexedPropertyGetter.#ctor(System.Int32,System.Int32)">
            <summary>Ctor. </summary>
            <param name="propertyIndex">property index</param>
            <param name="index">index to get the element at</param>
        </member>
        <member name="T:com.espertech.esper.events.arr.ObjectArrayMappedPropertyGetter">
            <summary>
            Getter for a dynamic mappeds property for maps.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.arr.ObjectArrayMappedPropertyGetter.#ctor(System.Int32,System.String)">
            <summary>Ctor. </summary>
            <param name="propertyIndex">property index</param>
            <param name="key">get the element at</param>
        </member>
        <member name="M:com.espertech.esper.events.arr.ObjectArrayMapPropertyGetter.#ctor(System.Int32,com.espertech.esper.events.map.MapEventPropertyGetter)">
            <summary>
            Ctor.
            </summary>
            <param name="index">The index.</param>
            <param name="getter">is the getter to use to interrogate the property in the map</param>
        </member>
        <member name="T:com.espertech.esper.events.arr.ObjectArrayNestedEntryPropertyGetterArrayMap">
            <summary>A getter that works on EventBean events residing within a Map as an event property. </summary>
        </member>
        <member name="M:com.espertech.esper.events.arr.ObjectArrayNestedEntryPropertyGetterBase.#ctor(System.Int32,com.espertech.esper.client.EventType,com.espertech.esper.events.EventAdapterService)">
            <summary>Ctor. </summary>
            <param name="propertyIndex">the property to look at</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
            <param name="fragmentType">type of the entry returned</param>
        </member>
        <member name="T:com.espertech.esper.events.arr.ObjectArrayNestedEntryPropertyGetterMap">
            <summary>
            A getter that works on EventBean events residing within a Map as an event property.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.arr.ObjectArrayNestedEntryPropertyGetterObjectArray">
            <summary>
            A getter that works on EventBean events residing within a Map as an event property.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.arr.ObjectArrayPONOEntryPropertyGetter">
            <summary>
            A getter that works on PONO events residing within a Map as an event property.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.arr.ObjectArrayPONOEntryPropertyGetter.#ctor(System.Int32,com.espertech.esper.events.bean.BeanEventPropertyGetter,com.espertech.esper.events.EventAdapterService,System.Type)">
            <summary>
            Ctor.
            </summary>
            <param name="propertyIndex">Index of the property.</param>
            <param name="entryGetter">the getter for the map entry</param>
            <param name="eventAdapterService">for producing wrappers to objects</param>
            <param name="returnType">type of the entry returned</param>
        </member>
        <member name="T:com.espertech.esper.events.arr.ObjectArrayPropertyGetterDefaultBase">
            <summary>
            Getter for map entry.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.arr.ObjectArrayPropertyGetterDefaultBase.#ctor(System.Int32,com.espertech.esper.client.EventType,com.espertech.esper.events.EventAdapterService)">
            <summary>Ctor. </summary>
            <param name="propertyIndex">property index</param>
            <param name="fragmentEventType">fragment type</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
        </member>
        <member name="T:com.espertech.esper.events.arr.ObjectArrayPropertyGetterDefaultMap">
            <summary>
            Getter for map entry.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.arr.ObjectArrayPropertyGetterDefaultObjectArray">
            <summary>Getter for map entry. </summary>
        </member>
        <member name="T:com.espertech.esper.events.BaseConfigurableEventType">
            <summary>
            EventType than can be supplied with a preconfigured list of properties getters
            (aka. explicit properties).
            </summary>
        </member>
        <member name="F:com.espertech.esper.events.BaseConfigurableEventType.PropertyGetters">
            <summary>
            Getters for each known property.
            </summary>
        </member>
        <member name="F:com.espertech.esper.events.BaseConfigurableEventType.PropertyDescriptorMap">
            <summary>
            Descriptors for each known property.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.BaseConfigurableEventType.#ctor(com.espertech.esper.events.EventAdapterService,com.espertech.esper.events.EventTypeMetadata,System.Int32,System.Type)">
            <summary>
            Ctor.
            </summary>
            <param name="eventAdapterService">for dynamic event type creation</param>
            <param name="metadata">event type metadata</param>
            <param name="eventTypeId">The event type id.</param>
            <param name="underlyngType">is the underlying type returned by the event type</param>
        </member>
        <member name="M:com.espertech.esper.events.BaseConfigurableEventType.DoResolvePropertyGetter(System.String)">
            <summary>
            Subclasses must implement this and supply a getter to a given property.
            </summary>
            <param name="property">is the property expression</param>
            <returns>
            getter for property
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.BaseConfigurableEventType.DoResolvePropertyType(System.String)">
            <summary>
            Subclasses must implement this and return a type for a property.
            </summary>
            <param name="property">is the property expression</param>
            <returns>
            property type
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.BaseConfigurableEventType.DoResolveFragmentType(System.String)">
            <summary>
            Subclasses must implement this and return a fragment type for a property.
            </summary>
            <param name="property">is the property expression</param>
            <returns>
            fragment property type
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.BaseConfigurableEventType.Initialize(System.Collections.Generic.ICollection{com.espertech.esper.events.ExplicitPropertyDescriptor})">
            <summary>
            Sets explicit properties using a map of event property name and getter instance
            for each property.
            </summary>
            <param name="explicitProperties">property descriptors for explicit properties</param>
        </member>
        <member name="P:com.espertech.esper.events.BaseConfigurableEventType.EventAdapterService">
            <summary>
            Returns the event adapter service.
            </summary>
            <returns>
            event adapter service
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.BaseConfigurableEventType.SuperTypes">
            <summary>
            Returns an enumeration of event types that are super to this event type, from which this event type inherited event properties.
            <para/>
            For POCO instances underlying the event this method returns the event types for all superclasses extended by
            the POCO and all interfaces implemented by the POCO.
            </summary>
            <value>The super types.</value>
            <returns>an array of event types</returns>
        </member>
        <member name="P:com.espertech.esper.events.BaseConfigurableEventType.DeepSuperTypes">
            <summary>
            Returns enumerator over all super types to event type, going up the hierarchy and including all interfaces (and their
            extended interfaces) and superclasses as EventType instances.
            </summary>
            <value>The deep super types.</value>
        </member>
        <member name="T:com.espertech.esper.events.bean.ArrayFastPropertyGetter">
            <summary>
            Getter for an array property identified by a given index, using the CGLIB fast method.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.bean.BeanEventPropertyGetter">
            <summary>
            Shortcut-evaluator for use with POCO-backed events only.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.BeanEventPropertyGetter.GetBeanProp(System.Object)">
            <summary>
            Returns the property as an object.
            </summary>
            <param name="object">to evaluate</param>
            <returns>property of object</returns>
            <throws>PropertyAccessException if access failed</throws>
        </member>
        <member name="M:com.espertech.esper.events.bean.BeanEventPropertyGetter.IsBeanExistsProperty(System.Object)">
            <summary>
            Returns true if the dynamic property exists.
            </summary>
            <param name="object">to evaluate</param>
            <returns>indicator if property exists</returns>
        </member>
        <member name="M:com.espertech.esper.events.bean.ArrayFastPropertyGetter.#ctor(CGLib.FastMethod,System.Int32,com.espertech.esper.events.EventAdapterService)">
            <summary>Constructor. </summary>
            <param name="fastMethod">is the method to use to retrieve a value from the object</param>
            <param name="index">is tge index within the array to get the property from</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
        </member>
        <member name="T:com.espertech.esper.events.bean.ArrayFieldPropertyGetter">
            <summary>
            Getter for an array property backed by a field, identified by a given index, using
            vanilla reflection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.ArrayFieldPropertyGetter.#ctor(System.Reflection.FieldInfo,System.Int32,com.espertech.esper.events.EventAdapterService)">
            <summary>Constructor. </summary>
            <param name="field">is the field to use to retrieve a value from the object</param>
            <param name="index">is tge index within the array to get the property from</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
        </member>
        <member name="T:com.espertech.esper.events.bean.ArrayMethodPropertyGetter">
            <summary>
            Getter for an array property identified by a given index, using vanilla reflection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.ArrayMethodPropertyGetter.#ctor(System.Reflection.MethodInfo,System.Int32,com.espertech.esper.events.EventAdapterService)">
            <summary>Constructor. </summary>
            <param name="method">is the method to use to retrieve a value from the object</param>
            <param name="index">is tge index within the array to get the property from</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
        </member>
        <member name="T:com.espertech.esper.events.bean.BeanEventAdapter">
            <summary>
            A factory for <seealso cref="T:com.espertech.esper.events.bean.BeanEventType"/> instances based on type information and 
            using configured settings for
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.bean.BeanEventTypeFactory">
            <summary>
            Interface for a factory for obtaining <seealso cref="T:com.espertech.esper.events.bean.BeanEventType"/> instances.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.BeanEventTypeFactory.CreateBeanType(System.String,System.Type,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns the bean event type for a given class assigning the given name.
            </summary>
            <param name="name">is the name</param>
            <param name="clazz">is the class for which to generate an event type</param>
            <param name="isPreconfiguredStatic">if from static engine config</param>
            <param name="isPreconfigured">if configured before use</param>
            <param name="isConfigured">if the class is a configuration value, false if discovered</param>
            <returns>is the event type for the class</returns>
        </member>
        <member name="M:com.espertech.esper.events.bean.BeanEventTypeFactory.CreateBeanTypeDefaultName(System.Type)">
            <summary>Returns the bean event type for a given class assigning the given name. </summary>
            <param name="clazz">is the class for which to generate an event type</param>
            <returns>is the event type for the class</returns>
        </member>
        <member name="P:com.espertech.esper.events.bean.BeanEventTypeFactory.DefaultPropertyResolutionStyle">
            <summary>Returns the default property resolution style. </summary>
            <value>property resolution style</value>
        </member>
        <member name="M:com.espertech.esper.events.bean.BeanEventAdapter.#ctor(System.Collections.Generic.IDictionary{System.Type,com.espertech.esper.events.bean.BeanEventType},com.espertech.esper.events.EventAdapterService,com.espertech.esper.events.EventTypeIdGenerator)">
            <summary>
            Ctor.
            </summary>
            <param name="typesPerObject">shareable collection that this adapter writes tofor caching bean types per class</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
            <param name="eventTypeIdGenerator">The event type id generator.</param>
        </member>
        <member name="M:com.espertech.esper.events.bean.BeanEventAdapter.CreateBeanTypeDefaultName(System.Type)">
            <summary>Creates a new EventType object for a object of the specified class if this is the first time the class has been seen. Else uses a cached EventType instance, i.e. client classes do not need to cache. </summary>
            <param name="clazz">is the class of the object.</param>
            <returns>EventType implementation for bean class</returns>
        </member>
        <member name="M:com.espertech.esper.events.bean.BeanEventAdapter.CreateBeanType(System.String,System.Type,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new EventType object for a object of the specified class if this is the first time the class has been seen. Else uses a cached EventType instance, i.e. client classes do not need to cache.
            </summary>
            <param name="name">is the name</param>
            <param name="clazz">is the class of the object.</param>
            <param name="isPreconfiguredStatic">if from static engine config</param>
            <param name="isPreconfigured">if configured before use</param>
            <param name="isConfigured">if the class is a configuration value, false if discovered</param>
            <returns>EventType implementation for bean class</returns>
        </member>
        <member name="P:com.espertech.esper.events.bean.BeanEventAdapter.DefaultAccessorStyle">
            <summary>Gets or sets the default accessor style. </summary>
            <value>style to set</value>
        </member>
        <member name="P:com.espertech.esper.events.bean.BeanEventAdapter.TypeToLegacyConfigs">
            <summary>Set the additional mappings for legacy classes. </summary>
            <value>legacy class information</value>
        </member>
        <member name="P:com.espertech.esper.events.bean.BeanEventAdapter.DefaultPropertyResolutionStyle">
            <summary>Gets the default property resolution style for class properties. </summary>
            <value>resolution style</value>
        </member>
        <member name="T:com.espertech.esper.events.bean.BeanEventBean">
            <summary>
            Wrapper for PONO objects that represent events.
            Allows access to event properties, which is done through the getter supplied by the
            event type. <seealso cref="T:com.espertech.esper.client.EventType"/> instances containing type information are
            obtained from <seealso cref="T:com.espertech.esper.events.bean.BeanEventTypeFactory"/>. Two BeanEventBean instances
            are equal if they have the same event type and refer to the same instance of
            event object. Clients that need to compute equality between object wrapped by
            this class need to obtain the underlying object.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.BeanEventBean.#ctor(System.Object,com.espertech.esper.client.EventType)">
            <summary>
            Constructor.
            </summary>
            <param name="theEvent">is the event object</param>
            <param name="eventType">is the schema information for the event object.</param>
        </member>
        <member name="T:com.espertech.esper.events.bean.BeanEventBeanConfiguredCopyMethod">
            <summary>
            Copies an event for modification.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.BeanEventBeanConfiguredCopyMethod.#ctor(com.espertech.esper.events.bean.BeanEventType,com.espertech.esper.events.EventAdapterService,CGLib.FastMethod)">
            <summary>
            Ctor.
            </summary>
            <param name="beanEventType">type of bean to copy</param>
            <param name="eventAdapterService">for creating events</param>
            <param name="copyMethod">method to copy the event</param>
        </member>
        <member name="T:com.espertech.esper.events.bean.BeanEventBeanReader">
            <summary>
            Reader for fast access to all event properties for an event backed by a Java
            object.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.EventBeanReader">
            <summary>
            Interface for reading all event properties of an event.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanReader.Read(com.espertech.esper.client.EventBean)">
            <summary>
            Returns all event properties in the exact order they appear as properties.
            </summary>
            <param name="theEvent">to read</param>
            <returns>
            property values
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.bean.BeanEventBeanReader.#ctor(com.espertech.esper.events.bean.BeanEventType)">
            <summary>
            Ctor.
            </summary>
            <param name="type">the type of read</param>
        </member>
        <member name="T:com.espertech.esper.events.bean.BeanEventBeanSerializableCopyMethod">
            <summary>
            Copy method for bean events utilizing serializable.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.BeanEventBeanSerializableCopyMethod.#ctor(com.espertech.esper.events.bean.BeanEventType,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Ctor.
            </summary>
            <param name="beanEventType">event type</param>
            <param name="eventAdapterService">for creating the event object</param>
        </member>
        <member name="T:com.espertech.esper.events.bean.BeanEventBeanWriter">
            <summary>
            Writer for a set of event properties to a bean event.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.BeanEventBeanWriter.#ctor(com.espertech.esper.events.bean.BeanEventPropertyWriter[])">
            <summary>
            Writes to use.
            </summary>
            <param name="writers">writers</param>
        </member>
        <member name="T:com.espertech.esper.events.bean.BeanEventPropertyWriter">
            <summary>
            Writer for a property to an event.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.BeanEventPropertyWriter.#ctor(System.Type,CGLib.FastMethod)">
            <summary>
            Ctor.
            </summary>
            <param name="clazz">to write to</param>
            <param name="writerMethod">write method</param>
        </member>
        <member name="T:com.espertech.esper.events.bean.BeanEventType">
            <summary>
            Implementation of the EventType interface for handling object-type classes.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.NativeEventType">
            <summary>
            Marker interface for event types that need not transpose their property. 
            <para/>
            Transpose is the process of taking a fragment event property and adding the fragment 
            to the resulting type rather then the underlying property object.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.BeanEventType.#ctor(com.espertech.esper.events.EventTypeMetadata,System.Int32,System.Type,com.espertech.esper.events.EventAdapterService,com.espertech.esper.client.ConfigurationEventTypeLegacy)">
            <summary>
            Constructor takes a class as an argument.
            </summary>
            <param name="metadata">event type metadata</param>
            <param name="eventTypeId">The event type id.</param>
            <param name="clazz">is the class of an object</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
            <param name="optionalLegacyDef">optional configuration supplying legacy event type information</param>
        </member>
        <member name="M:com.espertech.esper.events.bean.BeanEventType.GetSimpleProperty(System.String)">
            <summary>Looks up and returns a cached simple property's descriptor. </summary>
            <param name="propertyName">to look up</param>
            <returns>property descriptor</returns>
        </member>
        <member name="M:com.espertech.esper.events.bean.BeanEventType.GetMappedProperty(System.String)">
            <summary>Looks up and returns a cached mapped property's descriptor. </summary>
            <param name="propertyName">to look up</param>
            <returns>property descriptor</returns>
        </member>
        <member name="M:com.espertech.esper.events.bean.BeanEventType.GetIndexedProperty(System.String)">
            <summary>Looks up and returns a cached indexed property's descriptor. </summary>
            <param name="propertyName">to look up</param>
            <returns>property descriptor</returns>
        </member>
        <member name="M:com.espertech.esper.events.bean.BeanEventType.GetSuper(System.Type,System.Collections.Generic.ICollection{System.Type})">
            <summary>Add the given class's implemented interfaces and superclasses to the result set of classes. </summary>
            <param name="clazz">to introspect</param>
            <param name="result">to add classes to</param>
        </member>
        <member name="P:com.espertech.esper.events.bean.BeanEventType.FactoryMethodName">
            <summary>Returns the factory methods name, or null if none defined. </summary>
            <value>factory methods name</value>
        </member>
        <member name="P:com.espertech.esper.events.bean.BeanEventType.PropertyResolutionStyle">
            <summary>Returns the property resolution style. </summary>
            <value>property resolution style</value>
        </member>
        <member name="P:com.espertech.esper.events.bean.BeanEventType.FastClass">
            <summary>Returns the fast class reference, if code generation is used for this type, else null. </summary>
            <value>fast class, or null if no code generation</value>
        </member>
        <member name="T:com.espertech.esper.events.bean.BeanEventType.SimplePropertyInfo">
            <summary>Descriptor caching the getter, class and property info. </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.BeanEventType.SimplePropertyInfo.#ctor(System.Type,com.espertech.esper.client.EventPropertyGetter,com.espertech.esper.events.bean.InternalEventPropDescriptor)">
            <summary>Ctor. </summary>
            <param name="clazz">is the class</param>
            <param name="getter">is the getter</param>
            <param name="descriptor">is the property info</param>
        </member>
        <member name="P:com.espertech.esper.events.bean.BeanEventType.SimplePropertyInfo.PropertyType">
            <summary>Returns the return type. </summary>
            <value>return type</value>
        </member>
        <member name="P:com.espertech.esper.events.bean.BeanEventType.SimplePropertyInfo.Getter">
            <summary>Returns the getter. </summary>
            <value>getter</value>
        </member>
        <member name="P:com.espertech.esper.events.bean.BeanEventType.SimplePropertyInfo.Descriptor">
            <summary>Returns the property info. </summary>
            <value>property info</value>
        </member>
        <member name="T:com.espertech.esper.events.bean.CGLibPropertyGetter">
            <summary>
            Property getter using CGLib's FastMethod instance.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.CGLibPropertyGetter.#ctor(System.Reflection.PropertyInfo,CGLib.FastProperty,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Constructor.
            </summary>
            <param name="property">The property.</param>
            <param name="fastProp">is the method to use to retrieve a value from the object.</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
        </member>
        <member name="T:com.espertech.esper.events.bean.CGLibPropertyMethodGetter">
            <summary>
            Property getter using CGLib's FastMethod instance.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.CGLibPropertyMethodGetter.#ctor(System.Reflection.MethodInfo,CGLib.FastMethod,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Constructor.
            </summary>
            <param name="method">the underlying method</param>
            <param name="fastMethod">The fast method.</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
        </member>
        <member name="T:com.espertech.esper.events.bean.DynamicIndexedPropertyGetter">
            <summary>
            Getter for a dynamic indexed property (syntax field.indexed[0]?), using vanilla
            reflection.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.bean.DynamicPropertyGetterBase">
            <summary>
            Base class for getters for a dynamic property (syntax field.inner?), caches
            methods to use for classes.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.DynamicPropertyGetterBase.DetermineMethod(System.Type)">
            <summary>
            To be implemented to return the method required, or null to indicate an
            appropriate method could not be found.
            </summary>
            <param name="type">to search for a matching method</param>
            <returns>
            method if found, or null if no matching method exists
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.bean.DynamicPropertyGetterBase.Call(com.espertech.esper.events.bean.DynamicPropertyDescriptor,System.Object)">
            <summary>
            Call the getter to obtains the return result object, or null if no such method
            exists.
            </summary>
            <param name="descriptor">provides method information for the class</param>
            <param name="underlying">is the underlying object to ask for the property value</param>
            <returns>
            underlying
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.bean.DynamicPropertyGetterBase.#ctor(com.espertech.esper.events.EventAdapterService)">
            <summary>
            Ctor.
            </summary>
            <param name="eventAdapterService">factory for event beans and event types</param>
        </member>
        <member name="M:com.espertech.esper.events.bean.DynamicIndexedPropertyGetter.#ctor(System.String,System.Int32,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Ctor.
            </summary>
            <param name="propertyName">property name</param>
            <param name="index">index to get the element at</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
        </member>
        <member name="T:com.espertech.esper.events.bean.DynamicMappedPropertyGetter">
            <summary>
            Getter for a dynamic mapped property (syntax field.Mapped('key')?), using
            vanilla reflection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.DynamicMappedPropertyGetter.#ctor(System.String,System.String,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Ctor.
            </summary>
            <param name="fieldName">property name</param>
            <param name="key">mapped access key</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
        </member>
        <member name="T:com.espertech.esper.events.bean.DynamicPropertyDescriptor">
            <summary>
            Provides method information for dynamic (unchecked) properties of each class for
            use in obtaining property values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.DynamicPropertyDescriptor.#ctor(System.Type,CGLib.FastMethod,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="clazz">the class to match when looking for a method</param>
            <param name="method">the fast method to call</param>
            <param name="hasParameters">true if the method takes parameters</param>
        </member>
        <member name="M:com.espertech.esper.events.bean.DynamicPropertyDescriptor.GetClazz">
            <summary>
            Returns the class for the method.
            </summary>
            <returns>
            class to match on
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.bean.DynamicPropertyDescriptor.GetMethod">
            <summary>
            Returns the method to invoke.
            </summary>
            <returns>
            method to invoke
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.bean.DynamicPropertyDescriptor.HasParameters">
            <summary>
            Returns true if the method takes parameters.
            </summary>
            <returns>
            indicator if parameters are required
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.bean.DynamicSimplePropertyGetter">
            <summary>
            Getter for a dynamic property (syntax field.inner?), using vanilla reflection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.DynamicSimplePropertyGetter.#ctor(System.String,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Ctor.
            </summary>
            <param name="fieldName">the property name</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
        </member>
        <member name="T:com.espertech.esper.events.bean.EnumerableFastPropertyGetter">
            <summary>
            Getter for a enumerable property identified by a given index, using the CGLIB fast
            method.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.EnumerableFastPropertyGetter.#ctor(System.Reflection.MethodInfo,CGLib.FastMethod,System.Int32,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Constructor.
            </summary>
            <param name="method">the underlying method</param>
            <param name="fastMethod">is the method to use to retrieve a value from the object</param>
            <param name="index">is tge index within the array to get the property from</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
        </member>
        <member name="M:com.espertech.esper.events.bean.EnumerableFastPropertyGetter.GetEnumerable(System.Object,System.Int32)">
            <summary>
            Returns the enumerable at a certain index, or null.
            </summary>
            <param name="value">the enumerable</param>
            <param name="index">index</param>
            <returns>
            value at index
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.bean.EnumerableFieldPropertyGetter">
            <summary>
            Getter for an enumerable property backed by a field, identified by a given index,
            using vanilla reflection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.EnumerableFieldPropertyGetter.#ctor(System.Reflection.FieldInfo,System.Int32,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Constructor.
            </summary>
            <param name="field">is the field to use to retrieve a value from the object</param>
            <param name="index">is the index within the array to get the property from</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
        </member>
        <member name="T:com.espertech.esper.events.bean.EnumerableMethodPropertyGetter">
            <summary>
            Getter for an enumerable property identified by a given index, using vanilla
            reflection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.EnumerableMethodPropertyGetter.#ctor(System.Reflection.MethodInfo,System.Int32,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Constructor.
            </summary>
            <param name="method">is the method to use to retrieve a value from the object</param>
            <param name="index">is tge index within the array to get the property from</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
        </member>
        <member name="T:com.espertech.esper.events.bean.EventBeanManufacturerBean">
            <summary>
            Factory for event beans created and populate anew from a set of values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.EventBeanManufacturerBean.#ctor(com.espertech.esper.events.bean.BeanEventType,com.espertech.esper.events.EventAdapterService,com.espertech.esper.events.WriteablePropertyDescriptor[],com.espertech.esper.epl.core.EngineImportService)">
            <summary>Ctor. </summary>
            <param name="beanEventType">target type</param>
            <param name="service">factory for events</param>
            <param name="properties">written properties</param>
            <param name="engineImportService">for resolving write methods</param>
            <throws>EventBeanManufactureException if the write method lookup fail</throws>
        </member>
        <member name="T:com.espertech.esper.events.bean.InternalEventPropDescriptor">
            <summary>
            Encapsulates the event property information available after introspecting an
            event's class members for getter methods.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.InternalEventPropDescriptor.#ctor(System.String,System.Reflection.MethodInfo,System.Nullable{com.espertech.esper.events.EventPropertyType})">
            <summary>
            Ctor.
            </summary>
            <param name="propertyName">name of property, from getter method</param>
            <param name="readMethod">read method to get value</param>
            <param name="propertyType">type of property</param>
        </member>
        <member name="M:com.espertech.esper.events.bean.InternalEventPropDescriptor.#ctor(System.String,System.Reflection.FieldInfo,System.Nullable{com.espertech.esper.events.EventPropertyType})">
            <summary>
            Ctor.
            </summary>
            <param name="propertyName">name of property, from getter method</param>
            <param name="accessorField">field to get value from</param>
            <param name="propertyType">type of property</param>
        </member>
        <member name="M:com.espertech.esper.events.bean.InternalEventPropDescriptor.GetReturnTypeGeneric">
            <summary>
            Returns the type of the underlying method or field of the event property.
            </summary>
            <returns>
            return type
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.bean.InternalEventPropDescriptor.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.bean.InternalEventPropDescriptor.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="P:com.espertech.esper.events.bean.InternalEventPropDescriptor.DeclaringType">
            <summary>
            Gets the declaring type for the property.
            </summary>
            <value>The type of the declaring.</value>
        </member>
        <member name="P:com.espertech.esper.events.bean.InternalEventPropDescriptor.PropertyName">
            <summary>
            Return the property name, for mapped and indexed properties this is just the
            property name without parantheses or brackets.
            </summary>
            <returns>
            property name
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.bean.InternalEventPropDescriptor.PropertyType">
            <summary>
            Returns an enum indicating the type of property: simple, mapped, indexed.
            </summary>
            <returns>
            enum with property type info
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.bean.InternalEventPropDescriptor.ReadMethod">
            <summary>
            Returns the read method. Can return null if the property is backed by a field..
            </summary>
            <returns>
            read method of null if field property
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.bean.InternalEventPropDescriptor.AccessorField">
            <summary>
            Returns the accessor field. Can return null if the property is backed by a
            method.
            </summary>
            <returns>
            accessor field of null if method property
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.bean.InternalEventPropDescriptor.ReturnType">
            <summary>
            Returns the type of the underlying method or field of the event property.
            </summary>
            <returns>
            return type
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.bean.KeyedFastPropertyGetter">
            <summary>
            Getter for a key property identified by a given key value, using the CGLIB fast
            method.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.KeyedFastPropertyGetter.#ctor(CGLib.FastMethod,System.Object,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Constructor.
            </summary>
            <param name="fastMethod">is the method to use to retrieve a value from the object.</param>
            <param name="key">is the key to supply as parameter to the mapped property getter</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
        </member>
        <member name="T:com.espertech.esper.events.bean.KeyedMapFastPropertyGetter">
            <summary>
            Getter for a key property identified by a given key value of a map, using the CGLIB fast method.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.KeyedMapFastPropertyGetter.#ctor(System.Reflection.MethodInfo,CGLib.FastMethod,System.String,com.espertech.esper.events.EventAdapterService)">
            <summary>Constructor. </summary>
            <param name="method">the underlying method</param>
            <param name="fastMethod">is the method to use to retrieve a value from the object.</param>
            <param name="key">is the key to supply as parameter to the mapped property getter</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
        </member>
        <member name="T:com.espertech.esper.events.bean.KeyedMapFieldPropertyGetter">
            <summary>
            Getter for a key property identified by a given key value, using vanilla reflection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.KeyedMapFieldPropertyGetter.#ctor(System.Reflection.FieldInfo,System.Object,com.espertech.esper.events.EventAdapterService)">
            <summary>Constructor. </summary>
            <param name="field">is the field to use to retrieve a value from the object.</param>
            <param name="key">is the key to supply as parameter to the mapped property getter</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
        </member>
        <member name="T:com.espertech.esper.events.bean.KeyedMapMethodPropertyGetter">
            <summary>
            Getter for a key property identified by a given key value, using vanilla reflection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.KeyedMapMethodPropertyGetter.#ctor(System.Reflection.MethodInfo,System.Object,com.espertech.esper.events.EventAdapterService)">
            <summary>Constructor. </summary>
            <param name="method">is the method to use to retrieve a value from the object.</param>
            <param name="key">is the key to supply as parameter to the mapped property getter</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
        </member>
        <member name="T:com.espertech.esper.events.bean.KeyedMethodPropertyGetter">
            <summary>
            Getter for a key property identified by a given key value, using vanilla reflection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.KeyedMethodPropertyGetter.#ctor(System.Reflection.MethodInfo,System.Object,com.espertech.esper.events.EventAdapterService)">
            <summary>Constructor. </summary>
            <param name="method">is the method to use to retrieve a value from the object.</param>
            <param name="key">is the key to supply as parameter to the mapped property getter</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
        </member>
        <member name="T:com.espertech.esper.events.bean.LambdaPropertyGetter">
            <summary>
            Property getter using lambda expressions
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.LambdaPropertyGetter.#ctor(System.Reflection.MethodInfo,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Constructor.
            </summary>
            <param name="method">the underlying method</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
        </member>
        <member name="T:com.espertech.esper.events.bean.ListFastPropertyGetter">
            <summary>
            Getter for a list property identified by a given index, using the CGLIB fast method.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.ListFastPropertyGetter.#ctor(System.Reflection.MethodInfo,CGLib.FastMethod,System.Int32,com.espertech.esper.events.EventAdapterService)">
            <summary>Constructor. </summary>
            <param name="method">the underlying method</param>
            <param name="fastMethod">is the method to use to retrieve a value from the object</param>
            <param name="index">is tge index within the array to get the property from</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
        </member>
        <member name="T:com.espertech.esper.events.bean.ListFieldPropertyGetter">
            <summary>
            Getter for a list property backed by a field, identified by a given index, using vanilla reflection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.ListFieldPropertyGetter.#ctor(System.Reflection.FieldInfo,System.Int32,com.espertech.esper.events.EventAdapterService)">
            <summary>Constructor. </summary>
            <param name="field">is the field to use to retrieve a value from the object</param>
            <param name="index">is tge index within the array to get the property from</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
        </member>
        <member name="T:com.espertech.esper.events.bean.ListMethodPropertyGetter">
            <summary>
            Getter for a list property identified by a given index, using vanilla reflection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.ListMethodPropertyGetter.#ctor(System.Reflection.MethodInfo,System.Int32,com.espertech.esper.events.EventAdapterService)">
            <summary>Constructor. </summary>
            <param name="method">is the method to use to retrieve a value from the object</param>
            <param name="index">is tge index within the array to get the property from</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
        </member>
        <member name="T:com.espertech.esper.events.bean.NestedPropertyGetter">
            <summary>
            Getter for one or more levels deep nested properties.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.NestedPropertyGetter.#ctor(System.Collections.Generic.IList{com.espertech.esper.client.EventPropertyGetter},com.espertech.esper.events.EventAdapterService,System.Type,System.Type)">
            <summary>
            Ctor.
            </summary>
            <param name="getterChain">is the chain of getters to retrieve each nested property</param>
            <param name="eventAdapterService">is the cache and factory for event bean types and event wrappers</param>
            <param name="finalPropertyType">type of the entry returned</param>
            <param name="finalGenericType">generic type parameter of the entry returned, if any</param>
        </member>
        <member name="T:com.espertech.esper.events.bean.PropertyHelper">
            <summary>
            This class offers utililty methods around introspection and CGLIB interaction.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.PropertyHelper.GetGetter(System.String,System.Reflection.MethodInfo,CGLib.FastClass,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Return getter for the given method and CGLIB FastClass.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="method">to return getter for</param>
            <param name="fastClass">is the CGLIB fast classs to make FastMethod for</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
            <returns>property getter</returns>
        </member>
        <member name="M:com.espertech.esper.events.bean.PropertyHelper.GetProperties(System.Type)">
            <summary>
            Introspects the given class and returns event property descriptors for each
            property found in the class itself, it's superclasses and all interfaces this class
            and the superclasses implements.
            </summary>
            <param name="type">is the Class to introspect</param>
            <returns>
            list of properties
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.bean.PropertyHelper.GetWritableProperties(System.Type)">
            <summary>
            Introspects the given class and returns event property descriptors for each
            writable property found in the class itself, it's superclasses and all interfaces
            this class and the superclasses implements.
            </summary>
            <param name="type">is the Class to introspect</param>
            <returns>
            list of properties
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.bean.PropertyHelper.RemoveCLRProperties(System.Collections.Generic.IList{com.espertech.esper.events.bean.InternalEventPropDescriptor})">
            <summary>
            Remove language specific properties from the given list of property
            descriptors.
            </summary>
            <param name="properties">is the list of property descriptors</param>
        </member>
        <member name="M:com.espertech.esper.events.bean.PropertyHelper.RemoveDuplicateProperties(System.Collections.Generic.IList{com.espertech.esper.events.bean.InternalEventPropDescriptor})">
            <summary>
            Removed duplicate properties using the property name to find unique properties.
            </summary>
            <param name="properties">is a list of property descriptors</param>
        </member>
        <member name="T:com.espertech.esper.events.bean.PropertyListBuilder">
            <summary>
            Interface for an introspector that generates a list of event property
            descriptors given a clazz.
            <para/>
            Introspect the clazz and deterime exposed event properties.
            </summary>
            <param name="clazz">to introspect</param>
            <returns>list of event property descriptors</returns>
        </member>
        <member name="T:com.espertech.esper.events.bean.PropertyListBuilderExplicit">
            <summary>
            Introspector that considers explicitly configured event properties only.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.PropertyListBuilderExplicit.#ctor(com.espertech.esper.client.ConfigurationEventTypeLegacy)">
            <summary>
            Ctor.
            </summary>
            <param name="legacyConfig">is a legacy type specification containinginformation about explicitly configured fields and methods </param>
        </member>
        <member name="M:com.espertech.esper.events.bean.PropertyListBuilderExplicit.GetExplicitProperties(System.Collections.Generic.IList{com.espertech.esper.events.bean.InternalEventPropDescriptor},System.Type,com.espertech.esper.client.ConfigurationEventTypeLegacy)">
            <summary>
            Populates explicitly-defined properties into the result list.
            </summary>
            <param name="result">is the resulting list of event property descriptors</param>
            <param name="type">is the class to introspect</param>
            <param name="legacyConfig">supplies specification of explicit methods and fields to expose</param>
        </member>
        <member name="M:com.espertech.esper.events.bean.PropertyListBuilderExplicit.MakeFieldDesc(System.Reflection.FieldInfo,System.String)">
            <summary>
            Makes a simple-type event property descriptor based on a reflected field.
            </summary>
            <param name="field">is the public field</param>
            <param name="name">is the name of the event property</param>
            <returns>
            property descriptor
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.bean.PropertyListBuilderExplicit.MakeMethodDesc(System.Reflection.MethodInfo,System.String)">
            <summary>
            Makes an event property descriptor based on a reflected method, considering the
            methods parameters to determine if this is an indexed or mapped event property.
            </summary>
            <param name="method">is the public method</param>
            <param name="name">is the name of the event property</param>
            <returns>
            property descriptor
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.bean.PropertyListBuilderFactory">
            <summary>
            Factory for creates a builder/introspector for determining event property
            descriptors based on a given class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.PropertyListBuilderFactory.CreateBuilder(com.espertech.esper.client.ConfigurationEventTypeLegacy)">
            <summary>
            Creates an implementation for a builer considering the accessor style and code
            generation flags for a given class.
            </summary>
            <param name="optionalLegacyClassConfigs">configures how event property listy is build</param>
            <returns>
            builder/introspector implementation
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.bean.PropertyListBuilderNative">
            <summary>
            Implementation for a property list builder that considers POCO methods
            and properties as the exposed event properties, plus any explicitly 
            configured props.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.PropertyListBuilderNative.#ctor(com.espertech.esper.client.ConfigurationEventTypeLegacy)">
            <summary>
            Ctor.
            </summary>
            <param name="optionalLegacyConfig">configures legacy type, or null informationhas been supplied. </param>
        </member>
        <member name="T:com.espertech.esper.events.bean.PropertyListBuilderPublic">
            <summary>
            Implementation for a property list builder that considers any public method and
            public field as the exposed event properties, plus any explicitly configured
            props.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.PropertyListBuilderPublic.#ctor(com.espertech.esper.client.ConfigurationEventTypeLegacy)">
            <summary>
            Ctor.
            </summary>
            <param name="legacyConfig">configures legacy type</param>
        </member>
        <member name="T:com.espertech.esper.events.bean.ReflectionPropFieldGetter">
            <summary>
            Property getter for fields using reflection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.ReflectionPropFieldGetter.#ctor(System.Reflection.FieldInfo,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Constructor.
            </summary>
            <param name="field">is the regular reflection field to use to obtain values for a property</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
        </member>
        <member name="T:com.espertech.esper.events.bean.ReflectionPropMethodGetter">
            <summary>
            Property getter for methods using vanilla reflection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.bean.ReflectionPropMethodGetter.#ctor(System.Reflection.MethodInfo,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Constructor.
            </summary>
            <param name="method">is the regular reflection method to use to obtain values for a field.</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
        </member>
        <member name="T:com.espertech.esper.events.DecoratingEventBean">
            <summary>
            Interface for event types that provide decorating event properties as a name-value map.
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.DecoratingEventBean.DecoratingProperties">
            <summary>Returns decorating properties.</summary>
            <returns>property name and values</returns>
        </member>
        <member name="P:com.espertech.esper.events.DecoratingEventBean.UnderlyingEvent">
            <summary>
            Returns the underlying event to the decorated event.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.EventAdapterService">
            <summary>
            Interface for a service to resolve event names to event type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.GetWriteableProperties(com.espertech.esper.client.EventType)">
            <summary>
            Returns descriptors for all writable properties.
            </summary>
            <param name="eventType">to reflect on</param>
            <returns>
            list of writable properties
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.GetManufacturer(com.espertech.esper.client.EventType,System.Collections.Generic.IList{com.espertech.esper.events.WriteablePropertyDescriptor},com.espertech.esper.epl.core.EngineImportService)">
            <summary>
            Returns a factory for creating and populating event object instances for the
            given type.
            </summary>
            <param name="eventType">to create underlying objects for</param>
            <param name="properties">to write</param>
            <param name="engineImportService">The engine import service.</param>
            <returns>factory</returns>
            <throws>EventBeanManufactureException if a factory cannot be created for the type</throws>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AdapterForTypedObject(System.Object,com.espertech.esper.client.EventType)">
            <summary>
            Creates a thin adaper for an event object given an event type.
            </summary>
            <param name="bean">event object</param>
            <param name="eventType">event type</param>
            <returns>
            event
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AddTypeByName(System.String,com.espertech.esper.client.EventType)">
            <summary>
            Adds an event type to the registery available for use, and originating outside
            as a non-adapter.
            </summary>
            <param name="name">to add an event type under</param>
            <param name="eventType">the type to add</param>
            <throws>EventAdapterException if the name is already in used by another type</throws>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.GetEventTypeByName(System.String)">
            <summary>
            Return the event type for a given event name, or null if none is registered for
            that name.
            </summary>
            <param name="eventTypeName">is the event type name to return type for</param>
            <returns>
            event type for named event, or null if unknown/unnamed type
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AddNestableMapType(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},com.espertech.esper.client.ConfigurationEventTypeMap,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Add an event type with the given name and a given set of properties, wherein properties may itself 
            be Maps, nested and strongly-typed.
            <para/> 
            If the name already exists with the same event property information, returns the existing EventType instance. 
            <para/> 
            If the name already exists with different event property information, throws an exception. 
            <para/> 
            If the name does not already exists, adds the name and constructs a new <seealso cref="T:com.espertech.esper.events.map.MapEventType"/>.
            </summary>
            <param name="eventTypeName">is the name for the event type</param>
            <param name="propertyTypes">is the names and types of event properties</param>
            <param name="optionalConfig">an optional set of Map event type names that are supertypes to the type</param>
            <param name="isPreconfiguredStatic">if set to <c>true</c> [is preconfigured static].</param>
            <param name="isPreconfigured">if set to <c>true</c> [is preconfigured].</param>
            <param name="isConfigured">if the type is application-configured</param>
            <param name="namedWindow">if the type is from a named window</param>
            <param name="insertInto">if inserting into a stream</param>
            <returns>event type is the type added</returns>
            <throws>EventAdapterException if name already exists and doesn't match property type info</throws>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AddWrapperType(System.String,com.espertech.esper.client.EventType,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Boolean)">
            <summary>
            Add an event type with the given name and the given underlying event type, as well as the additional given properties.
            </summary>
            <param name="eventTypeName">is the name for the event type</param>
            <param name="underlyingEventType">is the event type for the event type that this wrapper wraps</param>
            <param name="propertyTypes">is the names and types of any additional properties</param>
            <param name="isNamedWindow">if the type is from a named window</param>
            <param name="isInsertInto">if inserting into a stream</param>
            <returns>eventType is the type added</returns>
            <throws>EventAdapterException if name already exists and doesn't match this type's info</throws>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.CreateAnonymousMapType(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a new anonymous EventType instance for an event type that contains a map
            of name value pairs. The method accepts a Map that contains the property names
            as keys and Class objects as the values. The Class instances represent the
            property types.
            <para/>
            New instances are created Statement by this method on every invocation. Clients 
            to this method need to cache the returned EventType instance to reuse EventType's
            for same-typed events.
            <para/>
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="propertyTypes">is a map of String to Class objects</param>
            <returns>
            EventType implementation for map field names and value types
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AdapterForTypedWrapper(com.espertech.esper.client.EventBean,System.Collections.Generic.IDictionary{System.String,System.Object},com.espertech.esper.client.EventType)">
            <summary>
            Creata a wrapper around an event and some additional properties
            </summary>
            <param name="theEvent">is the wrapped event</param>
            <param name="properties">are the additional properties</param>
            <param name="eventType">os the type metadata for any wrappers of this type</param>
            <returns>wrapper event bean</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AddBeanType(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Add an event type with the given name and fully-qualified class name.
            <para/> If the name already exists with the same class name, returns the existing EventType instance.
            <para/> If the name already exists with different class name, throws an exception.
            <para/> If the name does not already exists, adds the name and constructs a new <seealso cref="T:com.espertech.esper.events.bean.BeanEventType"/>. 
            <para/> Takes into account all event-type-auto-package names supplied and attempts to resolve the class name via the packages if the direct resolution failed.
            </summary>
            <param name="eventTypeName">is the name for the event type</param>
            <param name="fullyQualClassName">is the fully qualified class name</param>
            <param name="considerAutoName">whether auto-name by namespaces should be considered</param>
            <param name="isPreconfiguredStatic">if set to <c>true</c> [is preconfigured static].</param>
            <param name="isPreconfigured">if set to <c>true</c> [is preconfigured].</param>
            <param name="isConfigured">if set to <c>true</c> [is configured].</param>
            <returns>event type is the type added</returns>
            <throws>EventAdapterException if name already exists and doesn't match class names</throws>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AddBeanType(System.String,System.Type,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Add an event type with the given name and class.
            <para/> If the name already exists with the same Class, returns the existing EventType instance.
            <para/> If the name already exists with different Class name, throws an exception.
            <para/> If the name does not already exists, adds the name and constructs a new <seealso cref="T:com.espertech.esper.events.bean.BeanEventType"/>.
            </summary>
            <param name="eventTypeName">is the name for the event type</param>
            <param name="clazz">is the fully class</param>
            <param name="isPreconfiguredStatic">if set to <c>true</c> [is preconfigured static].</param>
            <param name="isPreconfigured">if set to <c>true</c> [is preconfigured].</param>
            <param name="isConfigured">if the class is application-configured</param>
            <returns>event type is the type added</returns>
            <throws>EventAdapterException if name already exists and doesn't match class names</throws>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AdapterForObject(System.Object)">
            <summary>
            Wrap the native event returning an <seealso cref="T:com.espertech.esper.client.EventBean"/>.
            </summary>
            <param name="theEvent">to be wrapped</param>
            <returns>
            event bean wrapping native underlying event
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AdapterForMap(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Wrap the Map-type event returning an <seealso cref="T:com.espertech.esper.client.EventBean"/> using the event type name to identify the EventType that the event should carry.
            </summary>
            <param name="theEvent">to be wrapped</param>
            <param name="eventTypeName">name for the event type of the event</param>
            <returns>
            event bean wrapping native underlying event
            </returns>
            <throws>EventAdapterException if the name has not been declared, or the event cannot be wrapped using thatname's event type </throws>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AdapterForTypedMap(System.Collections.Generic.IDictionary{System.String,System.Object},com.espertech.esper.client.EventType)">
            <summary>
            Create an event map bean from a set of event properties (name and value
            objectes) stored in a Map.
            </summary>
            <param name="properties">is key-value pairs for the event properties</param>
            <param name="eventType">is the type metadata for any maps of that type</param>
            <returns>EventBean instance</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AdapterForLINQ(System.Xml.Linq.XElement)">
            <summary>
            Returns an adapter for the LINQ element that exposes it's data as event
            properties for use in statements.
            </summary>
            <param name="element">is the element to wrap</param>
            <returns>
            event wrapper for document
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AdapterForDOM(System.Xml.XmlNode)">
            <summary>
            Returns an adapter for the XML DOM document that exposes it's data as event
            properties for use in statements.
            </summary>
            <param name="node">is the node to wrap</param>
            <returns>event wrapper for document</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AdapterForTypedDOM(System.Xml.XmlNode,com.espertech.esper.client.EventType)">
            <summary>
            Returns an adapter for the XML DOM document that exposes it's data as event
            properties for use in statements.
            </summary>
            <param name="node">is the node to wrap</param>
            <param name="eventType">the event type associated with the node</param>
            <returns>event wrapper for document</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AdapterForTypedDOM(System.Xml.Linq.XObject,com.espertech.esper.client.EventType)">
            <summary>
            Returns an adapter for the XML LINQ object that exposes it's data as event
            properties for use in statements.
            </summary>
            <param name="node">is the node to wrap</param>
            <param name="eventType">the event type associated with the node</param>
            <returns>
            event wrapper for document
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AdapterForType(System.Object,com.espertech.esper.client.EventType)">
            <summary>
            Returns an adapter for an event underlying object when the event type is known.
            </summary>
            <param name="theEvent">underlying</param>
            <param name="eventType">type</param>
            <returns>event wrapper for object</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.CreateAnonymousWrapperType(System.String,com.espertech.esper.client.EventType,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create a new anonymous event type with the given underlying event type, as well as the additional given properties.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="underlyingEventType">is the event type for the event type that this wrapper wraps</param>
            <param name="propertyTypes">is the names and types of any additional properties</param>
            <returns>eventType is the type createdStatement</returns>
            <throws>EventAdapterException if name already exists and doesn't match this type's info</throws>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AddXMLDOMType(System.String,com.espertech.esper.client.ConfigurationEventTypeXMLDOM,com.espertech.esper.events.xml.SchemaModel,System.Boolean)">
            <summary>
            Adds an XML DOM event type.
            </summary>
            <param name="eventTypeName">is the name to add the type for</param>
            <param name="configurationEventTypeXMLDOM">is the XML DOM config info</param>
            <param name="optionalSchemaModel">is the object model of the schema, or null in none provided</param>
            <param name="isPreconfiguredStatic">if set to <c>true</c> [is preconfigured static].</param>
            <returns>event type</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.GetTypeLegacyConfigs(System.String)">
            <summary>
            Returns the configured legacy class information or null if none defined.
            </summary>
            <param name="className">is the fully-qualified class name</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AddAutoNamePackage(System.String)">
            <summary>
            Adds a namespace within which event types reside.
            </summary>
            <param name="namespace">is the namespace within which event types reside</param>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AddEventRepresentation(System.Uri,com.espertech.esper.plugin.PlugInEventRepresentation)">
            <summary>
            Add a plug-in event representation.
            </summary>
            <param name="eventRepURI">URI is the unique identifier for the event representation</param>
            <param name="pluginEventRep">is the instance</param>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.AddPlugInEventType(System.String,System.Collections.Generic.IList{System.Uri},System.Object)">
            <summary>
            Adds a plug-in event type.
            </summary>
            <param name="name">is the name of the event type</param>
            <param name="resolutionURIs">is the URIs of plug-in event representations, or child URIs of such</param>
            <param name="initializer">is configs for the type</param>
            <returns>type</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.GetStaticTypeEventSender(com.espertech.esper.core.service.EPRuntimeEventSender,System.String,com.espertech.esper.core.thread.ThreadingService)">
            <summary>
            Returns an event sender for a specific type, only generating events of that type.
            </summary>
            <param name="runtimeEventSender">the runtime handle for sending the wrapped type</param>
            <param name="eventTypeName">is the name of the event type to return the sender for</param>
            <param name="threadingService">threading service</param>
            <returns>event sender that is static, single-type</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.GetDynamicTypeEventSender(com.espertech.esper.core.service.EPRuntimeEventSender,System.Uri[],com.espertech.esper.core.thread.ThreadingService)">
            <summary>
            Returns an event sender that dynamically decides what the event type for a given object is.
            </summary>
            <param name="runtimeEventSender">the runtime handle for sending the wrapped type</param>
            <param name="uri">is for plug-in event representations to provide implementations, if accepted, to make a wrapped event</param>
            <param name="threadingService">threading service</param>
            <returns>
            event sender that is dynamic, multi-type based on multiple event bean factories provided byplug-in event representations
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.UpdateMapEventType(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Update a given Map  event type.
            </summary>
            <param name="mapEventTypeName">name to update</param>
            <param name="typeMap">additional properties to add, nesting allowed</param>
            <throws>EventAdapterException when the type is not found or is not a IDictionary</throws>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.TypeCast(System.Collections.Generic.IList{com.espertech.esper.client.EventBean},com.espertech.esper.client.EventType)">
            <summary>Casts event type of a list of events to either Wrapper or Map type. </summary>
            <param name="events">to cast</param>
            <param name="targetType">target type</param>
            <returns>type casted event array</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.RemoveType(System.String)">
            <summary>
            Removes an event type by a given name indicating by the return value whether the type was found or not. 
            <para/>
            Does not uncache an existing class loaded by a JVM. Does remove XML root element names. Does not handle
            value-add event types.
            </summary>
            <param name="eventTypeName">to remove</param>
            <returns>
            true if found and removed, false if not found
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterService.CreateSemiAnonymousMapType(System.String,System.Collections.Generic.IDictionary{System.String,com.espertech.esper.collection.Pair{com.espertech.esper.client.EventType,System.String}},System.Collections.Generic.IDictionary{System.String,com.espertech.esper.collection.Pair{com.espertech.esper.client.EventType,System.String}},System.Boolean)">
            <summary>
            Creates an anonymous map that has no name, however in a fail-over scenario events of this type may be recoverable 
            and therefore the type is only semi-anonymous, identified by the tags and event type names used.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="taggedEventTypes">simple type per property name</param>
            <param name="arrayEventTypes">array type per property name</param>
            <param name="isUsedByChildViews">if the type is going to be in used by child views</param>
            <returns>event type</returns>
        </member>
        <member name="P:com.espertech.esper.events.EventAdapterService.AllTypes">
            <summary>
            Return all known event types.
            </summary>
            <returns>
            event types
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.EventAdapterService.TypeLegacyConfigs">
            <summary>
            Gets or sets the configured legacy class information.
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.EventAdapterService.DefaultPropertyResolutionStyle">
            <summary>
            Gets or sets the resolution style for case-sentitivity.
            </summary>
            <value>for resolving properties.</value>
        </member>
        <member name="P:com.espertech.esper.events.EventAdapterService.BeanEventTypeFactory">
            <summary>
            Returns a subset of the functionality of the service specific to creating event types.
            </summary>
            <value>bean event type factory</value>
        </member>
        <member name="T:com.espertech.esper.events.EventAdapterServiceHelper">
            <summary>Helper for writeable events. </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterServiceHelper.GetWriteableProperties(com.espertech.esper.client.EventType)">
            <summary>Returns descriptors for all writable properties. </summary>
            <param name="eventType">to reflect on</param>
            <returns>list of writable properties</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterServiceHelper.AdapterForType(System.Object,com.espertech.esper.client.EventType,com.espertech.esper.events.EventAdapterService)">
            <summary>Return an adapter for the given type of event using the pre-validated object. </summary>
            <param name="theEvent">value object</param>
            <param name="eventType">type of event</param>
            <param name="eventAdapterService">service for instances</param>
            <returns>event adapter</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterServiceHelper.GetManufacturer(com.espertech.esper.events.EventAdapterService,com.espertech.esper.client.EventType,System.Collections.Generic.IList{com.espertech.esper.events.WriteablePropertyDescriptor},com.espertech.esper.epl.core.EngineImportService)">
            <summary>
            Returns a factory for creating and populating event object instances for the given type.
            </summary>
            <param name="eventAdapterService">fatory for event</param>
            <param name="eventType">to create underlying objects for</param>
            <param name="properties">to write</param>
            <param name="engineImportService">The engine import service.</param>
            <returns>factory</returns>
            <throws>EventBeanManufactureException if a factory cannot be created for the type</throws>
        </member>
        <member name="T:com.espertech.esper.events.EventAdapterServiceImpl">
            <summary>
            Implementation for resolving event name to event type.
            <para/>
            The implementation assigned a unique identifier to each event type. For Class-based event types, only 
            one EventType instance and one event type id exists for the same class.
            <para/>
            Event type names must be unique, that is an name must resolve to a single event type.
            <para/>
            Each event type can have multiple names defined for it. For example, expressions such as "select * from A"
            and "select * from B" in which A and B are names for the same class X the select clauses each fireStatementStopped
            for events of type X. In summary, names A and B point to the same underlying event type and therefore event type id.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterServiceImpl.#ctor(com.espertech.esper.events.EventTypeIdGenerator)">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterServiceImpl.AdapterForObject(System.Object)">
            <summary>Create an event bean given an event of object id. </summary>
            <param name="theEvent">is the event class</param>
            <returns>event</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterServiceImpl.AddBeanType(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Add an event type for the given Java class name.
            </summary>
            <param name="eventTypeName">is the name</param>
            <param name="fullyQualClassName">is the Java class name</param>
            <param name="considerAutoName">whether auto-name by namespaces should be considered</param>
            <param name="isPreconfiguredStatic">if set to <c>true</c> [is preconfigured static].</param>
            <param name="isPreconfigured">if set to <c>true</c> [is preconfigured].</param>
            <param name="isConfigured">if set to <c>true</c> [is configured].</param>
            <returns>event type</returns>
            <throws>EventAdapterException if the Class name cannot resolve or other error occured</throws>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterServiceImpl.AddXMLDOMType(System.String,com.espertech.esper.client.ConfigurationEventTypeXMLDOM,com.espertech.esper.events.xml.SchemaModel,System.Boolean)">
            <summary>
            Add a configured XML DOM event type.
            </summary>
            <param name="eventTypeName">is the name name of the event type</param>
            <param name="configurationEventTypeXMLDOM">configures the event type schema and namespace and XPathproperty information.</param>
            <param name="optionalSchemaModel">The optional schema model.</param>
            <param name="isPreconfiguredStatic">if set to <c>true</c> [is preconfigured static].</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterServiceImpl.AddXMLDOMType(System.String,com.espertech.esper.client.ConfigurationEventTypeXMLDOM,com.espertech.esper.events.xml.SchemaModel,System.Boolean,System.Boolean)">
            <summary>
            Add a configured XML DOM event type.
            </summary>
            <param name="eventTypeName">is the name name of the event type</param>
            <param name="configurationEventTypeXMLDOM">configures the event type schema and namespace and XPathproperty information.</param>
            <param name="optionalSchemaModel">The optional schema model.</param>
            <param name="isPreconfiguredStatic">if set to <c>true</c> [is preconfigured static].</param>
            <param name="allowOverrideExisting">if set to <c>true</c> [allow override existing].</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterServiceImpl.IsCompatibleWrapper(com.espertech.esper.client.EventType,com.espertech.esper.client.EventType,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Returns true if the wrapper type is compatible with an existing wrapper type, for the reason that the underlying event is a subtype of the existing underlying wrapper's type. </summary>
            <param name="existingType">is the existing wrapper type</param>
            <param name="underlyingType">is the proposed new wrapper type's underlying type</param>
            <param name="propertyTypes">is the additional properties</param>
            <returns>true for compatible, or false if not</returns>
        </member>
        <member name="P:com.espertech.esper.events.EventAdapterServiceImpl.DefaultPropertyResolutionStyle">
            <summary>Sets the default property resolution style. </summary>
            <value>is the default style</value>
        </member>
        <member name="P:com.espertech.esper.events.EventAdapterServiceImpl.TypeLegacyConfigs">
            <summary>Set the legacy class type information. </summary>
            <value>is the legacy class configs</value>
        </member>
        <member name="T:com.espertech.esper.events.EventBeanManufactureException">
            <summary>
            Thrown to indicate a problem creating or populating an underlying event objects.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanManufactureException.#ctor(System.String,System.Exception)">
            <summary>
            Ctor.
            </summary>
            <param name="message">message</param>
            <param name="innerException">cause</param>
        </member>
        <member name="T:com.espertech.esper.events.EventBeanManufacturerMap">
            <summary>Factory for Map-underlying events. </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanManufacturerMap.#ctor(com.espertech.esper.events.map.MapEventType,com.espertech.esper.events.EventAdapterService,System.Collections.Generic.IList{com.espertech.esper.events.WriteablePropertyDescriptor})">
            <summary>Ctor. </summary>
            <param name="mapEventType">type to create</param>
            <param name="eventAdapterService">event factory</param>
            <param name="properties">written properties</param>
        </member>
        <member name="T:com.espertech.esper.events.EventBeanManufacturerObjectArray">
            <summary>
            Factory for ObjectArray-underlying events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanManufacturerObjectArray.#ctor(com.espertech.esper.events.arr.ObjectArrayEventType,com.espertech.esper.events.EventAdapterService,System.Collections.Generic.IList{com.espertech.esper.events.WriteablePropertyDescriptor})">
            <summary>Ctor. </summary>
            <param name="eventType">type to create</param>
            <param name="eventAdapterService">event factory</param>
            <param name="properties">written properties</param>
        </member>
        <member name="T:com.espertech.esper.events.EventBeanReaderDefaultImpl">
            <summary>
            Reader implementation that utilizes event property getters and thereby works
            with all event types regardsless of whether a type returns an event reader when
            asked for.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanReaderDefaultImpl.#ctor(com.espertech.esper.client.EventType)">
            <summary>
            Ctor.
            </summary>
            <param name="eventType">the type of events to read</param>
        </member>
        <member name="T:com.espertech.esper.events.EventBeanUtility">
            <summary>
            Method to getSelectListEvents events in collections to other collections or other event types.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanUtility.GetAssertPropertyGetter(com.espertech.esper.client.EventType,System.String)">
            <summary>
            Gets the assert property getter.
            </summary>
            <param name="type">The type.</param>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanUtility.ResizeArray``1(``0[],System.Int32)">
            <summary>Resizes an array of events to a new size.
            <para/>
            Returns the same array reference if the size is the same. </summary>
            <param name="oldArray">array to resize</param>
            <param name="newSize">new array size</param>
            <returns>/// resized array</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanUtility.FlattenList``1(System.Collections.Generic.LinkedList{com.espertech.esper.collection.UniformPair{``0[]}})">
            <summary>
            Flatten the vector of arrays to an array. Return null if an empty vector was passed, else return an array containing all the events.
            </summary>
            <param name="eventVector">vector</param>
            <returns>array with all events</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanUtility.Flatten``1(System.Collections.Generic.LinkedList{``0[]})">
            <summary>
            Flatten the vector of arrays to an array. Return null if an empty vector was passed, else return
            an array containing all the events.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="eventVector">vector</param>
            <returns>array with all events</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanUtility.FlattenBatchStream``1(System.Collections.Generic.IList{com.espertech.esper.collection.UniformPair{``0[]}})">
            <summary>
            Flatten the vector of arrays to an array. Return null if an empty vector was passed, else return
            an array containing all the events.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="updateVector">is a list of updates of old and new events</param>
            <returns>array with all events</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanUtility.GetPropertyArray(com.espertech.esper.client.EventBean,System.Collections.Generic.IList{com.espertech.esper.client.EventPropertyGetter})">
            <summary>Returns object array containing property values of given properties, retrieved via EventPropertyGetter instances. </summary>
            <param name="event">event to get property values from</param>
            <param name="propertyGetters">getters to use for getting property values</param>
            <returns>object array with property values</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanUtility.GetMultiKey(com.espertech.esper.client.EventBean,System.Collections.Generic.IList{com.espertech.esper.client.EventPropertyGetter})">
            <summary>Returns Multikey instance for given event and getters. </summary>
            <param name="event">event to get property values from</param>
            <param name="propertyGetters">getters for access to properties</param>
            <returns>MultiKey with property values</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanUtility.PrintEvent(com.espertech.esper.client.EventBean)">
            <summary>Format the event and return a string representation. </summary>
            <param name="theEvent">is the event to format.</param>
            <returns>string representation of event</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanUtility.FlattenBatchJoin(System.Collections.Generic.IList{com.espertech.esper.collection.UniformPair{System.Collections.Generic.ICollection{com.espertech.esper.collection.MultiKey{com.espertech.esper.client.EventBean}}}})">
            <summary>Flattens a list of pairs of join result sets. </summary>
            <param name="joinPostings">is the list</param>
            <returns>is the consolidate sets</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanUtility.AddToArray(com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean)">
            <summary>Expand the array passed in by the single element to add. </summary>
            <param name="array">to expand</param>
            <param name="eventToAdd">element to add</param>
            <returns>resized array</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanUtility.AddToArray(com.espertech.esper.client.EventBean[],System.Collections.Generic.ICollection{com.espertech.esper.client.EventBean})">
            <summary>Expand the array passed in by the multiple elements to add. </summary>
            <param name="array">to expand</param>
            <param name="eventsToAdd">elements to add</param>
            <returns>resized array</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanUtility.CreateNativeFragmentType(System.Type,System.Type,com.espertech.esper.events.EventAdapterService)">
            <summary>Create a fragment event type. </summary>
            <param name="propertyType">property return type</param>
            <param name="genericType">property generic type parameter, or null if none</param>
            <param name="eventAdapterService">for event types</param>
            <returns>fragment type</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanUtility.GetDistinctByProp(System.Collections.Generic.LinkedList{com.espertech.esper.client.EventBean},com.espertech.esper.events.EventBeanReader)">
            <summary>Returns the distinct events by properties. </summary>
            <param name="events">to inspect</param>
            <param name="reader">for retrieving properties</param>
            <returns>distinct events</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventBeanUtility.GetDistinctByProp(com.espertech.esper.client.EventBean[],com.espertech.esper.events.EventBeanReader)">
            <summary>Returns the distinct events by properties. </summary>
            <param name="events">to inspect</param>
            <param name="reader">for retrieving properties</param>
            <returns>distinct events</returns>
        </member>
        <member name="M:com.espertech.esper.events.ProxyEventPropertyWriter.Write(System.Object,com.espertech.esper.client.EventBean)">
            <summary>
            Value to write to a property.
            </summary>
            <param name="value">value to write</param>
            <param name="target">property to write to</param>
        </member>
        <member name="T:com.espertech.esper.events.EventSenderBean">
            <summary>
            Event sender for object events.
            <para/>
            Allows sending only theEvent objects of the underlying type matching the event
            type, or implementing the interface or extending the type. Any other event object
            generates an error.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventSenderBean.#ctor(com.espertech.esper.core.service.EPRuntimeEventSender,com.espertech.esper.events.bean.BeanEventType,com.espertech.esper.events.EventAdapterService,com.espertech.esper.core.thread.ThreadingService)">
            <summary>Ctor. </summary>
            <param name="runtime">for processing events</param>
            <param name="beanEventType">the event type</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
            <param name="threadingService">for inbound threading</param>
        </member>
        <member name="T:com.espertech.esper.events.EventSenderImpl">
            <summary>
            Event sender for use with plug-in event representations.
            <para/>
            The implementation asks a list of event bean factoryies originating from
            plug-in event representations to each reflect on the event and generate an event bean.
            The first one to return an event bean wins.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventSenderImpl.#ctor(System.Collections.Generic.List{com.espertech.esper.events.EventSenderURIDesc},com.espertech.esper.core.service.EPRuntimeEventSender,com.espertech.esper.core.thread.ThreadingService)">
            <summary>
            Ctor.
            </summary>
            <param name="handlingFactories">list of factories</param>
            <param name="epRuntime">the runtime to use to process the event</param>
            <param name="threadingService">for inbound threading</param>
        </member>
        <member name="T:com.espertech.esper.events.EventSenderMap">
            <summary>
            Event sender for map-backed events.
            <para/>
            Allows sending only event objects of type map, does not check map contents. Any
            other event object generates an error.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventSenderMap.#ctor(com.espertech.esper.core.service.EPRuntimeEventSender,com.espertech.esper.events.map.MapEventType,com.espertech.esper.events.EventAdapterService,com.espertech.esper.core.thread.ThreadingService)">
            <summary>
            Ctor.
            </summary>
            <param name="runtimeEventSender">for processing events</param>
            <param name="mapEventType">the event type</param>
            <param name="threadingService">for inbound threading</param>
            <param name="eventAdapterService">for event bean creation</param>
        </member>
        <member name="T:com.espertech.esper.events.EventSenderObjectArray">
            <summary>
            Event sender for map-backed events. 
            <para>
            Allows sending only event objects of type map, does not check map contents. 
            Any other event object generates an error.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventSenderObjectArray.#ctor(com.espertech.esper.core.service.EPRuntimeEventSender,com.espertech.esper.events.arr.ObjectArrayEventType,com.espertech.esper.events.EventAdapterService,com.espertech.esper.core.thread.ThreadingService)">
            <summary>Ctor. </summary>
            <param name="runtimeEventSender">for processing events</param>
            <param name="objectArrayEventType">the event type</param>
            <param name="threadingService">for inbound threading</param>
            <param name="eventAdapterService">for event bean creation</param>
        </member>
        <member name="T:com.espertech.esper.events.EventSenderURIDesc">
            <summary>
            Descriptor for URI-based event sender for plug-in event representations.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventSenderURIDesc.#ctor(com.espertech.esper.plugin.PlugInEventBeanFactory,System.Uri,System.Uri)">
            <summary>Ctor. </summary>
            <param name="beanFactory">factory for events</param>
            <param name="resolutionURI">URI use for resolution</param>
            <param name="representationURI">URI of event representation</param>
        </member>
        <member name="P:com.espertech.esper.events.EventSenderURIDesc.ResolutionURI">
            <summary>URI used for resolution. </summary>
            <returns>resolution URI</returns>
        </member>
        <member name="P:com.espertech.esper.events.EventSenderURIDesc.RepresentationURI">
            <summary>URI of event representation. </summary>
            <returns>URI</returns>
        </member>
        <member name="P:com.espertech.esper.events.EventSenderURIDesc.BeanFactory">
            <summary>Event wrapper for event objects. </summary>
            <returns>factory for events</returns>
        </member>
        <member name="T:com.espertech.esper.events.EventSenderXMLDOM">
            <summary>
            Event sender for XML DOM-backed events.
            <para />
            Allows sending only event objects of type Node or Document, does check the root name 
            of the XML document which must match the event type root name as configured. Any other 
            event object generates an error.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventSenderXMLDOM.#ctor(com.espertech.esper.core.service.EPRuntimeEventSender,com.espertech.esper.events.xml.BaseXMLEventType,com.espertech.esper.events.EventAdapterService,com.espertech.esper.core.thread.ThreadingService)">
            <summary>
            Ctor.
            </summary>
            <param name="runtimeEventSender">for processing events</param>
            <param name="baseXMLEventType">the event type</param>
            <param name="eventAdapterService">for event bean creation</param>
            <param name="threadingService">for inbound threading</param>
        </member>
        <member name="T:com.espertech.esper.events.EventTypeMetadata">
            <summary>Provides metadata for event types. </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventTypeMetadata.#ctor(System.String,System.Collections.Generic.ICollection{System.String},com.espertech.esper.events.TypeClass,System.Boolean,System.Boolean,System.Boolean,System.Nullable{com.espertech.esper.events.ApplicationType},System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="primaryName">the primary name by which the type became known.</param>
            <param name="secondaryNames">a list of additional names for the type, such as fully-qualified class name</param>
            <param name="typeClass">type of the type</param>
            <param name="isApplicationPreConfiguredStatic">if set to <c>true</c> [is application pre configured static].</param>
            <param name="applicationPreConfigured">if set to <c>true</c> [application pre configured].</param>
            <param name="applicationConfigured">true if configured by the application</param>
            <param name="applicationType">type of application class or null if not an application type</param>
            <param name="isPropertyAgnostic">true for types that accept any property name as a valid property (unchecked type)</param>
        </member>
        <member name="M:com.espertech.esper.events.EventTypeMetadata.CreateValueAdd(System.String,com.espertech.esper.events.TypeClass)">
            <summary>Factory for a value-add type. </summary>
            <param name="name">type name</param>
            <param name="typeClass">type of type</param>
            <returns>instance</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventTypeMetadata.CreateBeanType(System.String,System.Type,System.Boolean,System.Boolean,System.Boolean,com.espertech.esper.events.TypeClass)">
            <summary>
            Factory for a bean type.
            </summary>
            <param name="name">type name</param>
            <param name="clazz">type</param>
            <param name="isPreConfiguredStatic">if set to <c>true</c> [is pre configured static].</param>
            <param name="isPreConfigured">if set to <c>true</c> [is pre configured].</param>
            <param name="isConfigured">whether the class was made known or is discovered</param>
            <param name="typeClass">The type class.</param>
            <returns>instance</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventTypeMetadata.CreateXMLType(System.String,System.Boolean,System.Boolean)">
            <summary>
            Factory for a XML type.
            </summary>
            <param name="name">type name</param>
            <param name="isPreconfiguredStatic">if set to <c>true</c> [is preconfigured static].</param>
            <param name="isPropertyAgnostic">true for types that accept any property name as a valid property (unchecked type)</param>
            <returns>instance</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventTypeMetadata.CreateAnonymous(System.String)">
            <summary>Factory for an anonymous type. </summary>
            <param name="associationName">what the type is associated with</param>
            <returns>instance</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventTypeMetadata.CreateWrapper(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Factory for a wrapper type. </summary>
            <param name="eventTypeName">insert-into of create-window name</param>
            <param name="namedWindow">true for named window</param>
            <param name="insertInto">true for insert-into</param>
            <param name="isPropertyAgnostic">true for types that accept any property name as a valid property (unchecked type)</param>
            <returns>instance</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventTypeMetadata.CreateNonPonoApplicationType(com.espertech.esper.events.ApplicationType,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Factory for a map type.
            </summary>
            <param name="providedType">Type of the provided.</param>
            <param name="name">insert-into of create-window name</param>
            <param name="preconfiguredStatic">if set to <c>true</c> [preconfigured static].</param>
            <param name="preconfigured">if set to <c>true</c> [preconfigured].</param>
            <param name="configured">whether the made known or is discovered</param>
            <param name="namedWindow">true for named window</param>
            <param name="insertInto">true for insert-into</param>
            <returns>instance</returns>
        </member>
        <member name="P:com.espertech.esper.events.EventTypeMetadata.PrimaryName">
            <summary>Returns the name. </summary>
            <value>name</value>
        </member>
        <member name="P:com.espertech.esper.events.EventTypeMetadata.OptionalSecondaryNames">
            <summary>Returns second names or null if none found. </summary>
            <value>further names</value>
        </member>
        <member name="P:com.espertech.esper.events.EventTypeMetadata.TypeClass">
            <summary>Returns the type of the type. </summary>
            <value>meta type</value>
        </member>
        <member name="P:com.espertech.esper.events.EventTypeMetadata.IsApplicationConfigured">
            <summary>Returns true if the type originates in a configuration. </summary>
            <value>indicator whether configured or not</value>
        </member>
        <member name="P:com.espertech.esper.events.EventTypeMetadata.OptionalApplicationType">
            <summary>The type of the application event type or null if not an application event type. </summary>
            <value>application event type</value>
        </member>
        <member name="P:com.espertech.esper.events.EventTypeMetadata.PublicName">
            <summary>Returns the name provided through #EventType.getName. </summary>
            <value>name or null if no public name</value>
        </member>
        <member name="P:com.espertech.esper.events.EventTypeMetadata.IsPropertyAgnostic">
            <summary>Returns true for types that accept any property name as a valid property (unchecked type). </summary>
            <value>indicator whether type is unchecked (agnostic to property)</value>
        </member>
        <member name="P:com.espertech.esper.events.EventTypeMetadata.IsApplicationPreConfigured">
            <summary>Returns true to indicate the type is pre-configured, i.e. added through static or runtime configuration. </summary>
            <value>indicator</value>
        </member>
        <member name="P:com.espertech.esper.events.EventTypeMetadata.IsApplicationPreConfiguredStatic">
            <summary>Returns true to indicate the type is pre-configured, i.e. added through static configuration but not runtime configuation. </summary>
            <value>indicator</value>
        </member>
        <member name="T:com.espertech.esper.events.TypeClass">
            <summary>Metatype. </summary>
        </member>
        <member name="F:com.espertech.esper.events.TypeClass.STREAM">
            <summary>A type that represents the information made available via insert-into. </summary>
        </member>
        <member name="F:com.espertech.esper.events.TypeClass.REVISION">
            <summary>A revision event type. </summary>
        </member>
        <member name="F:com.espertech.esper.events.TypeClass.VARIANT">
            <summary>A variant stream event type. </summary>
        </member>
        <member name="F:com.espertech.esper.events.TypeClass.APPLICATION">
            <summary>An application-defined event type such as JavaBean or legacy Java, XML or Map. </summary>
        </member>
        <member name="F:com.espertech.esper.events.TypeClass.NAMED_WINDOW">
            <summary>A type representing a named window. </summary>
        </member>
        <member name="F:com.espertech.esper.events.TypeClass.ANONYMOUS">
            <summary>An anonymous event type. </summary>
        </member>
        <member name="T:com.espertech.esper.events.ApplicationType">
            <summary>Application type. </summary>
        </member>
        <member name="F:com.espertech.esper.events.ApplicationType.XML">
            <summary>Xml type. </summary>
        </member>
        <member name="F:com.espertech.esper.events.ApplicationType.MAP">
            <summary>Map type. </summary>
        </member>
        <member name="F:com.espertech.esper.events.ApplicationType.OBJECTARR">
            <summary>Object array type</summary>
        </member>
        <member name="F:com.espertech.esper.events.ApplicationType.CLASS">
            <summary>Class type. </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventTypeUtility.CompileMapTypeProperties(System.Collections.Generic.IDictionary{System.String,System.Object},com.espertech.esper.events.EventAdapterService)">
            <summary>
            Determine among the Map-type properties which properties are Bean-type event type names, 
            rewrites these as Class-type instead so that they are configured as native property and 
            do not require wrapping, but may require unwrapping.
            </summary>
            <param name="typing">properties of map type</param>
            <param name="eventAdapterService">event adapter service</param>
            <returns>
            compiled properties, same as original unless Bean-type event type names were specified.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.EventTypeUtility.IsPropertyArray(System.String)">
            <summary>
            Returns true if the name indicates that the type is an array type.
            </summary>
            <param name="name">the property name</param>
            <returns>true if array type</returns>
        </member>
        <member name="M:com.espertech.esper.events.EventTypeUtility.GetPropertyRemoveArray(System.String)">
            <summary>
            Returns the property name without the array type extension, if present.
            </summary>
            <param name="name">property name</param>
            <returns>
            property name with removed array extension name
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.ExplicitPropertyDescriptor">
            <summary>
            Descriptor for explicit properties for use with <seealso cref="T:com.espertech.esper.events.BaseConfigurableEventType"/>.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.ExplicitPropertyDescriptor.#ctor(com.espertech.esper.client.EventPropertyDescriptor,com.espertech.esper.client.EventPropertyGetter,System.Boolean,System.String)">
            <summary>Ctor. </summary>
            <param name="descriptor">property descriptor</param>
            <param name="getter">getter for values</param>
            <param name="fragmentArray">true if array fragment</param>
            <param name="optionalFragmentTypeName">null if not a fragment, else fragment type name</param>
        </member>
        <member name="P:com.espertech.esper.events.ExplicitPropertyDescriptor.Descriptor">
            <summary>Returns the property descriptor. </summary>
            <value>property descriptor</value>
        </member>
        <member name="P:com.espertech.esper.events.ExplicitPropertyDescriptor.Getter">
            <summary>Returns the getter. </summary>
            <value>getter</value>
        </member>
        <member name="P:com.espertech.esper.events.ExplicitPropertyDescriptor.OptionalFragmentTypeName">
            <summary>Returns the fragment event type name, or null if none defined. </summary>
            <value>fragment type name</value>
        </member>
        <member name="P:com.espertech.esper.events.ExplicitPropertyDescriptor.IsFragmentArray">
            <summary>
            Returns true if an indexed, or false if not indexed.
            </summary>
            <value>fragment indicator</value>
        </member>
        <member name="T:com.espertech.esper.events.MappedEventBean">
            <summary>For events that are maps of properties. </summary>
        </member>
        <member name="P:com.espertech.esper.events.MappedEventBean.Properties">
            <summary>Returns property map. </summary>
            <value>properties</value>
        </member>
        <member name="T:com.espertech.esper.events.map.IMapEventPropertyGetterAndIndexed">
            <summary>Property getter for Map-underlying events. </summary>
        </member>
        <member name="T:com.espertech.esper.events.map.MapEventPropertyGetter">
            <summary>
            Property getter for Map-underlying events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.map.MapEventPropertyGetter.GetMap(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns a property of an event.
            </summary>
            <param name="map">to interrogate</param>
            <returns>
            property value
            </returns>
            <throws>PropertyAccessException for property access errors</throws>
        </member>
        <member name="M:com.espertech.esper.events.map.MapEventPropertyGetter.IsMapExistsProperty(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Exists-function for properties in a map-type event.
            </summary>
            <param name="map">to interrogate</param>
            <returns>
            indicator
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.map.IMapEventPropertyGetterAndMapped">
            <summary>Property getter for Map-underlying events. </summary>
        </member>
        <member name="T:com.espertech.esper.events.map.MapArrayBeanEntryIndexedPropertyGetter">
            <summary>
            A getter that works on PONO events residing within a Map as an event property.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.map.MapArrayBeanEntryIndexedPropertyGetter.#ctor(System.String,System.Int32,com.espertech.esper.events.bean.BeanEventPropertyGetter,com.espertech.esper.events.EventAdapterService,System.Type)">
            <summary>Ctor. </summary>
            <param name="propertyMap">the property to look at</param>
            <param name="nestedGetter">the getter for the map entry</param>
            <param name="eventAdapterService">for producing wrappers to objects</param>
            <param name="index">the index to fetch the array element for</param>
            <param name="returnType">type of the entry returned</param>
        </member>
        <member name="T:com.espertech.esper.events.map.MapArrayEntryIndexedPropertyGetter">
            <summary>
            A getter that works on arrays residing within a Map as an event property.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.map.MapEventPropertyGetterAndIndexed">
            <summary>
            Property getter for Map-underlying events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.map.MapArrayEntryIndexedPropertyGetter.#ctor(System.String,System.Int32,com.espertech.esper.events.EventAdapterService,System.Type)">
            <summary>
            Ctor.
            </summary>
            <param name="propertyMap">the property to use for the map lookup</param>
            <param name="index">the index to fetch the array element for</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
            <param name="returnType">type of the entry returned</param>
        </member>
        <member name="T:com.espertech.esper.events.map.MapArrayPropertyGetter">
            <summary>
            Getter for Map-entries with well-defined fragment type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.map.MapArrayPropertyGetter.#ctor(System.String,System.Int32,com.espertech.esper.events.EventAdapterService,com.espertech.esper.client.EventType)">
            <summary>Ctor. </summary>
            <param name="propertyNameAtomic">property name</param>
            <param name="index">array index</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
            <param name="fragmentType">type of the entry returned</param>
        </member>
        <member name="T:com.espertech.esper.events.map.MapEntryPropertyGetter">
            <summary>
            A getter for use with Map-based events simply returns the value for the key.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.map.MapEntryPropertyGetter.#ctor(System.String,com.espertech.esper.events.bean.BeanEventType,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Ctor.
            </summary>
            <param name="propertyName">property to get</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
            <param name="eventType">type of the entry returned</param>
        </member>
        <member name="T:com.espertech.esper.events.map.MapEventBean">
            <summary>
            Wrapper for events represented by a Map of key-value pairs that are the event
            properties. MapEventBean instances are equal if they have the same <seealso cref="T:com.espertech.esper.client.EventType"/> and all property names and values are reference-equal.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.map.MapEventBean.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},com.espertech.esper.client.EventType)">
            <summary>
            Constructor for initialization with existing values. Makes a shallow copy of the
            supplied values to not be surprised by changing property values.
            </summary>
            <param name="properties">are the event property values</param>
            <param name="eventType">is the type of the event, i.e. describes the map entries</param>
        </member>
        <member name="M:com.espertech.esper.events.map.MapEventBean.#ctor(com.espertech.esper.events.map.MapEventType)">
            <summary>
            Constructor for the mutable functions, e.g. only the type of values is known but
            not the actual values.
            </summary>
            <param name="eventType">is the type of the event, i.e. describes the map entries</param>
        </member>
        <member name="P:com.espertech.esper.events.map.MapEventBean.Properties">
            <summary>
            Returns the properties.
            </summary>
            <returns>
            properties
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.map.MapEventBeanArrayIndexedElementPropertyGetter">
            <summary>
            Getter for an array of event bean using a nested getter.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.map.MapEventBeanArrayIndexedElementPropertyGetter.#ctor(System.String,System.Int32,com.espertech.esper.client.EventPropertyGetter)">
            <summary>Ctor. </summary>
            <param name="propertyName">property name</param>
            <param name="index">array index</param>
            <param name="nestedGetter">nested getter</param>
        </member>
        <member name="T:com.espertech.esper.events.map.MapEventBeanArrayIndexedPropertyGetter">
            <summary>Getter for array events. </summary>
        </member>
        <member name="M:com.espertech.esper.events.map.MapEventBeanArrayIndexedPropertyGetter.#ctor(System.String,System.Int32)">
            <summary>Ctor. </summary>
            <param name="propertyName">property name</param>
            <param name="index">array index</param>
        </member>
        <member name="T:com.espertech.esper.events.map.MapEventBeanArrayPropertyGetter">
            <summary>
            Returns the event bean or the underlying array.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.map.MapEventBeanArrayPropertyGetter.#ctor(System.String,System.Type)">
            <summary>
            Ctor.
            </summary>
            <param name="propertyName">property to get</param>
            <param name="underlyingType">type of property</param>
        </member>
        <member name="T:com.espertech.esper.events.map.MapEventBeanCopyMethod">
            <summary>
            Copy method for Map-underlying events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.map.MapEventBeanCopyMethod.#ctor(com.espertech.esper.events.map.MapEventType,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Ctor.
            </summary>
            <param name="mapEventType">map event type</param>
            <param name="eventAdapterService">for copying events</param>
        </member>
        <member name="T:com.espertech.esper.events.map.MapEventBeanCopyMethodWithArrayMap">
            <summary>
            Copy method for Map-underlying events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.map.MapEventBeanCopyMethodWithArrayMap.#ctor(com.espertech.esper.events.map.MapEventType,com.espertech.esper.events.EventAdapterService,System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String})">
            <summary>Ctor. </summary>
            <param name="mapEventType">map event type</param>
            <param name="eventAdapterService">for copying events</param>
            <param name="mapPropertiesToCopy"></param>
            <param name="arrayPropertiesToCopy"></param>
        </member>
        <member name="T:com.espertech.esper.events.map.MapEventBeanEntryPropertyGetter">
            <summary>
            A getter that works on EventBean events residing within a Map as an event
            property.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.map.MapEventBeanEntryPropertyGetter.#ctor(System.String,com.espertech.esper.client.EventPropertyGetter)">
            <summary>
            Ctor.
            </summary>
            <param name="propertyMap">the property to look at</param>
            <param name="eventBeanEntryGetter">the getter for the map entry</param>
        </member>
        <member name="T:com.espertech.esper.events.map.MapEventBeanPropertyGetter">
            <summary>
            A getter for use with Map-based events simply returns the value for the key.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.map.MapEventBeanPropertyGetter.#ctor(System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="propertyName">property to get</param>
        </member>
        <member name="T:com.espertech.esper.events.map.MapEventBeanReader">
            <summary>
            Reader method for reading all properties of a Map event.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.map.MapEventBeanReader.#ctor(com.espertech.esper.events.map.MapEventType)">
            <summary>
            Ctor.
            </summary>
            <param name="type">map to read</param>
        </member>
        <member name="T:com.espertech.esper.events.map.MapEventBeanWriterPerProp">
            <summary>Writer method for writing to Map-type events. </summary>
        </member>
        <member name="M:com.espertech.esper.events.map.MapEventBeanWriterPerProp.#ctor(com.espertech.esper.events.map.MapEventBeanPropertyWriter[])">
            <summary>Ctor. </summary>
            <param name="writers">names of properties to write</param>
        </member>
        <member name="M:com.espertech.esper.events.map.MapEventBeanWriterPerProp.Write(System.Object[],com.espertech.esper.client.EventBean)">
            <summary>Write values to an event. </summary>
            <param name="values">to write</param>
            <param name="theEvent">to write to</param>
        </member>
        <member name="T:com.espertech.esper.events.map.MapEventBeanWriterSimpleProps">
            <summary>Writer method for writing to Map-type events. </summary>
        </member>
        <member name="M:com.espertech.esper.events.map.MapEventBeanWriterSimpleProps.#ctor(System.String[])">
            <summary>Ctor. </summary>
            <param name="properties">names of properties to write</param>
        </member>
        <member name="M:com.espertech.esper.events.map.MapEventBeanWriterSimpleProps.Write(System.Object[],com.espertech.esper.client.EventBean)">
            <summary>Write values to an event. </summary>
            <param name="values">to write</param>
            <param name="theEvent">to write to</param>
        </member>
        <member name="M:com.espertech.esper.events.map.ProxyMapEventPropertyGetter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.events.map.ProxyMapEventPropertyGetter"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.map.ProxyMapEventPropertyGetter.#ctor(System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Object},System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean},System.Func{com.espertech.esper.client.EventBean,System.Object},System.Func{com.espertech.esper.client.EventBean,System.Object},System.Func{com.espertech.esper.client.EventBean,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.ProxyEventPropertyGetter"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.map.ProxyMapEventPropertyGetter.GetMap(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns a property of an event.
            </summary>
            <param name="map">to interrogate</param>
            <returns>property value</returns>
            <throws>PropertyAccessException for property access errors</throws>
        </member>
        <member name="M:com.espertech.esper.events.map.ProxyMapEventPropertyGetter.IsMapExistsProperty(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Exists-function for properties in a map-type event.
            </summary>
            <param name="map">to interrogate</param>
            <returns>indicator</returns>
        </member>
        <member name="M:com.espertech.esper.events.map.ProxyMapEventPropertyGetter.Get(com.espertech.esper.client.EventBean)">
            <summary>
            Return the value for the property in the event object specified when the
            instance was obtained. Useful for fast access to event properties. Throws a
            PropertyAccessException if the getter instance doesn't match the EventType it was obtained
            from, and to indicate other property access problems.
            </summary>
            <param name="eventBean">is the event to get the value of a property from</param>
            <returns>
            value of property in event
            </returns>
            <throws>PropertyAccessException to indicate that property access failed</throws>
        </member>
        <member name="M:com.espertech.esper.events.map.ProxyMapEventPropertyGetter.IsExistsProperty(com.espertech.esper.client.EventBean)">
            <summary>
            Returns true if the property exists, or false if the type does not have such a
            property.
            <para/>
            Useful for dynamic properties of the syntax "property?" and the dynamic
            nested/indexed/mapped versions. Dynamic nested properties follow the syntax
            "property?.nested" which is equivalent to "property?.nested?". If any of the properties in
            the path of a dynamic nested property return null, the dynamic nested property does
            not exists and the method returns false.
            <para/>
            For non-dynamic properties, this method always returns true since a getter
            would not be available unless
            </summary>
            <param name="eventBean">is the event to check if the dynamic property exists</param>
            <returns>
            indictor whether the property exists, always true for non-dynamic (default)
            properties
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.map.ProxyMapEventPropertyGetter.GetFragment(com.espertech.esper.client.EventBean)">
            <summary>
            Returns <seealso cref="T:com.espertech.esper.client.EventBean"/> or array of <seealso cref="T:com.espertech.esper.client.EventBean"/> for
            a property name or property expression.
            <para/>
            For use with properties whose value is itself an event or whose value can be
            represented as an event by the underlying event representation.
            <para/>
            The <seealso cref="T:com.espertech.esper.client.EventType"/> of the <seealso cref="T:com.espertech.esper.client.EventBean"/> Instance(s)
            returned by this method can be determined by <seealso cref="M:com.espertech.esper.client.EventType.GetFragmentType(System.String)"/>.
            Use <seealso cref="T:com.espertech.esper.client.EventPropertyDescriptor"/> to obtain a list of
            properties that return fragments from an event type.
            <para/>
            Returns null if the property value is null or the property value cannot be
            represented as a fragment by the underlying representation.
            </summary>
            <param name="eventBean">is the event to get the fragment value of a property</param>
            <returns>
            the value of a property as an EventBean or array of EventBean
            </returns>
            <throws>PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed</throws>
        </member>
        <member name="T:com.espertech.esper.events.map.MapEventPropertyGetterAndMapped">
            <summary>
            Property getter for Map-underlying events.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.map.MapEventType">
            <summary>
            Implementation of the <seealso cref="T:com.espertech.esper.client.EventType"/> interface for handling plain 
            Maps containing name value pairs.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.map.MapFragmentArrayPropertyGetter">
            <summary>
            Getter for map array.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.map.MapFragmentArrayPropertyGetter.#ctor(System.String,com.espertech.esper.client.EventType,com.espertech.esper.events.EventAdapterService)">
            <summary>Ctor. </summary>
            <param name="propertyNameAtomic">property type</param>
            <param name="fragmentEventType">event type of fragment</param>
            <param name="eventAdapterService">for creating event instances</param>
        </member>
        <member name="T:com.espertech.esper.events.map.MapIndexedPropertyGetter">
            <summary>
            Getter for a dynamic indexed property for maps.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.map.MapIndexedPropertyGetter.#ctor(System.String,System.Int32)">
            <summary>
            Ctor.
            </summary>
            <param name="fieldName">property name</param>
            <param name="index">index to get the element at</param>
        </member>
        <member name="T:com.espertech.esper.events.map.MapMappedPropertyGetter">
            <summary>
            Getter for a dynamic mappeds property for maps.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.map.MapMappedPropertyGetter.#ctor(System.String,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="fieldName">property name</param>
            <param name="key">get the element at</param>
        </member>
        <member name="T:com.espertech.esper.events.map.MapMapPropertyGetter">
            <summary>
            A getter that interrogates a given property in a map which may itself contain nested 
            maps or indexed entries.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.map.MapMapPropertyGetter.#ctor(System.String,com.espertech.esper.events.map.MapEventPropertyGetter)">
            <summary>Ctor. </summary>
            <param name="propertyMap">is the property returning the map to interrogate</param>
            <param name="getter">is the getter to use to interrogate the property in the map</param>
        </member>
        <member name="T:com.espertech.esper.events.map.MapNestedEntryPropertyGetterArrayMap">
            <summary>
            A getter that works on EventBean events residing within a Map as an event property.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.map.MapNestedEntryPropertyGetterBase.#ctor(System.String,com.espertech.esper.client.EventType,com.espertech.esper.events.EventAdapterService)">
            <summary>Ctor. </summary>
            <param name="propertyMap">the property to look at</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
            <param name="fragmentType">type of the entry returned</param>
        </member>
        <member name="T:com.espertech.esper.events.map.MapNestedEntryPropertyGetterMap">
            <summary>
            A getter that works on EventBean events residing within a Map as an event property.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.map.MapNestedEntryPropertyGetterObjectArray">
            <summary>
            A getter that works on EventBean events residing within a Map as an event property.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.map.MapNestedPropertyGetterMapOnly">
            <summary>
            Getter for one or more levels deep nested properties of maps.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.map.MapNestedPropertyGetterMapOnly.#ctor(System.Collections.Generic.IList{com.espertech.esper.client.EventPropertyGetter},com.espertech.esper.events.EventAdapterService)">
            <summary>Ctor. </summary>
            <param name="getterChain">is the chain of getters to retrieve each nested property</param>
            <param name="eventAdaperService">is a factory for PONO bean event types</param>
        </member>
        <member name="T:com.espertech.esper.events.map.MapNestedPropertyGetterMixedType">
            <summary>
            Getter for one or more levels deep nested properties of maps.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.map.MapNestedPropertyGetterMixedType.#ctor(System.Collections.Generic.IEnumerable{com.espertech.esper.client.EventPropertyGetter},com.espertech.esper.events.EventAdapterService)">
            <summary>Ctor. </summary>
            <param name="getterChain">is the chain of getters to retrieve each nested property</param>
            <param name="eventAdaperService">is a factory for PONO bean event types</param>
        </member>
        <member name="T:com.espertech.esper.events.map.MapObjectEntryPropertyGetter">
            <summary>
            A getter that works on POCO events residing within a Map as an event property.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.map.MapObjectEntryPropertyGetter.#ctor(System.String,com.espertech.esper.events.bean.BeanEventPropertyGetter,com.espertech.esper.events.EventAdapterService,System.Type)">
            <summary>
            Ctor.
            </summary>
            <param name="propertyMap">the property to look at</param>
            <param name="mapEntryGetter">the getter for the map entry</param>
            <param name="eventAdapterService">for producing wrappers to objects</param>
            <param name="returnType">type of the entry returned</param>
        </member>
        <member name="T:com.espertech.esper.events.map.MapPropertyGetterDefaultBase">
            <summary>
            Getter for map entry.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.map.MapPropertyGetterDefaultBase.#ctor(System.String,com.espertech.esper.client.EventType,com.espertech.esper.events.EventAdapterService)">
            <summary>Ctor. </summary>
            <param name="propertyNameAtomic">property name</param>
            <param name="fragmentEventType">fragment type</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
        </member>
        <member name="T:com.espertech.esper.events.map.MapPropertyGetterDefaultMap">
            <summary>Getter for map entry. </summary>
        </member>
        <member name="T:com.espertech.esper.events.map.MapPropertyGetterDefaultNoFragment">
            <summary>Getter for map entry. </summary>
        </member>
        <member name="T:com.espertech.esper.events.map.MapPropertyGetterDefaultObjectArray">
            <summary>Getter for map entry. </summary>
        </member>
        <member name="T:com.espertech.esper.events.NaturalEventBean">
            <summary>
            An event that is carries multiple representations of event properties: A
            synthetic representation that is designed for delivery as <seealso cref="T:com.espertech.esper.client.EventBean"/> to
            client <seealso cref="T:com.espertech.esper.client.UpdateListener"/> code, and a
            natural representation as a bunch of Object-type properties for fast delivery to
            client subscriber objects via method call.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.NaturalEventBean.#ctor(com.espertech.esper.client.EventType,System.Object[],com.espertech.esper.client.EventBean)">
            <summary>
            Ctor.
            </summary>
            <param name="eventBeanType">the event type of the synthetic event</param>
            <param name="natural">the properties of the event</param>
            <param name="optionalSynthetic">the event bean that is the synthetic event, or null if no synthetic is packed in</param>
        </member>
        <member name="P:com.espertech.esper.events.NaturalEventBean.Natural">
            <summary>
            Returns the column object result representation.
            </summary>
            <returns>
            select column values
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.NaturalEventBean.OptionalSynthetic">
            <summary>
            Returns the synthetic event that can be attached.
            </summary>
            <returns>
            synthetic if attached, or null if none attached
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.PropertySetDescriptor">
            <summary>Descriptor of a property set. </summary>
        </member>
        <member name="M:com.espertech.esper.events.PropertySetDescriptor.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{com.espertech.esper.client.EventPropertyDescriptor},System.Collections.Generic.IDictionary{System.String,System.Type},System.Collections.Generic.IDictionary{System.String,com.espertech.esper.client.EventPropertyGetter},System.Collections.Generic.IDictionary{System.String,com.espertech.esper.client.FragmentEventType},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Ctor. </summary>
            <param name="propertyNameList">property name list</param>
            <param name="simplePropertyTypes">property types</param>
            <param name="propertyDescriptors">property descriptors</param>
            <param name="propertyGetters">property getters</param>
            <param name="simpleFragmentTypes">fragment types per property</param>
        </member>
        <member name="P:com.espertech.esper.events.PropertySetDescriptor.SimplePropertyTypes">
            <summary>
            Returns map of property name and class.
            </summary>
            <value>property name and class</value>
        </member>
        <member name="P:com.espertech.esper.events.PropertySetDescriptor.PropertyGetters">
            <summary>
            Returns map of property name and getter.
            </summary>
            <value>property name and getter</value>
        </member>
        <member name="P:com.espertech.esper.events.PropertySetDescriptor.PropertyNameList">
            <summary>
            Returns property name list.
            </summary>
            <value>property name list</value>
        </member>
        <member name="P:com.espertech.esper.events.PropertySetDescriptor.PropertyDescriptors">
            <summary>
            Returns the property descriptors.
            </summary>
            <value>property descriptors</value>
        </member>
        <member name="P:com.espertech.esper.events.PropertySetDescriptor.SimpleFragmentTypes">
            <summary>
            Returns the property fragment types.
            </summary>
            <value>fragment types.</value>
        </member>
        <member name="T:com.espertech.esper.events.property.DynamicIndexedProperty">
            <summary>
            Represents a dynamic indexed property of a given name.
            <para/>
            Dynamic properties always exist, have an Object type and are resolved to a
            method during runtime.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.property.PropertyBase">
            <summary>
            All properties have a property name and this is the abstract base class
            that serves up the property name.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.property.Property">
            <summary>
            Interface for a property of an event of type BeanEventType.
            Properties are designed to handle the different types of properties for such events:
            indexed, mapped, simple, nested, or a combination of those.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.Property.GetPropertyType(com.espertech.esper.events.bean.BeanEventType,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Returns the property type.
            </summary>
            <param name="eventType">is the event type representing the object</param>
            <param name="eventAdapterService">for event adapters</param>
            <returns>
            property type class
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.property.Property.GetPropertyTypeGeneric(com.espertech.esper.events.bean.BeanEventType,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Returns the property type plus its generic type parameter, if any.
            </summary>
            <param name="eventType">is the event type representing the object</param>
            <param name="eventAdapterService">for event adapters</param>
            <returns>
            type and generic descriptor
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.property.Property.GetGetter(com.espertech.esper.events.bean.BeanEventType,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Returns value getter for the property of an event of the given event type.
            </summary>
            <param name="eventType">is the type of event to make a getter for</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
            <returns>
            fast property value getter for property
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.property.Property.GetPropertyTypeMap(System.Collections.Generic.IDictionary{System.String,System.Object},com.espertech.esper.events.EventAdapterService)">
            <summary>
            Returns the property type for use with Map event representations.
            </summary>
            <param name="optionalMapPropTypes">a map-within-map type definition, if supplied, or null if not supplied</param>
            <param name="eventAdapterService">for resolving further map event types that are property types</param>
            <returns>
            property type @param optionalMapPropTypes
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.property.Property.GetGetterMap(System.Collections.Generic.IDictionary{System.String,System.Object},com.espertech.esper.events.EventAdapterService)">
            <summary>
            Returns the getter-method for use with Map event representations.
            </summary>
            <param name="optionalMapPropTypes">a map-within-map type definition, if supplied, or null if not supplied</param>
            <param name="eventAdapterService">for resolving further map event types that are property types</param>
            <returns>
            getter for maps
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.property.Property.GetPropertyTypeSchema(com.espertech.esper.events.xml.SchemaElementComplex,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Returns the property type for use with DOM event representations.
            </summary>
            <param name="complexProperty">a element-within-element type definition</param>
            <param name="eventAdapterService">for resolving further element event types if defined</param>
            <returns>
            property type
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.property.Property.GetGetterDOM(com.espertech.esper.events.xml.SchemaElementComplex,com.espertech.esper.events.EventAdapterService,com.espertech.esper.events.xml.BaseXMLEventType,System.String)">
            <summary>
            Returns the getter-method for use with XML DOM event representations.
            </summary>
            <param name="complexProperty">a element-within-element type definition</param>
            <param name="eventAdapterService">for resolving or creating further event types that are property types</param>
            <param name="xmlEventType">the event type</param>
            <param name="propertyExpression">the full property expression</param>
            <returns>
            getter
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.property.Property.GetGetterDOM">
            <summary>
            Returns the getter-method for use with XML DOM event representations.
            </summary>
            <returns>
            getter
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.property.Property.ToPropertyEPL(System.IO.TextWriter)">
            <summary>
            Write the EPL-representation of the property.
            </summary>
            <param name="writer">to write to</param>
        </member>
        <member name="M:com.espertech.esper.events.property.Property.ToPropertyArray">
            <summary>
            Return a String-array of atomic property names.
            </summary>
            <returns>
            array of atomic names in a property expression
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.property.Property.IsDynamic">
            <summary>
            Returns true for dynamic properties.
            </summary>
            <returns>
            false for not-dynamic properties, true for dynamic properties.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyBase.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="propertyName">is the name of the property
            </param>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyBase.GetPropertyType(com.espertech.esper.events.bean.BeanEventType,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Returns the property type.
            </summary>
            <param name="eventType">is the event type representing the object</param>
            <param name="eventAdapterService">for event adapters</param>
            <returns>
            property type class
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyBase.GetPropertyTypeGeneric(com.espertech.esper.events.bean.BeanEventType,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Returns the property type plus its generic type parameter, if any.
            </summary>
            <param name="eventType">is the event type representing the object</param>
            <param name="eventAdapterService">for event adapters</param>
            <returns>
            type and generic descriptor
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyBase.GetGetter(com.espertech.esper.events.bean.BeanEventType,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Returns value getter for the property of an event of the given event type.
            </summary>
            <param name="eventType">is the type of event to make a getter for</param>
            <param name="eventAdapterService">factory for event beans and event types</param>
            <returns>
            fast property value getter for property
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyBase.GetPropertyTypeMap(System.Collections.Generic.IDictionary{System.String,System.Object},com.espertech.esper.events.EventAdapterService)">
            <summary>
            Returns the property type for use with Map event representations.
            </summary>
            <param name="optionalMapPropTypes">a map-within-map type definition, if supplied, or null if not supplied</param>
            <param name="eventAdapterService">for resolving further map event types that are property types</param>
            <returns>
            property type @param optionalMapPropTypes
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyBase.GetGetterMap(System.Collections.Generic.IDictionary{System.String,System.Object},com.espertech.esper.events.EventAdapterService)">
            <summary>
            Returns the getter-method for use with Map event representations.
            </summary>
            <param name="optionalMapPropTypes">a map-within-map type definition, if supplied, or null if not supplied</param>
            <param name="eventAdapterService">for resolving further map event types that are property types</param>
            <returns>
            getter for maps
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyBase.GetPropertyTypeSchema(com.espertech.esper.events.xml.SchemaElementComplex,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Returns the property type for use with DOM event representations.
            </summary>
            <param name="complexProperty">a element-within-element type definition</param>
            <param name="eventAdapterService">for resolving further element event types if defined</param>
            <returns>
            property type
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyBase.GetGetterDOM(com.espertech.esper.events.xml.SchemaElementComplex,com.espertech.esper.events.EventAdapterService,com.espertech.esper.events.xml.BaseXMLEventType,System.String)">
            <summary>
            Returns the getter-method for use with XML DOM event representations.
            </summary>
            <param name="complexProperty">a element-within-element type definition</param>
            <param name="eventAdapterService">for resolving or creating further event types that are property types</param>
            <param name="xmlEventType">the event type</param>
            <param name="propertyExpression">the full property expression</param>
            <returns>
            getter
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyBase.GetGetterDOM">
            <summary>
            Returns the getter-method for use with XML DOM event representations.
            </summary>
            <returns>
            getter
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyBase.GetGetterObjectArray(System.Collections.Generic.IDictionary{System.String,System.Int32},System.Collections.Generic.IDictionary{System.String,System.Object},com.espertech.esper.events.EventAdapterService)">
            <summary>
            Gets the getter object array.
            </summary>
            <param name="indexPerProperty">The index per property.</param>
            <param name="nestableTypes">The nestable types.</param>
            <param name="eventAdapterService">The event adapter service.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyBase.ToPropertyArray">
            <summary>
            Return a String-array of atomic property names.
            </summary>
            <returns>
            array of atomic names in a property expression
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyBase.ToPropertyEPL(System.IO.TextWriter)">
            <summary>Write the EPL-representation of the property.</summary>
            <param name="writer">to write to</param>
        </member>
        <member name="P:com.espertech.esper.events.property.PropertyBase.PropertyNameAtomic">
            <summary> Returns the property name.</summary>
            <returns> name of property
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.property.PropertyBase.IsDynamic">
            <summary>
            Returns true for dynamic properties.
            </summary>
            <returns>
            false for not-dynamic properties, true for dynamic properties.
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.property.DynamicProperty">
            <summary>Marker interface for dynamic properties.</summary>
        </member>
        <member name="M:com.espertech.esper.events.property.DynamicIndexedProperty.#ctor(System.String,System.Int32)">
            <summary>
            Ctor.
            </summary>
            <param name="propertyName">is the property name</param>
            <param name="index">is the index of the array or indexed property</param>
        </member>
        <member name="T:com.espertech.esper.events.property.DynamicMappedProperty">
            <summary>
            Represents a dynamic mapped property of a given name.
            <para>
            Dynamic properties always exist, have an Object type and are resolved to a method during runtime.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.DynamicMappedProperty.#ctor(System.String,System.String)">
            <summary>Ctor.</summary>
            <param name="propertyName">is the property name</param>
            <param name="key">is the mapped access key</param>
        </member>
        <member name="T:com.espertech.esper.events.property.DynamicSimpleProperty">
            <summary>
            Represents a dynamic simple property of a given name.
            <para>
            Dynamic properties always exist, have an Object type and are resolved to a method during runtime.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.DynamicSimpleProperty.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="propertyName">is the property name</param>
        </member>
        <member name="T:com.espertech.esper.events.property.FastAccessorPropertyDescriptor">
            <summary>
            Provides a simple property descriptor that is obtained through a
            method.  The method should be a read method that has no parameters
            and returns an object.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.FastAccessorPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Indicates whether the value of this property should be
            persisted.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastAccessorPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Call the accessor method
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastAccessorPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the property
            </summary>
            <param name="component"></param>
            <param name="value"></param>
        </member>
        <member name="M:com.espertech.esper.events.property.FastAccessorPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Can not override values with the simple accessor model
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastAccessorPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Resets the value of the property
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:com.espertech.esper.events.property.FastAccessorPropertyDescriptor.Equals(System.Object)">
            <summary>
            Returns true if the objects are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastAccessorPropertyDescriptor.GetHashCode">
            <summary>
            Returns a hahscode for the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastAccessorPropertyDescriptor.#ctor(System.String,CGLib.FastMethod)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.FastAccessorPropertyDescriptor.#ctor(System.String,System.Reflection.MethodInfo)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.FastAccessorPropertyDescriptor.#ctor(CGLib.FastMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.events.property.FastAccessorPropertyDescriptor"/> class.
            </summary>
            <param name="accessorMethod">The accessor method.</param>
        </member>
        <member name="P:com.espertech.esper.events.property.FastAccessorPropertyDescriptor.IsReadOnly">
            <summary>
            Indicates whether or not the descriptor is readonly
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.property.FastAccessorPropertyDescriptor.ComponentType">
            <summary>
            Gets the type of component this property is bound to
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.property.FastAccessorPropertyDescriptor.PropertyType">
            <summary>
            Gets the return type of the property
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.property.FastFieldPropertyDescriptor">
            <summary>
            Provides a property descriptor that is obtained through a
            field.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.FastFieldPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Indicates whether the value of this property should be
            persisted.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastFieldPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Call the accessor method
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastFieldPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the property
            </summary>
            <param name="component"></param>
            <param name="value"></param>
        </member>
        <member name="M:com.espertech.esper.events.property.FastFieldPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Can not override values with the simple accessor model
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastFieldPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Resets the value of the property
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:com.espertech.esper.events.property.FastFieldPropertyDescriptor.Equals(System.Object)">
            <summary>
            Returns true if the objects are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastFieldPropertyDescriptor.GetHashCode">
            <summary>
            Returns a hahscode for the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastFieldPropertyDescriptor.#ctor(System.String,CGLib.FastField)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.FastFieldPropertyDescriptor.#ctor(CGLib.FastField)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.property.FastFieldPropertyDescriptor.IsReadOnly">
            <summary>
            Indicates whether or not the descriptor is readonly
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.property.FastFieldPropertyDescriptor.ComponentType">
            <summary>
            Gets the type of component this property is bound to
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.property.FastFieldPropertyDescriptor.PropertyType">
            <summary>
            Gets the return type of the property
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.property.FastPropertyDescriptor">
            <summary>
            Provides a property descriptor that is obtained through a
            property.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.FastPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Indicates whether the value of this property should be
            persisted.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Call the accessor method
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the property
            </summary>
            <param name="component"></param>
            <param name="value"></param>
        </member>
        <member name="M:com.espertech.esper.events.property.FastPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Can not override values with the simple accessor model
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Resets the value of the property
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:com.espertech.esper.events.property.FastPropertyDescriptor.Equals(System.Object)">
            <summary>
            Returns true if the objects are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastPropertyDescriptor.GetHashCode">
            <summary>
            Returns a hahscode for the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.property.FastPropertyDescriptor.#ctor(System.String,CGLib.FastProperty)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.FastPropertyDescriptor.#ctor(CGLib.FastProperty)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.property.FastPropertyDescriptor.IsReadOnly">
            <summary>
            Indicates whether or not the descriptor is readonly
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.property.FastPropertyDescriptor.ComponentType">
            <summary>
            Gets the type of component this property is bound to
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.property.FastPropertyDescriptor.PropertyType">
            <summary>
            Gets the return type of the property
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.property.GenericPropertyDesc">
            <summary>
            Descriptor for a type and its generic type, if any.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.GenericPropertyDesc.#ctor(System.Type,System.Type)">
            <summary>
            Ctor.
            </summary>
            <param name="type">the type</param>
            <param name="generic">its generic type parameter, if any</param>
        </member>
        <member name="M:com.espertech.esper.events.property.GenericPropertyDesc.#ctor(System.Type)">
            <summary>
            Ctor.
            </summary>
            <param name="type">the type</param>
        </member>
        <member name="P:com.espertech.esper.events.property.GenericPropertyDesc.PropertyType">
            <summary>
            Returns the type.
            </summary>
            <returns>
            type
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.property.GenericPropertyDesc.GenericType">
            <summary>
            Returns the generic parameter, or null if none.
            </summary>
            <returns>
            generic parameter
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.property.GenericPropertyDesc.ObjectGeneric">
            <summary>
            typeof(Object) type.
            </summary>
            <returns>
            type descriptor
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.property.IndexedProperty">
            <summary>
            Represents an indexed property or array property, ie. an 'value' property with read method getValue(int index)
            or a 'array' property via read method Array returning an array.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.IndexedProperty.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.events.property.IndexedProperty"/> class.
            </summary>
            <param name="propertyName">is the name of the property</param>
        </member>
        <member name="M:com.espertech.esper.events.property.IndexedProperty.#ctor(System.String,System.Int32)">
            <summary> Ctor.</summary>
            <param name="propertyName">is the property name
            </param>
            <param name="index">is the index to use to access the property value
            </param>
        </member>
        <member name="M:com.espertech.esper.events.property.IndexedProperty.GetIndex(System.String)">
            <summary>
            Returns the index number for an indexed property expression.
            </summary>
            <param name="propertyName">property expression</param>
            <returns>index</returns>
        </member>
        <member name="P:com.espertech.esper.events.property.IndexedProperty.Index">
            <summary> Returns index for indexed access.</summary>
            <returns> index value
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.property.MappedProperty">
            <summary>
            Represents a mapped property or array property, ie. an 'value' property with read method 
            GetValue(int index) or a 'array' property via read method GetArray() returning an array.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.MappedProperty.#ctor(System.String,System.String)">
            <summary>Ctor. </summary>
            <param name="propertyName">is the property name of the mapped property</param>
            <param name="key">is the key value to access the mapped property</param>
        </member>
        <member name="P:com.espertech.esper.events.property.MappedProperty.Key">
            <summary>Returns the key value for mapped access. </summary>
            <value>key value</value>
        </member>
        <member name="T:com.espertech.esper.events.property.NestedProperty">
            <summary>
            This class represents a nested property, each nesting level made up of a property instance that 
            can be of type indexed, mapped or simple itself. 
            <para /> 
            The syntax for nested properties is as follows. 
            <pre>a.n a[1].n a('1').n </pre>
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.NestedProperty.#ctor(System.Collections.Generic.IList{com.espertech.esper.events.property.Property})">
            <summary>Ctor. </summary>
            <param name="properties">is the list of Property instances representing each nesting level</param>
        </member>
        <member name="P:com.espertech.esper.events.property.NestedProperty.Properties">
            <summary>Returns the list of property instances making up the nesting levels. </summary>
            <value>list of Property instances</value>
        </member>
        <member name="T:com.espertech.esper.events.property.PropertyParser">
            <summary>
            Parser for property names that can be simple, nested, mapped or a combination of these. Uses ANTLR parser to parse.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyParser.Parse(System.String,System.Boolean)">
            <summary>Parse the given property name returning a Property instance for the property. </summary>
            <param name="propertyName">is the property name to parse</param>
            <param name="isRootedDynamic">is true to indicate that the property is already rooted in a dynamicproperty and therefore all child properties should be dynamic properties as well </param>
            <returns>Property instance for property</returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyParser.Parse(System.String)">
            <summary>Parses a given property name returning an AST. </summary>
            <param name="propertyName">to parse</param>
            <returns>AST syntax tree</returns>
        </member>
        <member name="M:com.espertech.esper.events.property.PropertyParser.IsPropertyDynamic(Antlr.Runtime.Tree.ITree)">
            <summary>Returns true if the property is a dynamic property. </summary>
            <param name="ast">property ast</param>
            <returns>dynamic or not</returns>
        </member>
        <member name="T:com.espertech.esper.events.property.SimpleProperty">
            <summary>Represents a simple property of a given name. </summary>
        </member>
        <member name="M:com.espertech.esper.events.property.SimpleProperty.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="propertyName">is the property name</param>
        </member>
        <member name="T:com.espertech.esper.events.TaggedCompositeEventBean">
            <summary>
            Interface for composite events in which a property is itself an event.
            <para>
            For use with patterns in which pattern tags are properties in a result event and property values
            are the event itself that is matching in a pattern.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.TaggedCompositeEventBean.GetEventBean(System.String)">
            <summary>Returns the event for the tag.</summary>
            <param name="property">is the tag name</param>
            <returns>event</returns>
        </member>
        <member name="T:com.espertech.esper.events.TaggedCompositeEventType">
            <summary>
            Interface for composite event type in which each property is itself an event.
            <para>
            For use with patterns in which pattern tags are properties in a result event and property values
            are the event itself that is matching in a pattern.
            </para>
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.TaggedCompositeEventType.TaggedEventTypes">
            <summary>Returns the event types for each composing event.</summary>
            <returns>map of tag name and event type</returns>
        </member>
        <member name="T:com.espertech.esper.events.util.OutputValueRendererJSONEnum">
            <summary>
            Renderer for a String-value into JSON enum.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.util.OutputValueRenderer">
            <summary>
            For rendering an output value returned by a property.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.util.OutputValueRenderer.Render(System.Object,System.Text.StringBuilder)">
            <summary>
            Renders the value to the buffer.
            </summary>
            <param name="o">object to render</param>
            <param name="buf">buffer to populate</param>
        </member>
        <member name="M:com.espertech.esper.events.util.XElementRendererImpl.#ctor(com.espertech.esper.client.EventType,com.espertech.esper.client.util.XMLRenderingOptions)">
            <summary>
            Ctor.
            </summary>
            <param name="eventType">type of event to render</param>
            <param name="options">rendering options</param>
        </member>
        <member name="M:com.espertech.esper.events.util.XElementRendererImpl.RenderDataMap(System.Object)">
            <summary>
            Renders the value assuming that it is a data map.  If it is not a data map or
            if the data map is empty, then no elements are returned.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.util.XElementRendererImpl.RenderRecursive(com.espertech.esper.client.EventBean,com.espertech.esper.events.util.RendererMeta)">
            <summary>
            Renders the event recursively passing through the structure.
            </summary>
            <param name="theEvent">The theEvent.</param>
            <param name="meta">The meta.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.util.XElementRendererImpl.RenderNestedProperties(com.espertech.esper.client.EventBean,com.espertech.esper.events.util.RendererMeta)">
            <summary>
            Renders the nested properties.
            </summary>
            <param name="theEvent">The theEvent.</param>
            <param name="meta">The meta.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.util.XElementRendererImpl.RenderSimpleProperties(com.espertech.esper.client.EventBean,com.espertech.esper.events.util.RendererMeta)">
            <summary>
            Renders the simple properties.
            </summary>
            <param name="theEvent">The theEvent.</param>
            <param name="meta">The meta.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.util.XElementRendererImpl.RenderIndexProperties(com.espertech.esper.client.EventBean,com.espertech.esper.events.util.RendererMeta)">
            <summary>
            Renders the index properties.
            </summary>
            <param name="theEvent">The theEvent.</param>
            <param name="meta">The meta.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.util.XElementRendererImpl.RenderMappedProperties(com.espertech.esper.client.EventBean,com.espertech.esper.events.util.RendererMeta)">
            <summary>
            Renders the mapped properties.
            </summary>
            <param name="theEvent">The theEvent.</param>
            <param name="meta">The meta.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.util.XElementRendererImpl.RenderMappedProperty(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Renders the mapped property.
            </summary>
            <param name="map">The map.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.events.util.EventRendererImpl">
            <summary>
            Provider for rendering services of <seealso cref="T:com.espertech.esper.client.EventBean"/> events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.util.EventRendererImpl.GetJSONRenderer(com.espertech.esper.client.EventType,com.espertech.esper.client.util.JSONRenderingOptions)">
            <summary>
            Returns a render for the JSON format, valid only for the given event type and
            its subtypes.
            </summary>
            <param name="eventType">to return renderer for</param>
            <param name="options">rendering options</param>
            <returns>
            JSON format renderer
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.util.EventRendererImpl.GetJSONRenderer(com.espertech.esper.client.EventType)">
            <summary>
            Returns a render for the JSON format, valid only for the given event type and
            its subtypes.
            </summary>
            <param name="eventType">to return renderer for</param>
            <returns>
            JSON format renderer
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.util.EventRendererImpl.RenderJSON(System.String,com.espertech.esper.client.EventBean)">
            <summary>
            Quick-access method to render a given event in the JSON format.
            <para/>
            Use the #getJSONRenderer to obtain a renderer instance that allows repeated
            rendering of the same type of event. For performance reasons obtaining a dedicated
            renderer instance is the preferred method compared to repeated rendering via this
            method.
            </summary>
            <param name="title">the JSON root title</param>
            <param name="theEvent">the event to render</param>
            <returns>
            JSON formatted text
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.util.EventRendererImpl.RenderJSON(System.String,com.espertech.esper.client.EventBean,com.espertech.esper.client.util.JSONRenderingOptions)">
            <summary>
            Quick-access method to render a given event in the JSON format.
            <para/>
            Use the #getJSONRenderer to obtain a renderer instance that allows repeated
            rendering of the same type of event. For performance reasons obtaining a dedicated
            renderer instance is the preferred method compared to repeated rendering via this
            method.
            </summary>
            <param name="title">the JSON root title</param>
            <param name="theEvent">the event to render</param>
            <param name="options">are JSON rendering options</param>
            <returns>
            JSON formatted text
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.util.EventRendererImpl.GetXMLRenderer(com.espertech.esper.client.EventType)">
            <summary>
            Returns a render for the XML format, valid only for the given event type and its
            subtypes.
            </summary>
            <param name="eventType">to return renderer for</param>
            <returns>
            XML format renderer
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.util.EventRendererImpl.GetXMLRenderer(com.espertech.esper.client.EventType,com.espertech.esper.client.util.XMLRenderingOptions)">
            <summary>
            Returns a render for the XML format, valid only for the given event type and its
            subtypes.
            </summary>
            <param name="eventType">to return renderer for</param>
            <param name="options">rendering options</param>
            <returns>
            XML format renderer
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.util.EventRendererImpl.RenderXML(System.String,com.espertech.esper.client.EventBean)">
            <summary>
            Quick-access method to render a given event in the XML format.
            <para/>
            Use the #getXMLRenderer to obtain a renderer instance that allows repeated
            rendering of the same type of event. For performance reasons obtaining a dedicated
            renderer instance is the preferred method compared to repeated rendering via this
            method.
            </summary>
            <param name="rootElementName">the root element name that may also include namespace information</param>
            <param name="theEvent">the event to render</param>
            <returns>
            XML formatted text
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.util.EventRendererImpl.RenderXML(System.String,com.espertech.esper.client.EventBean,com.espertech.esper.client.util.XMLRenderingOptions)">
            <summary>
            Quick-access method to render a given event in the XML format.
            <para/>
            Use the #getXMLRenderer to obtain a renderer instance that allows repeated
            rendering of the same type of event. For performance reasons obtaining a dedicated
            renderer instance is the preferred method compared to repeated rendering via this
            method.
            </summary>
            <param name="rootElementName">the root element name that may also include namespace information</param>
            <param name="theEvent">the event to render</param>
            <param name="options">are XML rendering options</param>
            <returns>
            XML formatted text
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.util.EventTypePropertyPair">
            <summary>
            Pair of event type and property.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.util.EventTypePropertyPair.#ctor(com.espertech.esper.client.EventType,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="eventType">event type</param>
            <param name="propertyName">property</param>
        </member>
        <member name="M:com.espertech.esper.events.util.EventTypePropertyPair.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:com.espertech.esper.events.util.EventTypePropertyPair.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.util.GetterPair">
            <summary>
            Value-object for rendering support of a simple property value (non-nested).
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.util.GetterPair.#ctor(com.espertech.esper.client.EventPropertyGetter,System.String,com.espertech.esper.events.util.OutputValueRenderer)">
            <summary>
            Ctor.
            </summary>
            <param name="getter">for retrieving the value</param>
            <param name="name">property name</param>
            <param name="output">for rendering the getter result</param>
        </member>
        <member name="P:com.espertech.esper.events.util.GetterPair.Getter">
            <summary>
            Returns the getter.
            </summary>
            <returns>
            getter
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.util.GetterPair.Name">
            <summary>
            Returns the property name.
            </summary>
            <returns>
            property name
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.util.GetterPair.Output">
            <summary>
            Returns the renderer for the getter return value.
            </summary>
            <returns>
            renderer for result value
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.util.JSONRendererImpl">
            <summary>Render for the JSON format. </summary>
        </member>
        <member name="M:com.espertech.esper.events.util.JSONRendererImpl.#ctor(com.espertech.esper.client.EventType,com.espertech.esper.client.util.JSONRenderingOptions)">
            <summary>Ctor. </summary>
            <param name="eventType">type of Event(s)</param>
            <param name="options">rendering options</param>
        </member>
        <member name="T:com.espertech.esper.events.util.NestedGetterPair">
            <summary>
            Value-object for rendering support of a nested property value.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.util.NestedGetterPair.#ctor(com.espertech.esper.client.EventPropertyGetter,System.String,com.espertech.esper.events.util.RendererMeta,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="getter">for retrieving the value</param>
            <param name="name">property name</param>
            <param name="metadata">the nested properties metadata</param>
            <param name="isArray">indicates whether this is an indexed property</param>
        </member>
        <member name="P:com.espertech.esper.events.util.NestedGetterPair.Getter">
            <summary>
            Returns the getter.
            </summary>
            <returns>
            getter
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.util.NestedGetterPair.Name">
            <summary>
            Returns the property name.
            </summary>
            <returns>
            property name
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.util.NestedGetterPair.Metadata">
            <summary>
            Returns the nested property's metadata.
            </summary>
            <returns>
            metadata
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.util.NestedGetterPair.IsArray">
            <summary>
            Returns true if an indexed nested property.
            </summary>
            <returns>
            indicator whether indexed
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.util.OutputValueRendererBase">
            <summary>
            Renderer for a Object values that can simply be output via to-string.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.util.OutputValueRendererFactory">
            <summary>For rendering an output value returned by a property. </summary>
        </member>
        <member name="M:com.espertech.esper.events.util.OutputValueRendererFactory.GetOutputValueRenderer(System.Type,com.espertech.esper.events.util.RendererMetaOptions)">
            <summary>Returns a renderer for an output value. </summary>
            <param name="type">to render</param>
            <param name="options">options</param>
            <returns>renderer</returns>
        </member>
        <member name="T:com.espertech.esper.events.util.OutputValueRendererJSONString">
            <summary>
            Renderer for a String-value into JSON strings.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.util.OutputValueRendererJSONString.Enquote(System.String,System.Text.StringBuilder)">
            <summary>
            JSON-Enquote the passed string.
            </summary>
            <param name="s">string to enqoute</param>
            <param name="sb">buffer to populate</param>
        </member>
        <member name="T:com.espertech.esper.events.util.OutputValueRendererXMLString">
            <summary>
            Renderer for a String-value into XML strings.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.util.OutputValueRendererXMLString.XmlEncode(System.String,System.Text.StringBuilder,System.Boolean)">
            <summary>
            XML-Encode the passed string.
            </summary>
            <param name="s">string to encode</param>
            <param name="sb">string buffer to populate</param>
            <param name="isEncodeSpecialChar">true for encoding of special characters below ' ', false for leaving special chars</param>
        </member>
        <member name="T:com.espertech.esper.events.util.RendererMeta">
            <summary>
            Renderer cache for event type metadata allows fast rendering of a given type of
            events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.util.RendererMeta.#ctor(com.espertech.esper.client.EventType,System.Collections.Generic.Stack{com.espertech.esper.events.util.EventTypePropertyPair},com.espertech.esper.events.util.RendererMetaOptions)">
            <summary>
            Ctor.
            </summary>
            <param name="eventType">to render</param>
            <param name="stack">the stack of properties to avoid looping</param>
            <param name="options">rendering options</param>
        </member>
        <member name="P:com.espertech.esper.events.util.RendererMeta.SimpleProperties">
            <summary>
            Returns simple properties.
            </summary>
            <returns>
            properties
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.util.RendererMeta.IndexProperties">
            <summary>
            Returns index properties.
            </summary>
            <returns>
            properties
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.util.RendererMeta.NestedProperties">
            <summary>
            Returns nested properties.
            </summary>
            <returns>
            properties
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.util.RendererMeta.MappedProperties">
            <summary>
            Returns mapped properties.
            </summary>
            <returns>
            mapped props
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.util.RendererMetaOptions">
            <summary>
            Options for use by <seealso cref="T:com.espertech.esper.events.util.RendererMeta"/> with rendering metadata.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.util.RendererMetaOptions.#ctor(System.Boolean,System.Boolean,com.espertech.esper.client.util.EventPropertyRenderer,com.espertech.esper.client.util.EventPropertyRendererContext)">
            <summary>
            Ctor.
            </summary>
            <param name="preventLooping">true to prevent looping</param>
            <param name="isXmlOutput">true for XML output</param>
            <param name="renderer">The renderer.</param>
            <param name="rendererContext">The renderer context.</param>
        </member>
        <member name="P:com.espertech.esper.events.util.RendererMetaOptions.PreventLooping">
            <summary>
            Returns true to prevent looping.
            </summary>
            <returns>
            prevent looping indicator
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.util.RendererMetaOptions.IsXmlOutput">
            <summary>
            Returns true for XML output.
            </summary>
            <returns>
            XML output flag
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.util.RendererMetaOptions.Renderer">
            <summary>
            Gets or sets the renderer.
            </summary>
            <value>The renderer.</value>
        </member>
        <member name="P:com.espertech.esper.events.util.RendererMetaOptions.RendererContext">
            <summary>
            Gets or sets the renderer context.
            </summary>
            <value>The renderer context.</value>
        </member>
        <member name="T:com.espertech.esper.events.util.XMLRendererImpl">
            <summary>
            Renderer for XML-formatted properties.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.util.XMLRendererImpl.#ctor(com.espertech.esper.client.EventType,com.espertech.esper.client.util.XMLRenderingOptions)">
            <summary>
            Ctor.
            </summary>
            <param name="eventType">type of event to render</param>
            <param name="options">rendering options</param>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.PropertyGroupDesc">
            <summary>
            For use with building groups of event properties to reduce overhead in maintaining versions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.PropertyGroupDesc.#ctor(System.Int32,System.Collections.Generic.IDictionary{com.espertech.esper.client.EventType,System.String},System.String[])">
            <summary>
            Ctor.
            </summary>
            <param name="groupNum">the group number</param>
            <param name="nameTypeSet">the event types and their names whose totality of properties fully falls within this group.</param>
            <param name="properties">is the properties in the group</param>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.PropertyGroupDesc.GroupNum">
            <summary>Returns the group number. </summary>
            <returns>group number</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.PropertyGroupDesc.Types">
            <summary>Returns the types. </summary>
            <returns>types</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.PropertyGroupDesc.Properties">
            <summary>Returns the properties. </summary>
            <returns>properties</returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.PropertyUtility">
            <summary>
            Utility for handling properties for the purpose of merging and versioning by revision
            event types.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.PropertyUtility.GetKeys(com.espertech.esper.client.EventBean,com.espertech.esper.client.EventPropertyGetter[])">
            <summary>Returns a multi-key for an event and key property getters </summary>
            <param name="theEvent">to get keys for</param>
            <param name="keyPropertyGetters">getters to use</param>
            <returns>key</returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.PropertyUtility.GetPerType(com.espertech.esper.events.vaevent.PropertyGroupDesc[],System.String[],System.String[])">
            <summary>From a list of property groups that include contributing event types, build a map of contributing event types and their type descriptor. </summary>
            <param name="groups">property groups</param>
            <param name="changesetProperties">properties that change between groups</param>
            <param name="keyProperties">key properties</param>
            <returns>map of event type and type information</returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.PropertyUtility.GetGroupsPerProperty(com.espertech.esper.events.vaevent.PropertyGroupDesc[])">
            <summary>From a list of property groups that include multiple group numbers for each property, make a map of group numbers per property. </summary>
            <param name="groups">property groups</param>
            <returns>map of property name and group number</returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.PropertyUtility.AnalyzeGroups(System.String[],com.espertech.esper.client.EventType[],System.String[])">
            <summary>Analyze multiple event types and determine common property sets that form property groups. </summary>
            <param name="allProperties">property names to look at</param>
            <param name="deltaEventTypes">all types contributing</param>
            <param name="names">names of properies</param>
            <returns>groups</returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.PropertyUtility.CopyAndSort(System.Collections.Generic.ICollection{System.String})">
            <summary>Copy an sort the input array. </summary>
            <param name="input">to sort</param>
            <returns>sorted copied array</returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.PropertyUtility.GetGetters(com.espertech.esper.client.EventType,System.String[])">
            <summary>Return getters for property names. </summary>
            <param name="eventType">type to get getters from</param>
            <param name="propertyNames">names to get</param>
            <returns>getters</returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.PropertyUtility.UniqueExclusiveSort(System.Collections.Generic.ICollection{System.String},System.String[])">
            <summary>
            Remove from values all removeValues and build a unique sorted result array.
            </summary>
            <param name="values">to consider</param>
            <param name="removeValues">values to remove from values</param>
            <returns>sorted unique</returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.RevisionBeanHolder">
            <summary>Holds revisions for property groups in an overlay strategy. </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionBeanHolder.#ctor(System.Int64,com.espertech.esper.client.EventBean,com.espertech.esper.client.EventPropertyGetter[])">
            <summary>Ctor. </summary>
            <param name="version">the current version</param>
            <param name="eventBean">the new event</param>
            <param name="getters">the getters</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionBeanHolder.GetValueForProperty(System.Int32)">
            <summary>Returns a property value. </summary>
            <param name="propertyNumber">number of property</param>
            <returns>value</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionBeanHolder.Version">
            <summary>Returns current version number. </summary>
            <returns>version</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionBeanHolder.EventBean">
            <summary>Returns the contributing event. </summary>
            <returns>event</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionBeanHolder.Getters">
            <summary>Returns getters for event property access. </summary>
            <returns>getters</returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.RevisionEventBeanDeclared">
            <summary>Revision event bean for the overlayed scheme. </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionEventBeanDeclared.#ctor(com.espertech.esper.events.vaevent.RevisionEventType,com.espertech.esper.client.EventBean)">
            <summary>Ctor. </summary>
            <param name="eventType">revision event type</param>
            <param name="underlying">event wrapped</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionEventBeanDeclared.Get(System.String)">
            <summary>
            Returns the value of an event property.  This method is a proxy of the indexer.
            </summary>
            <param name="property">name of the property whose value is to be retrieved</param>
            <returns>
            the value of a simple property with the specified name.
            </returns>
            <throws>  PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed </throws>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionEventBeanDeclared.GetVersionedValue(com.espertech.esper.events.vaevent.RevisionGetterParameters)">
            <summary>Returns a versioned value. </summary>
            <param name="paramList">getter parameters</param>
            <returns>value</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionEventBeanDeclared.IsLatest">
            <summary>Is true if latest event, or false if not. </summary>
            <returns>indicator if latest</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionEventBeanDeclared.Holders">
            <summary>
            Sets versions.
            </summary>
            <value>The holders.</value>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionEventBeanDeclared.LastBaseEvent">
            <summary>Gets or sets the last base event. </summary>
            <returns>base event</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionEventBeanDeclared.UnderlyingFullOrDelta">
            <summary>Returns wrapped event. </summary>
            <returns>wrapped event</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionEventBeanDeclared.Key">
            <summary>Returns the key. </summary>
            <returns>key</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionEventBeanDeclared.RevisionEventType">
            <summary>Returns the revision event type. </summary>
            <returns>type</returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.RevisionEventBeanMerge">
            <summary>Merge-event for event revisions. </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionEventBeanMerge.#ctor(com.espertech.esper.events.vaevent.RevisionEventType,com.espertech.esper.client.EventBean)">
            <summary>Ctor. </summary>
            <param name="revisionEventType">type</param>
            <param name="underlyingFull">event wrapped</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionEventBeanMerge.Get(System.String)">
            <summary>
            Returns the value of an event property.  This method is a proxy of the indexer.
            </summary>
            <param name="property">name of the property whose value is to be retrieved</param>
            <returns>
            the value of a simple property with the specified name.
            </returns>
            <throws>  PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed </throws>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionEventBeanMerge.GetBaseEventValue(com.espertech.esper.events.vaevent.RevisionGetterParameters)">
            <summary>Returns base event value. </summary>
            <param name="paramList">supplies getter</param>
            <returns>value</returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionEventBeanMerge.GetVersionedValue(com.espertech.esper.events.vaevent.RevisionGetterParameters)">
            <summary>Returns a versioned value. </summary>
            <param name="paramList">getter and indexes</param>
            <returns>value</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionEventBeanMerge.IsLatest">
            <summary>Gets or sets the flag that indicates latest or not. </summary>
            <returns>latest flag</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionEventBeanMerge.Key">
            <summary>Gets or sets the key. </summary>
            <returns>key</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionEventBeanMerge.Overlay">
            <summary>Gets or sets overlay values. </summary>
            <returns>overlay</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionEventBeanMerge.LastBaseEvent">
            <summary>Gets or sets last base event. </summary>
            <returns>base event</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionEventBeanMerge.EventType">
            <summary>
            Return the <see cref="P:com.espertech.esper.events.vaevent.RevisionEventBeanMerge.EventType"/> instance that describes the set of properties
            available for this event.
            </summary>
            <value></value>
            <returns> event type
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionEventBeanMerge.Item(System.String)">
            <summary>
            Returns the value of an event property.
            </summary>
            <value></value>
            <returns> the value of a simple property with the specified name.
            </returns>
            <throws>  PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed </throws>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionEventBeanMerge.UnderlyingFullOrDelta">
            <summary>Returns wrapped event </summary>
            <returns>event</returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.RevisionEventType">
            <summary>
            Event type of revision events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionEventType.#ctor(com.espertech.esper.events.EventTypeMetadata,System.Int32,System.Collections.Generic.IDictionary{System.String,com.espertech.esper.events.vaevent.RevisionPropertyTypeDesc},com.espertech.esper.events.EventAdapterService)">
            <summary>
            Ctor.
            </summary>
            <param name="metadata">event type metadata</param>
            <param name="eventTypeId">The event type id.</param>
            <param name="propertyDesc">describes each properties type</param>
            <param name="eventAdapterService">for nested property handling</param>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.RevisionGetterParameters">
            <summary>
            Getter parameters for revision events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionGetterParameters.#ctor(System.String,System.Int32,com.espertech.esper.client.EventPropertyGetter,System.Int32[])">
            <summary>Ctor. </summary>
            <param name="propertyName">the property this gets</param>
            <param name="propertyNumber">the property number</param>
            <param name="fullGetter">the getter of the base event to use, if any</param>
            <param name="authoritySets">is the group numbers that the getter may access to obtain a property value</param>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionGetterParameters.PropertyGroups">
            <summary>Returns the group numbers to look for updated properties comparing version numbers. </summary>
            <returns>groups</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionGetterParameters.PropertyNumber">
            <summary>Returns the property number. </summary>
            <returns>property number</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionGetterParameters.BaseGetter">
            <summary>Returns the getter for the base event type. </summary>
            <returns>base getter</returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.RevisionNestedPropertyGetter">
            <summary>
            A getter that works on events residing within a Map as an event property.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionNestedPropertyGetter.#ctor(com.espertech.esper.client.EventPropertyGetter,com.espertech.esper.client.EventPropertyGetter,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Ctor.
            </summary>
            <param name="revisionGetter">getter for revision value</param>
            <param name="nestedGetter">getter to apply to revision value</param>
            <param name="eventAdapterService">for handling object types</param>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.RevisionPropertyTypeDesc">
            <summary>
            Property descriptor for use by revision event types to maintain access to
            revision event properties.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionPropertyTypeDesc.#ctor(com.espertech.esper.client.EventPropertyGetter,com.espertech.esper.events.vaevent.RevisionGetterParameters,System.Type)">
            <summary>Ctor. </summary>
            <param name="revisionGetter">getter to use</param>
            <param name="revisionGetterParams">getter parameters</param>
            <param name="propertyType">type of the property</param>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionPropertyTypeDesc.RevisionGetter">
            <summary>Returns the getter for the property on the revision event type. </summary>
            <returns>getter</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionPropertyTypeDesc.RevisionGetterParams">
            <summary>Returns parameters for the getter for the property on the revision event type. </summary>
            <returns>getter parameters</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionPropertyTypeDesc.PropertyType">
            <summary>Returns property type. </summary>
            <returns>type</returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.RevisionSpec">
            <summary>
            Specification for how to build a revision event type.
            <para/>
            Compiled from the information provided via configuration, which has already been validated
            before building this specification.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionSpec.#ctor(com.espertech.esper.client.PropertyRevisionEnum,com.espertech.esper.client.EventType,com.espertech.esper.client.EventType[],System.String[],System.String[],System.String[],System.String[],System.Boolean,System.Boolean[])">
            <summary>Ctor. </summary>
            <param name="propertyRevision">strategy to use</param>
            <param name="baseEventType">base type</param>
            <param name="deltaTypes">delta types</param>
            <param name="deltaNames">aliases of delta types</param>
            <param name="keyPropertyNames">names of key properties</param>
            <param name="changesetPropertyNames">names of properties that change</param>
            <param name="baseEventOnlyPropertyNames">properties only available on the base event</param>
            <param name="deltaTypesAddProperties">bool to indicate delta types add additional properties.</param>
            <param name="changesetPropertyDeltaContributed">flag for each property indicating whether its contributed only by a delta event</param>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionSpec.ChangesetPropertyDeltaContributed">
            <summary>Flag for each changeset property to indicate if only the delta contributes the property. </summary>
            <returns>flag per property</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionSpec.PropertyRevision">
            <summary>Returns the stratgegy for revisioning. </summary>
            <returns>enum</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionSpec.BaseEventType">
            <summary>Returns the base event type. </summary>
            <returns>base type</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionSpec.DeltaTypes">
            <summary>Returns the delta event types. </summary>
            <returns>types</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionSpec.DeltaNames">
            <summary>Returns aliases for delta events. </summary>
            <returns>event type alias names for delta events</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionSpec.KeyPropertyNames">
            <summary>Returns property names for key properties. </summary>
            <returns>property names</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionSpec.ChangesetPropertyNames">
            <summary>Returns property names of properties that change by deltas </summary>
            <returns>prop names</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionSpec.BaseEventOnlyPropertyNames">
            <summary>Returns the properies only found on the base event. </summary>
            <returns>base props</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionSpec.IsDeltaTypesAddProperties">
            <summary>Returns true if delta types add properties. </summary>
            <returns>flag indicating if delta event types add properties</returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.RevisionStateDeclared">
            <summary>
            State for the overlay (non-merge) strategy.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionStateDeclared.#ctor(com.espertech.esper.client.EventBean,com.espertech.esper.events.vaevent.RevisionBeanHolder[],com.espertech.esper.events.vaevent.RevisionEventBeanDeclared)">
            <summary>Ctor. </summary>
            <param name="baseEventUnderlying">base event</param>
            <param name="holders">revisions</param>
            <param name="lastEvent">prior event</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionStateDeclared.IncRevisionNumber">
            <summary>Increments version number. </summary>
            <returns>incremented version number</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionStateDeclared.RevisionNumber">
            <summary>Returns revision number. </summary>
            <returns>version number</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionStateDeclared.BaseEventUnderlying">
            <summary>Gets or sets base event. </summary>
            <returns>base event</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionStateDeclared.Holders">
            <summary>Gets or sets versions. </summary>
            <returns>versions</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionStateDeclared.LastEvent">
            <summary>Gets or sets the last event. </summary>
            <returns>last event</returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.RevisionStateMerge">
            <summary>State for merge stratgies. </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionStateMerge.#ctor(com.espertech.esper.client.EventBean,com.espertech.esper.util.NullableObject{System.Object}[],com.espertech.esper.events.vaevent.RevisionEventBeanMerge)">
            <summary>Ctor. </summary>
            <param name="baseEventUnderlying">base event</param>
            <param name="overlays">merged values</param>
            <param name="lastEvent">last event</param>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionStateMerge.BaseEventUnderlying">
            <summary>Gets or sets base event. </summary>
            <returns>base event</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionStateMerge.Overlays">
            <summary>Gets or sets the merged values. </summary>
            <returns>merged values</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionStateMerge.LastEvent">
            <summary>Gets or sets the last event. </summary>
            <returns>last event</returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.RevisionTypeDesc">
            <summary>Per-event-type descriptor for fast access to getters for key values and changes properties. </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionTypeDesc.#ctor(com.espertech.esper.client.EventPropertyGetter[],com.espertech.esper.client.EventPropertyGetter[],com.espertech.esper.events.vaevent.PropertyGroupDesc)">
            <summary>Ctor. </summary>
            <param name="keyPropertyGetters">key getters</param>
            <param name="changesetPropertyGetters">property getters</param>
            <param name="group">group this belongs to</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.RevisionTypeDesc.#ctor(com.espertech.esper.client.EventPropertyGetter[],com.espertech.esper.client.EventPropertyGetter[],System.Int32[])">
            <summary>Ctor. </summary>
            <param name="keyPropertyGetters">key getters</param>
            <param name="changesetPropertyGetters">property getters</param>
            <param name="changesetPropertyIndex">indexes of properties contributed</param>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionTypeDesc.KeyPropertyGetters">
            <summary>Returns key getters. </summary>
            <returns>getters</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionTypeDesc.ChangesetPropertyGetters">
            <summary>Returns property getters. </summary>
            <returns>getters</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionTypeDesc.Group">
            <summary>Returns group, or null if not using property groups. </summary>
            <returns>group</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.RevisionTypeDesc.ChangesetPropertyIndex">
            <summary>Returns indexes of properties contributed, or null if not using indexes. </summary>
            <returns>indexes</returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.UpdateStrategy">
            <summary>Strategy for merging updates or additional properties. </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.UpdateStrategy.HandleUpdate(System.Boolean,com.espertech.esper.events.vaevent.RevisionStateMerge,com.espertech.esper.events.vaevent.RevisionEventBeanMerge,com.espertech.esper.events.vaevent.RevisionTypeDesc)">
            <summary>Merge properties. </summary>
            <param name="isBaseEventType">true if the event is a base event type</param>
            <param name="revisionState">the current state, to be updated.</param>
            <param name="revisionEvent">the new event to merge</param>
            <param name="typesDesc">descriptor for event type of the new event to merge</param>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.UpdateStrategyBase">
            <summary>Base strategy implementation holds the specification object. </summary>
        </member>
        <member name="F:com.espertech.esper.events.vaevent.UpdateStrategyBase.spec">
            <summary>The specification. </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.UpdateStrategyBase.#ctor(com.espertech.esper.events.vaevent.RevisionSpec)">
            <summary>Ctor. </summary>
            <param name="spec">is the specification</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.UpdateStrategyBase.ArrayCopy``1(com.espertech.esper.util.NullableObject{``0}[])">
            <summary>Array copy. </summary>
            <param name="array">to copy</param>
            <returns>copied array</returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.UpdateStrategyBase.HandleUpdate(System.Boolean,com.espertech.esper.events.vaevent.RevisionStateMerge,com.espertech.esper.events.vaevent.RevisionEventBeanMerge,com.espertech.esper.events.vaevent.RevisionTypeDesc)">
            <summary>Merge properties. </summary>
            <param name="isBaseEventType">true if the event is a base event type</param>
            <param name="revisionState">the current state, to be updated.</param>
            <param name="revisionEvent">the new event to merge</param>
            <param name="typesDesc">descriptor for event type of the new event to merge</param>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.UpdateStrategyDeclared">
            <summary>
            Strategy for merging update properties using all declared property's values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.UpdateStrategyDeclared.#ctor(com.espertech.esper.events.vaevent.RevisionSpec)">
            <summary>Ctor. </summary>
            <param name="spec">the specification</param>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.UpdateStrategyExists">
            <summary>Strategy for merging update properties using only existing property's values. </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.UpdateStrategyExists.#ctor(com.espertech.esper.events.vaevent.RevisionSpec)">
            <summary>Ctor. </summary>
            <param name="spec">the specification</param>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.UpdateStrategyNonNull">
            <summary>
            Strategy for merging update properties using only non-null values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.UpdateStrategyNonNull.#ctor(com.espertech.esper.events.vaevent.RevisionSpec)">
            <summary>Ctor. </summary>
            <param name="spec">the specification</param>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.VAERevisionProcessorBase">
            <summary>
            Base revision processor.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.ValueAddEventProcessor">
            <summary>Interface for a processor of base and delta events in a revision event type. </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.ValueAddEventProcessor.ValidateEventType(com.espertech.esper.client.EventType)">
            <summary>For use in checking insert-into statements, validates that the given type is eligible for revision event. </summary>
            <param name="eventType">the type of the event participating in revision event type (or not)</param>
            <throws>ExprValidationException if the validation fails</throws>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.ValueAddEventProcessor.GetValueAddEventBean(com.espertech.esper.client.EventBean)">
            <summary>For use in executing an insert-into, wraps the given event applying the revision event type, but not yet computing a new revision. </summary>
            <param name="theEvent">to wrap</param>
            <returns>revision event bean</returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.ValueAddEventProcessor.OnUpdate(com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean[],com.espertech.esper.epl.named.NamedWindowRootViewInstance,com.espertech.esper.epl.named.NamedWindowIndexRepository)">
            <summary>Upon new events arriving into a named window (new data), and upon events being deleted via on-delete (old data), update child views of the root view and apply to index repository as required (fast deletion). </summary>
            <param name="newData">new events</param>
            <param name="oldData">remove stream</param>
            <param name="namedWindowRootView">the root view</param>
            <param name="indexRepository">delete and select indexes</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.ValueAddEventProcessor.GetSnapshot(com.espertech.esper.core.context.util.EPStatementAgentInstanceHandle,com.espertech.esper.view.Viewable)">
            <summary>Handle iteration over revision event contents. </summary>
            <param name="createWindowStmtHandle">statement handle for safe iteration</param>
            <param name="parent">the provider of data</param>
            <returns>collection to iterate</returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.ValueAddEventProcessor.RemoveOldData(com.espertech.esper.client.EventBean[],com.espertech.esper.epl.named.NamedWindowIndexRepository)">
            <summary>Called each time a data window posts a remove stream event, to indicate that a data window remove an event as it expired according to a specified expiration policy. </summary>
            <param name="oldData">to remove</param>
            <param name="indexRepository">the indexes to update</param>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.ValueAddEventProcessor.ValueAddEventType">
            <summary>Returns the event type that this revision processor generates. </summary>
            <value>event type</value>
        </member>
        <member name="F:com.espertech.esper.events.vaevent.VAERevisionProcessorBase.RevisionSpec">
            <summary>Revision type specification. </summary>
        </member>
        <member name="F:com.espertech.esper.events.vaevent.VAERevisionProcessorBase.RevisionEventTypeName">
            <summary>Name of type. </summary>
        </member>
        <member name="F:com.espertech.esper.events.vaevent.VAERevisionProcessorBase.RevisionEventType">
            <summary>Revision event type. </summary>
        </member>
        <member name="F:com.espertech.esper.events.vaevent.VAERevisionProcessorBase.EventAdapterService">
            <summary>For interogating nested properties. </summary>
        </member>
        <member name="F:com.espertech.esper.events.vaevent.VAERevisionProcessorBase.TypeDescriptors">
            <summary>Map of participating type to descriptor. </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VAERevisionProcessorBase.#ctor(com.espertech.esper.events.vaevent.RevisionSpec,System.String,com.espertech.esper.events.EventAdapterService)">
            <summary>Ctor. </summary>
            <param name="revisionSpec">specification</param>
            <param name="revisionEventTypeName">name of event type</param>
            <param name="eventAdapterService">for nested property handling</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VAERevisionProcessorBase.GetValueAddEventBean(com.espertech.esper.client.EventBean)">
            <summary>For use in executing an insert-into, wraps the given event applying the revision event type, but not yet computing a new revision. </summary>
            <param name="theEvent">to wrap</param>
            <returns>revision event bean</returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VAERevisionProcessorBase.OnUpdate(com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean[],com.espertech.esper.epl.named.NamedWindowRootViewInstance,com.espertech.esper.epl.named.NamedWindowIndexRepository)">
            <summary>Upon new events arriving into a named window (new data), and upon events being deleted via on-delete (old data), update child views of the root view and apply to index repository as required (fast deletion). </summary>
            <param name="newData">new events</param>
            <param name="oldData">remove stream</param>
            <param name="namedWindowRootView">the root view</param>
            <param name="indexRepository">delete and select indexes</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VAERevisionProcessorBase.GetSnapshot(com.espertech.esper.core.context.util.EPStatementAgentInstanceHandle,com.espertech.esper.view.Viewable)">
            <summary>Handle iteration over revision event contents. </summary>
            <param name="createWindowStmtHandle">statement handle for safe iteration</param>
            <param name="parent">the provider of data</param>
            <returns>collection to iterate</returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VAERevisionProcessorBase.RemoveOldData(com.espertech.esper.client.EventBean[],com.espertech.esper.epl.named.NamedWindowIndexRepository)">
            <summary>Called each time a data window posts a remove stream event, to indicate that a data window remove an event as it expired according to a specified expiration policy. </summary>
            <param name="oldData">to remove</param>
            <param name="indexRepository">the indexes to update</param>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.VAERevisionProcessorDeclared">
            <summary>
            Provides overlay strategy for property group-based versioning.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VAERevisionProcessorDeclared.#ctor(System.String,com.espertech.esper.events.vaevent.RevisionSpec,com.espertech.esper.view.StatementStopService,com.espertech.esper.events.EventAdapterService,com.espertech.esper.events.EventTypeIdGenerator)">
            <summary>
            Ctor.
            </summary>
            <param name="revisionEventTypeName">name</param>
            <param name="spec">specification</param>
            <param name="statementStopService">for stop handling</param>
            <param name="eventAdapterService">for nested property handling</param>
            <param name="eventTypeIdGenerator">The event type id generator.</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VAERevisionProcessorDeclared.CreatePropertyDescriptors(com.espertech.esper.events.vaevent.RevisionSpec,com.espertech.esper.events.vaevent.PropertyGroupDesc[])">
            <summary>Creates property descriptors for revision. </summary>
            <param name="spec">specifies revision</param>
            <param name="groups">the groups that group properties</param>
            <returns>map of property and descriptor</returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.VAERevisionProcessorMerge">
            <summary>
            Provides a set of merge-strategies for merging individual properties (rather then overlaying groups).
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VAERevisionProcessorMerge.#ctor(System.String,com.espertech.esper.events.vaevent.RevisionSpec,com.espertech.esper.view.StatementStopService,com.espertech.esper.events.EventAdapterService,com.espertech.esper.events.EventTypeIdGenerator)">
            <summary>
            Ctor.
            </summary>
            <param name="revisioneventTypeName">name</param>
            <param name="spec">specification</param>
            <param name="statementStopService">for stop handling</param>
            <param name="eventAdapterService">for nested property handling</param>
            <param name="eventTypeIdGenerator">The event type id generator.</param>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.VAEVariantProcessor">
            <summary>
            Represents a variant event stream, allowing events of disparate event types to be treated 
            polymophically.
            </summary>
        </member>
        <member name="F:com.espertech.esper.events.vaevent.VAEVariantProcessor.VariantSpec">
            <summary>Specification for the variant stream. </summary>
        </member>
        <member name="F:com.espertech.esper.events.vaevent.VAEVariantProcessor.VariantEventType">
            <summary>The event type representing the variant stream. </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VAEVariantProcessor.#ctor(com.espertech.esper.events.vaevent.VariantSpec,com.espertech.esper.events.EventTypeIdGenerator,com.espertech.esper.client.ConfigurationVariantStream)">
            <summary>
            Ctor.
            </summary>
            <param name="variantSpec">specifies how to handle the disparate events</param>
            <param name="eventTypeIdGenerator">The event type id generator.</param>
            <param name="config">The config.</param>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.ValueAddEventService">
            <summary>
            Service associating handling vaue-added event types, such a revision event types and variant stream event types.
            <para /> 
            Associates named windows and revision event types. </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.ValueAddEventService.Init(System.Collections.Generic.IDictionary{System.String,com.espertech.esper.client.ConfigurationRevisionEventType},System.Collections.Generic.IDictionary{System.String,com.espertech.esper.client.ConfigurationVariantStream},com.espertech.esper.events.EventAdapterService,com.espertech.esper.events.EventTypeIdGenerator)">
            <summary>
            Called at initialization time, verifies configurations provided.
            </summary>
            <param name="revisionTypes">is the revision types to add</param>
            <param name="variantStreams">is the variant streams to add</param>
            <param name="eventAdapterService">for obtaining event type information for each name</param>
            <param name="eventTypeIdGenerator">The event type id generator.</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.ValueAddEventService.AddRevisionEventType(System.String,com.espertech.esper.client.ConfigurationRevisionEventType,com.espertech.esper.events.EventAdapterService)">
            <summary>Adds a new revision event types. </summary>
            <param name="name">to add</param>
            <param name="config">the revision event type configuration</param>
            <param name="eventAdapterService">for obtaining event type information for each name</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.ValueAddEventService.AddVariantStream(System.String,com.espertech.esper.client.ConfigurationVariantStream,com.espertech.esper.events.EventAdapterService,com.espertech.esper.events.EventTypeIdGenerator)">
            <summary>
            Adds a new variant stream.
            </summary>
            <param name="variantEventTypeName">the name of the type</param>
            <param name="variantStreamConfig">the configs</param>
            <param name="eventAdapterService">for handling nested events</param>
            <param name="eventTypeIdGenerator">The event type id generator.</param>
            <throws>ConfigurationException if the configuration is invalid</throws>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.ValueAddEventService.GetValueAddUnderlyingType(System.String)">
            <summary>Upon named window creation, and during resolution of type specified as part of a named window create statement, returns looks up the revision event type name provided and return the revision event type if found, or null if not found. </summary>
            <param name="name">to look up</param>
            <returns>null if not found, of event type</returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.ValueAddEventService.CreateRevisionType(System.String,System.String,com.espertech.esper.view.StatementStopService,com.espertech.esper.events.EventAdapterService,com.espertech.esper.events.EventTypeIdGenerator)">
            <summary>
            Upon named window creation, create a unique revision event type that this window processes.
            </summary>
            <param name="namedWindowName">name of window</param>
            <param name="typeName">name to use</param>
            <param name="statementStopService">for handling stops</param>
            <param name="eventAdapterService">for event type info</param>
            <param name="eventTypeIdGenerator">The event type id generator.</param>
            <returns>revision event type</returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.ValueAddEventService.IsRevisionTypeName(System.String)">
            <summary>Upon named window creation, check if the name used is a revision event type name. </summary>
            <param name="name">to check</param>
            <returns>true if revision event type, false if not</returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.ValueAddEventService.GetValueAddProcessor(System.String)">
            <summary>Gets a value-added event processor. </summary>
            <param name="name">of the value-add events</param>
            <returns>processor</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.ValueAddEventService.ValueAddedTypes">
            <summary>Returns all event types representing value-add event types. </summary>
            <value>value-add event type</value>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.ValueAddEventServiceImpl">
            <summary>
            Service for handling revision event types.
            <para/>
            Each named window instance gets a dedicated revision processor.
            </summary>
        </member>
        <member name="F:com.espertech.esper.events.vaevent.ValueAddEventServiceImpl.SpecificationsByRevisionName">
            <summary>Map of revision event name and revision compiled specification. </summary>
        </member>
        <member name="F:com.espertech.esper.events.vaevent.ValueAddEventServiceImpl.ProcessorsByNamedWindow">
            <summary>Map of named window name and processor. </summary>
        </member>
        <member name="F:com.espertech.esper.events.vaevent.ValueAddEventServiceImpl.VariantProcessors">
            <summary>Map of revision event stream and variant stream processor. </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.ValueAddEventServiceImpl.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.ValueAddEventServiceImpl.ValidateVariantStream(System.String,com.espertech.esper.client.ConfigurationVariantStream,com.espertech.esper.events.EventAdapterService)">
            <summary>Validate the variant stream definition. </summary>
            <param name="variantStreamname">the stream name</param>
            <param name="variantStreamConfig">the configuration information</param>
            <param name="eventAdapterService">the event adapters</param>
            <returns>specification for variant streams</returns>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.ValueAddEventServiceImpl.ValidateRevision(System.String,com.espertech.esper.client.ConfigurationRevisionEventType,com.espertech.esper.events.EventAdapterService)">
            <summary>Valiate the revision configuration. </summary>
            <param name="revisioneventTypeName">name of revision types</param>
            <param name="config">configures revision type</param>
            <param name="eventAdapterService">event adapters</param>
            <returns>revision specification</returns>
            <throws>ConfigurationException if the configs are invalid</throws>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.VariantEvent">
            <summary>
            A variant event is a type that can represent many event types.
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.VariantEvent.UnderlyingEventBean">
            <summary>Returns the underlying event. </summary>
            <returns>underlying event</returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.VariantEventBean">
            <summary>
            An event bean that represents multiple potentially disparate underlying events and presents
            a unified face across each such types or even any type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VariantEventBean.#ctor(com.espertech.esper.events.vaevent.VariantEventType,com.espertech.esper.client.EventBean)">
            <summary>Ctor. </summary>
            <param name="variantEventType">the event type</param>
            <param name="underlying">the event</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VariantEventBean.Get(System.String)">
            <summary>
            Returns the value of an event property.  This method is a proxy of the indexer.
            </summary>
            <param name="property">name of the property whose value is to be retrieved</param>
            <returns>
            the value of a simple property with the specified name.
            </returns>
            <throws>  PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed </throws>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.VariantEventBean.EventType">
            <summary>
            Return the <see cref="P:com.espertech.esper.events.vaevent.VariantEventBean.EventType"/> instance that describes the set of properties available for this event.
            </summary>
            <value></value>
            <returns> event type
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.VariantEventBean.Item(System.String)">
            <summary>
            Returns the value of an event property.
            </summary>
            <value></value>
            <returns> the value of a simple property with the specified name.
            </returns>
            <throws>  PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed </throws>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.VariantEventBean.Underlying">
            <summary>
            Get the underlying data object to this event wrapper.
            </summary>
            <value></value>
            <returns> underlying data object, usually either a Map or a bean instance.
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.VariantEventBean.UnderlyingEventBean">
            <summary>Returns the underlying event. </summary>
            <returns>underlying event</returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.VariantEventType">
            <summary>
            Event type for variant event streams.
            <para/>
            Caches properties after having resolved a property via a resolution strategy.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VariantEventType.#ctor(com.espertech.esper.events.EventTypeMetadata,System.Int32,com.espertech.esper.events.vaevent.VariantSpec,com.espertech.esper.events.vaevent.VariantPropResolutionStrategy,com.espertech.esper.client.ConfigurationVariantStream)">
            <summary>
            Ctor.
            </summary>
            <param name="metadata">event type metadata</param>
            <param name="eventTypeId">The event type id.</param>
            <param name="variantSpec">the variant specification</param>
            <param name="propertyResStrategy">stragegy for resolving properties</param>
            <param name="config">The config.</param>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.VariantPropertyDesc">
            <summary>Descriptor for a variant stream property. </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VariantPropertyDesc.#ctor(System.Type,com.espertech.esper.client.EventPropertyGetter,System.Boolean)">
            <summary>Ctor. </summary>
            <param name="propertyType">type or null if not exists</param>
            <param name="getter">the getter or null if not exists</param>
            <param name="property">the bool indicating whether it exists or not</param>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.VariantPropertyDesc.IsProperty">
            <summary>True if the property exists, false if not. </summary>
            <returns>indicator whether property exists</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.VariantPropertyDesc.PropertyType">
            <summary>Returns the property type. </summary>
            <returns>property type</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.VariantPropertyDesc.Getter">
            <summary>Returns the getter for the property. </summary>
            <returns>property getter</returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.VariantPropertyGetterCache">
            <summary>
            A thread-safe cache for property getters per event type.
            <para/>
            Since most often getters are used in a row for the same type, keeps a row of last
            used getters for fast lookup based on type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VariantPropertyGetterCache.#ctor(com.espertech.esper.client.EventType[])">
            <summary>Ctor. </summary>
            <param name="knownTypes">types known at cache construction type, may be an empty list for the ANY type variance.</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VariantPropertyGetterCache.AddGetters(System.Int32,System.String)">
            <summary>Adds the getters for a property that is identified by a property number which indexes into array of getters per type. </summary>
            <param name="assignedPropertyNumber">number of property</param>
            <param name="propertyName">to add</param>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VariantPropertyGetterCache.GetGetter(System.Int32,com.espertech.esper.client.EventType)">
            <summary>Fast lookup of a getter for a property and type. </summary>
            <param name="assignedPropertyNumber">number of property to use as index</param>
            <param name="eventType">type of underlying event</param>
            <returns>getter</returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.VariantPropResolutionStrategy">
            <summary>
            Strategy for resolving a property against any of the variant types.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VariantPropResolutionStrategy.ResolveProperty(System.String,com.espertech.esper.client.EventType[])">
            <summary>
            Resolve the property for each of the types.
            </summary>
            <param name="propertyName">to resolve</param>
            <param name="variants">the variants to resolve the property for</param>
            <returns>property descriptor</returns>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.VariantPropResolutionStrategyAny">
            <summary>
            A property resolution strategy that allows any type, wherein all properties 
            are Object type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VariantPropResolutionStrategyAny.#ctor(com.espertech.esper.events.vaevent.VariantSpec)">
            <summary>Ctor. </summary>
            <param name="variantSpec">specified the preconfigured types</param>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.VariantPropResolutionStrategyDefault">
            <summary>
            A property resolution strategy that allows only the preconfigured types, wherein
            all properties that are common (name and type) to all properties are considered.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VariantPropResolutionStrategyDefault.#ctor(com.espertech.esper.events.vaevent.VariantSpec)">
            <summary>
            Ctor.
            </summary>
            <param name="variantSpec">specified the preconfigured types</param>
        </member>
        <member name="T:com.espertech.esper.events.vaevent.VariantSpec">
            <summary>
            Specification for a variant event stream.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.vaevent.VariantSpec.#ctor(System.String,com.espertech.esper.client.EventType[],com.espertech.esper.client.TypeVarianceEnum)">
            <summary>Ctor. </summary>
            <param name="variantStreamName">name of variant stream</param>
            <param name="eventTypes">types of events for variant stream, or empty list</param>
            <param name="typeVariance">enum specifying type variance</param>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.VariantSpec.VariantStreamName">
            <summary>Returns name of variant stream. </summary>
            <returns>name</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.VariantSpec.EventTypes">
            <summary>Returns types allowed for variant streams. </summary>
            <returns>types</returns>
        </member>
        <member name="P:com.espertech.esper.events.vaevent.VariantSpec.TypeVariance">
            <summary>Returns the type variance enum. </summary>
            <returns>type variance</returns>
        </member>
        <member name="T:com.espertech.esper.events.WrapperEventBean">
            <summary>
            Event bean that wraps another event bean adding additional properties.
            <para>
            This can be useful for classes for which the statement adds derived values retaining the original class.
            </para>
            <para>
            The event type of such events is always <see cref="T:com.espertech.esper.events.WrapperEventType"/>. Additional properties are stored in a
            Map.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.WrapperEventBean.#ctor(com.espertech.esper.client.EventBean,System.Collections.Generic.IDictionary{System.String,System.Object},com.espertech.esper.client.EventType)">
            <summary>Ctor.</summary>
            <param name="theEvent">is the wrapped event</param>
            <param name="properties">
            is zero or more property values that embellish the wrapped event
            </param>
            <param name="eventType">is the <see cref="T:com.espertech.esper.events.WrapperEventType"/>.</param>
        </member>
        <member name="M:com.espertech.esper.events.WrapperEventBean.Get(System.String)">
            <summary>
            Returns the value of an event property.  This method is a proxy of the indexer.
            </summary>
            <param name="property">name of the property whose value is to be retrieved</param>
            <returns>
            the value of a simple property with the specified name.
            </returns>
            <throws>  PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed </throws>
        </member>
        <member name="M:com.espertech.esper.events.WrapperEventBean.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.WrapperEventBean.Item(System.String)">
            <summary>
            Returns the value of an event property.
            </summary>
            <value></value>
            <returns> the value of a simple property with the specified name.
            </returns>
            <throws>  PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed </throws>
        </member>
        <member name="P:com.espertech.esper.events.WrapperEventBean.EventType">
            <summary>
            Return the <see cref="P:com.espertech.esper.events.WrapperEventBean.EventType"/> instance that describes the set of properties available for this event.
            </summary>
            <value></value>
            <returns> event type
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.WrapperEventBean.Underlying">
            <summary>
            Get the underlying data object to this event wrapper.
            </summary>
            <value></value>
            <returns> underlying data object, usually either a Map or a bean instance.
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.WrapperEventBean.UnderlyingMap">
            <summary>
            Returns the underlying map storing the additional properties, if any.
            </summary>
            <returns>event property IDictionary</returns>
        </member>
        <member name="P:com.espertech.esper.events.WrapperEventBean.DecoratingProperties">
            <summary>
            Returns decorating properties.
            </summary>
            <value></value>
            <returns>property name and values</returns>
        </member>
        <member name="P:com.espertech.esper.events.WrapperEventBean.UnderlyingEvent">
            <summary>Returns the wrapped event.</summary>
            <returns>wrapped event</returns>
        </member>
        <member name="T:com.espertech.esper.events.WrapperEventBeanCopyMethod">
            <summary>Copy method for wrapper events. </summary>
        </member>
        <member name="M:com.espertech.esper.events.WrapperEventBeanCopyMethod.#ctor(com.espertech.esper.events.WrapperEventType,com.espertech.esper.events.EventAdapterService,com.espertech.esper.events.EventBeanCopyMethod)">
            <summary>Ctor. </summary>
            <param name="wrapperEventType">wrapper type</param>
            <param name="eventAdapterService">event adapter creation</param>
            <param name="underlyingCopyMethod">copy method for the underlying event</param>
        </member>
        <member name="T:com.espertech.esper.events.WrapperEventBeanMapCopyMethod">
            <summary>
            Copy method for wrapper events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.WrapperEventBeanMapCopyMethod.#ctor(com.espertech.esper.events.WrapperEventType,com.espertech.esper.events.EventAdapterService)">
            <summary>Ctor. </summary>
            <param name="wrapperEventType">wrapper type</param>
            <param name="eventAdapterService">event adapter</param>
        </member>
        <member name="T:com.espertech.esper.events.WrapperEventBeanMapWriter">
            <summary>
            Writer for wrapper events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.WrapperEventBeanMapWriter.#ctor(System.String[])">
            <summary>Ctor. </summary>
            <param name="properties">to write</param>
        </member>
        <member name="T:com.espertech.esper.events.WrapperEventBeanPropertyWriter">
            <summary>Writer for a set of wrapper event object values. </summary>
        </member>
        <member name="M:com.espertech.esper.events.WrapperEventBeanPropertyWriter.#ctor(com.espertech.esper.events.EventPropertyWriter[])">
            <summary>Ctor. </summary>
            <param name="writerArr">writers are writing properties.</param>
        </member>
        <member name="T:com.espertech.esper.events.WrapperEventBeanUndCopyMethod">
            <summary>Copy method for underlying events. </summary>
        </member>
        <member name="M:com.espertech.esper.events.WrapperEventBeanUndCopyMethod.#ctor(com.espertech.esper.events.WrapperEventType,com.espertech.esper.events.EventAdapterService,com.espertech.esper.events.EventBeanCopyMethod)">
            <summary>Ctor. </summary>
            <param name="wrapperEventType">wrapper type</param>
            <param name="eventAdapterService">for creating events</param>
            <param name="underlyingCopyMethod">for copying the underlying event</param>
        </member>
        <member name="T:com.espertech.esper.events.WrapperEventBeanUndWriter">
            <summary>Writer for values to a wrapper event. </summary>
        </member>
        <member name="M:com.espertech.esper.events.WrapperEventBeanUndWriter.#ctor(com.espertech.esper.events.EventBeanWriter)">
            <summary>Ctor. </summary>
            <param name="undWriter">writer to the underlying object</param>
        </member>
        <member name="T:com.espertech.esper.events.WrapperEventType">
            <summary>
            An event type that adds zero or more fields to an existing event type. 
            <para>
            The additional fields are represented as a Map. Any queries to event properties are 
            first held against the additional fields, and secondly are handed through to the 
            underlying event. 
            </para>
            <para>
            If this event type is to add information to another wrapper event type (wrapper to 
            wrapper), then it is the responsibility of the creating logic to use the existing event 
            type and add to it. 
            </para>
            <para>
            Uses a the map event type <seealso cref="T:com.espertech.esper.events.map.MapEventType"/>
            to represent the mapped properties. This is because the additional properties can also be 
            beans or complex types and the Map event type handles these nicely.
            </para>
            </summary>
        </member>
        <member name="F:com.espertech.esper.events.WrapperEventType._metadata">
            <summary>event type metadata </summary>
        </member>
        <member name="F:com.espertech.esper.events.WrapperEventType._underlyingEventType">
            <summary>The underlying wrapped event type. </summary>
        </member>
        <member name="F:com.espertech.esper.events.WrapperEventType._underlyingMapType">
            <summary>The map event type that provides the additional properties. </summary>
        </member>
        <member name="M:com.espertech.esper.events.WrapperEventType.#ctor(com.espertech.esper.events.EventTypeMetadata,System.String,System.Int32,com.espertech.esper.client.EventType,System.Collections.Generic.IDictionary{System.String,System.Object},com.espertech.esper.events.EventAdapterService)">
            <summary>
            Ctor.
            </summary>
            <param name="metadata">event type metadata</param>
            <param name="typeName">is the event type name</param>
            <param name="eventTypeId">The event type id.</param>
            <param name="eventType">is the event type of the wrapped events</param>
            <param name="properties">is the additional properties this wrapper adds</param>
            <param name="eventAdapterService">is the service for resolving unknown wrapped types</param>
        </member>
        <member name="P:com.espertech.esper.events.WrapperEventType.UnderlyingEventType">
            <summary>Returns the wrapped event type. </summary>
            <value>wrapped type</value>
        </member>
        <member name="P:com.espertech.esper.events.WrapperEventType.UnderlyingMapType">
            <summary>Returns the map type. </summary>
            <value>map type providing additional properties.</value>
        </member>
        <member name="T:com.espertech.esper.events.WriteablePropertyDescriptor">
            <summary>Descriptor for writable properties. </summary>
        </member>
        <member name="M:com.espertech.esper.events.WriteablePropertyDescriptor.#ctor(System.String,System.Type,System.Reflection.MethodInfo)">
            <summary>Ctor. </summary>
            <param name="propertyName">name of property</param>
            <param name="type">type</param>
            <param name="writeMethod">optional write methods</param>
        </member>
        <member name="M:com.espertech.esper.events.WriteablePropertyDescriptor.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. 
                            </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.events.WriteablePropertyDescriptor.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:com.espertech.esper.events.WriteablePropertyDescriptor.PropertyName">
            <summary>Returns property name. </summary>
            <value>property name</value>
        </member>
        <member name="P:com.espertech.esper.events.WriteablePropertyDescriptor.PropertyType">
            <summary>Returns property type. </summary>
            <value>property type</value>
        </member>
        <member name="P:com.espertech.esper.events.WriteablePropertyDescriptor.WriteMethod">
            <summary>Returns write methods. </summary>
            <value>write methods</value>
        </member>
        <member name="T:com.espertech.esper.events.xml.BaseXMLEventType">
            <summary>
            Base class for XML event types.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.xml.BaseXMLEventType.#ctor(com.espertech.esper.events.EventTypeMetadata,System.Int32,com.espertech.esper.client.ConfigurationEventTypeXMLDOM,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Ctor.
            </summary>
            <param name="metadata">event type metadata</param>
            <param name="eventTypeId">The event type id.</param>
            <param name="configurationEventTypeXMLDOM">is the XML DOM configuration such as root element and schema names</param>
            <param name="eventAdapterService">for registration and lookup of types</param>
        </member>
        <member name="M:com.espertech.esper.events.xml.BaseXMLEventType.GetExtendedContext">
            <summary>
            Gets the extended context.
            </summary>
            <value>The extended context.</value>
        </member>
        <member name="M:com.espertech.esper.events.xml.BaseXMLEventType.Initialize(System.Collections.Generic.ICollection{com.espertech.esper.client.ConfigurationEventTypeXMLDOM.XPathPropertyDesc},System.Collections.Generic.IList{com.espertech.esper.events.ExplicitPropertyDescriptor})">
            <summary>
            Set the preconfigured event properties resolved by XPath expression.
            </summary>
            <param name="explicitXPathProperties">are preconfigured event properties</param>
            <param name="additionalSchemaProperties">the explicit properties</param>
        </member>
        <member name="M:com.espertech.esper.events.xml.BaseXMLEventType.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.BaseXMLEventType.RootElementName">
            <summary>
            Returns the name of the root element.
            </summary>
            <returns>
            root element name
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.BaseXMLEventType.NamespaceContext">
            <summary>
            Sets the namespace context for use in XPath expression resolution.
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.xml.BaseXMLEventType.ConfigurationEventTypeXMLDOM">
            <summary>
            Returns the configuration XML for the XML type.
            </summary>
            <returns>
            config XML
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.xml.DOMAttributeAndElementGetter">
            <summary>
            Getter for both attribute and element values, attributes are checked first.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.xml.DOMPropertyGetter">
            <summary>
            Shortcut-getter for DOM underlying objects.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.xml.DOMPropertyGetter.GetValueAsNode(System.Xml.XmlNode)">
            <summary>
            Returns a property value as a node.
            </summary>
            <param name="node">to evaluate</param>
            <returns>
            value node
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.DOMPropertyGetter.GetValueAsNode(System.Xml.Linq.XObject)">
            <summary>
            Returns a property value as a node.
            </summary>
            <param name="node">to evaluate</param>
            <returns>
            value node
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.DOMPropertyGetter.GetValueAsNodeArray(System.Xml.XmlNode)">
            <summary>
            Returns a property value that is indexed as a node array.
            </summary>
            <param name="node">to evaluate</param>
            <returns>
            nodes
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.DOMPropertyGetter.GetValueAsNodeArray(System.Xml.Linq.XObject)">
            <summary>
            Returns a property value that is indexed as a node array.
            </summary>
            <param name="node">to evaluate</param>
            <returns>
            nodes
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.DOMPropertyGetter.GetValueAsFragment(System.Xml.XmlNode)">
            <summary>
            Returns a property value as a fragment.
            </summary>
            <param name="node">to evaluate</param>
            <returns>
            fragment
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.DOMPropertyGetter.GetValueAsFragment(System.Xml.Linq.XObject)">
            <summary>
            Returns a property value as a fragment.
            </summary>
            <param name="node">to evaluate</param>
            <returns>
            fragment
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.DOMAttributeAndElementGetter.#ctor(System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="propertyName">property name</param>
        </member>
        <member name="T:com.espertech.esper.events.xml.DOMComplexElementGetter">
            <summary>
            Getter for a DOM complex element.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.xml.DOMComplexElementGetter.#ctor(System.String,com.espertech.esper.events.xml.FragmentFactory,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="propertyName">property name</param>
            <param name="fragmentFactory">for creating fragments</param>
            <param name="isArray">if this is an array property</param>
        </member>
        <member name="T:com.espertech.esper.events.xml.DOMConvertingArrayGetter">
            <summary>
            Getter for converting a Node child nodes into an array.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.xml.DOMConvertingArrayGetter.#ctor(com.espertech.esper.events.xml.DOMPropertyGetter,System.Type)">
            <summary>
            Ctor.
            </summary>
            <param name="domPropertyGetter">getter</param>
            <param name="returnType">component type</param>
        </member>
        <member name="T:com.espertech.esper.events.xml.DOMConvertingGetter">
            <summary>
            Getter for parsing node content to a desired type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.xml.DOMConvertingGetter.#ctor(System.String,com.espertech.esper.events.xml.DOMPropertyGetter,System.Type)">
            <summary>
            Ctor.
            </summary>
            <param name="propertyExpression">property name</param>
            <param name="domPropertyGetter">getter</param>
            <param name="returnType">desired result type</param>
        </member>
        <member name="T:com.espertech.esper.events.xml.DOMIndexedGetter">
            <summary>
            Getter for retrieving a value at a certain index.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.xml.DOMIndexedGetter.#ctor(System.String,System.Int32,com.espertech.esper.events.xml.FragmentFactory)">
            <summary>
            Ctor.
            </summary>
            <param name="propertyName">property name</param>
            <param name="index">index</param>
            <param name="fragmentFactory">for creating fragments if required</param>
        </member>
        <member name="T:com.espertech.esper.events.xml.DOMMapGetter">
            <summary>
            DOM getter for Map-property.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.xml.DOMMapGetter.#ctor(System.String,System.String,com.espertech.esper.events.xml.FragmentFactory)">
            <summary>
            Ctor.
            </summary>
            <param name="propertyName">property name</param>
            <param name="mapKey">key in map</param>
            <param name="fragmentFactory">for creating fragments</param>
        </member>
        <member name="T:com.espertech.esper.events.xml.DOMNestedPropertyGetter">
            <summary>
            Getter for nested properties in a DOM tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.xml.DOMNestedPropertyGetter.#ctor(System.Collections.Generic.ICollection{com.espertech.esper.client.EventPropertyGetter},com.espertech.esper.events.xml.FragmentFactory)">
            <summary>
            Ctor.
            </summary>
            <param name="getterChain">is the chain of getters to retrieve each nested property</param>
            <param name="fragmentFactory">for creating fragments</param>
        </member>
        <member name="T:com.espertech.esper.events.xml.DOMSimpleAttributeGetter">
            <summary>
            Getter for simple attributes in a DOM node.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.xml.DOMSimpleAttributeGetter.#ctor(System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="propertyName">property name</param>
        </member>
        <member name="M:com.espertech.esper.events.xml.ExtendedContext.#ctor(System.Xml.Xsl.XsltContext,com.espertech.esper.compat.xml.IXPathFunctionResolver,com.espertech.esper.compat.xml.IXPathVariableResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.events.xml.ExtendedContext"/> class.
            </summary>
            <param name="baseContext">The base context.</param>
            <param name="functionResolver">The function resolver.</param>
            <param name="variableResolver">The variable resolver.</param>
        </member>
        <member name="M:com.espertech.esper.events.xml.ExtendedContext.AddNamespace(System.String,System.String)">
            <summary>
            Adds the given namespace to the collection.
            </summary>
            <param name="prefix">The prefix to associate with the namespace being added. Use String.Empty to add a default namespace.
            Note:
            If the
            <see cref="T:System.Xml.XmlNamespaceManager"/> will be used for resolving namespaces in an XML Path Language (XPath)
            expression, a prefix must be specified. If an XPath expression does not include a prefix, it is assumed that the namespace
            Uniform Resource Identifier (URI) is the empty namespace. For more information about XPath expressions and the
            <see cref="T:System.Xml.XmlNamespaceManager"/>, refer to the <see cref="M:System.Xml.XmlNode.SelectNodes(System.String)"/> and 
            <see cref="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)"/> methods.
            </param>
            <param name="uri">The namespace to add.</param>
            <exception cref="T:System.ArgumentException">
            The value for <paramref name="prefix"/> is "xml" or "xmlns".
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value for <paramref name="prefix"/> or <paramref name="uri"/> is null.
            </exception>
        </member>
        <member name="M:com.espertech.esper.events.xml.ExtendedContext.CompareDocument(System.String,System.String)">
            <summary>
            When overridden in a derived class, compares the base Uniform Resource Identifiers (URIs) of two documents based upon the
            order the documents were loaded by the XSLT processor (that is, the <see cref="T:System.Xml.Xsl.XslTransform"/> class).
            </summary>
            <param name="baseUri">The base URI of the first document to compare.</param>
            <param name="nextbaseUri">The base URI of the second document to compare.</param>
            <returns>
            An integer value describing the relative order of the two base URIs: -1 if <paramref name="baseUri"/> occurs before <paramref name="nextbaseUri"/>; 0 if the two base URIs are identical; and 1 if <paramref name="baseUri"/> occurs after <paramref name="nextbaseUri"/>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.ExtendedContext.ResolveVariable(System.String,System.String)">
            <summary>
            When overridden in a derived class, resolves a variable reference and returns an
            <see cref="T:System.Xml.Xsl.IXsltContextVariable"/> representing the variable.
            </summary>
            <param name="prefix">The prefix of the variable as it appears in the XPath expression.</param>
            <param name="name">The name of the variable.</param>
            <returns>
            An <see cref="T:System.Xml.Xsl.IXsltContextVariable"/> representing the variable at runtime.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.ExtendedContext.ResolveFunction(System.String,System.String,System.Xml.XPath.XPathResultType[])">
            <summary>
            When overridden in a derived class, resolves a function reference and returns an
            <see cref="T:System.Xml.Xsl.IXsltContextFunction"/> representing the function. The <see cref="T:System.Xml.Xsl.IXsltContextFunction"/>
            is used at execution time to get the return value of the function.
            </summary>
            <param name="prefix">The prefix of the function as it appears in the XPath expression.</param>
            <param name="name">The name of the function.</param>
            <param name="argTypes">An array of argument types for the function being resolved. This allows you to select between methods with the same name (for example, overloaded methods).</param>
            <returns>
            An <see cref="T:System.Xml.Xsl.IXsltContextFunction"/> representing the function.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.ExtendedContext.PreserveWhitespace(System.Xml.XPath.XPathNavigator)">
            <summary>
            When overridden in a derived class, evaluates whether to preserve white space nodes or strip them for the given context.
            </summary>
            <param name="node">The white space node that is to be preserved or stripped in the current context.</param>
            <returns>
            Returns true if the white space is to be preserved or false if the white space is to be stripped.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.ExtendedContext.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.ExtendedContext.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:com.espertech.esper.events.xml.ExtendedContext.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.ExtendedContext.PushScope">
            <summary>
            Pushes a namespace scope onto the stack.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.xml.ExtendedContext.PopScope">
            <summary>
            Pops a namespace scope off the stack.
            </summary>
            <returns>
            true if there are namespace scopes left on the stack; false if there are no more namespaces to pop.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.ExtendedContext.RemoveNamespace(System.String,System.String)">
            <summary>
            Removes the given namespace for the given prefix.
            </summary>
            <param name="prefix">The prefix for the namespace</param>
            <param name="uri">The namespace to remove for the given prefix. The namespace removed is from the current namespace scope. Namespaces outside the current scope are ignored.</param>
            <exception cref="T:System.ArgumentNullException">
            The value of <paramref name="prefix"/> or <paramref name="uri"/> is null.
            </exception>
        </member>
        <member name="M:com.espertech.esper.events.xml.ExtendedContext.GetEnumerator">
            <summary>
            Returns an enumerator to use to iterate through the namespaces in the <see cref="T:System.Xml.XmlNamespaceManager"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> containing the prefixes stored by the <see cref="T:System.Xml.XmlNamespaceManager"/>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.ExtendedContext.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
            <summary>
            Gets a collection of namespace names keyed by prefix which can be used to enumerate the namespaces currently in scope.
            </summary>
            <param name="scope">An <see cref="T:System.Xml.XmlNamespaceScope"/> value that specifies the type of namespace nodes to return.</param>
            <returns>
            A <see cref="T:System.Collections.Specialized.StringDictionary"/> object containing a collection of namespace and prefix pairs currently in scope.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.ExtendedContext.LookupNamespace(System.String)">
            <summary>
            Gets the namespace URI for the specified prefix.
            </summary>
            <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass String.Empty.</param>
            <returns>
            Returns the namespace URI for <paramref name="prefix"/> or null if there is no mapped namespace. The returned string is atomized.
            For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable"/>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.ExtendedContext.LookupPrefix(System.String)">
            <summary>
            Finds the prefix declared for the given namespace URI.
            </summary>
            <param name="uri">The namespace to resolve for the prefix.</param>
            <returns>
            The matching prefix. If there is no mapped prefix, the method returns String.Empty. If a null value is supplied, then null is returned.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.ExtendedContext.HasNamespace(System.String)">
            <summary>
            Gets a value indicating whether the supplied prefix has a namespace defined for the current pushed scope.
            </summary>
            <param name="prefix">The prefix of the namespace you want to find.</param>
            <returns>
            true if there is a namespace defined; otherwise, false.
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.ExtendedContext.DefaultNamespace">
            <summary>
            Gets the namespace URI for the default namespace.
            </summary>
            <value></value>
            <returns>
            Returns the namespace URI for the default namespace, or String.Empty if there is no default namespace.
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.ExtendedContext.Whitespace">
            <summary>
            When overridden in a derived class, gets a value indicating whether to include white space nodes in the output.
            </summary>
            <value></value>
            <returns>true to check white space nodes in the source document for inclusion in the output; false to not evaluate white space nodes. The default is true.
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.ExtendedContext.NameTable">
            <summary>
            Gets the <see cref="T:System.Xml.XmlNameTable"/> associated with this object.
            </summary>
            <value></value>
            <returns>
            The <see cref="T:System.Xml.XmlNameTable"/> used by this object.
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.xml.FragmentFactory">
            <summary>
            Factory for event fragments for use with DOM getters.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.xml.FragmentFactory.GetEvent(System.Xml.Linq.XObject)">
            <summary>
            Gets the event.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.FragmentFactory.GetEvent(System.Xml.XmlNode)">
            <summary>
            Returns a fragment for the node.
            </summary>
            <param name="result">node to fragment</param>
            <returns>
            fragment
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.xml.FragmentFactoryDOMGetter">
            <summary>
            Factory for fragments for DOM getters.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.xml.FragmentFactoryDOMGetter.#ctor(com.espertech.esper.events.EventAdapterService,com.espertech.esper.events.xml.BaseXMLEventType,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="eventAdapterService">for event type lookup</param>
            <param name="xmlEventType">the originating type</param>
            <param name="propertyExpression">property expression</param>
        </member>
        <member name="T:com.espertech.esper.events.xml.FragmentFactoryXPathPredefinedGetter">
            <summary>
            Fragment factory for use with XPath explicit properties.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.xml.FragmentFactoryXPathPredefinedGetter.#ctor(com.espertech.esper.events.EventAdapterService,System.String,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="eventAdapterService">for event type lookup</param>
            <param name="eventTypeName">name to look up</param>
            <param name="propertyName">property</param>
        </member>
        <member name="T:com.espertech.esper.events.xml.NamespaceNamePair">
            <summary>
            Pair of namespace and name.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.xml.NamespaceNamePair.#ctor(System.String,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="namespace">namespace</param>
            <param name="name">name</param>
        </member>
        <member name="P:com.espertech.esper.events.xml.NamespaceNamePair.Name">
            <summary>
            Returns the name.
            </summary>
            <returns>
            name part
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.NamespaceNamePair.Namespace">
            <summary>
            Returns the namespace.
            </summary>
            <returns>
            namespace part
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.xml.SchemaElement">
            <summary>
            Schema element is a simple or complex element.
            </summary>
        </member>
        <member name="T:com.espertech.esper.events.xml.SchemaItem">
            <summary>
            Marker interface for a schema (simple or complex) element or attribute.
            </summary>
        </member>
        <member name="P:com.espertech.esper.events.xml.SchemaElement.Namespace">
            <summary>
            Returns the namespace.
            </summary>
            <returns>
            namespace
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.SchemaElement.Name">
            <summary>
            Returns the name.
            </summary>
            <returns>
            name
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.SchemaElement.IsArray">
            <summary>
            Returns true for unbounded or max>1
            </summary>
            <returns>
            array indicator
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.xml.SchemaElementComplex">
            <summary>
            Represents a complex element possibly with attributes, simple elements, other
            complex child elements.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.xml.SchemaElementComplex.#ctor(System.String,System.String,System.Collections.Generic.IList{com.espertech.esper.events.xml.SchemaItemAttribute},System.Collections.Generic.IList{com.espertech.esper.events.xml.SchemaElementComplex},System.Collections.Generic.IList{com.espertech.esper.events.xml.SchemaElementSimple},System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="name">the element name</param>
            <param name="namespace">the element namespace</param>
            <param name="attributes">the attributes or empty if none</param>
            <param name="children">the child complex elements or empty if none</param>
            <param name="simpleElements">the simple elements or empty if none</param>
            <param name="isArray">if unbound or max&gt;1</param>
        </member>
        <member name="M:com.espertech.esper.events.xml.SchemaElementComplex.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.SchemaElementComplex.Attributes">
            <summary>
            Returns attributes.
            </summary>
            <returns>
            attributes
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.SchemaElementComplex.ComplexElements">
            <summary>
            Returns complex child elements.
            </summary>
            <returns>
            attributes
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.SchemaElementComplex.SimpleElements">
            <summary>
            Returns simple child elements.
            </summary>
            <returns>
            simple child elements
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.SchemaElementComplex.Name">
            <summary>
            Returns the name.
            </summary>
            <returns>
            name
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.SchemaElementComplex.Namespace">
            <summary>
            Returns the namespace of the element.
            </summary>
            <value></value>
            <returns>
            namespace
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.SchemaElementComplex.IsArray">
            <summary>
            Returns true if unbound or max greater one.
            </summary>
            <returns>
            true if array
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.SchemaElementComplex.OptionalSimpleType">
            <summary>
            Gets or sets the type of the optional simple.  If not null, then the
            complex element itself has a type defined for it.
            </summary>
            <value>The type of the optional simple.</value>
        </member>
        <member name="P:com.espertech.esper.events.xml.SchemaElementComplex.OptionalSimpleTypeName">
            <summary>
            Gets or sets the name of the optional simple type.  If not null then 
            the complex element itself has a type defined for it.
            </summary>
            <value>The name of the optional simple type.</value>
        </member>
        <member name="T:com.espertech.esper.events.xml.SchemaElementSimple">
            <summary>
            Represents a simple value in a schema.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.xml.SchemaElementSimple.#ctor(System.String,System.String,System.Xml.Schema.XmlSchemaSimpleType,System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Ctor.
            </summary>
            <param name="name">name</param>
            <param name="namespace">namespace</param>
            <param name="type">is the simple element type</param>
            <param name="typeName">name of type</param>
            <param name="isArray">if unbound</param>
            <param name="fractionDigits">The fraction digits.</param>
        </member>
        <member name="P:com.espertech.esper.events.xml.SchemaElementSimple.SimpleType">
            <summary>
            Returns type.
            </summary>
            <returns>
            type
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.SchemaElementSimple.TypeName">
            <summary>
            Returns the type name.
            </summary>
            <returns>
            type name
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.SchemaElementSimple.Name">
            <summary>
            Returns element name.
            </summary>
            <returns>
            element name
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.xml.SchemaItemAttribute">
            <summary>
            Represents an attribute in a schema.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.xml.SchemaItemAttribute.#ctor(System.String,System.String,System.Xml.Schema.XmlSchemaSimpleType,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="namespace">namespace</param>
            <param name="name">name</param>
            <param name="type">attribute type</param>
            <param name="typeName">attribute type name</param>
        </member>
        <member name="P:com.espertech.esper.events.xml.SchemaItemAttribute.Namespace">
            <summary>
            Returns the namespace.
            </summary>
            <returns>
            namespace
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.SchemaItemAttribute.Name">
            <summary>
            Returns the name.
            </summary>
            <returns>
            name
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.SchemaItemAttribute.SimpleType">
            <summary>
            Returns the type.
            </summary>
            <returns>
            type
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.SchemaItemAttribute.TypeName">
            <summary>
            Returns the type name.
            </summary>
            <returns>
            type name
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.xml.SchemaModel">
            <summary>
            Represents a XSD schema or other metadata for a class of XML documents.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.xml.SchemaModel.#ctor(System.Collections.Generic.IList{com.espertech.esper.events.xml.SchemaElementComplex},System.Collections.Generic.IList{System.String})">
            <summary>
            Ctor.
            </summary>
            <param name="components">the top level components.</param>
            <param name="namespaces">list of namespaces</param>
        </member>
        <member name="M:com.espertech.esper.events.xml.SchemaModel.#ctor(com.espertech.esper.events.xml.SchemaElementComplex,System.Collections.Generic.IList{System.String})">
            <summary>
            Ctor.
            </summary>
            <param name="component">top level component</param>
            <param name="namespaces">list of namespaces</param>
        </member>
        <member name="P:com.espertech.esper.events.xml.SchemaModel.Components">
            <summary>
            Returns top-level components.
            </summary>
            <returns>
            components
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.SchemaModel.Namespaces">
            <summary>
            Returns namespaces.
            </summary>
            <returns>
            namespaces
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.xml.SchemaUtil">
            <summary> Utility class for querying schema information.</summary>
            <author>  pablo
            </author>
        </member>
        <member name="M:com.espertech.esper.events.xml.SchemaUtil.ToReturnType(com.espertech.esper.events.xml.SchemaItem)">
            <summary>
            Returns the Type-type of the schema item.
            </summary>
            <param name="item">to to determine type for</param>
            <returns>
            type
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.SchemaUtil.ToReturnType(System.Xml.XPath.XPathResultType,System.String)">
            <summary>
            Returns the native type based on XPathConstants qname and an optional cast-to
            type, if provided.
            </summary>
            <param name="resultType">qname</param>
            <param name="optionalCastToTypeName">Name of the optional cast to type.</param>
            <returns>return type</returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.SchemaUtil.ToReturnType(System.Xml.XPath.XPathResultType,System.Type)">
            <summary>
            Returns the native type based on XPathConstants qname and an optional cast-to
            type, if provided.
            </summary>
            <param name="resultType">qname</param>
            <param name="optionalCastToType">null or cast-to type</param>
            <returns>
            return type
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.SchemaUtil.SimpleTypeToQName(System.Xml.Schema.XmlSchemaSimpleType)">
            <summary>
            Returns the XPathConstants type for a given Xerces type definition.
            </summary>
            <param name="definition">the schema element definition.</param>
            <returns>XPathConstants type</returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.SchemaUtil.FindPropertyMapping(com.espertech.esper.events.xml.SchemaElementComplex,System.String)">
            <summary>
            Finds an apropiate definition for the given property, starting at the * given
            definition. First look if the property es an attribute. If not, look at simple and
            then child element definitions.
            </summary>
            <param name="def">the definition to start looking</param>
            <param name="property">the property to look for</param>
            <returns>
            schema element or null if not found
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.SchemaUtil.Serialize(System.Xml.XmlNode)">
            <summary>
            Serialize the given node.
            </summary>
            <param name="doc">node to serialize</param>
            <returns>
            serialized node string
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.xml.SchemaXMLEventType">
            <summary>
            EventType for xml events that have a Schema. Mapped and Indexed properties are
            supported. All property types resolved via the declared xsd types. Can access
            attributes. Validates the property string at construction time.
            </summary>
            <author>pablo </author>
        </member>
        <member name="M:com.espertech.esper.events.xml.SchemaXMLEventType.#ctor(com.espertech.esper.events.EventTypeMetadata,System.Int32,com.espertech.esper.client.ConfigurationEventTypeXMLDOM,com.espertech.esper.events.xml.SchemaModel,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Ctor.
            </summary>
            <param name="eventTypeMetadata">event type metadata</param>
            <param name="eventTypeId">The event type id.</param>
            <param name="config">configuration for type</param>
            <param name="schemaModel">the schema representation</param>
            <param name="eventAdapterService">type lookup and registration</param>
        </member>
        <member name="T:com.espertech.esper.events.xml.SchemaXMLPropertyParser">
            <summary>
            Parses event property names and transforms to XPath expressions using the schema
            information supplied. Supports the nested, indexed and mapped event properties.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.xml.SchemaXMLPropertyParser.GetXPathResolution(System.String,com.espertech.esper.events.xml.XPathNamespaceContext,System.String,System.String,com.espertech.esper.events.xml.SchemaModel,com.espertech.esper.events.EventAdapterService,com.espertech.esper.events.xml.BaseXMLEventType,System.Boolean,System.String)">
            <summary>
            Return the xPath corresponding to the given property. The propertyName String
            may be simple, nested, indexed or mapped.
            </summary>
            <param name="propertyName">is the event property name</param>
            <param name="namespace">is the default namespace</param>
            <param name="schemaModel">is the schema model</param>
            <param name="xPathContext">is the xpath factory instance to use</param>
            <param name="rootElementName">is the name of the root element</param>
            <param name="eventAdapterService">for type lookup and creation</param>
            <param name="xmlEventType">the resolving type</param>
            <param name="isAllowFragment">whether fragmenting is allowed</param>
            <param name="defaultNamespace">default namespace</param>
            <returns>
            xpath expression
            </returns>
            <throws>EPException is there are XPath errors</throws>
        </member>
        <member name="M:com.espertech.esper.events.xml.SimpleXElementType.#ctor(com.espertech.esper.events.EventTypeMetadata,System.Int32,com.espertech.esper.client.ConfigurationEventTypeXMLDOM,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Ctor.
            </summary>
            <param name="eventTypeMetadata">event type metadata</param>
            <param name="eventTypeId">The event type id.</param>
            <param name="configurationEventTypeXMLDOM">configures the event type</param>
            <param name="eventAdapterService">for type looking and registration</param>
        </member>
        <member name="T:com.espertech.esper.events.xml.SimpleXMLEventType">
            <summary>
            Optimistic try to resolve the property string into an appropiate xPath,
            and use it as getter.
            Mapped and Indexed properties supported.
            Because no type information is given, all property are resolved to String.
            No namespace support.
            Cannot access to xml attributes, only elements content.
            <para>
            If an xsd is present, then use <see cref="T:com.espertech.esper.events.xml.SchemaXMLEventType"/>
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.xml.SimpleXMLEventType.#ctor(com.espertech.esper.events.EventTypeMetadata,System.Int32,com.espertech.esper.client.ConfigurationEventTypeXMLDOM,com.espertech.esper.events.EventAdapterService)">
            <summary>
            Ctor.
            </summary>
            <param name="eventTypeMetadata">event type metadata</param>
            <param name="eventTypeId">The event type id.</param>
            <param name="configurationEventTypeXMLDOM">configures the event type</param>
            <param name="eventAdapterService">for type looking and registration</param>
        </member>
        <member name="T:com.espertech.esper.events.xml.SimpleXMLPropertyParser">
            <summary>
            Parses event property names and transforms to XPath expressions. Supports
            nested, indexed and mapped event properties.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.xml.SimpleXMLPropertyParser.Parse(Antlr.Runtime.Tree.ITree,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Return the xPath corresponding to the given property. The propertyName String
            may be simple, nested, indexed or mapped.
            </summary>
            <param name="ast">is the property tree AST</param>
            <param name="propertyName">is the property name to parse</param>
            <param name="rootElementName">is the name of the root element for generating the XPath expression</param>
            <param name="defaultNamespacePrefix">is the prefix of the default namespace</param>
            <param name="isResolvePropertiesAbsolute">is true to indicate to resolve XPath properties as absolute propsor relative props </param>
            <returns>
            xpath expression
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.XEventBean.#ctor(System.Xml.Linq.XObject,com.espertech.esper.client.EventType)">
            <summary>
            Ctor.
            </summary>
            <param name="theEvent">is the node with event property information</param>
            <param name="type">is the event type for this event wrapper</param>
        </member>
        <member name="M:com.espertech.esper.events.xml.XEventBean.Get(System.String)">
            <summary>
            Returns the value of an event property.  This method is a proxy of the indexer.
            </summary>
            <param name="property">name of the property whose value is to be retrieved</param>
            <returns>
            the value of a simple property with the specified name.
            </returns>
            <throws>  PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed </throws>
        </member>
        <member name="P:com.espertech.esper.events.xml.XEventBean.EventType">
            <summary>
            Return the <see cref="P:com.espertech.esper.events.xml.XEventBean.EventType"/> instance that describes the set of properties available for this event.
            </summary>
            <value></value>
            <returns> event type
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.XEventBean.Underlying">
            <summary>
            Get the underlying data object to this event wrapper.
            </summary>
            <value></value>
            <returns> underlying data object, usually either a Map or a bean instance.
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.XEventBean.Item(System.String)">
            <summary>
            Returns the value of an event property.
            </summary>
            <value></value>
            <returns> the value of a simple property with the specified name.
            </returns>
            <throws>  PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed </throws>
        </member>
        <member name="T:com.espertech.esper.events.xml.XMLEventBean">
            <summary>
            EventBean wrapper for XML documents.  Currently only instances of System.Xml.XmlNode can be used
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.xml.XMLEventBean.#ctor(System.Xml.XmlNode,com.espertech.esper.client.EventType)">
            <summary>
            Ctor.
            </summary>
            <param name="theEvent">is the node with event property information</param>
            <param name="type">is the event type for this event wrapper</param>
        </member>
        <member name="M:com.espertech.esper.events.xml.XMLEventBean.Get(System.String)">
            <summary>
            Returns the value of an event property.  This method is a proxy of the indexer.
            </summary>
            <param name="property">name of the property whose value is to be retrieved</param>
            <returns>
            the value of a simple property with the specified name.
            </returns>
            <throws>  PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed </throws>
        </member>
        <member name="P:com.espertech.esper.events.xml.XMLEventBean.EventType">
            <summary>
            Return the <see cref="P:com.espertech.esper.events.xml.XMLEventBean.EventType"/> instance that describes the set of properties available for this event.
            </summary>
            <value></value>
            <returns> event type
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.XMLEventBean.Underlying">
            <summary>
            Get the underlying data object to this event wrapper.
            </summary>
            <value></value>
            <returns> underlying data object, usually either a Map or a bean instance.
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.XMLEventBean.Item(System.String)">
            <summary>
            Returns the value of an event property.
            </summary>
            <value></value>
            <returns> the value of a simple property with the specified name.
            </returns>
            <throws>  PropertyAccessException - if there is no property of the specified name, or the property cannot be accessed </throws>
        </member>
        <member name="T:com.espertech.esper.events.xml.XPathNamespaceContext">
            <summary>
            Provides the namespace context information for compiling XPath expressions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.xml.XPathNamespaceContext.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.xml.XPathNamespaceContext.SetDefaultNamespace(System.String)">
            <summary>
            Sets the default namespace.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:com.espertech.esper.events.xml.XPathNamespaceContext.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.XPathNamespaceContext.ResolveVariable(System.String,System.String)">
            <summary>
            When overridden in a derived class, resolves a variable reference and returns an <see cref="T:System.Xml.Xsl.IXsltContextVariable"/> representing the variable.
            </summary>
            <param name="prefix">The prefix of the variable as it appears in the XPath expression.</param>
            <param name="name">The name of the variable.</param>
            <returns>
            An <see cref="T:System.Xml.Xsl.IXsltContextVariable"/> representing the variable at runtime.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.XPathNamespaceContext.ResolveFunction(System.String,System.String,System.Xml.XPath.XPathResultType[])">
            <summary>
            When overridden in a derived class, resolves a function reference and returns an <see cref="T:System.Xml.Xsl.IXsltContextFunction"/> representing the function. The <see cref="T:System.Xml.Xsl.IXsltContextFunction"/> is used at execution time to get the return value of the function.
            </summary>
            <param name="prefix">The prefix of the function as it appears in the XPath expression.</param>
            <param name="name">The name of the function.</param>
            <param name="ArgTypes">An array of argument types for the function being resolved. This allows you to select between methods with the same name (for example, overloaded methods).</param>
            <returns>
            An <see cref="T:System.Xml.Xsl.IXsltContextFunction"/> representing the function.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.XPathNamespaceContext.PreserveWhitespace(System.Xml.XPath.XPathNavigator)">
            <summary>
            When overridden in a derived class, evaluates whether to preserve white space nodes or strip them for the given context.
            </summary>
            <param name="node">The white space node that is to be preserved or stripped in the current context.</param>
            <returns>
            Returns true if the white space is to be preserved or false if the white space is to be stripped.
            </returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.XPathNamespaceContext.CompareDocument(System.String,System.String)">
            <summary>
            When overridden in a derived class, compares the base Uniform Resource Identifiers (URIs) of two documents based upon the order the documents were loaded by the XSLT processor (that is, the <see cref="T:System.Xml.Xsl.XslTransform"/> class).
            </summary>
            <param name="baseUri">The base URI of the first document to compare.</param>
            <param name="nextbaseUri">The base URI of the second document to compare.</param>
            <returns>
            An integer value describing the relative order of the two base URIs: -1 if <paramref name="baseUri"/> occurs before <paramref name="nextbaseUri"/>; 0 if the two base URIs are identical; and 1 if <paramref name="baseUri"/> occurs after <paramref name="nextbaseUri"/>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.events.xml.XPathNamespaceContext.Whitespace">
            <summary>
            When overridden in a derived class, gets a value indicating whether to include white space nodes in the output.
            </summary>
            <value></value>
            <returns>
            true to check white space nodes in the source document for inclusion in the output; false to not evaluate white space nodes. The default is true.
            </returns>
        </member>
        <member name="T:com.espertech.esper.events.xml.XPathPropertyArrayItemGetter">
            <summary>
            Getter for XPath explicit properties returning an element in an array.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.xml.XPathPropertyArrayItemGetter.#ctor(com.espertech.esper.client.EventPropertyGetter,System.Int32,com.espertech.esper.events.xml.FragmentFactory)">
            <summary>
            Ctor.
            </summary>
            <param name="getter">property getter returning the parent node</param>
            <param name="index">to get item at</param>
            <param name="fragmentFactory">for creating fragments, or null if not creating fragments</param>
        </member>
        <member name="T:com.espertech.esper.events.xml.XPathPropertyGetter">
            <summary>
            Getter for properties of DOM xml events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.xml.XPathPropertyGetter.#ctor(System.String,System.String,System.Xml.XPath.XPathExpression,System.Xml.XPath.XPathResultType,System.Type,com.espertech.esper.events.xml.FragmentFactory)">
            <summary>
            Ctor.
            </summary>
            <param name="propertyName">is the name of the event property for which this getter gets values</param>
            <param name="expressionText">is the property expression itself</param>
            <param name="xPathExpression">is a compile XPath expression</param>
            <param name="resultType">is the resulting type</param>
            <param name="optionalCastToType">if non-null then the return value of the xpath expression is cast to this value</param>
            <param name="fragmentFactory">for creating fragments, or null in none to be created</param>
        </member>
        <member name="T:com.espertech.esper.events.xml.XSDSchemaMapper">
            <summary>
            Helper class for mapping a XSD schema model to an internal representation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.xml.XSDSchemaMapper.LoadSchema(System.Uri,System.String)">
            <summary>
            Loads a schema from the provided Uri.
            </summary>
            <param name="uri">The URI.</param>
            <param name="schemaText">The schema text.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.XSDSchemaMapper.LoadAndMap(System.String,System.String,System.Int32)">
            <summary>
            Loading and mapping of the schema to the internal representation.
            </summary>
            <param name="schemaResource">schema to load and map.</param>
            <param name="schemaText">The schema text.</param>
            <param name="maxRecusiveDepth">depth of maximal recursive element</param>
            <returns>model</returns>
        </member>
        <member name="F:com.espertech.esper.events.xml.XSDSchemaMapper._schemaTypeDictionary">
            <summary>
            Dictionary that maps qualified names to schema types.
            </summary>
        </member>
        <member name="F:com.espertech.esper.events.xml.XSDSchemaMapper._schemaElementDictionary">
            <summary>
            Dictionary that maps qualified names to schema elements.
            </summary>
        </member>
        <member name="F:com.espertech.esper.events.xml.XSDSchemaMapper._namesspaceList">
            <summary>
            Namespace list
            </summary>
        </member>
        <member name="F:com.espertech.esper.events.xml.XSDSchemaMapper._components">
            <summary>
            Component list
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.xml.XSDSchemaMapper.ResolveSchemaType(System.Xml.Schema.XmlSchema,System.Xml.XmlQualifiedName)">
            <summary>
            Resolves a schema type.
            </summary>
            <param name="xsModel">The xs model.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.XSDSchemaMapper.ResolveSimpleType(System.Xml.Schema.XmlSchema,System.Xml.XmlQualifiedName)">
            <summary>
            Resolves a simple schema type.
            </summary>
            <param name="xsModel">The xs model.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.XSDSchemaMapper.ResolveElement(System.Xml.XmlQualifiedName)">
            <summary>
            Resolves an element.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.XSDSchemaMapper.Map(System.Xml.Schema.XmlSchema,System.Uri,System.Int32)">
            <summary>
            Maps the specified XSD schema into the internal model for the schema.
            </summary>
            <param name="xsModel">The xs model.</param>
            <param name="schemaLocation">The schema location.</param>
            <param name="maxRecursiveDepth">The max recursive depth.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.XSDSchemaMapper.CreateModel">
            <summary>
            Creates the model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.events.xml.XSDSchemaMapper.Import(System.Xml.Schema.XmlSchema,System.Uri,System.Int32)">
            <summary>
            Imports the specified schema.
            </summary>
            <param name="xsModel">The xs model.</param>
            <param name="schemaLocation">The schema location.</param>
            <param name="maxRecursiveDepth">The max recursive depth.</param>
        </member>
        <member name="M:com.espertech.esper.events.xml.XSDSchemaMapper.ProcessComplexElement(System.Xml.Schema.XmlSchema,System.String,System.String,System.Xml.Schema.XmlSchemaElement,System.Xml.Schema.XmlSchemaComplexType,System.Boolean,System.Collections.Generic.Stack{com.espertech.esper.events.xml.NamespaceNamePair},System.Int32)">
            <summary>
            Processes the complex element.
            </summary>
            <param name="xsModel">The schema model.</param>
            <param name="complexElementName">Name of the complex element.</param>
            <param name="complexElementNamespace">The complex element namespace.</param>
            <param name="complexActualElement">The complex actual element.</param>
            <param name="complexType">Type of the complex.</param>
            <param name="isArray">if set to <c>true</c> [is array].</param>
            <param name="nameNamespaceStack">The name namespace stack.</param>
            <param name="maxRecursiveDepth">The max recursive depth.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.filter.EventEvaluator">
            <summary>
            Interface for matching an event instance based on the event's property values to
            filters, specifically filter parameter constants or ranges. 
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.EventEvaluator.MatchEvent(com.espertech.esper.client.EventBean,System.Collections.Generic.ICollection{com.espertech.esper.filter.FilterHandle})">
            <summary>Perform the matching of an event based on the event property values, adding any callbacks for matches found to the matches list. </summary>
            <param name="theTheEvent">is the event object wrapper to obtain event property values from</param>
            <param name="matches">accumulates the matching filter callbacks</param>
        </member>
        <member name="T:com.espertech.esper.filter.EventTypeIndex">
            <summary>
            Mapping of event type to a tree-like structure containing filter parameter constants
            in indexes <seealso cref="T:com.espertech.esper.filter.FilterParamIndexBase"/> and filter callbacks in
            <seealso cref="T:com.espertech.esper.filter.FilterHandleSetNode"/>.
            <para/>
            This class evaluates events for the purpose of filtering by (1) looking up the event's
            <seealso cref="T:com.espertech.esper.client.EventType"/> and (2) asking the subtree for this event type to evaluate
            the event.
            <para/>
            The class performs all the locking required for multithreaded access.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.EventTypeIndex.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.EventTypeIndex.Dispose">
            <summary>
            Destroy the service.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.EventTypeIndex.Add(com.espertech.esper.client.EventType,com.espertech.esper.filter.FilterHandleSetNode)">
            <summary>
            Add a new event type to the index and use the specified node for the root node of 
            its subtree. If the event type already existed, the method will throw an 
            IllegalStateException. 
            </summary>
            <param name="eventType">is the event type to be added to the index</param>
            <param name="rootNode">is the root node of the subtree for filter constant indizes and callbacks</param>
        </member>
        <member name="M:com.espertech.esper.filter.EventTypeIndex.Get(com.espertech.esper.client.EventType)">
            <summary>Returns the root node for the given event type, or null if this event type has not been seen before. </summary>
            <param name="eventType">is an event type</param>
            <returns>the subtree's root node</returns>
        </member>
        <member name="P:com.espertech.esper.filter.EventTypeIndex.Count">
            <summary>Returns the current size of the known event types. </summary>
            <value>collection size</value>
        </member>
        <member name="T:com.espertech.esper.filter.EventTypeIndexBuilder">
            <summary>
            This class is responsible for changes to <seealso cref="T:com.espertech.esper.filter.EventTypeIndex"/> for 
            addition and removal of filters. It delegates the work to make modifications to 
            the filter parameter tree to an <seealso cref="T:com.espertech.esper.filter.IndexTreeBuilder"/>. It enforces 
            a policy that a filter callback can only be added once.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.EventTypeIndexBuilder.#ctor(com.espertech.esper.filter.EventTypeIndex)">
            <summary>Constructor - takes the event type index to manipulate as its parameter. </summary>
            <param name="eventTypeIndex">index to manipulate</param>
        </member>
        <member name="M:com.espertech.esper.filter.EventTypeIndexBuilder.Dispose">
            <summary>Destroy the service. </summary>
        </member>
        <member name="M:com.espertech.esper.filter.EventTypeIndexBuilder.Add(com.espertech.esper.filter.FilterValueSet,com.espertech.esper.filter.FilterHandle)">
            <summary>Add a filter to the event type index structure, and to the filter subtree. Throws an IllegalStateException exception if the callback is already registered. </summary>
            <param name="filterValueSet">is the filter information</param>
            <param name="filterCallback">is the callback</param>
        </member>
        <member name="M:com.espertech.esper.filter.EventTypeIndexBuilder.Remove(com.espertech.esper.filter.FilterHandle)">
            <summary>Remove a filter callback from the given index node. </summary>
            <param name="filterCallback">is the callback to remove</param>
        </member>
        <member name="M:com.espertech.esper.filter.EventTypeIndexBuilder.Take(System.Collections.Generic.ICollection{System.String})">
            <summary>Returns filters for the statement ids. </summary>
            <param name="statementIds">ids to take</param>
            <returns>set of filters for taken statements</returns>
        </member>
        <member name="M:com.espertech.esper.filter.EventTypeIndexBuilder.Apply(com.espertech.esper.filter.FilterSet)">
            <summary>Add the filters, from previously-taken filters. </summary>
            <param name="filterSet">to add</param>
        </member>
        <member name="T:com.espertech.esper.filter.ExprNodeAdapter">
            <summary>
            Adapter for use by <see cref="T:com.espertech.esper.filter.FilterParamIndexBooleanExpr"/> to evaluate bool expressions, providing
            events per stream to expression nodes. Generated by @{link FilterSpecParamExprNode} for
            bool expression filter parameters.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.ExprNodeAdapter.#ctor(com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.client.EventBean[],com.espertech.esper.epl.variable.VariableService)">
            <summary>
            Ctor.
            </summary>
            <param name="exprNode">is the bool expression</param>
            <param name="prototype">is the row of events the we are matching on</param>
            <param name="variableService">for setting variable version for evaluating variables, if required</param>
        </member>
        <member name="M:com.espertech.esper.filter.ExprNodeAdapter.CreateLocalData">
            <summary>
            Creates a local data object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.filter.ExprNodeAdapter.Evaluate(com.espertech.esper.client.EventBean,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Evaluate the bool expression given the event as a stream zero event.
            </summary>
            <param name="theEvent">is the stream zero event (current event)</param>
            <param name="exprEvaluatorContext">The expression evaluator context.</param>
            <returns>bool result of the expression</returns>
        </member>
        <member name="P:com.espertech.esper.filter.ExprNodeAdapter.Prototype">
            <summary>
            Provides the prototype events-per-stream where stream zero is the current stream
            and is filled when the expression is evaluated.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.ExprNodeAdapterBase.#ctor(System.String,com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Ctor.
            </summary>
            <param name="statementName">Name of the statement.</param>
            <param name="exprNode">is the bool expression</param>
            <param name="evaluatorContext">The evaluator context.</param>
        </member>
        <member name="M:com.espertech.esper.filter.ExprNodeAdapterBase.Evaluate(com.espertech.esper.client.EventBean)">
            <summary>Evaluate the bool expression given the event as a stream zero event.  </summary>
            <param name="theEvent">is the stream zero event (current event)</param>
            <returns>bool result of the expression</returns>
        </member>
        <member name="P:com.espertech.esper.filter.ExprNodeAdapterBase.EvaluatorContext">
            <summary>
            Gets the evaluator context.
            </summary>
            <value>The evaluator context.</value>
        </member>
        <member name="P:com.espertech.esper.filter.ExprNodeAdapterBase.StatementName">
            <summary>
            Gets the name of the statement.
            </summary>
            <value>The name of the statement.</value>
        </member>
        <member name="P:com.espertech.esper.filter.ExprNodeAdapterBaseVariables.VariableService">
            <summary>
            Gets the variable service.
            </summary>
            <value>The variable service.</value>
        </member>
        <member name="T:com.espertech.esper.filter.ExprNodeAdapterMultiStream">
            <summary>
            Adapter for use by <seealso cref="T:com.espertech.esper.filter.FilterParamIndexBooleanExpr"/> to evaluate bool expressions, providing events per stream to expression nodes. Generated by @{link FilterSpecParamExprNode} for bool expression filter parameters.
            </summary>
        </member>
        <member name="T:com.espertech.esper.filter.FilterEventHandler">
            <summary>
            Indicate that an event was evaluated by the <see cref="T:com.espertech.esper.filter.FilterService"/>
            which matches the filter specification <see cref="T:com.espertech.esper.filter.FilterSpecCompiled"/>
            associated with this callback.
            </summary>
            <param name="theEvent">the event received that matches the filter specification</param>
        </member>
        <member name="M:com.espertech.esper.filter.ProxyFilterHandleCallback.#ctor(System.Action{com.espertech.esper.client.EventBean,System.Collections.Generic.ICollection{com.espertech.esper.filter.FilterHandleCallback}},System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.filter.ProxyFilterHandleCallback"/> class.
            </summary>
            <param name="matchFound">The match found.</param>
            <param name="isSubSelect">The is sub select.</param>
            <param name="statementId">The statement id.</param>
        </member>
        <member name="M:com.espertech.esper.filter.ProxyFilterHandleCallback.#ctor(System.Action{com.espertech.esper.client.EventBean,System.Collections.Generic.IEnumerable{com.espertech.esper.filter.FilterHandleCallback}},System.Func{System.Boolean},System.Func{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.filter.ProxyFilterHandleCallback"/> class.
            </summary>
            <param name="matchFound">The match found.</param>
            <param name="isSubSelect">The is sub select.</param>
            <param name="statementId">The statement id.</param>
        </member>
        <member name="M:com.espertech.esper.filter.ProxyFilterHandleCallback.MatchFound(com.espertech.esper.client.EventBean,System.Collections.Generic.ICollection{com.espertech.esper.filter.FilterHandleCallback})">
            <summary>
            Indicate that an event was evaluated by the <seealso cref="T:com.espertech.esper.filter.FilterService"/> which
            matches the filter specification <seealso cref="T:com.espertech.esper.filter.FilterSpecCompiled"/> associated with this callback.
            </summary>
            <param name="theEvent">the event received that matches the filter specification</param>
            <param name="allStmtMatches">All STMT matches.</param>
        </member>
        <member name="P:com.espertech.esper.filter.ProxyFilterHandleCallback.StatementId">
            <summary>
            Gets the statement id.
            </summary>
            <value>The statement id.</value>
        </member>
        <member name="P:com.espertech.esper.filter.ProxyFilterHandleCallback.IsSubSelect">
            <summary>
            Returns true if the filter applies to subselects.
            </summary>
            <value>subselect filter</value>
        </member>
        <member name="T:com.espertech.esper.filter.FilterHandleSetNode">
            <summary>
            This class holds a list of indizes storing filter constants in <seealso cref="T:com.espertech.esper.filter.FilterParamIndexBase"/> 
            nodes and a set of <seealso cref="T:com.espertech.esper.filter.FilterHandle"/>. An instance of this class represents a leaf-node 
            (no indizes stored, just filter callbacks) but can also be non-leaf (some indizes exist) in a filter 
            evaluation tree. Events are evaluated by asking each of the indizes to evaluate the event and by 
            adding any filter callbacks in this node to the "matches" list of callbacks. 
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterHandleSetNode.#ctor">
            <summary>Constructor. </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterHandleSetNode.IsEmpty">
            <summary>
            Returns an indication of whether there are any callbacks or index nodes at all in this set.
            NOTE: the client to this method must use the read-write lock of this object to lock, if 
            required by the client code.
            </summary>
            <returns>
            true if there are neither indizes nor filter callbacks stored, false if either exist.
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterHandleSetNode.MatchEvent(com.espertech.esper.client.EventBean,System.Collections.Generic.ICollection{com.espertech.esper.filter.FilterHandle})">
            <summary>
            Evaluate an event by asking each index to match the event. Any filter callbacks at this node 
            automatically match the event and do not need to be further evaluated, and are thus added to 
            the "matches" list of callbacks. NOTE: This client should not use the lock before calling this
             method.
            </summary>
            <param name="theEvent">is the event wrapper supplying the event property values</param>
            <param name="matches">is the list of callbacks to add to for any matches found</param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterHandleSetNode.Contains(com.espertech.esper.filter.FilterHandle)">
            <summary>Returns an indication whether the filter callback exists in this node. NOTE: the client to this method must use the read-write lock of this object to lock, if required by the client code. </summary>
            <param name="filterCallback">is the filter callback to check for</param>
            <returns>true if callback found, false if not</returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterHandleSetNode.Add(com.espertech.esper.filter.FilterParamIndexBase)">
            <summary>Add an index. The same index can be added twice - there is no checking done. NOTE: the client to this method must use the read-write lock of this object to lock, if required by the client code. </summary>
            <param name="index">index to add</param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterHandleSetNode.Remove(com.espertech.esper.filter.FilterParamIndexBase)">
            <summary>Remove an index, returning true if it was found and removed or false if not in collection. NOTE: the client to this method must use the read-write lock of this object to lock, if required by the client code. </summary>
            <param name="index">is the index to remove</param>
            <returns>true if found, false if not existing</returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterHandleSetNode.Add(com.espertech.esper.filter.FilterHandle)">
            <summary>Add a filter callback. The filter callback set allows adding the same callback twice with no effect. If a client to the class needs to check that the callback already existed, the contains method does that. NOTE: the client to this method must use the read-write lock of this object to lock, if required by the client code. </summary>
            <param name="filterCallback">is the callback to add</param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterHandleSetNode.Remove(com.espertech.esper.filter.FilterHandle)">
            <summary>Remove a filter callback, returning true if it was found and removed or false if not in collection. NOTE: the client to this method must use the read-write lock of this object to lock, if required by the client code. </summary>
            <param name="filterCallback">is the callback to remove</param>
            <returns>true if found, false if not existing</returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterHandleSetNode.FilterCallbackCount">
            <summary>
            Returns the number of filter callbacks stored. 
            NOTE: the client to this method must use the read-write lock of this object to lock,
            if required by the client code.
            </summary>
            <value>number of filter callbacks stored</value>
        </member>
        <member name="P:com.espertech.esper.filter.FilterHandleSetNode.NodeRWLock">
            <summary>
            Returns to lock to use for making changes to the filter callback or inzides collections stored by this node.
            </summary>
            <value>lock to use in multithreaded environment</value>
        </member>
        <member name="P:com.espertech.esper.filter.FilterHandleSetNode.Indizes">
            <summary>
            Returns list of indexes - not returning an iterator. Client classes should not change this collection.
            </summary>
            <value>list of indizes</value>
        </member>
        <member name="T:com.espertech.esper.filter.FilterOperator">
            <summary>
            Defines the different operator types available for event filters.
            <para>
            Mathematical notation for defining ranges of floating point numbers is used as defined below:
            <list>
            <item>[a,b] a closed range from value a to value b with the end-points a and b included in the range</item>
            <item>(a,b) an open range from value a to value b with the end-points a and b not included in the range</item>
            <item>[a,b) a half-open range from value a to value b with the end-point a included and end-point b not included in the range</item>
            <item>(a,b] a half-open range from value a to value b with the end-point a not included and end-point b included in the range</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.EQUAL">
            <summary> Exact matches (=).</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.NOT_EQUAL">
            <summary> Exact not matches (!=).</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.IS">
            <summary>Exact matches allowing null (is).</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.IS_NOT">
            <summary>Exact not matches allowing null (is not)</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.LESS">
            <summary> Less (&lt;).</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.LESS_OR_EQUAL">
            <summary> Less or equal (&lt;=).</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.GREATER_OR_EQUAL">
            <summary> Greater or equal (&gt;=).</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.GREATER">
            <summary> Greater (&gt;).</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.RANGE_OPEN">
            <summary> Range contains neither endpoint, i.e. (a,b)</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.RANGE_CLOSED">
            <summary> Range contains low and high endpoint, i.e. [a,b]</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.RANGE_HALF_OPEN">
            <summary> Range includes low endpoint but not high endpoint, i.e. [a,b)</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.RANGE_HALF_CLOSED">
            <summary> Range includes high endpoint but not low endpoint, i.e. (a,b]</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.NOT_RANGE_OPEN">
            <summary> Inverted-Range contains neither endpoint, i.e. (a,b)</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.NOT_RANGE_CLOSED">
            <summary> Inverted-Range contains low and high endpoint, i.e. [a,b]</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.NOT_RANGE_HALF_OPEN">
            <summary> Inverted-Range includes low endpoint but not high endpoint, i.e. [a,b)</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.NOT_RANGE_HALF_CLOSED">
            <summary> Inverted-Range includes high endpoint but not low endpoint, i.e. (a,b]</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.IN_LIST_OF_VALUES">
            <summary> List of values using the 'in' operator</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.NOT_IN_LIST_OF_VALUES">
            <summary> Not-in list of values using the 'not in' operator</summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterOperator.BOOLEAN_EXPRESSION">
            <summary> Boolean expression filter operator</summary>
        </member>
        <member name="T:com.espertech.esper.filter.FilterOperatorHelper">
            <summary>
            Contains static methods useful for help with FilterOperators.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterOperatorHelper.IsRangeOperator(com.espertech.esper.filter.FilterOperator)">
            <summary> Returns true for all range operators, false if not a range operator.</summary>
            <returns> true for ranges, false for anyting else
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterOperatorHelper.IsInvertedRangeOperator(com.espertech.esper.filter.FilterOperator)">
            <summary>
            Returns true for inverted range operators, false if not an inverted range operator.
            </summary>
            <returns>true for inverted ranges, false for anyting else</returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterOperatorHelper.IsComparisonOperator(com.espertech.esper.filter.FilterOperator)">
            <summary> Returns true for relational comparison operators which excludes the = equals operator, else returns false.</summary>
            <returns> true for lesser or greater -type operators, false for anyting else
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterOperatorHelper.ParseComparisonOperator(System.String)">
            <summary> Parse the comparison operator returning null if not a valid operator.</summary>
            <param name="op">is the lesser then or other compare op
            </param>
            <returns> FilterOperator or null if not valid
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterOperatorHelper.ParseRangeOperator(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Parse the range operator from booleans describing whether the Start or end values are exclusive.
            </summary>
            <param name="isInclusiveFirst">true if low endpoint is inclusive, false if not</param>
            <param name="isInclusiveLast">true if high endpoint is inclusive, false if not</param>
            <param name="isNot">if set to <c>true</c> [is not].</param>
            <returns>
            FilterOperator for the combination inclusive or exclusive
            </returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterParamExprMap">
            <summary>
            A two-sided map for filter parameters mapping filter expression nodes to filter 
            parameters and back. For use in optimizing filter expressions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamExprMap.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamExprMap.Put(com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.filter.FilterSpecParam)">
            <summary>Add a node and filter param. </summary>
            <param name="exprNode">is the node to add</param>
            <param name="param">is null if the expression node has not optimized form</param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamExprMap.RemoveEntry(com.espertech.esper.filter.FilterSpecParam)">
            <summary>Removes a filter parameter and it's associated expression node </summary>
            <param name="param">is the parameter to remove</param>
            <returns>expression node removed</returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamExprMap.RemoveValue(com.espertech.esper.filter.FilterSpecParam)">
            <summary>Remove a filter parameter leaving the expression node in place. </summary>
            <param name="param">filter parameter to remove</param>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamExprMap.UnassignedExpressions">
            <summary>Returns all expression nodes for which no filter parameter exists. </summary>
            <value>list of expression nodes</value>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamExprMap.FilterParams">
            <summary>Returns all filter parameters. </summary>
            <value>filter parameters</value>
        </member>
        <member name="T:com.espertech.esper.filter.FilterParamIndexBase">
            <summary>
            Each implementation of this abstract class represents an index of filter parameter constants supplied in filter
            parameters in filter specifications that feature the same event property and operator.
            <p>
            For example, a filter with a parameter of "count EQUALS 10" would be represented as index
            for a property named "count" and for a filter operator typed "EQUALS". The index
            would store a value of "10" in its internal structure.
            </p>
            <p>
            Implementations make sure that the type of the Object constant in get and put calls matches the event property type.
            </p>
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexBase.#ctor(com.espertech.esper.filter.FilterOperator)">
            <summary>Constructor.</summary>
            <param name="filterOperator">is the type of comparison performed.</param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexBase.Remove(System.Object)">
            <summary>
            Remove the event evaluation instance for the given constant. Returns true if
            the constant was found, or false if not.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded writes, the ReadWriteLock property must supply a lock for this purpose.
            </summary>
            <param name="filterConstant">is the value supplied in the filter paremeter</param>
            <returns>true if found and removed, false if not found</returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexBase.MatchEvent(com.espertech.esper.client.EventBean,System.Collections.Generic.ICollection{com.espertech.esper.filter.FilterHandle})">
            <summary>
            Perform the matching of an event based on the event property values, adding any callbacks for matches found to the matches list.
            </summary>
            <param name="theTheEvent">is the event object wrapper to obtain event property values from</param>
            <param name="matches">accumulates the matching filter callbacks</param>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexBase.Item(System.Object)">
            <summary>
            Get the event evaluation instance associated with the constant. Returns null if no entry found for the constant.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded access, the ReadWriteLock property must supply a lock for this purpose.
            
            Store the event evaluation instance for the given constant. Can override an existing value
            for the same constant.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded access, the ReadWriteLock property must supply a lock for this purpose.
            </summary>
            <param name="filterConstant">
            is the constant supplied in the event filter parameter
            </param>
            <returns>
            event evaluator stored for the filter constant, or null if not found
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexBase.Count">
            <summary>
            Return the number of distinct filter parameter constants stored.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded writes, the ReadWriteLock property must supply a lock for this purpose.
            </summary>
            <returns>Number of entries in index</returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexBase.ReadWriteLock">
            <summary>Supplies the lock for protected access.</summary>
            <returns>lock</returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexBase.FilterOperator">
            <summary>Returns the filter operator that the index matches for.</summary>
            <returns>filter operator</returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterParamIndexBooleanExpr">
            <summary>
            Index that simply maintains a list of bool expressions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexBooleanExpr.#ctor">
            <summary>Constructs the index for multiple-exact matches. </summary>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexBooleanExpr.Item(System.Object)">
            <summary>
            Get the event evaluation instance associated with the constant. Returns null if no entry found for the constant.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded access, the ReadWriteLock property must supply a lock for this purpose.
            
            Store the event evaluation instance for the given constant. Can override an existing value
            for the same constant.
            The calling class must make sure that access to the underlying resource is protected
            for multi-threaded access, the ReadWriteLock property must supply a lock for this purpose.
            </summary>
            <param name="filterConstant">
            is the constant supplied in the event filter parameter
            </param>
            <returns>
            event evaluator stored for the filter constant, or null if not found
            </returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterParamIndexCompare">
            <summary>
            Index for filter parameter constants for the comparison operators (less, greater, etc). 
            The implementation is based on the SortedMap implementation of TreeMap. The index only 
            accepts numeric constants. It keeps a lower and upper bounds of all constants in the 
            index for fast range checking, since the assumption is that frequently values fall 
            within a range.
            </summary>
        </member>
        <member name="T:com.espertech.esper.filter.FilterParamIndexLookupableBase">
            <summary>
            Each implementation of this abstract class represents an index of filter parameter constants supplied in 
            filter parameters in filter specifications that feature the same event property and operator. 
            <para/>
            For example, a filter with a parameter of "count EQUALS 10" would be represented as index for a property 
            named "count" and for a filter operator typed "EQUALS". The index would store a value of "10" in its 
            internal structure. 
            <para/> 
            Implementations make sure that the type of the Object constant in get and put calls matches the event property type. 
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexLookupableBase.#ctor(com.espertech.esper.filter.FilterOperator,com.espertech.esper.filter.FilterSpecLookupable)">
            <summary>Constructor. </summary>
            <param name="filterOperator">is the type of comparison performed.</param>
            <param name="lookupable">is the lookupable</param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexLookupableBase.Get(System.Object)">
            <summary>
            Get the event evaluation instance associated with the constant. Returns null if no entry found 
            for the constant. The calling class must make sure that access to the underlying resource is 
            protected for multi-threaded access, the GetReadWriteLock() method must supply a lock for this 
            purpose.
            </summary>
            <param name="filterConstant">is the constant supplied in the event filter parameter</param>
            <returns>
            event evaluator stored for the filter constant, or null if not found
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterParamIndexLookupableBase.Put(System.Object,com.espertech.esper.filter.EventEvaluator)">
            <summary>
            Store the event evaluation instance for the given constant. Can override an existing value for 
            the same constant. The calling class must make sure that access to the underlying resource is 
            protected for multi-threaded access, the GetReadWriteLock() method must supply a lock for this 
            purpose.
            </summary>
            <param name="filterConstant">is the constant supplied in the filter parameter</param>
            <param name="evaluator">to be stored for the constant</param>
        </member>
        <member name="P:com.espertech.esper.filter.FilterParamIndexLookupableBase.Lookupable">
            <summary>
            Gets or sets the lookupable.
            </summary>
            <value>The lookupable.</value>
        </member>
        <member name="T:com.espertech.esper.filter.FilterParamIndexCompareString">
            <summary>
            Index for filter parameter constants for the comparison operators (less, greater, etc). 
            The implementation is based on the SortedMap implementation of TreeMap. The index only 
            accepts String constants. It keeps a lower and upper bounds of all constants in the 
            index for fast range checking, since the assumption is that frequently values fall 
            within a range. 
            </summary>
        </member>
        <member name="T:com.espertech.esper.filter.FilterParamIndexDoubleRange">
            <summary>
            Index for filter parameter constants for the range operators (range open/closed/half). 
            The implementation is based on the SortedMap implementation of TreeMap and stores only 
            expression parameter values of type DoubleRange.
            </summary>
        </member>
        <member name="T:com.espertech.esper.filter.FilterParamIndexDoubleRangeBase">
            <summary>
            Index for filter parameter constants for the range operators (range open/closed/half). 
            The implementation is based on the SortedMap implementation of TreeMap and stores only
            expression parameter values of type DoubleRange.
            </summary>
        </member>
        <member name="T:com.espertech.esper.filter.FilterParamIndexDoubleRangeInverted">
            <summary>
            Index for filter parameter constants for the not range operators (range open/closed/half). 
            The implementation is based on the SortedMap implementation of TreeMap and stores only 
            expression parameter values of type DoubleRange.
            </summary>
        </member>
        <member name="T:com.espertech.esper.filter.FilterParamIndexEquals">
            <summary>
            Index for filter parameter constants to match using the equals (=) operator. The
            implementation is based on a regular HashMap.
            </summary>
        </member>
        <member name="T:com.espertech.esper.filter.FilterParamIndexEqualsBase">
            <summary>
            Index for filter parameter constants to match using the equals (=) operator. The implementation is based on a 
            regular HashMap.
            </summary>
        </member>
        <member name="T:com.espertech.esper.filter.FilterParamIndexEqualsIs">
            <summary>
            Index for filter parameter constants to match using the equals (=) operator. 
            The implementation is based on a regular HashMap.
            </summary>
        </member>
        <member name="T:com.espertech.esper.filter.FilterParamIndexIn">
            <summary>
            Index for filter parameter constants to match using the 'in' operator to match against a 
            supplied set of values (i.e. multiple possible exact matches). The implementation is based 
            on a regular Dictionary.
            </summary>
        </member>
        <member name="T:com.espertech.esper.filter.FilterParamIndexNotEquals">
            <summary>Index for filter parameter constants to match using the equals (=) operator. The implementation is based on a regular HashMap. </summary>
        </member>
        <member name="T:com.espertech.esper.filter.FilterParamIndexNotEqualsBase">
            <summary>
            Index for filter parameter constants to match using the equals (=) operator. The 
            implementation is based on a regular HashMap.
            </summary>
        </member>
        <member name="T:com.espertech.esper.filter.FilterParamIndexNotEqualsIs">
            <summary>
            Index for filter parameter constants to match using the equals (=) operator.
            The implementation is based on a regular HashMap.
            </summary>
        </member>
        <member name="T:com.espertech.esper.filter.FilterParamIndexNotIn">
            <summary>
            Index for filter parameter constants to match using the 'not in' operator to match 
            against a all other values then the supplied set of values.
            </summary>
        </member>
        <member name="T:com.espertech.esper.filter.FilterParamIndexStringRange">
            <summary>
            Index for filter parameter constants for the range operators (range open/closed/half). 
            The implementation is based on the SortedMap implementation of TreeMap and stores only 
            expression parameter values of type DoubleRange.
            </summary>
        </member>
        <member name="T:com.espertech.esper.filter.FilterParamIndexStringRangeInverted">
            <summary>Index for filter parameter constants for the not range operators (range open/closed/half). The implementation is based on the SortedMap implementation of TreeMap and stores only expression parameter values of type StringRange. </summary>
        </member>
        <member name="T:com.espertech.esper.filter.FilterService">
            <summary>
            Interface for filtering events by event type and event property values. Allows adding and removing filters.
            <para/> 
            Filters are defined by a <seealso cref="T:com.espertech.esper.filter.FilterSpecCompiled"/> and are associated with a
            <seealso cref="T:com.espertech.esper.filter.FilterHandle"/> callback. Implementations may decide if the same filter callback can be
            registered twice for different or some filter specifications. 
            <para/> 
            The performance of an implementation of this service is crucial in achieving a high overall event throughput.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterService.Evaluate(com.espertech.esper.client.EventBean,System.Collections.Generic.ICollection{com.espertech.esper.filter.FilterHandle})">
            <summary>
            Finds matching filters to the event passed in and collects their associated callback method.
            </summary>
            <param name="theEvent">is the event to be matched against filters</param>
            <param name="matches">is a collection that is populated via add method with any handles for matching filters</param>
            <returns>filter current version</returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterService.Evaluate(com.espertech.esper.client.EventBean,System.Collections.Generic.ICollection{com.espertech.esper.filter.FilterHandle},System.String)">
            <summary>
            Finds matching filters to the event passed in and collects their associated callback method, for a particular statement only
            </summary>
            <param name="theEvent">is the event to be matched against filters</param>
            <param name="matches">is a collection that is populated via add method with any handles for matching filters</param>
            <param name="statementId">statement for which to return results for</param>
            <returns>filter current version</returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterService.Add(com.espertech.esper.filter.FilterValueSet,com.espertech.esper.filter.FilterHandle)">
            <summary>
            Add a filter for events as defined by the filter specification, and register a callback to be invoked upon evaluation of an event that matches the filter spec.
            </summary>
            <param name="filterValueSet">is a specification of filter parameters, containsevent type information, event property values and operators</param>
            <param name="callback">is the callback to be invoked when the filter matches an event</param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterService.Remove(com.espertech.esper.filter.FilterHandle)">
            <summary>
            Remove a filter callback.
            </summary>
            <param name="callback">is the callback to be removed</param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterService.ResetStats">
            <summary>
            Reset the number of events evaluated
            </summary>
        </member>
        <member name="P:com.espertech.esper.filter.FilterService.NumEventsEvaluated">
            <summary>
            Return a count of the number of events evaluated by this service.
            </summary>
            <value>count of invocations of evaluate method</value>
        </member>
        <member name="P:com.espertech.esper.filter.FilterService.FiltersVersion">
            <summary>
            Returns filter version.
            </summary>
            <value>filter version</value>
        </member>
        <member name="T:com.espertech.esper.filter.FilterServiceImpl">
            <summary>
            Implementation of the filter service interface. Does not allow the same filter callback to be added more then once.
            </summary>
        </member>
        <member name="T:com.espertech.esper.filter.FilterServiceSPI">
            <summary>Service provider interface for filter service. </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterServiceSPI.Take(System.Collections.Generic.ICollection{System.String})">
            <summary>Take a set of statements of out the active filters, returning a save-set of filters. </summary>
            <param name="statementId">statement ids to remove</param>
            <returns>filters</returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterServiceSPI.Apply(com.espertech.esper.filter.FilterSet)">
            <summary>Apply a set of previously taken filters. </summary>
            <param name="filterSet">to apply</param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterServiceSPI.AddFilterServiceListener(com.espertech.esper.filter.FilterServiceListener)">
            <summary>Add activity listener. </summary>
            <param name="filterServiceListener">to add</param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterServiceSPI.RemoveFilterServiceListener(com.espertech.esper.filter.FilterServiceListener)">
            <summary>Remove activity listener. </summary>
            <param name="filterServiceListener">to remove</param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterServiceImpl.#ctor">
            <summary>Constructor. </summary>
        </member>
        <member name="T:com.espertech.esper.filter.FilterServiceListener">
            <summary>Listener to filter activity. </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterServiceListener.Filtering(com.espertech.esper.client.EventBean,System.Collections.Generic.ICollection{com.espertech.esper.filter.FilterHandle},System.String)">
            <summary>Indicates an event being filtered. </summary>
            <param name="theEvent">event</param>
            <param name="matches">matches found</param>
            <param name="statementId">optional statement id if for a statement</param>
        </member>
        <member name="T:com.espertech.esper.filter.FilterServiceProvider">
            <summary>
            Static factory for implementations of the <see cref="T:com.espertech.esper.filter.FilterService"/> interface.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterServiceProvider.NewService">
            <summary> Creates an implementation of the FilterEvaluationService interface.</summary>
            <returns> implementation
            </returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterSet">
            <summary>Holder object for a set of filters for one or more statements. </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSet.#ctor(System.Collections.Generic.List{com.espertech.esper.filter.FilterSetEntry})">
            <summary>Ctor. </summary>
            <param name="filters">set of filters</param>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSet.Filters">
            <summary>Returns the filters. </summary>
            <value>filters</value>
        </member>
        <member name="T:com.espertech.esper.filter.FilterSetEntry">
            <summary>
            Entry to a <seealso cref="T:com.espertech.esper.filter.FilterSet"/> filter set taken from a <seealso cref="T:com.espertech.esper.filter.FilterService"/>.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSetEntry.#ctor(com.espertech.esper.filter.FilterHandle,com.espertech.esper.filter.FilterValueSet)">
            <summary>Ctor. </summary>
            <param name="handle">handle</param>
            <param name="filterValueSet">values</param>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSetEntry.Handle">
            <summary>Returns the handle. </summary>
            <value>handle</value>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSetEntry.FilterValueSet">
            <summary>Returns filters. </summary>
            <value>filters</value>
        </member>
        <member name="T:com.espertech.esper.filter.FilterSpecCompiled">
            <summary>
            Contains the filter criteria to sift through events. The filter criteria are the event 
            class to look for and a set of parameters (attribute names, operators and constant/range 
            values). 
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecCompiled.#ctor(com.espertech.esper.client.EventType,System.String,System.Collections.Generic.IList{com.espertech.esper.filter.FilterSpecParam},com.espertech.esper.epl.property.PropertyEvaluator)">
            <summary>Constructor - validates parameter list against event type, throws exception if invalid property names or mismatcing filter operators are found. </summary>
            <param name="eventType">is the event type</param>
            <param name="filterParameters">is a list of filter parameters</param>
            <param name="eventTypeName">is the name of the event type</param>
            <param name="optionalPropertyEvaluator">optional if evaluating properties returned by filtered events</param>
            <throws>ArgumentException if validation invalid</throws>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecCompiled.GetValueSet(com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.epl.expression.ExprEvaluatorContext,System.Collections.Generic.IList{com.espertech.esper.filter.FilterValueSetParam})">
            <summary>
            Returns the values for the filter, using the supplied result events to ask filter parameters for the value to filter for.
            </summary>
            <param name="matchedEvents">contains the result events to use for determining filter values</param>
            <param name="evaluatorContext">The evaluator context.</param>
            <param name="addendum">The addendum.</param>
            <returns>filter values</returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecCompiled.EqualsTypeAndFilter(com.espertech.esper.filter.FilterSpecCompiled)">
            <summary>Compares only the type and filter portion and not the property evaluation portion. </summary>
            <param name="other">filter to compare</param>
            <returns>true if same</returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecCompiled.FilterForEventType">
            <summary>Returns type of event to filter for. </summary>
            <value>event type</value>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecCompiled.Parameters">
            <summary>Returns list of filter parameters. </summary>
            <value>list of filter params</value>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecCompiled.FilterForEventTypeName">
            <summary>Returns the event type name. </summary>
            <value>event type name</value>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecCompiled.OptionalPropertyEvaluator">
            <summary>Return the evaluator for property value if any is attached, or none if none attached. </summary>
            <value>property evaluator</value>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecCompiled.ResultEventType">
            <summary>
            Returns the result event type of the filter specification.
            </summary>
            <value>event type</value>
        </member>
        <member name="T:com.espertech.esper.filter.FilterSpecCompiler">
            <summary>
            Helper to compile (validate and optimize) filter expressions as used in pattern
            and filter-based streams.
            </summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterSpecCompiler.PROPERTY_NAME_BOOLEAN_EXPRESSION">
            <summary>Assigned for filter parameters that are based on bool expression and not on any particular property name. <para /> Keeping this artificial property name is a simplification as optimized filter parameters generally keep a property name. </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecCompiler.MakeFilterSpec(com.espertech.esper.client.EventType,System.String,System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode},com.espertech.esper.epl.spec.PropertyEvalSpec,System.Collections.Generic.IDictionary{System.String,com.espertech.esper.collection.Pair{com.espertech.esper.client.EventType,System.String}},System.Collections.Generic.IDictionary{System.String,com.espertech.esper.collection.Pair{com.espertech.esper.client.EventType,System.String}},com.espertech.esper.epl.core.StreamTypeService,System.String,com.espertech.esper.core.service.StatementContext,System.Collections.Generic.ICollection{System.Int32})">
            <summary>
            Factory method for compiling filter expressions into a filter specification for use with filter service.
            </summary>
            <param name="eventType">is the filtered-out event type</param>
            <param name="eventTypeName">is the name of the event type</param>
            <param name="filterExpessions">is a list of filter expressions</param>
            <param name="optionalPropertyEvalSpec">specification for evaluating properties</param>
            <param name="taggedEventTypes">is a map of stream names (tags) and event types available</param>
            <param name="arrayEventTypes">is a map of name tags and event type per tag for repeat-expressions that generate an array of events</param>
            <param name="streamTypeService">is used to set rules for resolving properties</param>
            <param name="optionalStreamName">the stream name, if provided</param>
            <param name="statementContext">context for statement</param>
            <param name="assignedTypeNumberStack">The assigned type number stack.</param>
            <returns>compiled filter specification</returns>
            <throws>ExprValidationException if the expression or type validations failed</throws>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecCompiler.ValidateAllowSubquery(System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode},com.espertech.esper.epl.core.StreamTypeService,com.espertech.esper.core.service.StatementContext,System.Collections.Generic.IDictionary{System.String,com.espertech.esper.collection.Pair{com.espertech.esper.client.EventType,System.String}},System.Collections.Generic.IDictionary{System.String,com.espertech.esper.collection.Pair{com.espertech.esper.client.EventType,System.String}})">
            <summary>Validates expression nodes and returns a list of validated nodes. </summary>
            <param name="exprNodes">is the nodes to validate</param>
            <param name="streamTypeService">is provding type information for each stream</param>
            <param name="taggedEventTypes">pattern tagged types</param>
            <param name="arrayEventTypes">@return list of validated expression nodes</param>
            <returns>expr nodes</returns>
            <param name="statementContext">context</param>
            <throws>ExprValidationException for validation errors</throws>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecCompiler.Consolidate(com.espertech.esper.filter.FilterParamExprMap,System.String)">
            <summary>
            Consolidates the specified filter param expr map.
            </summary>
            <param name="filterParamExprMap">The filter param expr map.</param>
            <param name="statementName">Name of the statement.</param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecCompiler.MakeFilterParam(com.espertech.esper.epl.expression.ExprNode,System.Collections.Generic.IDictionary{System.String,com.espertech.esper.collection.Pair{com.espertech.esper.client.EventType,System.String}},System.Collections.Generic.IDictionary{System.String,com.espertech.esper.collection.Pair{com.espertech.esper.client.EventType,System.String}},com.espertech.esper.epl.expression.ExprEvaluatorContext,System.String)">
            <summary>
            For a given expression determine if this is optimizable and create the filter parameter representing the expression, or null if not optimizable.
            </summary>
            <param name="constituent">is the expression to look at</param>
            <param name="taggedEventTypes">event types and their tags</param>
            <param name="arrayEventTypes">@return filter parameter representing the expression, or null</param>
            <param name="exprEvaluatorContext">The expr evaluator context.</param>
            <param name="statementName">Name of the statement.</param>
            <returns>FilterSpecParam filter param</returns>
            <throws>ExprValidationException if the expression is invalid</throws>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecLookupable.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="T:com.espertech.esper.filter.FilterSpecParam">
            <summary>
            This class represents one filter parameter in an <seealso cref="T:com.espertech.esper.filter.FilterSpecCompiled"/> filter specification. 
            <para/>
            Each filerting parameter has an attribute name and operator type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParam.#ctor(com.espertech.esper.filter.FilterSpecLookupable,com.espertech.esper.filter.FilterOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.filter.FilterSpecParam"/> class.
            </summary>
            <param name="lookupable">The lookupable.</param>
            <param name="filterOperator">The filter operator.</param>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParam.GetFilterValue(com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Return the filter parameter constant to filter for.
            </summary>
            <param name="matchedEvents">is the prior results that can be used to determine filter parameters</param>
            <param name="evaluatorContext">The evaluator context.</param>
            <returns>filter parameter constant's value</returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecParam.FilterOperator">
            <summary>Returns the filter operator type. </summary>
            <value>filter operator type</value>
        </member>
        <member name="T:com.espertech.esper.filter.FilterSpecParamComparator">
            <summary>
            Sort comparator for filter parameters that sorts filter parameters according to filter operator type.
            </summary>
        </member>
        <member name="F:com.espertech.esper.filter.FilterSpecParamComparator.SortOrder">
            <summary>
            Defines the sort order among filter operator types. The idea is to sort EQUAL-type operators first 
            then RANGE then other operators, ie. sorting from a more restrictive (usually, not necessarily, really 
            depends on the client application) to a less restrictive operand.
            </summary>
        </member>
        <member name="T:com.espertech.esper.filter.FilterSpecParamConstant">
            <summary>
            This class represents a single, constant value filter parameter in an <seealso cref="T:com.espertech.esper.filter.FilterSpecCompiled"/> filter specification.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamConstant.#ctor(com.espertech.esper.filter.FilterSpecLookupable,com.espertech.esper.filter.FilterOperator,System.Object)">
            <summary>Constructor. </summary>
            <param name="lookupable">is the lookupable</param>
            <param name="filterOperator">is the type of compare</param>
            <param name="filterConstant">contains the value to match against the event's property value</param>
            <throws>ArgumentException if an operator was supplied that does not take a single constant value</throws>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamConstant.GetFilterValue(com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Return the filter parameter constant to filter for.
            </summary>
            <param name="matchedEvents">is the prior results that can be used to determine filter parameters</param>
            <param name="evaluatorContext">The evaluator context.</param>
            <returns>filter parameter constant's value</returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamConstant.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamConstant.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecParamConstant.FilterConstant">
            <summary>Returns the constant value. </summary>
            <value>constant value</value>
        </member>
        <member name="T:com.espertech.esper.filter.FilterSpecParamContextProp">
            <summary>
            This class represents a filter parameter containing a reference to a context property.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamContextProp.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamContextProp.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:com.espertech.esper.filter.FilterSpecParamEventProp">
            <summary>
            This class represents a filter parameter containing a reference to another event's property 
            in the event pattern result, for use to describe a filter parameter in a
            <seealso cref="T:com.espertech.esper.filter.FilterSpecCompiled"/> filter specification.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamEventProp.#ctor(com.espertech.esper.filter.FilterSpecLookupable,com.espertech.esper.filter.FilterOperator,System.String,System.String,System.Boolean,com.espertech.esper.util.Coercer,System.Type,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="lookupable">is the property or function to get a lookup value</param>
            <param name="filterOperator">is the type of compare</param>
            <param name="resultEventAsName">is the name of the result event from which to get a property value to compare</param>
            <param name="resultEventProperty">is the name of the property to get from the named result event</param>
            <param name="isMustCoerce">indicates on whether numeric coercion must be performed</param>
            <param name="numberCoercer">interface to use to perform coercion</param>
            <param name="coercionType">indicates the numeric coercion type to use</param>
            <param name="statementName">Name of the statement.</param>
            <throws>ArgumentException if an operator was supplied that does not take a single constant value</throws>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamEventProp.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamEventProp.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecParamEventProp.IsMustCoerce">
            <summary>Returns true if numeric coercion is required, or false if not </summary>
            <value>true to coerce at runtime</value>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecParamEventProp.CoercionType">
            <summary>Returns the numeric coercion type. </summary>
            <value>type to coerce to</value>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecParamEventProp.ResultEventAsName">
            <summary>Returns tag for result event. </summary>
            <value>tag</value>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecParamEventProp.ResultEventProperty">
            <summary>Returns the property of the result event. </summary>
            <value>property name</value>
        </member>
        <member name="T:com.espertech.esper.filter.FilterSpecParamEventPropIndexed">
            <summary>
            This class represents a filter parameter containing a reference to another event's property 
            in the event pattern result, for use to describe a filter parameter 
            in a <seealso cref="T:com.espertech.esper.filter.FilterSpecCompiled"/> filter specification.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamEventPropIndexed.#ctor(com.espertech.esper.filter.FilterSpecLookupable,com.espertech.esper.filter.FilterOperator,System.String,System.Int32,System.String,System.Boolean,com.espertech.esper.util.Coercer,System.Type,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="lookupable">is the lookupable</param>
            <param name="filterOperator">is the type of compare</param>
            <param name="resultEventAsName">is the name of the result event from which to get a property value to compare</param>
            <param name="resultEventIndex">index</param>
            <param name="resultEventProperty">is the name of the property to get from the named result event</param>
            <param name="isMustCoerce">indicates on whether numeric coercion must be performed</param>
            <param name="numberCoercer">interface to use to perform coercion</param>
            <param name="coercionType">indicates the numeric coercion type to use</param>
            <param name="statementName">Name of the statement.</param>
            <throws>ArgumentException if an operator was supplied that does not take a single constant value</throws>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamEventPropIndexed.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamEventPropIndexed.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecParamEventPropIndexed.IsMustCoerce">
            <summary>Returns true if numeric coercion is required, or false if not </summary>
            <value>true to coerce at runtime</value>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecParamEventPropIndexed.CoercionType">
            <summary>Returns the numeric coercion type. </summary>
            <value>type to coerce to</value>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecParamEventPropIndexed.ResultEventAsName">
            <summary>Returns tag for result event. </summary>
            <value>tag</value>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecParamEventPropIndexed.ResultEventProperty">
            <summary>Returns the property of the result event. </summary>
            <value>property name</value>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecParamEventPropIndexed.ResultEventIndex">
            <summary>Returns the index. </summary>
            <value>index</value>
        </member>
        <member name="T:com.espertech.esper.filter.FilterSpecParamExprNode">
            <summary>
            This class represents an arbitrary expression node returning a bool value as a filter 
            parameter in an <seealso cref="T:com.espertech.esper.filter.FilterSpecCompiled"/> filter specification.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamExprNode.#ctor(com.espertech.esper.filter.FilterSpecLookupable,com.espertech.esper.filter.FilterOperator,com.espertech.esper.epl.expression.ExprNode,System.Collections.Generic.IDictionary{System.String,com.espertech.esper.collection.Pair{com.espertech.esper.client.EventType,System.String}},System.Collections.Generic.IDictionary{System.String,com.espertech.esper.collection.Pair{com.espertech.esper.client.EventType,System.String}},com.espertech.esper.epl.variable.VariableService,com.espertech.esper.events.EventAdapterService,com.espertech.esper.client.ConfigurationInformation,System.String,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="lookupable">is the lookup-able</param>
            <param name="filterOperator">is expected to be the BOOLEAN_EXPR operator</param>
            <param name="exprNode">represents the bool expression</param>
            <param name="taggedEventTypes">is null if the expression doesn't need other streams, or is filled with a ordered list of stream names and types</param>
            <param name="arrayEventTypes">is a map of name tags and event type per tag for repeat-expressions that generate an array of events</param>
            <param name="variableService">provides access to variables</param>
            <param name="eventAdapterService">for creating event types and event beans</param>
            <param name="configurationInformation">The configuration information.</param>
            <param name="statementName">Name of the statement.</param>
            <param name="hasSubquery">if set to <c>true</c> [has subquery].</param>
            <throws>ArgumentException for illegal args</throws>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamExprNode.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamExprNode.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecParamExprNode.ExprNode">
            <summary>Returns the expression node of the bool expression this filter parameter represents. </summary>
            <value>expression node</value>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecParamExprNode.TaggedEventTypes">
            <summary>Returns the map of tag/stream names to event types that the filter expressions map use (for patterns) </summary>
            <value>map</value>
        </member>
        <member name="T:com.espertech.esper.filter.FilterSpecParamIn">
            <summary>
            This class represents a 'in' filter parameter in an <see cref="T:com.espertech.esper.filter.FilterSpecCompiled"/> filter specification.
            <para>
            The 'in' checks for a list of values.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamIn.#ctor(com.espertech.esper.filter.FilterSpecLookupable,com.espertech.esper.filter.FilterOperator,System.Collections.Generic.IList{com.espertech.esper.filter.FilterSpecParamInValue})">
            <summary>
            Ctor.
            </summary>
            <param name="lookupable">is the event property name</param>
            <param name="filterOperator">is expected to be the IN-list operator</param>
            <param name="listofValues">is a list of constants and event property names</param>
            <throws>ArgumentException for illegal args</throws>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamIn.GetFilterValue(com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Return the filter parameter constant to filter for.
            </summary>
            <param name="matchedEvents">is the prior results that can be used to determine filter parameters</param>
            <param name="evaluatorContext">The evaluator context.</param>
            <returns>filter parameter constant's value</returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamIn.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamIn.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamIn.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecParamIn.ListOfValues">
            <summary>
            Returns the list of values we are asking to match.
            </summary>
            <returns>list of filter values</returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterSpecParamInValue">
            <summary>
            Denotes a value for use by the in-keyword within a list of values
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamInValue.GetFilterValue(com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Returns the actual value to filter for from prior matching events
            </summary>
            <param name="matchedEvents">is a map of matching events</param>
            <param name="evaluatorContext">The evaluator context.</param>
            <returns>filter-for value</returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterSpecParamRange">
            <summary>
            This class represents a range filter parameter in an <seealso cref="T:com.espertech.esper.filter.FilterSpecCompiled"/> 
            filter specification.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamRange.#ctor(com.espertech.esper.filter.FilterSpecLookupable,com.espertech.esper.filter.FilterOperator,com.espertech.esper.filter.FilterSpecParamRangeValue,com.espertech.esper.filter.FilterSpecParamRangeValue)">
            <summary>Constructor. </summary>
            <param name="lookupable">is the lookupable</param>
            <param name="filterOperator">is the type of range operator</param>
            <param name="min">is the begin point of the range</param>
            <param name="max">is the end point of the range</param>
            <throws>ArgumentException if an operator was supplied that does not take a double range value</throws>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamRange.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamRange.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecParamRange.Min">
            <summary>Returns the lower endpoint. </summary>
            <value>lower endpoint</value>
        </member>
        <member name="P:com.espertech.esper.filter.FilterSpecParamRange.Max">
            <summary>Returns the upper endpoint. </summary>
            <value>upper endpoint</value>
        </member>
        <member name="T:com.espertech.esper.filter.FilterSpecParamRangeValue">
            <summary>
            Interface for range-type filter parameters for type checking and to obtain the filter values for endpoints based on prior results.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterSpecParamRangeValue.GetFilterValue(com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Returns the filter value representing the endpoint.
            </summary>
            <param name="matchedEvents">is the prior results</param>
            <param name="exprEvaluatorContext">The expr evaluator context.</param>
            <returns>filter value</returns>
        </member>
        <member name="T:com.espertech.esper.filter.FilterValueSet">
            <summary>
            Contains the filter criteria to sift through events. The filter criteria are the 
            event class to look for and a set of parameters (property names, operators and 
            constant/range values).
            </summary>
        </member>
        <member name="P:com.espertech.esper.filter.FilterValueSet.EventType">
            <summary>
            Returns type of event to filter for.
            </summary>
            <value>event type</value>
        </member>
        <member name="P:com.espertech.esper.filter.FilterValueSet.Parameters">
            <summary>
            Returns list of filter parameters.
            </summary>
            <value>list of filter params</value>
        </member>
        <member name="T:com.espertech.esper.filter.FilterValueSetImpl">
            <summary>
            Container for filter values for use by the <seealso cref="T:com.espertech.esper.filter.FilterService"/> to filter and distribute incoming events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterValueSetImpl.#ctor(com.espertech.esper.client.EventType,System.Collections.Generic.LinkedList{com.espertech.esper.filter.FilterValueSetParam})">
            <summary>Ctor. </summary>
            <param name="eventType">type of event to filter for</param>
            <param name="parameters">list of filter parameters</param>
        </member>
        <member name="P:com.espertech.esper.filter.FilterValueSetImpl.EventType">
            <summary>Returns event type to filter for. </summary>
            <value>event type to filter for</value>
        </member>
        <member name="P:com.espertech.esper.filter.FilterValueSetImpl.Parameters">
            <summary>Returns list of filter parameters. </summary>
            <value>list of filter parameters</value>
        </member>
        <member name="T:com.espertech.esper.filter.FilterValueSetParam">
            <summary>
            This interface represents one filter parameter in an <seealso cref="T:com.espertech.esper.filter.FilterValueSet"/> filter 
            specification. 
            <para/> 
            Each filtering parameter has a lookup-able and operator type, and a value to filter for. </summary>
        </member>
        <member name="P:com.espertech.esper.filter.FilterValueSetParam.Lookupable">
            <summary>Returns the lookup-able for the filter parameter. </summary>
            <value>lookup-able</value>
        </member>
        <member name="P:com.espertech.esper.filter.FilterValueSetParam.FilterOperator">
            <summary>Returns the filter operator type. </summary>
            <value>filter operator type</value>
        </member>
        <member name="P:com.espertech.esper.filter.FilterValueSetParam.FilterForValue">
            <summary>Return the filter parameter constant to filter for. </summary>
            <value>filter parameter constant&apos;s value</value>
        </member>
        <member name="T:com.espertech.esper.filter.FilterValueSetParamImpl">
            <summary>
            Filter parameter value defining the event property to filter, the filter operator, and the filter value.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.FilterValueSetParamImpl.#ctor(com.espertech.esper.filter.FilterSpecLookupable,com.espertech.esper.filter.FilterOperator,System.Object)">
            <summary>Ctor. </summary>
            <param name="lookupable">stuff to use to interrogate</param>
            <param name="filterOperator">operator to apply</param>
            <param name="filterValue">value to look for</param>
        </member>
        <member name="T:com.espertech.esper.filter.IndexFactory">
            <summary>
            Factory for <seealso cref="T:com.espertech.esper.filter.FilterParamIndexBase"/> instances based on event property name and filter operator type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.IndexFactory.CreateIndex(com.espertech.esper.filter.FilterSpecLookupable,com.espertech.esper.filter.FilterOperator)">
            <summary>
            Factory for indexes that store filter parameter constants for a given event property and filter operator.
            <para/>
            Does not perform any check of validity of property name.
            </summary>
            <param name="lookupable">The lookupable.</param>
            <param name="filterOperator">is the type of index to use</param>
            <returns>
            the proper index based on the filter operator type
            </returns>
        </member>
        <member name="T:com.espertech.esper.filter.IndexHelper">
            <summary>Utility class for matching filter parameters to indizes. Matches are indicated by the index <seealso cref="T:com.espertech.esper.filter.FilterParamIndexBase"/> and the filter parameter <seealso cref="T:com.espertech.esper.filter.FilterSpecParam"/> featuring the same event property name and filter operator. </summary>
        </member>
        <member name="M:com.espertech.esper.filter.IndexHelper.FindIndex(System.Collections.Generic.ICollection{com.espertech.esper.filter.FilterValueSetParam},System.Collections.Generic.ICollection{com.espertech.esper.filter.FilterParamIndexBase})">
            <summary>
            Find an index that matches one of the filter parameters passed. The parameter type and index type match up if the property name and filter operator are the same for the index and the filter parameter. For instance, for a filter parameter of "count EQUALS 10", the index against property "count" with operator type EQUALS will be returned, if present. NOTE: The caller is expected to obtain locks, if necessary, on the collections passed in. NOTE: Doesn't match non-property based index - thus bool expressions don't get found and are always entered as a new index
            </summary>
            <param name="parameters">is the list of sorted filter parameters</param>
            <param name="indizes">is the collection of indexes</param>
            <returns>
            A matching pair of filter parameter and index, if any matches were found. Null if no matches were found.
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.IndexHelper.FindParameter(System.Collections.Generic.ICollection{com.espertech.esper.filter.FilterValueSetParam},com.espertech.esper.filter.FilterParamIndexBase)">
            <summary>Determine among the passed in filter parameters any parameter that matches the given index on property name and filter operator type. Returns null if none of the parameters matches the index. </summary>
            <param name="parameters">is the filter parameter list</param>
            <param name="index">is a filter parameter constant value index</param>
            <returns>filter parameter, or null if no matching parameter found.</returns>
        </member>
        <member name="T:com.espertech.esper.filter.IndexTreeBuilder">
            <summary>
            Builder manipulates a tree structure consisting of <seealso cref="T:com.espertech.esper.filter.FilterHandleSetNode"/> 
            and <seealso cref="T:com.espertech.esper.filter.FilterParamIndexBase"/> instances. Filters can be added to a top node 
            (an instance of FilterHandleSetNode) via the add method. This method returns an instance 
            of <seealso cref="T:com.espertech.esper.filter.IndexTreePath"/> which represents the tree path (list of indizes) that 
            the filter callback was added to. To remove filters the same IndexTreePath instance must 
            be passed in. 
            <para/>
            The implementation is designed to be multithread-safe in conjunction with the node classes 
            manipulated by this class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.IndexTreeBuilder.Add(com.espertech.esper.filter.FilterValueSet,com.espertech.esper.filter.FilterHandle,com.espertech.esper.filter.FilterHandleSetNode)">
            <summary>
            Add a filter callback according to the filter specification to the top node returning information to be used to remove the filter callback.
            </summary>
            <param name="filterValueSet">is the filter definition</param>
            <param name="filterCallback">is the callback to be added</param>
            <param name="topNode">node to be added to any subnode beneath it</param>
            <returns>
            an encapsulation of information need to allow for safe removal of the filter tree.
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.IndexTreeBuilder.Remove(com.espertech.esper.client.EventType,com.espertech.esper.filter.FilterHandle,com.espertech.esper.filter.IndexTreePath,com.espertech.esper.filter.FilterHandleSetNode)">
            <summary>
            Remove an filterCallback from the given top node. The IndexTreePath instance passed in must be the same as obtained when the same filterCallback was added.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="filterCallback">filter callback  to be removed</param>
            <param name="treePathInfo">encapsulates information need to allow for safe removal of the filterCallback</param>
            <param name="topNode">The top tree node beneath which the filterCallback was added</param>
        </member>
        <member name="M:com.espertech.esper.filter.IndexTreeBuilder.AddToNode(com.espertech.esper.filter.FilterHandleSetNode,com.espertech.esper.filter.IndexTreePath)">
            <summary>Add to the current node building up the tree path information. </summary>
            <param name="currentNode">is the node to add to</param>
            <param name="treePathInfo">is filled with information about which indizes were chosen to add the filter to</param>
        </member>
        <member name="M:com.espertech.esper.filter.IndexTreeBuilder.AddToIndex(com.espertech.esper.filter.FilterParamIndexBase,System.Object,com.espertech.esper.filter.IndexTreePath)">
            <summary>Add to an index the value to filter for. </summary>
            <param name="index">is the index to add to</param>
            <param name="filterForValue">is the filter parameter value to add</param>
            <param name="treePathInfo">is the specification to fill on where is was added</param>
        </member>
        <member name="M:com.espertech.esper.filter.IndexTreeBuilder.AddToEvaluator(com.espertech.esper.filter.EventEvaluator,com.espertech.esper.filter.IndexTreePath)">
            <summary>Add filter callback to an event evaluator, which could be either an index node or a set node. </summary>
            <param name="eventEvaluator">to add the filterCallback to.</param>
            <param name="treePathInfo">is for holding the information on where the add occured</param>
            <returns>bool indicating if the eventEvaluator was successfully added</returns>
        </member>
        <member name="T:com.espertech.esper.filter.IndexTreePath">
            <summary>
            Encapsulates the information required by <see cref="T:com.espertech.esper.filter.IndexTreeBuilder"/> to maintain the filter parameter tree structure
            when filters are added and removed from the tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.IndexTreePath.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.IndexTreePath.Add(com.espertech.esper.filter.FilterParamIndexBase,System.Object)">
            <summary> Add an index to end of the list representing a path through indexes.</summary>
            <param name="index">to add
            </param>
            <param name="filteredForValue">is the value the index filters
            </param>
        </member>
        <member name="M:com.espertech.esper.filter.IndexTreePath.RemoveFirst">
            <summary> Remove and return first index.</summary>
            <returns> first index
            </returns>
        </member>
        <member name="M:com.espertech.esper.filter.IndexTreePath.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.filter.InSetOfValuesConstant">
            <summary>Constant value in a list of values following an in-keyword. </summary>
        </member>
        <member name="M:com.espertech.esper.filter.InSetOfValuesConstant.#ctor(System.Object)">
            <summary>Ctor. </summary>
            <param name="constant">is the constant value</param>
        </member>
        <member name="M:com.espertech.esper.filter.InSetOfValuesConstant.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.filter.InSetOfValuesConstant.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:com.espertech.esper.filter.InSetOfValuesConstant.Constant">
            <summary>Returns the constant value. </summary>
            <value>constant</value>
        </member>
        <member name="T:com.espertech.esper.filter.InSetOfValuesContextProp">
            <summary>
            Event property value in a list of values following an in-keyword.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.InSetOfValuesContextProp.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.filter.InSetOfValuesContextProp.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:com.espertech.esper.filter.InSetOfValuesEventProp">
            <summary>
            Event property value in a list of values following an in-keyword.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.InSetOfValuesEventProp.#ctor(System.String,System.String,System.Boolean,System.Type)">
            <summary>Ctor. </summary>
            <param name="resultEventAsName">is the event tag</param>
            <param name="resultEventProperty">is the event property name</param>
            <param name="isMustCoerce">indicates on whether numeric coercion must be performed</param>
            <param name="coercionType">indicates the numeric coercion type to use</param>
        </member>
        <member name="M:com.espertech.esper.filter.InSetOfValuesEventProp.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.filter.InSetOfValuesEventProp.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:com.espertech.esper.filter.InSetOfValuesEventProp.ResultEventAsName">
            <summary>Returns the tag used for the event property. </summary>
            <value>tag</value>
        </member>
        <member name="P:com.espertech.esper.filter.InSetOfValuesEventProp.ResultEventProperty">
            <summary>Returns the event property name. </summary>
            <value>property name</value>
        </member>
        <member name="T:com.espertech.esper.filter.InSetOfValuesEventPropIndexed">
            <summary>Event property value in a list of values following an in-keyword. </summary>
        </member>
        <member name="M:com.espertech.esper.filter.InSetOfValuesEventPropIndexed.#ctor(System.String,System.Int32,System.String,System.Boolean,System.Type,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="resultEventAsName">is the event tag</param>
            <param name="resultEventindex">index</param>
            <param name="resultEventProperty">is the event property name</param>
            <param name="isMustCoerce">indicates on whether numeric coercion must be performed</param>
            <param name="coercionType">indicates the numeric coercion type to use</param>
            <param name="statementName">Name of the statement.</param>
        </member>
        <member name="M:com.espertech.esper.filter.InSetOfValuesEventPropIndexed.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.filter.InSetOfValuesEventPropIndexed.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:com.espertech.esper.filter.InSetOfValuesEventPropIndexed.ResultEventAsName">
            <summary>Returns the tag used for the event property. </summary>
            <value>tag</value>
        </member>
        <member name="P:com.espertech.esper.filter.InSetOfValuesEventPropIndexed.ResultEventProperty">
            <summary>Returns the event property name. </summary>
            <value>property name</value>
        </member>
        <member name="T:com.espertech.esper.filter.RangeValueDouble">
            <summary>
            A Double-typed value as a filter parameter representing a range.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.RangeValueDouble.#ctor(System.Double)">
            <summary>Ctor. </summary>
            <param name="doubleValue">is the value of the range endpoint</param>
        </member>
        <member name="P:com.espertech.esper.filter.RangeValueDouble.DoubleValue">
            <summary>Returns the constant value. </summary>
            <value>constant</value>
        </member>
        <member name="T:com.espertech.esper.filter.RangeValueEventProp">
            <summary>
            An event property as a filter parameter representing a range.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.RangeValueEventProp.#ctor(System.String,System.String)">
            <summary>Ctor. </summary>
            <param name="resultEventAsName">is the event tag</param>
            <param name="resultEventProperty">is the event property name</param>
        </member>
        <member name="P:com.espertech.esper.filter.RangeValueEventProp.ResultEventAsName">
            <summary>
            Returns the tag name or stream name to use for the event property.
            </summary>
            <value>tag name</value>
        </member>
        <member name="P:com.espertech.esper.filter.RangeValueEventProp.ResultEventProperty">
            <summary>Returns the name of the event property. </summary>
            <value>event property name</value>
        </member>
        <member name="T:com.espertech.esper.filter.RangeValueEventPropIndexed">
            <summary>
            An event property as a filter parameter representing a range.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.RangeValueEventPropIndexed.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="resultEventAsName">is the event tag</param>
            <param name="resultEventIndex">index for event</param>
            <param name="resultEventProperty">is the event property name</param>
            <param name="statementName">Name of the statement.</param>
        </member>
        <member name="P:com.espertech.esper.filter.RangeValueEventPropIndexed.ResultEventIndex">
            <summary>Returns the index. </summary>
            <value>index</value>
        </member>
        <member name="P:com.espertech.esper.filter.RangeValueEventPropIndexed.ResultEventAsName">
            <summary>Returns the tag name or stream name to use for the event property. </summary>
            <value>tag name</value>
        </member>
        <member name="P:com.espertech.esper.filter.RangeValueEventPropIndexed.ResultEventProperty">
            <summary>Returns the name of the event property. </summary>
            <value>event property name</value>
        </member>
        <member name="T:com.espertech.esper.filter.RangeValueString">
            <summary>
            A String-typed value as a filter parameter representing a range.
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.RangeValueString.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="theStringValue">is the value of the range endpoint</param>
        </member>
        <member name="T:com.espertech.esper.filter.StringRange">
            <summary>Holds a range of double values with a minimum (start) value and a maximum (end) value. </summary>
        </member>
        <member name="M:com.espertech.esper.filter.StringRange.#ctor(System.String,System.String)">
            <summary>Constructor - takes range endpoints. </summary>
            <param name="min">is the low endpoint</param>
            <param name="max">is the high endpoint</param>
        </member>
        <member name="P:com.espertech.esper.filter.StringRange.Min">
            <summary>Returns low endpoint. </summary>
            <value>low endpoint</value>
        </member>
        <member name="P:com.espertech.esper.filter.StringRange.Max">
            <summary>Returns high endpoint. </summary>
            <value>high endpoint</value>
        </member>
        <member name="T:com.espertech.esper.filter.StringRangeComparator">
            <summary>
            Comparator for DoubleRange values. 
            <para />
            Sorts double ranges as this:
                 sort by min asc, max asc. I.e. same minimum value sorts maximum value ascending.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalAndFactoryNode">
            <summary>
            This class represents an 'and' operator in the evaluation tree representing an event expressions.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalNodeFactoryBase">
            <summary>
            Superclass of all nodes in an evaluation tree representing an event pattern expression.
            Follows the Composite pattern. Child nodes do not carry references to parent nodes, the tree
            is unidirectional.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalFactoryNode">
            <summary>
            Superclass of all nodes in an evaluation tree representing an event pattern expression.
            Follows the Composite pattern. Child nodes do not carry references to parent nodes, the 
            tree is unidirectional.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalFactoryNode.AddChildNode(com.espertech.esper.pattern.EvalFactoryNode)">
            <summary>Adds a child node. </summary>
            <param name="childNode">is the child evaluation tree node to add</param>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalFactoryNode.ChildNodes">
            <summary>Returns list of child nodes </summary>
            <value>list of child nodes</value>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalNodeFactoryBase.#ctor">
            <summary>
            Constructor creates a list of child nodes.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalNodeFactoryBase.AddChildNode(com.espertech.esper.pattern.EvalFactoryNode)">
            <summary>Adds a child node. </summary>
            <param name="childNode">is the child evaluation tree node to add</param>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalNodeFactoryBase.IsFilterChildNonQuitting">
            <summary>
            Gets a value indicating whether this instance is filter child non quitting.
            </summary>
            <value>
            	<c>true</c> if this instance is filter child non quitting; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalNodeFactoryBase.IsStateful">
            <summary>
            Gets a value indicating whether this instance is stateful.
            </summary>
            <value>
            	<c>true</c> if this instance is stateful; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalNodeFactoryBase.FactoryNodeId">
            <summary>
            Gets or sets the factory node id.
            </summary>
            <value>The factory node id.</value>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalNodeFactoryBase.ChildNodes">
            <summary>Returns list of child nodes. </summary>
            <value>list of child nodes</value>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalAndNode">
            <summary>
            This class represents an 'and' operator in the evaluation tree representing an event expressions.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalNodeBase">
            <summary>
            Superclass of all nodes in an evaluation tree representing an event pattern expression.
            Follows the Composite pattern. Child nodes do not carry references to parent nodes, the 
            tree is unidirectional.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalNode">
            <summary>
            Superclass of all nodes in an evaluation tree representing an event pattern expression. 
            Follows the Composite pattern. Child nodes do not carry references to parent nodes, the 
            tree is unidirectional.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalNodeBase.#ctor(com.espertech.esper.pattern.PatternAgentInstanceContext)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.pattern.EvalNodeBase"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalNodeBase.NewState(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalStateNodeNumber,System.Int64)">
            <summary>
            Create the evaluation state node containing the truth value state for each operator in an
            event expression.
            </summary>
            <param name="parentNode">the parent evaluator node that this node indicates a change in truth value to</param>
            <param name="stateNodeNumber">The state node number.</param>
            <param name="stateNodeId">the new state object's identifier</param>
            <returns>
            state node containing the truth value state for the operator
            </returns>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalAndStateNode">
            <summary>This class represents the state of an "and" operator in the evaluation state tree. </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalStateNode">
            <summary>
            Superclass of all state nodes in an evaluation node tree representing an event 
            expressions. Follows the Composite pattern. Subclasses are expected to keep their 
            own collection containing child nodes as needed.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalStateNode.Start(com.espertech.esper.pattern.MatchedEventMap)">
            <summary>
            Starts the event expression or an instance of it. Child classes are expected to
            initialize and start any event listeners or schedule any time-based callbacks 
            as needed.
            </summary>
            <param name="beginState">State of the begin.</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalStateNode.Quit">
            <summary>
            Stops the event expression or an instance of it. Child classes are expected to 
            free resources and stop any event listeners or remove any time-based callbacks.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalStateNode.Accept(com.espertech.esper.pattern.EvalStateNodeVisitor,System.Object)">
            <summary>
            Accept a visitor. Child classes are expected to invoke the visit method on the 
            visitor instance passed in.
            </summary>
            <param name="visitor">on which the visit method is invoked by each node</param>
            <param name="data">any additional data the visitor may need is passed in this parameter</param>
            <returns>
            any additional data the visitor may need or null
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalStateNode.ChildrenAccept(com.espertech.esper.pattern.EvalStateNodeVisitor,System.Object)">
            <summary>
            Pass the visitor to all child nodes.
            </summary>
            <param name="visitor">is the instance to be passed to all child nodes</param>
            <param name="data">any additional data the visitor may need is passed in this parameter</param>
            <returns>
            any additional data the visitor may need or null
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalStateNode.#ctor(com.espertech.esper.pattern.Evaluator)">
            <summary>
            Constructor.
            </summary>
            <param name="parentNode">is the evaluator for this node on which to indicate a change in truth value</param>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalStateNode.FactoryNode">
            <summary>Returns the factory node for the state node. </summary>
            <value>factory node</value>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalStateNode.ParentEvaluator">
            <summary>Returns the parent evaluator. </summary>
            <value>parent evaluator instance</value>
        </member>
        <member name="T:com.espertech.esper.pattern.Evaluator">
            <summary>Interface for nodes in an expression evaluation state tree that are being informed by a child that the event expression fragments (subtrees) which the child represents has turned true (evaluateTrue method) or false (evaluateFalse). </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.Evaluator.EvaluateTrue(com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.EvalStateNode,System.Boolean)">
            <summary>Indicate a change in truth value to true. </summary>
            <param name="matchEvent">is the container for events that caused the change in truth value</param>
            <param name="fromNode">is the node that indicates the change</param>
            <param name="isQuitted">is an indication of whether the node continues listenening or stops listening</param>
        </member>
        <member name="M:com.espertech.esper.pattern.Evaluator.EvaluateFalse(com.espertech.esper.pattern.EvalStateNode)">
            <summary>Indicate a change in truth value to false. </summary>
            <param name="fromNode">is the node that indicates the change</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalAndStateNode.#ctor(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalAndNode)">
            <summary>Constructor. </summary>
            <param name="parentNode">is the parent evaluator to call to indicate truth value</param>
            <param name="evalAndNode">is the factory node associated to the state</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalAndStateNode.GenerateMatchEvents(com.espertech.esper.pattern.MatchedEventMap,System.Object[],System.Int32)">
            <summary>Generate a list of matching event combinations constisting of the events per child that are passed in. </summary>
            <param name="matchEvent">can be populated with prior events that must be passed on</param>
            <param name="eventsPerChild">is the list of events for each child node to the "And" node.</param>
            <returns>list of events populated with all possible combinations</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalAndStateNode.GenerateMatchEvents(System.Collections.Generic.IList{System.Collections.Generic.IList{com.espertech.esper.pattern.MatchedEventMap}},System.Int32,System.Collections.Generic.IList{com.espertech.esper.pattern.MatchedEventMap},com.espertech.esper.pattern.MatchedEventMap)">
            <summary>For each combination of MatchedEventMap instance in all collections, add an entry to the list. Recursive method. </summary>
            <param name="eventList">is an array of lists containing MatchedEventMap instances to combine</param>
            <param name="index">is the current index into the array</param>
            <param name="result">is the resulting list of MatchedEventMap</param>
            <param name="matchEvent">is the start MatchedEventMap to generate from</param>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalAuditFactoryNode">
            <summary>
            This class represents an 'or' operator in the evaluation tree representing any event expressions.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalAuditNode">
            <summary>
            This class represents an 'or' operator in the evaluation tree representing any event expressions.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalAuditStateNode">
            <summary>
            This class represents the state of a followed-by operator in the evaluation state tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalAuditStateNode.#ctor(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalAuditNode,com.espertech.esper.pattern.EvalStateNodeNumber,System.Int64)">
            <summary>
            Constructor.
            </summary>
            <param name="parentNode">is the parent evaluator to call to indicate truth value</param>
            <param name="evalAuditNode">is the factory node associated to the state</param>
            <param name="stateNodeNumber">The state node number.</param>
            <param name="stateNodeId">The state node id.</param>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalEveryDistinctFactoryNode">
            <summary>
            This class represents an 'every-distinct' operator in the evaluation tree representing an event expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalEveryDistinctFactoryNode.#ctor(System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode})">
            <summary>Ctor. </summary>
            <param name="expressions">distinct-value expressions</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalEveryDistinctFactoryNode.SetDistinctExpressions(System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode},System.Nullable{System.Int64})">
            <summary>Sets expressions for distinct-value. </summary>
            <param name="distinctExpressions">to set</param>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalEveryDistinctFactoryNode.Convertor">
            <summary>Sets the convertor for matching events to events-per-stream. </summary>
            <value>convertor</value>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalEveryDistinctFactoryNode.Expressions">
            <summary>Returns all expressions. </summary>
            <value>expressions</value>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalEveryDistinctFactoryNode.DistinctExpressions">
            <summary>Returns distinct expressions. </summary>
            <value>expressions</value>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalEveryDistinctNode">
            <summary>
            This class represents an 'every-distinct' operator in the evaluation tree representing an event expression.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalEveryDistinctStateExpireKeyNode">
            <summary>
            Contains the state collected by an "every" operator. The state includes handles to any sub-listeners started by the operator.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalEveryDistinctStateExpireKeyNode.#ctor(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalEveryDistinctNode)">
            <summary>Constructor. </summary>
            <param name="parentNode">is the parent evaluator to call to indicate truth value</param>
            <param name="everyNode">is the factory node associated to the state</param>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalEveryDistinctStateNode">
            <summary>
            Contains the state collected by an "every" operator. The state includes handles to any sub-listeners started by the operator.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalEveryDistinctStateNode.#ctor(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalEveryDistinctNode)">
            <summary>Constructor. </summary>
            <param name="parentNode">is the parent evaluator to call to indicate truth value</param>
            <param name="everyDistinctNode">is the factory node associated to the state</param>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalEveryFactoryNode">
            <summary>
            This class represents an 'every' operator in the evaluation tree representing an event expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalEveryFactoryNode.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalEveryNode">
            <summary>
            This class represents an 'every' operator in the evaluation tree representing an event expression.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalEveryStateNode">
            <summary>
            Contains the state collected by an "every" operator. The state includes handles 
            to any sub-listeners started by the operator.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalEveryStateNode.#ctor(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalEveryNode)">
            <summary>Constructor. </summary>
            <param name="parentNode">is the parent evaluator to call to indicate truth value</param>
            <param name="evalEveryNode">is the factory node associated to the state</param>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalEveryStateSpawnEvaluator">
            <summary>
            This class contains the state of an 'every' operator in the evaluation state tree.
            EVERY nodes work as a factory for new state subnodes. When a child node of an 
            EVERY node calls the evaluateTrue method on the EVERY node, the EVERY node will call 
            newState on its child node BEFORE it calls evaluateTrue on its parent node. It keeps 
            a reference to the new child in its list. (BEFORE because the root node could call 
            quit on child nodes for stopping all listeners).
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalFilterFactoryNode">
            <summary>
            This class represents a filter of events in the evaluation tree representing any event expressions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalFilterFactoryNode.#ctor(com.espertech.esper.epl.spec.FilterSpecRaw,System.String,System.Nullable{System.Int32})">
            <summary>
            Constructor.
            </summary>
            <param name="filterSpecification">specifies the filter properties</param>
            <param name="eventAsName">is the name to use for adding matching events to the MatchedEventMaptable used when indicating truth value of true.</param>
            <param name="consumptionLevel">The consumption level.</param>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalFilterFactoryNode.RawFilterSpec">
            <summary>Returns the raw (unoptimized/validated) filter definition. </summary>
            <value>filter def</value>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalFilterFactoryNode.FilterSpec">
            <summary>Returns filter specification. </summary>
            <value>filter definition</value>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalFilterFactoryNode.EventAsName">
            <summary>Returns the tag for any matching events to this filter, or null since tags are optional. </summary>
            <value>tag string for event</value>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalFilterNode">
            <summary>
            This class represents a filter of events in the evaluation tree representing any event expressions.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalFilterStateNode">
            <summary>
            This class contains the state of a single filter expression in the evaluation state tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalFilterStateNode.#ctor(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalFilterNode)">
            <summary>Constructor. </summary>
            <param name="parentNode">is the parent evaluator to call to indicate truth value</param>
            <param name="evalFilterNode">is the factory node associated to the state</param>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalFilterStateNodeConsumeImpl">
            <summary>
            This class contains the state of a single filter expression in the evaluation state tree.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalFollowedByFactoryNode">
            <summary>
            This class represents a followed-by operator in the evaluation tree representing any event expressions.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalFollowedByNode">
            <summary>
            This class represents a followed-by operator in the evaluation tree representing any event expressions.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalFollowedByNodeOpType">
            <summary>Followed-by operator types in the evaluation tree representing any event expressions. </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalFollowedByStateNode">
            <summary>
            This class represents the state of a followed-by operator in the evaluation state tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalFollowedByStateNode.#ctor(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalFollowedByNode)">
            <summary>Constructor. </summary>
            <param name="parentNode">is the parent evaluator to call to indicate truth value</param>
            <param name="evalFollowedByNode">is the factory node associated to the state</param>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalFollowedByWithMaxStateNodeManaged">
            <summary>
            This class represents the state of a followed-by operator in the evaluation state tree, 
            with a maximum number of instances provided, and with the additional capability to 
            engine-wide report on pattern instances.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalFollowedByWithMaxStateNodeManaged.#ctor(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalFollowedByNode)">
            <summary>Constructor. </summary>
            <param name="parentNode">is the parent evaluator to call to indicate truth value</param>
            <param name="evalFollowedByNode">is the factory node associated to the state</param>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalGuardFactoryNode">
            <summary>
            This class represents a guard in the evaluation tree representing an event expressions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalGuardFactoryNode.#ctor(com.espertech.esper.epl.spec.PatternGuardSpec)">
            <summary>Constructor. </summary>
            <param name="patternGuardSpec">factory for guard construction</param>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalGuardFactoryNode.PatternGuardSpec">
            <summary>Returns the guard object specification to use for instantiating the guard factory and guard. </summary>
            <value>guard specification</value>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalGuardFactoryNode.GuardFactory">
            <summary>Supplies the guard factory to the node. </summary>
            <value>is the guard factory</value>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalGuardNode">
            <summary>
            This class represents a guard in the evaluation tree representing an event expressions.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalGuardStateNode">
            <summary>
            This class represents the state of a "within" operator in the evaluation state tree. 
            The within operator applies to a subexpression and is thus expected to only have one 
            child node.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.guard.Quitable">
            <summary>Receiver for quit events for use by guards. </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.Quitable.GuardQuit">
            <summary>Indicate guard quitted. </summary>
        </member>
        <member name="P:com.espertech.esper.pattern.guard.Quitable.Context">
            <summary>
            Retains the pattern context with relevant pattern and statement-level services.
            <para/> 
            The pattern context is the same context as provided to the guard factory and is 
            provided by the quitable so the guard instance does not need to retain the pattern 
            context.
            </summary>
            <value>pattern context</value>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalGuardStateNode.#ctor(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalGuardNode)">
            <summary>Constructor. </summary>
            <param name="parentNode">is the parent evaluator to call to indicate truth value</param>
            <param name="evalGuardNode">is the factory node associated to the state</param>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalMatchUntilFactoryNode">
            <summary>
            This class represents a match-until observer in the evaluation tree representing any event expressions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalMatchUntilFactoryNode.#ctor(com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.epl.expression.ExprNode)">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalMatchUntilFactoryNode.SetConvertor(com.espertech.esper.pattern.MatchedEventConvertor)">
            <summary>Sets the convertor for matching events to events-per-stream. </summary>
            <param name="convertor">convertor</param>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalMatchUntilFactoryNode.TagsArrayed">
            <summary>Returns an array of tags for events, which is all tags used within the repeat-operator. </summary>
            <value>array of tags</value>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalMatchUntilNode">
            <summary>
            This class represents a match-until observer in the evaluation tree representing any event expressions.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalMatchUntilStateNode">
            <summary>
            This class represents the state of a match-until node in the evaluation state tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalMatchUntilStateNode.#ctor(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalMatchUntilNode)">
            <summary>Constructor. </summary>
            <param name="parentNode">is the parent evaluator to call to indicate truth value</param>
            <param name="evalMatchUntilNode">is the factory node associated to the state</param>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalNodeAnalysisResult">
            <summary>
            Result of analysis of pattern expression node tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalNodeAnalysisResult.AddNode(com.espertech.esper.pattern.EvalFactoryNode)">
            <summary>Add a node found. </summary>
            <param name="node">found</param>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalNodeAnalysisResult.ActiveNodes">
            <summary>Returns all nodes found. </summary>
            <value>pattern nodes</value>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalNodeAnalysisResult.FilterNodes">
            <summary>Returns filter nodes. </summary>
            <value>filter nodes</value>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalNodeAnalysisResult.RepeatNodes">
            <summary>Returns the repeat-nodes. </summary>
            <value>repeat nodes</value>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalNodeUtil.RecursiveAnalyzeChildNodes(com.espertech.esper.pattern.EvalFactoryNode)">
            <summary>Searched recursivly for pattern evaluation filter nodes. </summary>
            <param name="currentNode">is the root node</param>
            <returns>list of filter nodes</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalNodeUtil.RecursiveGetChildNodes(com.espertech.esper.pattern.EvalFactoryNode,com.espertech.esper.pattern.EvalNodeUtilFactoryFilter)">
            <summary>
            Returns all child nodes as a set.
            </summary>
            <param name="currentNode">parent node</param>
            <param name="filter">The filter.</param>
            <returns>all child nodes</returns>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalNotFactoryNode">
            <summary>
            This class represents an 'not' operator in the evaluation tree representing any event expressions.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalNotNode">
            <summary>
            This class represents an 'not' operator in the evaluation tree representing any event expressions.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalNotStateNode">
            <summary>
            This class contains the state of an 'not' operator in the evaluation state tree. 
            The not operator inverts the truth of the subexpression under it. It defaults to 
            being true rather than being false at startup. True at startup means it will generate 
            an event on newState such that parent expressions may turn true. It turns permenantly 
            false when it receives an event from a subexpression and the subexpression quitted. 
            It indicates the false state via an evaluateFalse call on its parent evaluator.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalNotStateNode.#ctor(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalNotNode)">
            <summary>Constructor. </summary>
            <param name="parentNode">is the parent evaluator to call to indicate truth value</param>
            <param name="evalNotNode">is the factory node associated to the state</param>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalObserverFactoryNode">
            <summary>This class represents an observer expression in the evaluation tree representing an pattern expression. </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalObserverFactoryNode.#ctor(com.espertech.esper.epl.spec.PatternObserverSpec)">
            <summary>Constructor. </summary>
            <param name="patternObserverSpec">is the factory to use to get an observer instance</param>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalObserverFactoryNode.PatternObserverSpec">
            <summary>Returns the observer object specification to use for instantiating the observer factory and observer. </summary>
            <value>observer specification</value>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalObserverFactoryNode.ObserverFactory">
            <summary>Returns the observer factory. </summary>
            <value>factory for observer instances</value>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalObserverNode">
            <summary>
            This class represents an observer expression in the evaluation tree representing an pattern expression.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalObserverStateNode">
            <summary>
            This class represents the state of an eventObserver sub-expression in the evaluation state tree.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.observer.ObserverEventEvaluator">
            <summary>For use by <seealso cref="T:com.espertech.esper.pattern.observer.EventObserver"/> instances to place an event for processing/evaluation. </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.ObserverEventEvaluator.ObserverEvaluateTrue(com.espertech.esper.pattern.MatchedEventMap)">
            <summary>Indicate an event for evaluation (sub-expression the observer represents has turned true). </summary>
            <param name="matchEvent">is the matched events so far</param>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.ObserverEventEvaluator.ObserverEvaluateFalse">
            <summary>Indicate that the observer turned permanently false. </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalObserverStateNode.#ctor(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalObserverNode)">
            <summary>Constructor. </summary>
            <param name="parentNode">is the parent evaluator to call to indicate truth value</param>
            <param name="evalObserverNode">is the factory node associated to the state</param>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalOrFactoryNode">
            <summary>
            This class represents an 'or' operator in the evaluation tree representing any event expressions.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalOrNode">
            <summary>This class represents an 'or' operator in the evaluation tree representing any event expressions. </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalOrStateNode">
            <summary>
            This class represents the state of a "or" operator in the evaluation state tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalOrStateNode.#ctor(com.espertech.esper.pattern.Evaluator,com.espertech.esper.pattern.EvalOrNode)">
            <summary>Constructor. </summary>
            <param name="parentNode">is the parent evaluator to call to indicate truth value</param>
            <param name="evalOrNode">is the factory node associated to the state</param>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalRootFactoryNode">
            <summary>
            This class is always the root node in the evaluation tree representing an event expression.
            It hold the handle to the EPStatement implementation for notifying when matches are found.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalRootNode">
            <summary>
            This class is always the root node in the evaluation tree representing an event 
            expression. It hold the handle to the EPStatement implementation for notifying 
            when matches are found.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.PatternStarter">
            <summary>
            Interface for observing when an event expression needs to start (by adding the first listener).
            The publishing event expression supplies the callback used for indicating matches. The implementation 
            supplies as a return value the callback to use to stop the event expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternStarter.Start(com.espertech.esper.pattern.PatternMatchCallback,com.espertech.esper.pattern.PatternContext,System.Boolean)">
            <summary>An event expression was started and supplies the callback to use when matching events appear. Returns the callback to use to stop the event expression. </summary>
            <param name="matchCallback">must be supplied to indicate what to call when the expression turns true</param>
            <param name="context">is the context for handles to services required for evaluation.</param>
            <returns>a callback to stop the expression again</returns>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalRootState">
            <summary>
            Interface for a root state node accepting a callback to use to indicate pattern results.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.PatternStopCallback">
            <summary>
            Interface for executing a Stop on an active event expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalRootState.SetCallback(com.espertech.esper.pattern.PatternMatchCallback)">
            <summary>Accept callback to indicate pattern results. </summary>
            <param name="callback">is a pattern result call</param>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalRootStateNode">
            <summary>
            This class is always the root node in the evaluation state tree representing any 
            activated event expression. It hold the handle to a further state node with 
            subnodes making up a whole evaluation state tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalRootStateNode.#ctor(com.espertech.esper.pattern.EvalNode)">
            <summary>Constructor. </summary>
            <param name="rootSingleChildNode">is the root nodes single child node</param>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalRootStateNode.Callback">
            <summary>Hands the callback to use to indicate matching events. </summary>
            <value>is invoked when the event expressions turns true.</value>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalStateNodeNumber.#ctor">
            <summary>Ctor - constructs a top-level node number. </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalStateNodeNumber.#ctor(System.Int32[])">
            <summary>Contructs a given node number. </summary>
            <param name="number">to contruct</param>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalStateNodeNumber.NewChildNum(System.Int32)">
            <summary>Generates a new child node number to the current node number with the given child id. </summary>
            <param name="newStateNumber">child's node num</param>
            <returns>child node num</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalStateNodeNumber.NewSiblingState">
            <summary>Generates a new sibling node number to the current node. </summary>
            <returns>sibling node</returns>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalStateNodeNumber.OrdinalNumber">
            <summary>Get the depth of the node number. </summary>
            <value>ordinal</value>
        </member>
        <member name="P:com.espertech.esper.pattern.EvalStateNodeNumber.StateNumber">
            <summary>Returns the internal number representation. </summary>
            <value>state number</value>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalStateNodePrinterVisitor">
            <summary>
            Visitor class for printing out an evaluation state tree where each node is printed indented according
            to its depth in the tree.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.EvalStateNodeVisitor">
            <summary> Interface for visiting each element in the evaluation node tree for an event expression (see Visitor pattern).</summary>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalStateNodeVisitor.Visit(com.espertech.esper.pattern.EvalStateNode,System.Object)">
            <summary> Invoked by each child node as part of accepting this visitor.</summary>
            <param name="node">is the node in the composite tree accepting the visitor
            </param>
            <param name="data">is any additional useful to implementations
            </param>
            <returns> any additional data useful to implementations or null
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalStateNodePrinterVisitor.Visit(com.espertech.esper.pattern.EvalStateNode,System.Object)">
            <summary>
            Invoked by each child node as part of accepting this visitor.
            </summary>
            <param name="node">is the node in the composite tree accepting the visitor</param>
            <param name="data">is any additional useful to implementations</param>
            <returns>
            any additional data useful to implementations or null
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.EvalStateNodePrinterVisitor.indent(System.Int32)">
            <summary>
            Indents the specified level.
            </summary>
            <param name="level">The level.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.pattern.guard.ExpressionGuard">
            <summary>
            Guard implementation that keeps a timer instance and quits when the timer expired, and also keeps
            a count of the number of matches so far, checking both count and timer, letting all <seealso cref="T:com.espertech.esper.pattern.MatchedEventMap"/>
            instances pass until then. 
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.guard.Guard">
            <summary> Guard instances inspect a matched events and makes a determination on whether to let it pass or not.</summary>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.Guard.StartGuard">
            <summary> Start the guard operation.</summary>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.Guard.StopGuard">
            <summary> Called when sub-expression quits, or when the pattern Stopped.</summary>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.Guard.Inspect(com.espertech.esper.pattern.MatchedEventMap)">
            <summary> Returns true if inspection shows that the match events can pass, or false to not pass.</summary>
            <param name="matchEvent">is the map of matching events
            </param>
            <returns> true to pass, false to not pass
            </returns>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.ExpressionGuard.#ctor(com.espertech.esper.pattern.MatchedEventConvertor,com.espertech.esper.epl.expression.ExprEvaluator,com.espertech.esper.pattern.guard.Quitable)">
            <summary>
            Ctor.
            </summary>
            <param name="convertor">The convertor.</param>
            <param name="expression">The expression.</param>
            <param name="quitable">to use to indicate that the gaurd quitted</param>
        </member>
        <member name="T:com.espertech.esper.pattern.guard.ExpressionGuardFactory">
            <summary>
            Factory for <seealso cref="T:com.espertech.esper.pattern.guard.TimerWithinGuard"/> instances. 
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.guard.GuardFactory">
            <summary>Interface for a factory for <seealso cref="T:com.espertech.esper.pattern.guard.Guard"/> instances. </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.GuardFactory.SetGuardParameters(System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode},com.espertech.esper.pattern.MatchedEventConvertor)">
            <summary>Sets the guard object parameters. </summary>
            <param name="guardParameters">is a list of parameters</param>
            <param name="convertor">for converting a</param>
            <throws>GuardParameterException thrown to indicate a parameter problem</throws>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.GuardFactory.MakeGuard(com.espertech.esper.pattern.PatternAgentInstanceContext,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.guard.Quitable,com.espertech.esper.pattern.EvalStateNodeNumber,System.Object)">
            <summary>Constructs a guard instance. </summary>
            <param name="context">services for use by guard</param>
            <param name="beginState">the prior matching events</param>
            <param name="quitable">to use for indicating the guard has quit</param>
            <param name="stateNodeId">a node id for the state object</param>
            <param name="guardState">state node for guard</param>
            <returns>guard instance</returns>
        </member>
        <member name="F:com.espertech.esper.pattern.guard.ExpressionGuardFactory.Convertor">
            <summary>For converting matched-events maps to events-per-stream. </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.guard.GuardEnum">
            <summary> 
            Enum for all build-in guards.
            </summary>
        </member>
        <member name="F:com.espertech.esper.pattern.guard.GuardEnum.TIMER_WITHIN">
            <summary>
            Timer guard.
            </summary>
        </member>
        <member name="F:com.espertech.esper.pattern.guard.GuardEnum.Values">
            <summary>
            All values available through this pseudo-enum
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.GuardEnum.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.pattern.guard.GuardEnum"/> class.
            </summary>
            <param name="nspace">The nspace.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.GuardEnum.ForName(System.String,System.String)">
            <summary>Returns the enum for the given namespace and name.</summary>
            <param name="nspace">guard namespace</param>
            <param name="name">guard name</param>
            <returns>enum</returns>
        </member>
        <member name="P:com.espertech.esper.pattern.guard.GuardEnum.Namespace">
            <summary>
            Gets the namespace.
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="P:com.espertech.esper.pattern.guard.GuardEnum.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.GuardEnumExtensions.GetClazz(com.espertech.esper.pattern.guard.GuardEnum)">
            <summary>
            Gets the class associated with the guard enum.
            </summary>
            <param name="guardEnum">The guard enum.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.pattern.guard.GuardFactorySupport">
            <summary>
            Abstract class for applications to extend to implement pattern guard objects.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.GuardFactorySupport.SetGuardParameters(System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode},com.espertech.esper.pattern.MatchedEventConvertor)">
            <summary>
            Sets the guard object parameters.
            </summary>
            <param name="guardParameters">is a list of parameters</param>
            <param name="convertor">for converting a</param>
            <throws>GuardParameterException thrown to indicate a parameter problem</throws>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.GuardFactorySupport.MakeGuard(com.espertech.esper.pattern.PatternAgentInstanceContext,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.guard.Quitable,com.espertech.esper.pattern.EvalStateNodeNumber,System.Object)">
            <summary>
            Constructs a guard instance.
            </summary>
            <param name="context">services for use by guard</param>
            <param name="beginState">the prior matching events</param>
            <param name="quitable">to use for indicating the guard has quit</param>
            <param name="stateNodeId">a node id for the state object</param>
            <param name="guardState">state node for guard</param>
            <returns>
            guard instance
            </returns>
        </member>
        <member name="T:com.espertech.esper.pattern.guard.GuardParameterException">
            <summary>Thrown to indicate a validation error in guard parameterization.</summary>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.GuardParameterException.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="message">validation error message</param>
        </member>
        <member name="T:com.espertech.esper.pattern.guard.GuardSupport">
            <summary>
            Abstract class for applications to extend to implement a pattern guard.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.GuardSupport.StartGuard">
            <summary>
            Start the guard operation.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.GuardSupport.StopGuard">
            <summary>
            Called when sub-expression quits, or when the pattern Stopped.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.GuardSupport.Inspect(com.espertech.esper.pattern.MatchedEventMap)">
            <summary>
            Returns true if inspection shows that the match events can pass, or false to not pass.
            </summary>
            <param name="matchEvent">is the map of matching events</param>
            <returns>true to pass, false to not pass</returns>
        </member>
        <member name="T:com.espertech.esper.pattern.guard.TimerWithinGuard">
            <summary>
            Guard implementation that keeps a timer instance and quits when the timer expired, letting all <seealso cref="T:com.espertech.esper.pattern.MatchedEventMap"/> instances pass until then.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.TimerWithinGuard.#ctor(System.Int64,com.espertech.esper.pattern.guard.Quitable)">
            <summary>Ctor. </summary>
            <param name="msec">number of millisecond to guard expiration</param>
            <param name="quitable">to use to indicate that the gaurd quitted</param>
        </member>
        <member name="T:com.espertech.esper.pattern.guard.TimerWithinGuardFactory">
            <summary>
            Factory for <seealso cref="T:com.espertech.esper.pattern.guard.TimerWithinGuard"/> instances.
            </summary>
        </member>
        <member name="F:com.espertech.esper.pattern.guard.TimerWithinGuardFactory.MillisecondsExpr">
            <summary>Number of milliseconds. </summary>
        </member>
        <member name="F:com.espertech.esper.pattern.guard.TimerWithinGuardFactory.Convertor">
            <summary>For converting matched-events maps to events-per-stream. </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.guard.TimerWithinOrMaxCountGuard">
            <summary>
            Guard implementation that keeps a timer instance and quits when the timer expired, and also 
            keeps a count of the number of matches so far, checking both count and timer, letting
             all <seealso cref="T:com.espertech.esper.pattern.MatchedEventMap"/> instances pass until then.
             </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.guard.TimerWithinOrMaxCountGuard.#ctor(System.Int64,System.Int32,com.espertech.esper.pattern.guard.Quitable)">
            <summary>Ctor. </summary>
            <param name="msec">number of millisecond to guard expiration</param>
            <param name="numCountTo">max number of counts</param>
            <param name="quitable">to use to indicate that the gaurd quitted</param>
        </member>
        <member name="F:com.espertech.esper.pattern.guard.TimerWithinOrMaxCountGuardFactory._convertor">
            <summary>For converting matched-events maps to events-per-stream. </summary>
        </member>
        <member name="F:com.espertech.esper.pattern.guard.TimerWithinOrMaxCountGuardFactory._millisecondsExpr">
            <summary>Number of milliseconds. </summary>
        </member>
        <member name="F:com.espertech.esper.pattern.guard.TimerWithinOrMaxCountGuardFactory._numCountToExpr">
            <summary>Number of count-to max. </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.MatchedEventConvertor">
            <summary>
            Converts from a map of prior matching events to a events per stream for resolution 
            by expressions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.MatchedEventConvertor.Convert(com.espertech.esper.pattern.MatchedEventMap)">
            <summary>
            Converts pattern matching events to events per stream.
            </summary>
            <param name="events">pattern partial matches</param>
            <returns>events per stream</returns>
        </member>
        <member name="T:com.espertech.esper.pattern.MatchedEventConvertorImpl">
            <summary>
            Implements a convertor for pattern partial results to events per stream.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.MatchedEventConvertorImpl.#ctor(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,com.espertech.esper.collection.Pair{com.espertech.esper.client.EventType,System.String}}},System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,com.espertech.esper.collection.Pair{com.espertech.esper.client.EventType,System.String}}},com.espertech.esper.compat.collections.LinkedHashSet{System.String},com.espertech.esper.events.EventAdapterService)">
            <summary>
            Ctor.
            </summary>
            <param name="filterTypes">the filter one-event types</param>
            <param name="arrayEventTypes">the filter many-event types</param>
            <param name="allTags">All tags.</param>
            <param name="eventAdapterService">for creating wrappers if required</param>
        </member>
        <member name="T:com.espertech.esper.pattern.MatchedEventMap">
            <summary>
            Collection for internal use similar to the MatchedEventMap class in the client 
            package that holds the one or more events that could match any defined event 
            expressions. The optional tag value supplied when an event expression is created 
            is used as a key for placing matching event objects into this collection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.MatchedEventMap.Add(System.Int32,System.Object)">
            <summary>Add an event to the collection identified by the given tag. </summary>
            <param name="tag">is an identifier to retrieve the event from</param>
            <param name="theEvent">is the event object or array of event object to be added</param>
        </member>
        <member name="M:com.espertech.esper.pattern.MatchedEventMap.GetMatchingEvent(System.Int32)">
            <summary>
            Returns a single event instance given the tag identifier, or null if
            the tag could not be located.
            </summary>
            <param name="tag">is the identifier to look for</param>
            <returns>event instances for the tag</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.MatchedEventMap.GetMatchingEventAsObject(System.Int32)">
            <summary>
            Returns the object for the matching event, be it the event bean array or the event bean.
            </summary>
            <param name="tag">is the tag to return the object for</param>
            <returns>event bean or event bean array</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.MatchedEventMap.ShallowCopy">
            <summary>Make a shallow copy of this collection. </summary>
            <returns>shallow copy</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.MatchedEventMap.Merge(com.espertech.esper.pattern.MatchedEventMap)">
            <summary>
            Merge the state of an other match event structure into this one by adding
            all entries within the MatchedEventMap to this match event.
            </summary>
            <param name="other">is the other instance to merge in.</param>
        </member>
        <member name="P:com.espertech.esper.pattern.MatchedEventMap.MatchingEvents">
            <summary>
            Returns a map containing the events where the key is the event tag string and 
            the value is the event instance.
            </summary>
            <value>Map containing event instances</value>
        </member>
        <member name="T:com.espertech.esper.pattern.MatchedEventMapImpl">
            <summary>
            Collection for internal use similar to the MatchedEventMap class in the client 
            package that holds the one or more events that could match any defined event expressions.
            The optional tag value supplied when an event expression is created is used as a key for
            placing matching event objects into this collection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.MatchedEventMapImpl.#ctor(com.espertech.esper.pattern.MatchedEventMapMeta)">
            <summary>Constructor creates an empty collection of events. </summary>
            <param name="meta">metadata</param>
        </member>
        <member name="M:com.espertech.esper.pattern.MatchedEventMapImpl.Add(System.Int32,System.Object)">
            <summary>Add an event to the collection identified by the given tag. </summary>
            <param name="tag">is an identifier to retrieve the event from</param>
            <param name="theEvent">is the event object or array of event object to be added</param>
        </member>
        <member name="M:com.espertech.esper.pattern.MatchedEventMapImpl.GetMatchingEvent(System.Int32)">
            <summary>Returns a single event instance given the tag identifier, or null if the tag could not be located. </summary>
            <param name="tag">is the identifier to look for</param>
            <returns>event instances for the tag</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.MatchedEventMapImpl.ShallowCopy">
            <summary>Make a shallow copy of this collection. </summary>
            <returns>shallow copy</returns>
        </member>
        <member name="M:com.espertech.esper.pattern.MatchedEventMapImpl.Merge(com.espertech.esper.pattern.MatchedEventMap)">
            <summary>Merge the state of an other match event structure into this one by adding all entries within the MatchedEventMap to this match event. </summary>
            <param name="other">is the other instance to merge in.</param>
        </member>
        <member name="P:com.espertech.esper.pattern.MatchedEventMapImpl.MatchingEvents">
            <summary>Returns a map containing the events where the key is the event tag string and the value is the event instance. </summary>
            <value>Hashtable containing event instances</value>
        </member>
        <member name="T:com.espertech.esper.pattern.observer.EventObserver">
            <summary> Observers observe and indicate other external events such as timing events.</summary>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.EventObserver.StartObserve">
            <summary> Start observing.</summary>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.EventObserver.StopObserve">
            <summary> Stop observing.</summary>
        </member>
        <member name="T:com.espertech.esper.pattern.observer.EventObserverSupport">
            <summary>
            Abstract class for applications to extend to implement a pattern observer.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.observer.ObserverEnum">
            <summary>
            Enum for all build-in observers.
            </summary>
        </member>
        <member name="F:com.espertech.esper.pattern.observer.ObserverEnum.TIMER_INTERVAL">
            <summary>
            Observer for letting pass/waiting an interval amount of time.
            </summary>
        </member>
        <member name="F:com.espertech.esper.pattern.observer.ObserverEnum.TIMER_CRON">
            <summary>
            Observer for 'at' (crontab) observation of timer events.
            </summary>
        </member>
        <member name="F:com.espertech.esper.pattern.observer.ObserverEnum.Values">
            <summary>
            All values available through this pseudo-enum
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.ObserverEnum.#ctor(System.String,System.String,System.Type)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.ObserverEnum.ForName(System.String,System.String)">
            <summary>
            Returns observer enum for namespace name and observer name.
            </summary>
            <param name="nspace">namespace name</param>
            <param name="name">observer name</param>
        </member>
        <member name="P:com.espertech.esper.pattern.observer.ObserverEnum.Namespace">
            <summary>
            Gets the observer namespace name.
            </summary>
            <value>The observer namespace name.</value>
        </member>
        <member name="P:com.espertech.esper.pattern.observer.ObserverEnum.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:com.espertech.esper.pattern.observer.ObserverEnum.Type">
            <summary>
            Gets the implementation clazz.
            </summary>
            <value>The implementation clazz.</value>
        </member>
        <member name="T:com.espertech.esper.pattern.observer.ObserverFactory">
            <summary>Interface for factories for making observer instances. </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.ObserverFactory.SetObserverParameters(System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode},com.espertech.esper.pattern.MatchedEventConvertor)">
            <summary>Sets the observer object parameters. </summary>
            <param name="observerParameters">is a list of parameters</param>
            <param name="convertor">for converting partial pattern matches to event-per-stream for expressions</param>
            <throws>ObserverParameterException thrown to indicate a parameter problem</throws>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.ObserverFactory.MakeObserver(com.espertech.esper.pattern.PatternAgentInstanceContext,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.observer.ObserverEventEvaluator,com.espertech.esper.pattern.EvalStateNodeNumber,System.Object)">
            <summary>Make an observer instance.  </summary>
            <param name="context">services that may be required by observer implementation</param>
            <param name="beginState">start state for observer</param>
            <param name="observerEventEvaluator">receiver for events observed</param>
            <param name="stateNodeId">optional id for the associated pattern state node</param>
            <param name="observerState">state node for observer</param>
            <returns>observer instance</returns>
        </member>
        <member name="T:com.espertech.esper.pattern.observer.ObserverFactorySupport">
            <summary>
            Abstract class for applications to extend to implement a pattern observer factory.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.ObserverFactorySupport.SetObserverParameters(System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode},com.espertech.esper.pattern.MatchedEventConvertor)">
            <summary>
            Sets the observer object parameters.
            </summary>
            <param name="paramList">is a list of parameters</param>
            <param name="convertor">for converting partial pattern matches to event-per-stream for expressions</param>
            <throws>ObserverParameterException thrown to indicate a parameter problem</throws>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.ObserverFactorySupport.MakeObserver(com.espertech.esper.pattern.PatternAgentInstanceContext,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.observer.ObserverEventEvaluator,com.espertech.esper.pattern.EvalStateNodeNumber,System.Object)">
            <summary>
            Make an observer instance.
            </summary>
            <param name="context">services that may be required by observer implementation</param>
            <param name="beginState">start state for observer</param>
            <param name="observerEventEvaluator">receiver for events observed</param>
            <param name="stateNodeId">optional id for the associated pattern state node</param>
            <param name="observerState">state node for observer</param>
            <returns>
            observer instance
            </returns>
        </member>
        <member name="T:com.espertech.esper.pattern.observer.ObserverParameterException">
            <summary>Thrown to indicate a validation error in guard parameterization.</summary>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.ObserverParameterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.pattern.observer.ObserverParameterException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.ObserverParameterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.pattern.observer.ObserverParameterException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.ObserverParameterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.pattern.observer.ObserverParameterException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:com.espertech.esper.pattern.observer.TimerAtObserver">
            <summary>
            Observer implementation for indicating that a certain time arrived, similar to "crontab".
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.TimerAtObserver.#ctor(com.espertech.esper.schedule.ScheduleSpec,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.observer.ObserverEventEvaluator)">
            <summary>Ctor. </summary>
            <param name="scheduleSpec">specification containing the crontab schedule</param>
            <param name="beginState">start state</param>
            <param name="observerEventEvaluator">receiver for events</param>
        </member>
        <member name="T:com.espertech.esper.pattern.observer.TimerAtObserverFactory">
            <summary>
            Factory for 'crontab' observers that indicate truth when a time point was reached.
            </summary>
        </member>
        <member name="F:com.espertech.esper.pattern.observer.TimerAtObserverFactory._convertor">
            <summary>Convertor. </summary>
        </member>
        <member name="F:com.espertech.esper.pattern.observer.TimerAtObserverFactory._parameters">
            <summary>Parameters. </summary>
        </member>
        <member name="F:com.espertech.esper.pattern.observer.TimerAtObserverFactory._spec">
            <summary>The schedule specification for the timer-at. </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.TimerAtObserverFactory.SetObserverParameters(System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode},com.espertech.esper.pattern.MatchedEventConvertor)">
            <summary>
            Sets the observer parameters.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="convertor">The convertor.</param>
        </member>
        <member name="T:com.espertech.esper.pattern.observer.TimerIntervalObserver">
            <summary>Observer that will wait a certain interval before indicating true (raising an event). </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.observer.TimerIntervalObserver.#ctor(System.Int64,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.pattern.observer.ObserverEventEvaluator)">
            <summary>Ctor. </summary>
            <param name="msec">number of milliseconds</param>
            <param name="beginState">start state</param>
            <param name="observerEventEvaluator">receiver for events</param>
        </member>
        <member name="T:com.espertech.esper.pattern.observer.TimerIntervalObserverFactory">
            <summary>
            Factory for making observer instances.
            </summary>
        </member>
        <member name="F:com.espertech.esper.pattern.observer.TimerIntervalObserverFactory._convertor">
            <summary>Convertor to events-per-stream. </summary>
        </member>
        <member name="F:com.espertech.esper.pattern.observer.TimerIntervalObserverFactory._parameter">
            <summary>Parameters. </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.PatternAgentInstanceContext">
            <summary>
            Contains handles to implementations of services needed by evaluation nodes.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.PatternContext">
            <summary>Contains handles to implementations of services needed by evaluation nodes. </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternContext.#ctor(com.espertech.esper.core.service.StatementContext,System.Int32,com.espertech.esper.pattern.MatchedEventMapMeta,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="statementContext">is the statement context</param>
            <param name="streamNumber">is the stream number</param>
            <param name="matchedEventMapMeta">The matched event map meta.</param>
            <param name="isResilient">if set to <c>true</c> [is resilient].</param>
        </member>
        <member name="P:com.espertech.esper.pattern.PatternContext.FilterService">
            <summary>Returns service to use for filter evaluation. </summary>
            <value>filter evaluation service implemetation</value>
        </member>
        <member name="P:com.espertech.esper.pattern.PatternContext.SchedulingService">
            <summary>Returns service to use for schedule evaluation. </summary>
            <value>schedule evaluation service implemetation</value>
        </member>
        <member name="P:com.espertech.esper.pattern.PatternContext.ScheduleBucket">
            <summary>Returns the schedule bucket for ordering schedule callbacks within this pattern. </summary>
            <value>schedule bucket</value>
        </member>
        <member name="P:com.espertech.esper.pattern.PatternContext.EventAdapterService">
            <summary>Returns teh service providing event adaptering or wrapping. </summary>
            <value>event adapter service</value>
        </member>
        <member name="P:com.espertech.esper.pattern.PatternContext.EpStatementHandle">
            <summary>Returns the statement's resource handle for locking. </summary>
            <value>handle of statement</value>
        </member>
        <member name="P:com.espertech.esper.pattern.PatternContext.StatementId">
            <summary>Returns the statement id. </summary>
            <value>statement id</value>
        </member>
        <member name="P:com.espertech.esper.pattern.PatternContext.StatementName">
            <summary>Returns the statement name. </summary>
            <value>statement name</value>
        </member>
        <member name="P:com.espertech.esper.pattern.PatternContext.StreamNumber">
            <summary>Returns the stream number. </summary>
            <value>stream number</value>
        </member>
        <member name="P:com.espertech.esper.pattern.PatternContext.EngineURI">
            <summary>Returns the engine URI. </summary>
            <value>engine URI</value>
        </member>
        <member name="P:com.espertech.esper.pattern.PatternContext.ExtensionServicesContext">
            <summary>Returns extension services context for statement (statement-specific). </summary>
            <value>extension services</value>
        </member>
        <member name="P:com.espertech.esper.pattern.PatternContext.VariableService">
            <summary>Returns the variable service. </summary>
            <value>variable service</value>
        </member>
        <member name="T:com.espertech.esper.pattern.PatternContextFactory">
            <summary>
            Factory for pattern context instances, creating context objects for each distinct 
            pattern based on the patterns root node and stream id.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternContextFactory.CreateContext(com.espertech.esper.core.service.StatementContext,System.Int32,com.espertech.esper.pattern.EvalRootFactoryNode,com.espertech.esper.pattern.MatchedEventMapMeta,System.Boolean)">
            <summary>
            Create a pattern context.
            </summary>
            <param name="statementContext">is the statement information and services</param>
            <param name="streamId">is the stream id</param>
            <param name="rootNode">is the pattern root node</param>
            <param name="matchedEventMapMeta">The matched event map meta.</param>
            <param name="allowResilient">if set to <c>true</c> [allow resilient].</param>
            <returns>pattern context</returns>
        </member>
        <member name="T:com.espertech.esper.pattern.PatternContextFactoryDefault">
            <summary>
            Default pattern context factory.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternContextFactoryDefault.CreateContext(com.espertech.esper.core.service.StatementContext,System.Int32,com.espertech.esper.pattern.EvalRootFactoryNode,com.espertech.esper.pattern.MatchedEventMapMeta,System.Boolean)">
            <summary>
            Create a pattern context.
            </summary>
            <param name="statementContext">is the statement information and services</param>
            <param name="streamId">is the stream id</param>
            <param name="rootNode">is the pattern root node</param>
            <param name="matchedEventMapMeta"></param>
            <param name="allowResilient"></param>
            <returns>pattern context</returns>
        </member>
        <member name="T:com.espertech.esper.pattern.PatternExpressionUtil">
            <summary>
            Utility for evaluating pattern expressions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternExpressionUtil.Evaluate(System.String,com.espertech.esper.pattern.MatchedEventMap,System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode},com.espertech.esper.pattern.MatchedEventConvertor,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Ctor. </summary>
            <param name="objectName">is the pattern object name</param>
            <param name="beginState">the pattern begin state</param>
            <param name="parameters">object parameters</param>
            <param name="convertor">for converting to a event-per-stream view for use to evaluate expressions</param>
            <param name="exprEvaluatorContext">expression evaluation context</param>
            <returns>expression results</returns>
            <throws>EPException if the evaluate failed</throws>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternExpressionUtil.Evaluate(System.String,com.espertech.esper.pattern.MatchedEventMap,com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.pattern.MatchedEventConvertor,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Evaluate the pattern expression. </summary>
            <param name="objectName">pattern object name</param>
            <param name="beginState">pattern state</param>
            <param name="parameter">expression node</param>
            <param name="convertor">to converting from pattern match to event-per-stream</param>
            <param name="exprEvaluatorContext">expression evaluation context</param>
            <returns>evaluation result</returns>
            <throws>EPException if the evaluation failed</throws>
        </member>
        <member name="T:com.espertech.esper.pattern.PatternMatchCallback">
            <summary>
            Used for anything that requires to be informed of matching events which would be stored
            in the MatchedEventMap structure passed to the implementation.
            </summary>
        </member>
        <member name="T:com.espertech.esper.pattern.PatternObjectException">
            <summary>
            This exception is thrown to indicate a problem with a view expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternObjectException.#ctor(System.String)">
            <summary>Constructor.</summary>
            <param name="message">is the error message</param>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternObjectException.#ctor(System.String,System.Exception)">
            <summary>Constructor for an inner exception and message.</summary>
            <param name="message">is the error message</param>
            <param name="cause">is the inner exception</param>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternObjectException.#ctor(System.Exception)">
            <summary>Constructor.</summary>
            <param name="cause">is the inner exception</param>
        </member>
        <member name="T:com.espertech.esper.pattern.PatternObjectHelper">
            <summary>
            Helper producing a repository of built-in pattern objects.
            </summary>
        </member>
        <member name="P:com.espertech.esper.pattern.PatternObjectHelper.BuiltinPatternObjects">
            <summary>Returns the built-in pattern objects.</summary>
            <returns>collection of built-in pattern objects.</returns>
        </member>
        <member name="T:com.espertech.esper.pattern.PatternObjectResolutionService">
            <summary>
            Factory service for resolving pattern objects such as guards and observers.
            </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternObjectResolutionService.Create(com.espertech.esper.epl.spec.PatternObserverSpec)">
            <summary>
            Creates an observer factory considering configured plugged-in resources.
            </summary>
            <param name="spec">is the namespace, name and parameters for the observer</param>
            <returns>observer factory</returns>
            <throws>PatternObjectException if the observer cannot be resolved</throws>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternObjectResolutionService.Create(com.espertech.esper.epl.spec.PatternGuardSpec)">
            <summary>
            Creates a guard factory considering configured plugged-in resources.
            </summary>
            <param name="spec">is the namespace, name and parameters for the guard</param>
            <returns>guard factory</returns>
            <throws>PatternObjectException if the guard cannot be resolved</throws>
        </member>
        <member name="T:com.espertech.esper.pattern.PatternObjectResolutionServiceImpl">
            <summary>Resolves pattern object namespace and name to guard or observer factory class, using configuration. </summary>
        </member>
        <member name="M:com.espertech.esper.pattern.PatternObjectResolutionServiceImpl.#ctor(com.espertech.esper.epl.spec.PluggableObjectCollection)">
            <summary>Ctor. </summary>
            <param name="patternObjects">is the pattern plug-in objects configured</param>
        </member>
        <member name="M:com.espertech.esper.pattern.ProxyPatternStopCallback.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="T:com.espertech.esper.plugin.PlugInEventBeanFactory">
            <summary>
            Factory for creating <see cref="T:com.espertech.esper.client.EventBean"/> event object wrapper for a plug-in event representation.
            <para/>
            Implementations typically reflect on the event object to be processed and decides on the proper
            <see cref="T:com.espertech.esper.client.EventType"/> to assign. If the implementation finds that it cannot
            handle the event object, it should return null. Returning null gives another instance of this
            class as specified by the list of URI to handle the event object.
            <para>
            Returns an event wrapper for the event object specific to the plug-in event representation or
            using one of the built-in types, or null if the event object is unknown and cannot be handled.
            </para>
            </summary>
            <param name="theEvent">is the event object to reflect upon and wrap</param>
            <param name="resolutionURI">is the URI used originally for obtaining the event sender</param>
            <returns>
            wrapped event object, or null if the event is of unknown type or content
            </returns>
        </member>
        <member name="T:com.espertech.esper.plugin.PlugInEventBeanReflectorContext">
            <summary>
            Context for use in <see cref="T:com.espertech.esper.plugin.PlugInEventRepresentation"/> to provide information to
            help decide whether an event representation can handle the requested resolution
            URI for creating event object wrappers.
            </summary>
        </member>
        <member name="M:com.espertech.esper.plugin.PlugInEventBeanReflectorContext.#ctor(System.Uri)">
            <summary>
            Ctor.
            </summary>
            <param name="uri">is the resolution URI provided as part of <see cref="M:com.espertech.esper.client.EPRuntime.GetEventSender(System.Uri[])"/></param>
        </member>
        <member name="P:com.espertech.esper.plugin.PlugInEventBeanReflectorContext.ResolutionURI">
            <summary>Returns the resolution URI. </summary>
            <returns>resolution URI</returns>
        </member>
        <member name="T:com.espertech.esper.plugin.PlugInEventRepresentation">
            <summary>
            Plug-in event representation that can dynamically create event types and event
            instances based on information available elsewhere.
            <para>
            A plug-in event representation can be useful when your application has existing
            types that carry event metadata and event property values and your application
            does not want to (or cannot) extract or transform such event metadata and event
            data into one of the built-in event representations (objects, DataMap or XML DOM).
            </para>
            <para>
            Further use of a plug-in event representation is to provide a faster or short-cut
            access path to event data. For example, the access to XML event data through a StAX
            Streaming API for XML (SAX) is known to be very efficient.
            </para>
            <para>
            Further, a plug-in event representation can provide network lookup and general
            abstraction of event typing and event sourcing.
            </para>
            <para>
            Before use, an implementation of this interface must be registered via configuration.
            Upon engine initialization, the engine invokes the <see cref="M:com.espertech.esper.plugin.PlugInEventRepresentation.Init(com.espertech.esper.plugin.PlugInEventRepresentationContext)"/> method passing
            configuration information.
            </para>
            <para>
            When a plug-in event type name is registered via configuration (runtime or configuration
            time), the engine first asks the implementation whether the type is accepted via
            <see cref="M:com.espertech.esper.plugin.PlugInEventRepresentation.AcceptsType(com.espertech.esper.plugin.PlugInEventTypeHandlerContext)"/>. If accepted, the engine follows with a call to <see cref="M:com.espertech.esper.plugin.PlugInEventRepresentation.GetTypeHandler(com.espertech.esper.plugin.PlugInEventTypeHandlerContext)"/>
            for creating and handling the type.
            </para>
            <para>
            An implementation can participate in dynamic resolution of new (unseen) event type
            names if the application configures the URI of the event representation, or a child URI
            (parameters possible) via <see cref="P:com.espertech.esper.client.ConfigurationOperations.PlugInEventTypeResolutionURIs"/>.
            </para>
            <para>
            Last, see <see cref="M:com.espertech.esper.client.EPRuntime.GetEventSender(System.Uri[])"/>. An
            event sender allows dynamic reflection on an incoming event object. At the time such
            an event sender is obtained and a matching URI specified, the
            <see cref="M:com.espertech.esper.plugin.PlugInEventRepresentation.AcceptsEventBeanResolution(com.espertech.esper.plugin.PlugInEventBeanReflectorContext)"/> method indicates that the event representation can
            or cannot inspect events, and the <see cref="T:com.espertech.esper.plugin.PlugInEventBeanFactory"/> returned is used by
            the event sender to wrap event objects for processing. 
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.plugin.PlugInEventRepresentation.Init(com.espertech.esper.plugin.PlugInEventRepresentationContext)">
            <summary>
            Initializes the event representation.
            </summary>
            <param name="eventRepresentationContext">URI and optional configuration information</param>
        </member>
        <member name="M:com.espertech.esper.plugin.PlugInEventRepresentation.AcceptsType(com.espertech.esper.plugin.PlugInEventTypeHandlerContext)">
            <summary>
            Returns true to indicate that the event representation can handle the requested event type.
            <para/>
            Called when a new plug-in event type and name is registered and the its resolution URI
            matches or is a child URI of the event representation URI.
            <para/>
            Also called when a new EPL statement is created with an unseen event type name and the
            URIs for resolution have been configured.
            </summary>
            <param name="acceptTypeContext">provides the URI specified for resolving the type, and configuration info.</param>
            <returns>
            true to accept the type, false such that another event representation may handle the type request
            </returns>
        </member>
        <member name="M:com.espertech.esper.plugin.PlugInEventRepresentation.GetTypeHandler(com.espertech.esper.plugin.PlugInEventTypeHandlerContext)">
            <summary>
            Returns the event type handler that provides the event type and, upon request, event sender,
            for this type.
            </summary>
            <param name="eventTypeContext">provides the URI specified for resolving the type, and configuration info.</param>
            <returns>provides event type and event sender</returns>
        </member>
        <member name="M:com.espertech.esper.plugin.PlugInEventRepresentation.AcceptsEventBeanResolution(com.espertech.esper.plugin.PlugInEventBeanReflectorContext)">
            <summary>
            For use with <see cref="M:com.espertech.esper.client.EPRuntime.GetEventSender(System.Uri[])"/>, returns 
            true if the event representation intends to provide event wrappers for event objects passed in.
            </summary>
            <param name="acceptBeanContext">provides the URI specified for resolving the event object reflection</param>
            <returns>
            true to accept the requested URI, false such that another event representation may handle the request
            </returns>
        </member>
        <member name="M:com.espertech.esper.plugin.PlugInEventRepresentation.GetEventBeanFactory(com.espertech.esper.plugin.PlugInEventBeanReflectorContext)">
            <summary>
            For use with <see cref="M:com.espertech.esper.client.EPRuntime.GetEventSender(System.Uri[])"/>, returns
            the factory that can inspect event objects and provide an event <see cref="T:com.espertech.esper.client.EventBean"/> wrapper.
            </summary>
            <param name="eventBeanContext">provides the URI specified for resolving the event object reflection</param>
            <returns>
            true to accept the requested URI, false such that another event representation may handle the request
            </returns>
        </member>
        <member name="T:com.espertech.esper.plugin.PlugInEventRepresentationContext">
            <summary>Context for use in <see cref="T:com.espertech.esper.plugin.PlugInEventRepresentation"/> to initialize an implementation. </summary>
        </member>
        <member name="M:com.espertech.esper.plugin.PlugInEventRepresentationContext.#ctor(com.espertech.esper.events.EventAdapterService,System.Uri,System.Object)">
            <summary>Ctor. </summary>
            <param name="eventAdapterService">for creating further event types or wrapping event objects</param>
            <param name="eventRepresentationRootURI">URI of the event representation</param>
            <param name="representationInitializer">initializer objects</param>
        </member>
        <member name="P:com.espertech.esper.plugin.PlugInEventRepresentationContext.EventRepresentationRootURI">
            <summary>Ctor. </summary>
            <returns>URI of event representation instance</returns>
        </member>
        <member name="P:com.espertech.esper.plugin.PlugInEventRepresentationContext.RepresentationInitializer">
            <summary>Returns optional configuration for the event representation, or null if none supplied. An String XML document if the configuration was read from an XML file. </summary>
            <returns>configuration, or null if none supplied</returns>
        </member>
        <member name="P:com.espertech.esper.plugin.PlugInEventRepresentationContext.EventAdapterService">
            <summary>Returns the service for for creating further event types or wrapping event objects. </summary>
            <returns>event adapter service</returns>
        </member>
        <member name="T:com.espertech.esper.plugin.PlugInEventTypeHandler">
            <summary>
            Provided once by an <seealso cref="T:com.espertech.esper.plugin.PlugInEventRepresentation"/> for any event type it creates.
            </summary>
        </member>
        <member name="M:com.espertech.esper.plugin.PlugInEventTypeHandler.GetSender(com.espertech.esper.core.service.EPRuntimeEventSender)">
            <summary>Returns a facility responsible for converting or wrapping event objects. </summary>
            <param name="runtimeEventSender">for sending events into the engine</param>
            <returns>sender</returns>
        </member>
        <member name="P:com.espertech.esper.plugin.PlugInEventTypeHandler.EventType">
            <summary>Returns the event type. </summary>
            <value>event type.</value>
        </member>
        <member name="T:com.espertech.esper.plugin.PlugInEventTypeHandlerContext">
            <summary>
            Context for use in <seealso cref="T:com.espertech.esper.plugin.PlugInEventRepresentation"/> to provide information 
            to help decide whether an event representation can handle the requested event type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.plugin.PlugInEventTypeHandlerContext.#ctor(System.Uri,System.Object,System.String,System.Int32)">
            <summary>
            Ctor.
            </summary>
            <param name="eventTypeResolutionURI">the URI specified for resolving the event type, may be a child URI of the event representation URI and may carry additional parameters</param>
            <param name="typeInitializer">optional configuration for the type, or null if none supplied</param>
            <param name="eventTypeName">the name of the event</param>
            <param name="eventTypeId">The event type id.</param>
        </member>
        <member name="P:com.espertech.esper.plugin.PlugInEventTypeHandlerContext.EventTypeResolutionURI">
            <summary>Returns the URI specified for resolving the event type, may be a child URI of the event representation URI and may carry additional parameters </summary>
            <value>URI</value>
        </member>
        <member name="P:com.espertech.esper.plugin.PlugInEventTypeHandlerContext.TypeInitializer">
            <summary>Returns optional configuration for the type, or null if none supplied. An String XML document if the configuration was read from an XML file. </summary>
            <value>configuration, or null if none supplied</value>
        </member>
        <member name="P:com.espertech.esper.plugin.PlugInEventTypeHandlerContext.EventTypeName">
            <summary>Returns the name assigned to the event type. </summary>
            <value>name</value>
        </member>
        <member name="T:com.espertech.esper.plugin.PluginLoader">
            <summary>
            Interface for loaders of input/output adapters or any other adapter that may participate
            in an engine lifecycle.
            </summary>
        </member>
        <member name="M:com.espertech.esper.plugin.PluginLoader.Init(com.espertech.esper.plugin.PluginLoaderInitContext)">
            <summary>
            Initializes the adapter loader.
            <para/> 
            Invoked before the engine instance is fully initialized. Thereby this is not the place 
            to look up an engine instance from <seealso cref="T:com.espertech.esper.client.EPServiceProviderManager"/> 
            and use it. Use the {@link #postInitialize} method instead.
            </summary>
            <param name="context">the plug in context</param>
        </member>
        <member name="M:com.espertech.esper.plugin.PluginLoader.PostInitialize">
            <summary>
            Called after an engine instances has fully initialized and is already registered 
            with <seealso cref="T:com.espertech.esper.client.EPServiceProviderManager"/>.
            </summary>
        </member>
        <member name="T:com.espertech.esper.plugin.PluginLoaderInitContext">
            <summary>Context for plugin initialization. </summary>
        </member>
        <member name="M:com.espertech.esper.plugin.PluginLoaderInitContext.#ctor(System.String,com.espertech.esper.compat.Properties,System.String,com.espertech.esper.client.EPServiceProvider)">
            <summary>Initialization context for use with the adapter loader. </summary>
            <param name="name">is the loader name</param>
            <param name="properties">is a set of properties from the configuration</param>
            <param name="epService">is the SPI of the engine itself for sending events to</param>
            <param name="configXml">config xml</param>
        </member>
        <member name="P:com.espertech.esper.plugin.PluginLoaderInitContext.Name">
            <summary>Returns plugin name. </summary>
            <value>plugin name</value>
        </member>
        <member name="P:com.espertech.esper.plugin.PluginLoaderInitContext.Properties">
            <summary>Returns plugin properties. </summary>
            <value>plugin properties</value>
        </member>
        <member name="P:com.espertech.esper.plugin.PluginLoaderInitContext.ConfigXml">
            <summary>Returns plugin configuration XML, if any. </summary>
            <value>configuration XML</value>
        </member>
        <member name="P:com.espertech.esper.plugin.PluginLoaderInitContext.EpServiceProvider">
            <summary>Returns the engine loading the plugin. </summary>
            <value>engine</value>
        </member>
        <member name="T:com.espertech.esper.rowregex.EventRowRegexHelper">
            <summary>
            Helper for match recognize.
            </summary>
        </member>
        <member name="M:com.espertech.esper.rowregex.EventRowRegexHelper.RecursiveInspectVariables(com.espertech.esper.rowregex.RowRegexExprNode,System.Boolean,System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String})">
            <summary>
            Inspect variables recursively.
            </summary>
            <param name="parent">parent regex expression node</param>
            <param name="isMultiple">if the variable in the stack is multiple of single</param>
            <param name="variablesSingle">single variables list</param>
            <param name="variablesMultiple">group variables list</param>
        </member>
        <member name="M:com.espertech.esper.rowregex.EventRowRegexHelper.RecursiveBuildStartStates(com.espertech.esper.rowregex.RowRegexExprNode,System.Collections.Generic.IDictionary{System.String,com.espertech.esper.epl.expression.ExprNode},System.Collections.Generic.IDictionary{System.String,com.espertech.esper.collection.Pair{System.Int32,System.Boolean}})">
            <summary>
            Build a list of start states from the parent node.
            </summary>
            <param name="parent">to build start state for</param>
            <param name="variableDefinitions">each variable and its expressions</param>
            <param name="variableStreams">variable name and its stream number</param>
            <returns>
            strand of regex state nodes
            </returns>
        </member>
        <member name="T:com.espertech.esper.rowregex.EventRowRegexIteratorResult">
            <summary>
            Iteration result for row regex.
            </summary>
        </member>
        <member name="M:com.espertech.esper.rowregex.EventRowRegexIteratorResult.#ctor(System.Collections.Generic.IList{com.espertech.esper.rowregex.RegexNFAStateEntry},System.Int32)">
            <summary>
            Ctor.
            </summary>
            <param name="endStates">end states</param>
            <param name="eventSequenceNum">seq num of event</param>
        </member>
        <member name="P:com.espertech.esper.rowregex.EventRowRegexIteratorResult.EndStates">
            <summary>
            Returns the end states
            </summary>
            <returns>
            end states
            </returns>
        </member>
        <member name="P:com.espertech.esper.rowregex.EventRowRegexIteratorResult.EventSequenceNum">
            <summary>
            Returns the event seq num.
            </summary>
            <returns>
            seq num
            </returns>
        </member>
        <member name="T:com.espertech.esper.rowregex.EventRowRegexNFAView">
            <summary>
            View for match recognize support.
            </summary>
        </member>
        <member name="T:com.espertech.esper.rowregex.EventRowRegexNFAViewService">
            <summary>Service interface for match recognize. </summary>
        </member>
        <member name="M:com.espertech.esper.rowregex.EventRowRegexNFAView.#ctor(com.espertech.esper.client.EventType,com.espertech.esper.client.EventType,com.espertech.esper.epl.spec.MatchRecognizeSpec,com.espertech.esper.compat.collections.LinkedHashMap{System.String,com.espertech.esper.collection.Pair{System.Int32,System.Boolean}},System.Collections.Generic.IDictionary{System.Int32,System.String},System.Collections.Generic.ICollection{System.String},com.espertech.esper.core.context.util.AgentInstanceContext,System.Collections.Generic.SortedDictionary{System.Int32,System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprPreviousMatchRecognizeNode}},com.espertech.esper.epl.agg.service.AggregationServiceMatchRecognize,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="compositeEventType">readonly event type</param>
            <param name="rowEventType">event type for input rows</param>
            <param name="matchRecognizeSpec">specification</param>
            <param name="variableStreams">variables and their assigned stream number</param>
            <param name="streamsVariables">stream number and the assigned variable</param>
            <param name="variablesSingle">single variables</param>
            <param name="agentInstanceContext">The agent instance context.</param>
            <param name="callbacksPerIndex">for handling the 'prev' function</param>
            <param name="aggregationService">handles aggregations</param>
            <param name="isUnbound">true if unbound stream</param>
            <param name="isIterateOnly">true for iterate-only</param>
            <param name="isSelectAsksMultimatches">if asking for multimatches</param>
        </member>
        <member name="T:com.espertech.esper.rowregex.EventRowRegexNFAViewFactory">
            <summary>
            View factory for match-recognize view.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.ViewFactorySupport">
            <summary>
            Abstract base class for view factories that do not make re-useable views and that 
            do not share view resources with expression nodes.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewFactorySupport.MakeView(com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext)">
            <summary>Create a new view.  </summary>
            <param name="agentInstanceViewFactoryContext"></param>
        </member>
        <member name="M:com.espertech.esper.view.ViewFactorySupport.Attach(com.espertech.esper.client.EventType,com.espertech.esper.core.service.StatementContext,com.espertech.esper.view.ViewFactory,System.Collections.Generic.IList{com.espertech.esper.view.ViewFactory})">
            <summary>Attaches the factory to a parent event type such that the factory can validate attach requirements and determine an event type for resulting views. </summary>
            <param name="parentEventType">is the parent event stream's or view factory's event type</param>
            <param name="statementContext">contains the services needed for creating a new event type</param>
            <param name="optionalParentFactory">is null when there is no parent view factory, or contains theparent view factory </param>
            <param name="parentViewFactories">is a list of all the parent view factories or empty list if there are none</param>
            <throws>ViewParameterException is thrown to indicate that this view factories's view would not playwith the parent view factories view </throws>
        </member>
        <member name="M:com.espertech.esper.view.ViewFactorySupport.SetViewParameters(com.espertech.esper.view.ViewFactoryContext,System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode})">
            <summary>Indicates user EPL query view parameters to the view factory. </summary>
            <param name="viewFactoryContext">supplied context information for the view factory</param>
            <param name="viewParameters">is the objects representing the view parameters</param>
            <throws>ViewParameterException if the parameters don't match view parameter needs</throws>
        </member>
        <member name="M:com.espertech.esper.view.ViewFactorySupport.ValidateAndEvaluate(System.String,com.espertech.esper.core.service.StatementContext,com.espertech.esper.epl.expression.ExprNode)">
            <summary>Validate the view parameter expression and evaluate the expression returning the result object. </summary>
            <param name="viewName">textual name of view</param>
            <param name="statementContext">context with statement services</param>
            <param name="expression">view expression parameter to validate</param>
            <returns>object result value of parameter expression</returns>
            <throws>ViewParameterException if the expressions fail to validate</throws>
        </member>
        <member name="M:com.espertech.esper.view.ViewFactorySupport.ValidateAndEvaluate(System.String,com.espertech.esper.core.service.StatementContext,System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode})">
            <summary>Validate the view parameter expressions and evaluate the expressions returning the result object. </summary>
            <param name="viewName">textual name of view</param>
            <param name="statementContext">context with statement services</param>
            <param name="expressions">view expression parameter to validate</param>
            <returns>object result value of parameter expressions</returns>
            <throws>ViewParameterException if the expressions fail to validate</throws>
        </member>
        <member name="M:com.espertech.esper.view.ViewFactorySupport.Validate(System.String,com.espertech.esper.client.EventType,com.espertech.esper.core.service.StatementContext,System.Collections.Generic.IList{com.espertech.esper.epl.expression.ExprNode},System.Boolean)">
            <summary>
            Validate the view parameter expressions and return the validated expression for later execution.
            <para/> Does not evaluate the expression.
            </summary>
            <param name="viewName">textual name of view</param>
            <param name="eventType">is the event type of the parent view or stream attached.</param>
            <param name="statementContext">context with statement services</param>
            <param name="expressions">view expression parameter to validate</param>
            <param name="allowConstantResult">true to indicate whether expressions that return a constantresult should be allowed; false to indicate that if an expression is known to return a constant result the expression is considered invalid</param>
            <returns>
            object result value of parameter expressions
            </returns>
            <throws>ViewParameterException if the expressions fail to validate</throws>
        </member>
        <member name="M:com.espertech.esper.view.ViewFactorySupport.AssertReturnsNonConstant(System.String,com.espertech.esper.epl.expression.ExprNode,System.Int32)">
            <summary>Assert and throws an exception if the expression passed returns a non-constant value. </summary>
            <param name="viewName">textual name of view</param>
            <param name="expression">expression to check</param>
            <param name="index">number offset of expression in view parameters</param>
            <throws>ViewParameterException if assertion fails</throws>
        </member>
        <member name="M:com.espertech.esper.view.ViewFactorySupport.EvaluateAssertNoProperties(System.String,com.espertech.esper.epl.expression.ExprNode,System.Int32,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>Assert and throws an exception if the expression uses event property values. </summary>
            <param name="viewName">textual name of view</param>
            <param name="expression">expression to check</param>
            <param name="index">number offset of expression in view parameters</param>
            <param name="exprEvaluatorContext">context for expression evaluation</param>
            <returns>expression evaluation value</returns>
            <throws>ViewParameterException if assertion fails</throws>
        </member>
        <member name="P:com.espertech.esper.view.ViewFactorySupport.EventType">
            <summary>
            Returns the event type that the view that is created by the view factory would create for events posted by the view.
            </summary>
            <value>event type of view's created by the view factory</value>
        </member>
        <member name="M:com.espertech.esper.rowregex.EventRowRegexNFAViewFactory.#ctor(com.espertech.esper.view.ViewFactoryChain,com.espertech.esper.epl.spec.MatchRecognizeSpec,com.espertech.esper.core.context.util.AgentInstanceContext,System.Boolean,System.Attribute[])">
            <summary>
            Ctor.
            </summary>
            <param name="viewChain">views</param>
            <param name="matchRecognizeSpec">specification</param>
            <param name="agentInstanceContext">The agent instance context.</param>
            <param name="isUnbound">true for unbound stream</param>
            <param name="annotations">annotations</param>
            <throws>ExprValidationException if validation fails</throws>
        </member>
        <member name="T:com.espertech.esper.rowregex.MultimatchState">
            <summary>
            State holder for matches, backed by an array, for fast copying and writing.
            </summary>
        </member>
        <member name="M:com.espertech.esper.rowregex.MultimatchState.#ctor(com.espertech.esper.client.EventBean)">
            <summary>
            Ctor.
            </summary>
            <param name="theEvent">first event to hold</param>
        </member>
        <member name="M:com.espertech.esper.rowregex.MultimatchState.#ctor(com.espertech.esper.rowregex.MultimatchState)">
            <summary>
            Ctor.
            </summary>
            <param name="state">to copy</param>
        </member>
        <member name="M:com.espertech.esper.rowregex.MultimatchState.Add(com.espertech.esper.client.EventBean)">
            <summary>
            Add an event.
            </summary>
            <param name="theEvent">to add</param>
        </member>
        <member name="M:com.espertech.esper.rowregex.MultimatchState.GetBuffer">
            <summary>
            Returns the raw buffer.
            </summary>
            <returns>
            buffer
            </returns>
        </member>
        <member name="M:com.espertech.esper.rowregex.MultimatchState.ContainsEvent(com.espertech.esper.client.EventBean)">
            <summary>
            Determines if an event is in the collection.
            </summary>
            <param name="theEvent">to check</param>
            <returns>
            indicator
            </returns>
        </member>
        <member name="M:com.espertech.esper.rowregex.MultimatchState.GetEventArray">
            <summary>
            Returns the buffer sized to only the contained events.
            </summary>
            <returns>
            events
            </returns>
        </member>
        <member name="P:com.espertech.esper.rowregex.MultimatchState.Count">
            <summary>
            Returns the count of events.
            </summary>
            <returns>
            count
            </returns>
        </member>
        <member name="T:com.espertech.esper.rowregex.RegexNFAState">
            <summary>
            Match-recognize NFA states provides this information.
            </summary>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexNFAState.Matches(com.espertech.esper.client.EventBean[],com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Evaluate a match.
            </summary>
            <param name="eventsPerStream">variabele values</param>
            <param name="exprEvaluatorContext">expression evaluation context</param>
            <returns>
            match indicator
            </returns>
        </member>
        <member name="P:com.espertech.esper.rowregex.RegexNFAState.IsMultiple">
            <summary>
            For multiple-quantifiers.
            </summary>
            <returns>
            indicator
            </returns>
        </member>
        <member name="P:com.espertech.esper.rowregex.RegexNFAState.NodeNumNested">
            <summary>
            Returns the nested node number.
            </summary>
            <returns>
            num
            </returns>
        </member>
        <member name="P:com.espertech.esper.rowregex.RegexNFAState.NodeNumFlat">
            <summary>
            Returns the absolute node num.
            </summary>
            <returns>
            num
            </returns>
        </member>
        <member name="P:com.espertech.esper.rowregex.RegexNFAState.VariableName">
            <summary>
            Returns the variable name.
            </summary>
            <returns>
            name
            </returns>
        </member>
        <member name="P:com.espertech.esper.rowregex.RegexNFAState.StreamNum">
            <summary>
            Returns stream number.
            </summary>
            <returns>
            stream num
            </returns>
        </member>
        <member name="P:com.espertech.esper.rowregex.RegexNFAState.IsGreedy">
            <summary>
            Returns greedy indicator.
            </summary>
            <returns>
            greedy indicator
            </returns>
        </member>
        <member name="P:com.espertech.esper.rowregex.RegexNFAState.NextStates">
            <summary>
            Returns the next states.
            </summary>
            <returns>
            states
            </returns>
        </member>
        <member name="T:com.espertech.esper.rowregex.RegexNFAStateAnyOne">
            <summary>
            Any-quantifier.
            </summary>
        </member>
        <member name="T:com.espertech.esper.rowregex.RegexNFAStateBase">
            <summary>
            Base for states.
            </summary>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexNFAStateBase.#ctor(System.String,System.String,System.Int32,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Ctor.
            </summary>
            <param name="nodeNum">node num</param>
            <param name="variableName">variable</param>
            <param name="streamNum">stream num</param>
            <param name="multiple">indicator</param>
            <param name="isGreedy">greedy indicator</param>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexNFAStateBase.AddState(com.espertech.esper.rowregex.RegexNFAState)">
            <summary>
            Add a next state.
            </summary>
            <param name="next">state to add</param>
        </member>
        <member name="P:com.espertech.esper.rowregex.RegexNFAStateBase.NodeNumFlat">
            <summary>
            Gets or sets a node number.
            </summary>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexNFAStateAnyOne.#ctor(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="nodeNum">node num</param>
            <param name="variableName">variable</param>
            <param name="streamNum">stream num</param>
            <param name="multiple">indicator</param>
        </member>
        <member name="T:com.espertech.esper.rowregex.RegexNFAStateEnd">
            <summary>
            End state in the regex NFA states.
            </summary>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexNFAStateEnd.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="T:com.espertech.esper.rowregex.RegexNFAStateEntry">
            <summary>
            State for a partial NFA match.
            </summary>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexNFAStateEntry.#ctor(System.Int32,System.Int64,com.espertech.esper.rowregex.RegexNFAState,com.espertech.esper.client.EventBean[],System.Int32[],com.espertech.esper.rowregex.MultimatchState[],System.Object)">
            <summary>
            Ctor.
            </summary>
            <param name="matchBeginEventSeqNo">the event number where the match started</param>
            <param name="matchBeginEventTime">the time the first match occured</param>
            <param name="state">the current match state</param>
            <param name="eventsPerStream">events for each single-match variable</param>
            <param name="greedycountPerState">number of greedy matches over all variables</param>
            <param name="optionalMultiMatches">matches for multirow-variables</param>
            <param name="partitionKey">key of partition</param>
        </member>
        <member name="F:com.espertech.esper.rowregex.RegexNFAStateEntry.MatchBeginEventSeqNo">
            <summary>
            Returns the event number of the first matching event.
            </summary>
            <returns>
            event number
            </returns>
        </member>
        <member name="F:com.espertech.esper.rowregex.RegexNFAStateEntry.MatchBeginEventTime">
            <summary>
            Returns the time of the first matching event.
            </summary>
            <returns>
            time
            </returns>
        </member>
        <member name="F:com.espertech.esper.rowregex.RegexNFAStateEntry.State">
            <summary>
            Returns the partial matches.
            </summary>
            <returns>
            state
            </returns>
        </member>
        <member name="F:com.espertech.esper.rowregex.RegexNFAStateEntry.EventsPerStream">
            <summary>
            Returns the single-variable matches.
            </summary>
            <returns>
            match events
            </returns>
        </member>
        <member name="F:com.espertech.esper.rowregex.RegexNFAStateEntry.OptionalMultiMatches">
            <summary>
            Returns the multirow-variable matches, if any.
            </summary>
            <returns>
            matches
            </returns>
        </member>
        <member name="F:com.espertech.esper.rowregex.RegexNFAStateEntry.GreedyCountPerState">
            <summary>
            Returns the count of greedy matches per state.
            </summary>
            <returns>
            greedy counts
            </returns>
        </member>
        <member name="F:com.espertech.esper.rowregex.RegexNFAStateEntry.MatchEndEventSeqNo">
            <summary>
            Gets or sets the match end event number.
            </summary>
        </member>
        <member name="F:com.espertech.esper.rowregex.RegexNFAStateEntry.PartitionKey">
            <summary>
            Returns the partition key.
            </summary>
            <returns>
            key
            </returns>
        </member>
        <member name="T:com.espertech.esper.rowregex.RegexNFAStateFilter">
            <summary>
            NFA state for a single match that applies a filter.
            </summary>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexNFAStateFilter.#ctor(System.String,System.String,System.Int32,System.Boolean,com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Ctor.
            </summary>
            <param name="nodeNum">node num</param>
            <param name="variableName">variable name</param>
            <param name="streamNum">stream number</param>
            <param name="multiple">true for multiple matches</param>
            <param name="exprNode">filter expression</param>
        </member>
        <member name="T:com.espertech.esper.rowregex.RegexNFAStateOneOptional">
            <summary>
            The '?' state in the regex NFA states.
            </summary>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexNFAStateOneOptional.#ctor(System.String,System.String,System.Int32,System.Boolean,System.Nullable{System.Boolean},com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Ctor.
            </summary>
            <param name="nodeNum">node num</param>
            <param name="variableName">variable name</param>
            <param name="streamNum">stream number</param>
            <param name="multiple">true for multiple matches</param>
            <param name="isGreedy">true for greedy</param>
            <param name="exprNode">filter expression</param>
        </member>
        <member name="T:com.espertech.esper.rowregex.RegexNFAStateOneToMany">
            <summary>
            The '+' state in the regex NFA states.
            </summary>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexNFAStateOneToMany.#ctor(System.String,System.String,System.Int32,System.Boolean,System.Nullable{System.Boolean},com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Ctor.
            </summary>
            <param name="nodeNum">node num</param>
            <param name="variableName">variable name</param>
            <param name="streamNum">stream number</param>
            <param name="multiple">true for multiple matches</param>
            <param name="isGreedy">true for greedy</param>
            <param name="exprNode">filter expression</param>
        </member>
        <member name="T:com.espertech.esper.rowregex.RegexNFAStateZeroToMany">
            <summary>
            The '*' state in the regex NFA states.
            </summary>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexNFAStateZeroToMany.#ctor(System.String,System.String,System.Int32,System.Boolean,System.Nullable{System.Boolean},com.espertech.esper.epl.expression.ExprNode)">
            <summary>
            Ctor.
            </summary>
            <param name="nodeNum">node num</param>
            <param name="variableName">variable name</param>
            <param name="streamNum">stream number</param>
            <param name="multiple">true for multiple matches</param>
            <param name="isGreedy">true for greedy</param>
            <param name="exprNode">filter expression</param>
        </member>
        <member name="T:com.espertech.esper.rowregex.RegexNFAStrand">
            <summary>
            A strand of one or more NFA states that has a list of start states, end states
            and a list of all states in the strand.
            </summary>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexNFAStrand.#ctor(System.Collections.Generic.IList{com.espertech.esper.rowregex.RegexNFAStateBase},System.Collections.Generic.IList{com.espertech.esper.rowregex.RegexNFAStateBase},System.Collections.Generic.IList{com.espertech.esper.rowregex.RegexNFAStateBase},System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="startStates">start states</param>
            <param name="endStates">end states</param>
            <param name="allStates">all states</param>
            <param name="passthrough">true if this strand passes through (zero-or-more multiplicity for all NFA in strand)</param>
        </member>
        <member name="P:com.espertech.esper.rowregex.RegexNFAStrand.StartStates">
            <summary>
            Returns the start states.
            </summary>
            <returns>
            start states
            </returns>
        </member>
        <member name="P:com.espertech.esper.rowregex.RegexNFAStrand.EndStates">
            <summary>
            Returns the end states.
            </summary>
            <returns>
            end states
            </returns>
        </member>
        <member name="P:com.espertech.esper.rowregex.RegexNFAStrand.AllStates">
            <summary>
            Returns all states.
            </summary>
            <returns>
            all states
            </returns>
        </member>
        <member name="P:com.espertech.esper.rowregex.RegexNFAStrand.IsPassthrough">
            <summary>
            Returns indicator if passing-through (zero-or-more multiplicity for all NFA
            states in strand).
            </summary>
            <returns>
            pass-through
            </returns>
        </member>
        <member name="T:com.espertech.esper.rowregex.RegexNFAStrandResult">
            <summary>
            A result of computing a strand of one or more NFA states that has a list of
            start states and a list of all states in the strand.
            </summary>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexNFAStrandResult.#ctor(System.Collections.Generic.IList{com.espertech.esper.rowregex.RegexNFAState},System.Collections.Generic.IList{com.espertech.esper.rowregex.RegexNFAStateBase})">
            <summary>
            Ctor.
            </summary>
            <param name="startStates">NFA start states</param>
            <param name="allStates">all states</param>
        </member>
        <member name="P:com.espertech.esper.rowregex.RegexNFAStrandResult.StartStates">
            <summary>
            Returns start states.
            </summary>
            <returns>
            start states
            </returns>
        </member>
        <member name="P:com.espertech.esper.rowregex.RegexNFAStrandResult.AllStates">
            <summary>
            Returns all states.
            </summary>
            <returns>
            all states
            </returns>
        </member>
        <member name="T:com.espertech.esper.rowregex.RegexNFATypeEnum">
            <summary>
            Enum for NFA types.
            </summary>
        </member>
        <member name="F:com.espertech.esper.rowregex.RegexNFATypeEnum.ONE_OPTIONAL">
            <summary>
            For greedy '?' multiplicity.
            </summary>
        </member>
        <member name="F:com.espertech.esper.rowregex.RegexNFATypeEnum.ONE_OPTIONAL_RELUCTANT">
            <summary>
            For reluctant '?' multiplicity.
            </summary>
        </member>
        <member name="F:com.espertech.esper.rowregex.RegexNFATypeEnum.ONE_TO_MANY">
            <summary>
            For greedy '+' multiplicity.
            </summary>
        </member>
        <member name="F:com.espertech.esper.rowregex.RegexNFATypeEnum.ONE_TO_MANY_RELUCTANT">
            <summary>
            For reluctant '+' multiplicity.
            </summary>
        </member>
        <member name="F:com.espertech.esper.rowregex.RegexNFATypeEnum.SINGLE">
            <summary>
            For single multiplicity.
            </summary>
        </member>
        <member name="F:com.espertech.esper.rowregex.RegexNFATypeEnum.ZERO_TO_MANY">
            <summary>
            For greedy '*' multiplicity.
            </summary>
        </member>
        <member name="F:com.espertech.esper.rowregex.RegexNFATypeEnum.ZERO_TO_MANY_RELUCTANT">
            <summary>
            For reluctant '*' multiplicity.
            </summary>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexNFATypeEnumExtensions.IsMultipleMatches(com.espertech.esper.rowregex.RegexNFATypeEnum)">
            <summary>
            Returns indicator if single or multiple matches.
            </summary>
            <returns>
            indicator
            </returns>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexNFATypeEnumExtensions.IsOptional(com.espertech.esper.rowregex.RegexNFATypeEnum)">
            <summary>
            Returns indicator if optional matches.
            </summary>
            <returns>
            indicator
            </returns>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexNFATypeEnumExtensions.IsGreedy(com.espertech.esper.rowregex.RegexNFATypeEnum)">
            <summary>
            Returns indicator if greedy or reluctant.
            </summary>
            <returns>
            indicator
            </returns>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexNFATypeEnumExtensions.OptionalPostfix(com.espertech.esper.rowregex.RegexNFATypeEnum)">
            <summary>
            Return postfix.
            </summary>
            <returns>
            postfix
            </returns>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexNFATypeEnumExtensions.FromString(System.String,System.String)">
            <summary>
            Inspect code and return enum for code.
            </summary>
            <param name="code">to inspect</param>
            <param name="reluctantQuestion">null for greedy or questionmark for reluctant</param>
            <returns>
            enum
            </returns>
        </member>
        <member name="T:com.espertech.esper.rowregex.RegexPartitionState">
            <summary>
            All current state holding partial NFA matches.
            </summary>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexPartitionState.#ctor(com.espertech.esper.rowregex.RegexPartitionStateRandomAccessImpl,System.Object,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="randomAccess">for handling "prev" functions, if any</param>
            <param name="optionalKeys">keys for "partition", if any</param>
            <param name="hasInterval">true if an interval is provided</param>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexPartitionState.#ctor(com.espertech.esper.rowregex.RegexPartitionStateRandomAccessGetter,System.Collections.Generic.IList{com.espertech.esper.rowregex.RegexNFAStateEntry},System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="getter">for "prev" access</param>
            <param name="currentStates">existing state</param>
            <param name="hasInterval">true for interval</param>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexPartitionState.#ctor(com.espertech.esper.rowregex.RegexPartitionStateRandomAccessGetter,System.Collections.Generic.IList{com.espertech.esper.rowregex.RegexNFAStateEntry},System.Object,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="getter">for "prev" access</param>
            <param name="currentStates">existing state</param>
            <param name="optionalKeys">partition keys if any</param>
            <param name="hasInterval">true for interval</param>
        </member>
        <member name="F:com.espertech.esper.rowregex.RegexPartitionState.CurrentStates">
            <summary>
            Gets or sets partial matches.
            </summary>
        </member>
        <member name="F:com.espertech.esper.rowregex.RegexPartitionState.OptionalKeys">
            <summary>
            Returns partition keys, if any.
            </summary>
            <returns>
            keys
            </returns>
        </member>
        <member name="F:com.espertech.esper.rowregex.RegexPartitionState.CallbackItems">
            <summary>
            Returns the interval states, if any.
            </summary>
            <returns>
            interval states
            </returns>
        </member>
        <member name="F:com.espertech.esper.rowregex.RegexPartitionState.IsCallbackScheduled">
            <summary>
            Returns indicator if callback is schedule.
            </summary>
            <returns>
            scheduled indicator
            </returns>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexPartitionState.RemoveEventFromPrev(com.espertech.esper.client.EventBean[])">
            <summary>
            Remove an event from random access for "prev".
            </summary>
            <param name="oldEvents">to remove</param>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexPartitionState.RemoveEventFromPrev(com.espertech.esper.client.EventBean)">
            <summary>
            Remove an event from random access for "prev".
            </summary>
            <param name="oldEvent">to remove</param>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexPartitionState.RemoveEventFromState(com.espertech.esper.client.EventBean)">
            <summary>
            Remove an event from state.
            </summary>
            <param name="oldEvent">to remove</param>
            <returns>
            true for removed, false for not found
            </returns>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexPartitionState.AddCallbackItem(com.espertech.esper.rowregex.RegexNFAStateEntry)">
            <summary>
            Add a callback item for intervals.
            </summary>
            <param name="endState">to add</param>
        </member>
        <member name="P:com.espertech.esper.rowregex.RegexPartitionState.RandomAccess">
            <summary>
            Returns the random access for "prev".
            </summary>
            <returns>
            access
            </returns>
        </member>
        <member name="T:com.espertech.esper.rowregex.RegexPartitionStateRandomAccess">
            <summary>
            Interface for random access to a previous event.
            </summary>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexPartitionStateRandomAccess.GetPreviousEvent(System.Int32)">
            <summary>
            Returns an new data event given an index.
            </summary>
            <param name="index">to return new data for</param>
            <returns>
            new data event
            </returns>
        </member>
        <member name="T:com.espertech.esper.rowregex.RegexPartitionStateRandomAccessGetter">
            <summary>
            Getter that provides an index at runtime.
            </summary>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexPartitionStateRandomAccessGetter.#ctor(System.Int32[],System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="randomAccessIndexesRequested">requested indexes</param>
            <param name="isUnbound">true if unbound</param>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexPartitionStateRandomAccessGetter.GetAccessor">
            <summary>
            Returns the index for access.
            </summary>
            <returns>
            index
            </returns>
        </member>
        <member name="P:com.espertech.esper.rowregex.RegexPartitionStateRandomAccessGetter.MaxPriorIndex">
            <summary>
            Returns max index.
            </summary>
            <returns>
            index
            </returns>
        </member>
        <member name="P:com.espertech.esper.rowregex.RegexPartitionStateRandomAccessGetter.IndexesRequested">
            <summary>
            Returns indexs.
            </summary>
            <returns>
            indexes.
            </returns>
        </member>
        <member name="P:com.espertech.esper.rowregex.RegexPartitionStateRandomAccessGetter.IndexesRequestedLen">
            <summary>
            Returns length of indexes.
            </summary>
            <returns>
            index len
            </returns>
        </member>
        <member name="P:com.espertech.esper.rowregex.RegexPartitionStateRandomAccessGetter.IsUnbound">
            <summary>
            Returns true for unbound.
            </summary>
            <returns>
            unbound indicator
            </returns>
        </member>
        <member name="P:com.espertech.esper.rowregex.RegexPartitionStateRandomAccessGetter.RandomAccess">
            <summary>
            Sets the random access.
            </summary>
        </member>
        <member name="T:com.espertech.esper.rowregex.RegexPartitionStateRandomAccessImpl">
            <summary>
            "Prev" state for random access to event history.
            </summary>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexPartitionStateRandomAccessImpl.#ctor(com.espertech.esper.rowregex.RegexPartitionStateRandomAccessGetter)">
            <summary>
            Ctor.
            </summary>
            <param name="getter">for access</param>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexPartitionStateRandomAccessImpl.NewEventPrepare(com.espertech.esper.client.EventBean)">
            <summary>
            Add new event.
            </summary>
            <param name="newEvent">to add</param>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexPartitionStateRandomAccessImpl.ExistingEventPrepare(com.espertech.esper.client.EventBean)">
            <summary>
            Prepare relative to existing event, for iterating.
            </summary>
            <param name="newEvent">to consider for index</param>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexPartitionStateRandomAccessImpl.GetPreviousEvent(System.Int32)">
            <summary>
            Returns a previous event. Always immediatly preceded by #newEventPrepare.
            </summary>
            <param name="assignedRelativeIndex">index</param>
            <returns>
            event
            </returns>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexPartitionStateRandomAccessImpl.Remove(com.espertech.esper.client.EventBean[])">
            <summary>
            Remove events.
            </summary>
            <param name="oldEvents">to remove</param>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexPartitionStateRandomAccessImpl.Remove(com.espertech.esper.client.EventBean)">
            <summary>
            Remove event.
            </summary>
            <param name="oldEvent">to remove</param>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexPartitionStateRandomAccessImpl.IsEmpty">
            <summary>
            Returns true for empty collection.
            </summary>
            <returns>
            indicator if empty
            </returns>
        </member>
        <member name="T:com.espertech.esper.rowregex.RegexPartitionStateRepo">
            <summary>
            Service for holding partition state.
            </summary>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexPartitionStateRepo.GetState(System.Object)">
            <summary>
            Return state for key or create state if not found.
            </summary>
            <param name="key">to look up</param>
            <returns>
            state
            </returns>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexPartitionStateRepo.GetState(com.espertech.esper.client.EventBean,System.Boolean)">
            <summary>
            Return state for event or create state if not found.
            </summary>
            <param name="theEvent">to look up</param>
            <param name="isCollect">true if a collection of unused state can occur</param>
            <returns>
            state
            </returns>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexPartitionStateRepo.RemoveOld(com.espertech.esper.client.EventBean[],System.Boolean,System.Boolean[])">
            <summary>
            Remove old events from the state, applicable for "prev" function and partial NFA
            state.
            </summary>
            <param name="events">to remove</param>
            <param name="isEmpty">indicator if there are not matches</param>
            <param name="found">indicator if any partial matches exist to be deleted</param>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexPartitionStateRepo.CopyForIterate">
            <summary>
            Copy state for iteration.
            </summary>
            <returns>
            copied state
            </returns>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexPartitionStateRepo.RemoveState(System.Object)">
            <summary>
            Removes the state.
            </summary>
            <param name="partitionKey">The partition key.</param>
        </member>
        <member name="T:com.espertech.esper.rowregex.RegexPartitionStateRepoGroup">
            <summary>
            Partition-by implementation for partition state.
            </summary>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexPartitionStateRepoGroup.#ctor(com.espertech.esper.rowregex.RegexPartitionStateRandomAccessGetter,com.espertech.esper.epl.expression.ExprEvaluator[],System.Boolean,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Ctor.
            </summary>
            <param name="getter">for "prev" function access</param>
            <param name="partitionExpressions">expressions for computing group key</param>
            <param name="hasInterval">true for interval</param>
            <param name="exprEvaluatorContext">context for evaluating expressions</param>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexPartitionStateRepoGroup.RemoveState(System.Object)">
            <summary>
            Removes the state.
            </summary>
            <param name="partitionKey">The partition key.</param>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexPartitionStateRepoGroup.CopyForIterate">
            <returns>
            copied state
            </returns>
        </member>
        <member name="F:com.espertech.esper.rowregex.RegexPartitionStateRepoGroupConstants.INITIAL_COLLECTION_MIN">
            <summary>
            Empty state collection initial threshold.
            </summary>
        </member>
        <member name="T:com.espertech.esper.rowregex.RegexPartitionStateRepoNoGroup">
            <summary>
            State for when no partitions (single partition) is required.
            </summary>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexPartitionStateRepoNoGroup.#ctor(com.espertech.esper.rowregex.RegexPartitionState,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="singletonState">state</param>
            <param name="hasInterval">true for interval</param>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexPartitionStateRepoNoGroup.#ctor(com.espertech.esper.rowregex.RegexPartitionStateRandomAccessGetter,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="getter">"prev" getter</param>
            <param name="hasInterval">true for interval</param>
        </member>
        <member name="M:com.espertech.esper.rowregex.RegexPartitionStateRepoNoGroup.CopyForIterate">
            <summary>
            Copy state for iteration.
            </summary>
            <returns>
            copy
            </returns>
        </member>
        <member name="T:com.espertech.esper.rowregex.RowRegexExprNode">
            <summary>
            Base node for
            </summary>
        </member>
        <member name="M:com.espertech.esper.rowregex.RowRegexExprNode.ToExpressionString">
            <summary>
            Returns the expression node rendered as a string.
            </summary>
            <returns>
            string rendering of expression
            </returns>
        </member>
        <member name="M:com.espertech.esper.rowregex.RowRegexExprNode.#ctor">
            <summary>
            Constructor creates a list of child nodes.
            </summary>
        </member>
        <member name="M:com.espertech.esper.rowregex.RowRegexExprNode.AddChildNode(com.espertech.esper.rowregex.RowRegexExprNode)">
            <summary>
            Adds a child node.
            </summary>
            <param name="childNode">is the child evaluation tree node to add</param>
        </member>
        <member name="M:com.espertech.esper.rowregex.RowRegexExprNode.DumpDebug(System.String)">
            <summary>
            Recursively print out all nodes.
            </summary>
            <param name="prefix">is printed out for naming the printed info</param>
        </member>
        <member name="P:com.espertech.esper.rowregex.RowRegexExprNode.ChildNodes">
            <summary>
            Returns list of child nodes.
            </summary>
            <returns>
            list of child nodes
            </returns>
        </member>
        <member name="T:com.espertech.esper.rowregex.RowRegexExprNodeAlteration">
            <summary>
            Or-condition in a regex expression tree.
            </summary>
        </member>
        <member name="T:com.espertech.esper.rowregex.RowRegexExprNodeAtom">
            <summary>
            Atom in a regex expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.rowregex.RowRegexExprNodeAtom.#ctor(System.String,com.espertech.esper.rowregex.RegexNFATypeEnum)">
            <summary>
            Ctor.
            </summary>
            <param name="tag">variable name</param>
            <param name="type">multiplicity and greedy indicator</param>
        </member>
        <member name="P:com.espertech.esper.rowregex.RowRegexExprNodeAtom.Tag">
            <summary>
            Returns the variable name.
            </summary>
            <returns>
            variable
            </returns>
        </member>
        <member name="P:com.espertech.esper.rowregex.RowRegexExprNodeAtom.NFAType">
            <summary>
            Returns multiplicity and greedy indicator.
            </summary>
            <returns>
            type
            </returns>
        </member>
        <member name="T:com.espertech.esper.rowregex.RowRegexExprNodeConcatenation">
            <summary>
            Concatenation of atoms in a regular expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.rowregex.RowRegexExprNodeConcatenation.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="T:com.espertech.esper.rowregex.RowRegexExprNodeNested">
            <summary>
            Nested () regular expression in a regex expression tree.
            </summary>
        </member>
        <member name="M:com.espertech.esper.rowregex.RowRegexExprNodeNested.#ctor(com.espertech.esper.rowregex.RegexNFATypeEnum)">
            <summary>
            Ctor.
            </summary>
            <param name="type">multiplicity and greedy</param>
        </member>
        <member name="P:com.espertech.esper.rowregex.RowRegexExprNodeNested.NFAType">
            <summary>
            Returns multiplicity and greedy.
            </summary>
            <returns>
            type
            </returns>
        </member>
        <member name="T:com.espertech.esper.schedule.ScheduleAdjustmentCallback">
            <summary>Callback for views that adjust an expiration date on event objects. </summary>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleAdjustmentCallback.Adjust(System.Int64)">
            <summary>Adjust expiration date. </summary>
            <param name="delta">to adjust</param>
        </member>
        <member name="T:com.espertech.esper.schedule.ScheduleAdjustmentService">
            <summary>Service for holding expiration dates to adjust. </summary>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleAdjustmentService.AddCallback(com.espertech.esper.schedule.ScheduleAdjustmentCallback)">
            <summary>Add a callback </summary>
            <param name="callback">to add</param>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleAdjustmentService.Adjust(System.Int64)">
            <summary>Make callbacks to adjust expiration dates. </summary>
            <param name="delta">to adjust for</param>
        </member>
        <member name="T:com.espertech.esper.schedule.ScheduleBucket">
            <summary>
            This class acts as a buckets for sorting schedule service callbacks that are scheduled 
            to occur at the same time. Each buckets constists of <seealso cref="T:com.espertech.esper.schedule.ScheduleSlot"/> 
            slots that callbacks are assigned to. 
            <para/> 
            At the time of timer evaluation, callbacks that become triggerable are ordered using the 
            bucket as the first-level order, and slot as the second-level order. 
            <para/> 
            Each statement at statement creation time allocates a buckets, and each timer within the 
            statement allocates a slot. Thus statements that depend on other statements (such as for 
            insert-into), and timers within their statement (such as time window or output rate limit 
            timers) behave deterministically. 
            </summary>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleBucket.#ctor(System.Int32)">
            <summary>Ctor. </summary>
            <param name="bucketNum">is a simple integer number for this bucket by which buckets can be sorted</param>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleBucket.Restart">
            <summary>Restart bucket slot numbering wuch as when a statement is restarted and new slots are allocated. </summary>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleBucket.AllocateSlot">
            <summary>Returns a new slot in the bucket. </summary>
            <returns>slot</returns>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleBucket.AllocateSlot(System.Int32)">
            <summary>Returns a new slot in the bucket, given a slot number </summary>
            <returns>slot</returns>
        </member>
        <member name="T:com.espertech.esper.schedule.ScheduleCalendar">
            <summary>
            Calendar class for use in scheduling, specifically for use in computing the next invocation time.
            </summary>
        </member>
        <member name="T:com.espertech.esper.schedule.ScheduleComputeHelper">
            <summary>
            For a crontab-like schedule, this class computes the next occurance given a Start time and a specification of
            what the schedule looks like.
            The resolution at which this works is at the second level. The next occurance
            is always at least 1 second ahead.
            The class implements an algorithm that Starts at the highest precision (seconds) and
            continues to the lowest precicion (month). For each precision level the
            algorithm looks at the list of valid values and finds a value for each that is equal to or greater then
            the valid values supplied. If no equal or
            greater value was supplied, it will reset all higher precision elements to its minimum value.
            </summary>
        </member>
        <member name="F:com.espertech.esper.schedule.ScheduleComputeHelper.MIN_OFFSET_MSEC">
            <summary>
            Minimum time to next occurance.
            </summary>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleComputeHelper.ComputeNextOccurance(com.espertech.esper.schedule.ScheduleSpec,System.Int64)">
            <summary> Computes the next lowest date in milliseconds based on a specification and the
            from-time passed in.
            </summary>
            <param name="spec">defines the schedule
            </param>
            <param name="afterTimeInMillis">defines the start time
            </param>
            <returns> a long date tick value for the next schedule occurance matching the spec
            </returns>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleComputeHelper.ComputeDeltaNextOccurance(com.espertech.esper.schedule.ScheduleSpec,System.Int64)">
            <summary>
            Computes the next lowest date in milliseconds based on a specification and the
            from-time passed in and returns the delta from the current time.
            </summary>
            <param name="spec">The schedule.</param>
            <param name="afterTimeInMillis">defines the start time.</param>
            <returns>a long millisecond value representing the delta between current time and the next schedule occurance matching the spec</returns>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleComputeHelper.DetermineDayOfMonth(com.espertech.esper.schedule.ScheduleSpec,System.DateTime@,com.espertech.esper.schedule.ScheduleCalendar)">
            <summary>
            Determine the next valid day of month based on the given specification of valid days in month and
            valid days in week. If both days in week and days in month are supplied, the days are OR-ed.
            </summary>
            <param name="spec"></param>
            <param name="after"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleComputeHelper.CheckDayValidInMonth(System.Int32,System.Int32,System.Int32)">
            <summary>
            Check if this is a valid date.
            </summary>
            <param name="day"></param>
            <param name="month"></param>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleComputeHelper.NextValue(System.Collections.Generic.ICollection{System.Int32},System.Int32)">
            <summary>
            Determine if in the supplied valueSet there is a value after the given Start value.
            Return -1 to indicate that there is no value after the given StartValue.
            If the valueSet passed is null it is treated as a wildcard and the same StartValue is returned
            </summary>
            <param name="valueSet"></param>
            <param name="startValue"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.schedule.ProxyScheduleHandleCallback.#ctor(System.Action{com.espertech.esper.core.service.ExtensionServicesContext})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.schedule.ProxyScheduleHandleCallback"/> class.
            </summary>
            <param name="dg">The dg.</param>
        </member>
        <member name="M:com.espertech.esper.schedule.ProxyScheduleHandleCallback.ScheduledTrigger(com.espertech.esper.core.service.ExtensionServicesContext)">
            <summary>
            Callback that is invoked as indicated by a schedule added to the scheduling service.
            </summary>
            <param name="extensionServicesContext">is a marker interface for providing custom extension services
            passed to the triggered class</param>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleHandleCallbackProxy.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            Intercepts the specified invocation.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="T:com.espertech.esper.schedule.ScheduleParameterException">
            <summary>
            This exception is thrown to indicate a problem with schedule parameters.
            </summary>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleParameterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.schedule.ScheduleParameterException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleParameterException.#ctor(System.String)">
            <summary>Constructor. </summary>
            <param name="message">is the error message</param>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleParameterException.#ctor(System.String,System.Exception)">
            <summary>Constructor for an inner exception and message. </summary>
            <param name="message">is the error message</param>
            <param name="innerException">is the inner exception</param>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleParameterException.#ctor(System.Exception)">
            <summary>Constructor. </summary>
            <param name="innerException">is the inner exception</param>
        </member>
        <member name="T:com.espertech.esper.schedule.ScheduleServiceException">
            <summary>
            This exception is thrown to indicate a problem with scheduling.
            </summary>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleServiceException.#ctor(System.String)">
            <summary> Constructor.</summary>
            <param name="message">is the error message
            </param>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleServiceException.#ctor(System.String,System.Exception)">
            <summary> Constructor for an inner exception and message.</summary>
            <param name="message">is the error message
            </param>
            <param name="cause">is the inner exception
            </param>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleServiceException.#ctor(System.Exception)">
            <summary> Constructor.</summary>
            <param name="cause">is the inner exception
            </param>
        </member>
        <member name="T:com.espertech.esper.schedule.ScheduleSet">
            <summary>Set of schedules. </summary>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleSet.#ctor(System.Collections.Generic.List{com.espertech.esper.schedule.ScheduleSetEntry})">
            <summary>Ctor. </summary>
            <param name="list">schedules</param>
        </member>
        <member name="T:com.espertech.esper.schedule.ScheduleSetEntry">
            <summary>Entry for a schedule item. </summary>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleSetEntry.#ctor(System.Int64,com.espertech.esper.schedule.ScheduleSlot,com.espertech.esper.schedule.ScheduleHandle)">
            <summary>Ctor. </summary>
            <param name="time">of schedule</param>
            <param name="slot">slot</param>
            <param name="handle">handle to use</param>
        </member>
        <member name="P:com.espertech.esper.schedule.ScheduleSetEntry.Time">
            <summary>Gets or sets the time. </summary>
            <value>time</value>
        </member>
        <member name="P:com.espertech.esper.schedule.ScheduleSetEntry.Slot">
            <summary>Returns schedule slot. </summary>
            <value>slot</value>
        </member>
        <member name="P:com.espertech.esper.schedule.ScheduleSetEntry.Handle">
            <summary>Returns the schedule handle. </summary>
            <value>handle</value>
        </member>
        <member name="T:com.espertech.esper.schedule.ScheduleSlot">
            <summary>
            This class is a slot in a <see cref="T:com.espertech.esper.schedule.ScheduleBucket"/> for sorting schedule service callbacks.
            </summary>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleSlot.#ctor(System.Int32,System.Int32)">
            <summary> Ctor.</summary>
            <param name="bucketNum">is the number of the bucket the slot belongs to
            </param>
            <param name="slotNum">is the slot number for ordering within the bucket
            </param>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleSlot.CompareTo(com.espertech.esper.schedule.ScheduleSlot)">
            <summary>
            Compares to.
            </summary>
            <param name="scheduleCallbackSlot">The schedule callback slot.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleSlot.CompareTo(System.Object)">
            <summary>
            Compares to.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleSlot.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleSlot.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleSlot.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.schedule.ScheduleSlot.BucketNum">
            <summary>
            Returns the bucket number.
            </summary>
        </member>
        <member name="P:com.espertech.esper.schedule.ScheduleSlot.SlotNum">
            <summary>
            Returns the slot number.
            </summary>
        </member>
        <member name="T:com.espertech.esper.schedule.ScheduleSpec">
            <summary> Holds a schedule specification which consists of a set of integer values or a null
            value for each schedule unit to indicate a wildcard.
            There is always an element in the specification for each unit minutes, hours, day of month, month, and day of week.
            There is optionally an element in the specification for the unit seconds.
            </summary>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleSpec.#ctor(System.Collections.Generic.IDictionary{com.espertech.esper.type.ScheduleUnit,System.Collections.Generic.ICollection{System.Int32}})">
            <summary> Constructor - validates that all mandatory schedule.</summary>
            <param name="unitValues">are the values for each minute, hour, day, month etc.
            </param>
            <throws>  ArgumentException - if validation of value set per unit fails </throws>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleSpec.#ctor">
            <summary>
            Constructor - for unit testing, initialize to all wildcards but leave seconds empty.
            </summary>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleSpec.AddValue(com.espertech.esper.type.ScheduleUnit,System.Int32)">
            <summary> For unit testing, add a single value, changing wildcards to value sets.</summary>
            <param name="element">to add
            </param>
            <param name="value">to add
            </param>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleSpec.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleSpec.Equals(System.Object)">
            <summary>
            Returns true if this object equals the other object.
            </summary>
            <param name="otherObject">The other object.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleSpec.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleSpec.Compress(System.Collections.Generic.IDictionary{com.espertech.esper.type.ScheduleUnit,System.Collections.Generic.ICollection{System.Int32}})">
            <summary> Function to reduce value sets for unit that cover the whole range down to a wildcard.
            I.e. reduce 0,1,2,3,4,5,6 for week value to 'null' indicating the wildcard.
            </summary>
            <param name="unitValues">is the set of valid values per unit
            </param>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleSpec.Validate(System.Collections.Generic.IDictionary{com.espertech.esper.type.ScheduleUnit,System.Collections.Generic.ICollection{System.Int32}})">
            <summary> Validate units and their value sets.</summary>
            <param name="unitValues">is the set of valid values per unit
            </param>
        </member>
        <member name="P:com.espertech.esper.schedule.ScheduleSpec.UnitValues">
            <summary> Return map of ordered set of valid schedule values for minute, hour, day, month etc. units</summary>
            <returns> map of 5 or 6 entries each with a set of integers
            </returns>
        </member>
        <member name="T:com.espertech.esper.schedule.ScheduleSpecUtil">
            <summary>
            Utility for computing from a set of parameter objects a schedule specification carry a 
            crontab-like schedule definition.
            </summary>
        </member>
        <member name="M:com.espertech.esper.schedule.ScheduleSpecUtil.ComputeValues(System.Collections.Generic.IList{System.Object})">
            <summary>Compute from parameters a crontab schedule. </summary>
            <param name="args">parameters</param>
            <returns>crontab schedule</returns>
            <throws>ScheduleParameterException if the parameters are invalid</throws>
        </member>
        <member name="T:com.espertech.esper.schedule.SchedulingMgmtService">
            <summary>
            Interface for a service that allocated schedule buckets for statements, for
            controlling timer callback orders.
            </summary>
        </member>
        <member name="M:com.espertech.esper.schedule.SchedulingMgmtService.AllocateBucket">
            <summary>
            Returns a bucket from which slots can be allocated for ordering concurrent
            callbacks.
            </summary>
            <returns>
            bucket
            </returns>
        </member>
        <member name="T:com.espertech.esper.schedule.SchedulingMgmtServiceImpl">
            <summary>
            Implements the schedule service by simply keeping a sorted set of long
            millisecond values and a set of handles for each.
            <para/>
            Synchronized since statement creation and event evaluation by multiple (event
            send) threads can lead to callbacks added/removed asynchronously.
            </summary>
        </member>
        <member name="F:com.espertech.esper.schedule.SchedulingMgmtServiceImpl.curBucketNum">
            <summary>
            Current bucket number - for use in ordering handles by bucket
            </summary>
        </member>
        <member name="T:com.espertech.esper.schedule.SchedulingServiceImpl">
            <summary>
            Implements the schedule service by simply keeping a sorted set of long
            millisecond values and a set of handles for each.
            <para/>
            Synchronized since statement creation and event evaluation by multiple (event
            send) threads can lead to callbacks added/removed asynchronously.
            </summary>
        </member>
        <member name="M:com.espertech.esper.schedule.SchedulingServiceImpl.#ctor(com.espertech.esper.timer.TimeSourceService)">
            <summary>
            Constructor.
            </summary>
            <param name="timeSourceService">time source provider</param>
        </member>
        <member name="P:com.espertech.esper.schedule.SchedulingServiceImpl.NearestTimeHandle">
            <summary>
            Returns the nearest time handle.
            </summary>
            <value>The nearest time handle.</value>
        </member>
        <member name="P:com.espertech.esper.schedule.SchedulingServiceImpl.StatementSchedules">
            <summary>
            Returns the statement schedules.
            </summary>
            <value>The statement schedules.</value>
        </member>
        <member name="T:com.espertech.esper.schedule.SchedulingServiceProvider">
            <summary>
            Static factory for implementations of the SchedulingService interface.
            </summary>
        </member>
        <member name="M:com.espertech.esper.schedule.SchedulingServiceProvider.NewService(com.espertech.esper.timer.TimeSourceService)">
            <summary>
            Creates an implementation of the SchedulingService interface.
            </summary>
            <param name="timeSourceService">time source provider</param>
            <returns>implementation</returns>
        </member>
        <member name="T:com.espertech.esper.schedule.ProxyTimeProvider">
            <summary>
            A proxy implementation of the time provider
            </summary>
        </member>
        <member name="T:com.espertech.esper.script.ScriptingEngine">
            <summary>
            Scripting implementations must implement the ScriptingEngine interface.
            </summary>
        </member>
        <member name="M:com.espertech.esper.script.ScriptingEngine.Compile(com.espertech.esper.epl.spec.ExpressionScriptProvided)">
            <summary>
            Compiles the code.
            </summary>
            <param name="expressionScript">The expression script.</param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.script.ScriptingEngine.Language">
            <summary>
            Gets the language associated with this engine.  e.g. Javascript
            </summary>
            <value>The language.</value>
        </member>
        <member name="P:com.espertech.esper.script.ScriptingEngine.LanguagePrefix">
            <summary>
            Gets the language prefix to use with this engine.  e.g. js
            </summary>
            <value>The language prefix.</value>
        </member>
        <member name="F:com.espertech.esper.script.ScriptingEngineCodeDOM.DefaultNamespaces">
            <summary>
            Default namespaces
            </summary>
        </member>
        <member name="M:com.espertech.esper.script.ScriptingEngineCodeDOM.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.script.ScriptingEngineCodeDOM"/> class.
            </summary>
            <param name="language">The language.</param>
            <param name="languagePrefix">The language prefix.</param>
        </member>
        <member name="M:com.espertech.esper.script.ScriptingEngineCodeDOM.Compile(com.espertech.esper.epl.spec.ExpressionScriptProvided)">
            <summary>
            Compiles the code.
            </summary>
            <param name="expressionScript">The expression script.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.script.ScriptingEngineCodeDOM.CreateCompilerInfo(System.String)">
            <summary>
            Creates the compiler info.
            </summary>
            <param name="language">The language.</param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.script.ScriptingEngineCodeDOM.Language">
            <summary>
            Gets or sets the language.
            </summary>
            <value>The language.</value>
        </member>
        <member name="P:com.espertech.esper.script.ScriptingEngineCodeDOM.LanguagePrefix">
            <summary>
            Gets the language prefix to use with this engine.  e.g. js
            </summary>
            <value>The language prefix.</value>
        </member>
        <member name="P:com.espertech.esper.script.ScriptingEngineCodeDOM.References">
            <summary>
            Gets or sets the references.
            </summary>
            <value>The references.</value>
        </member>
        <member name="P:com.espertech.esper.script.ScriptingEngineCodeDOM.Imports">
            <summary>
            Gets or sets the imports.
            </summary>
            <value>The imports.</value>
        </member>
        <member name="P:com.espertech.esper.script.ScriptingEngineCodeDOM.MainClass">
            <summary>
            Gets or sets the main class containing the static ScriptMain.
            </summary>
            <value>The main class.</value>
        </member>
        <member name="P:com.espertech.esper.script.ScriptingEngineCodeDOM.RootClassName">
            <summary>
            Gets or sets the name of the root class.
            </summary>
            <value>The name of the root class.</value>
        </member>
        <member name="M:com.espertech.esper.script.ScriptingEngineException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.script.ScriptingEngineException"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.script.ScriptingEngineException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.script.ScriptingEngineException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:com.espertech.esper.script.ScriptingEngineException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.script.ScriptingEngineException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:com.espertech.esper.script.ScriptingEngineException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.script.ScriptingEngineException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:com.espertech.esper.script.ScriptingService">
            <summary>
            ScriptingService is a wrapper around the scripting engine and it's abstractions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.script.ScriptingService.Compile(System.String,com.espertech.esper.epl.spec.ExpressionScriptProvided)">
            <summary>
            Compiles the specified script given the specified dialect.
            </summary>
            <param name="dialect">The dialect.</param>
            <param name="script">The script.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.script.ScriptingService.VerifyScript(System.String,com.espertech.esper.epl.spec.ExpressionScriptProvided)">
            <summary>
            Verifies the script given the specified dialect.
            </summary>
            <param name="dialect">The dialect.</param>
            <param name="script">The script.</param>
        </member>
        <member name="F:com.espertech.esper.script.ScriptingServiceImpl._scriptingEngines">
            <summary>
            Scripting engines indexed by language prefix
            </summary>
        </member>
        <member name="M:com.espertech.esper.script.ScriptingServiceImpl.DiscoverEngines">
            <summary>
            
            </summary>
        </member>
        <member name="M:com.espertech.esper.script.ScriptingServiceImpl.DiscoverEngines(System.Predicate{System.Type})">
            <summary>
            Attempts to discover engine instances in the AppDomain.
            </summary>
        </member>
        <member name="M:com.espertech.esper.script.ScriptingServiceImpl.DiscoverEngines(System.Reflection.Assembly,System.Predicate{System.Type})">
            <summary>
            Discovers the engines.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="isEngine">The is engine.</param>
        </member>
        <member name="M:com.espertech.esper.script.ScriptingServiceImpl.IsEngineType(System.Type)">
            <summary>
            Determines whether the type is a valid scripting engine type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if [is engine type] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.script.ScriptingServiceImpl.Compile(System.String,com.espertech.esper.epl.spec.ExpressionScriptProvided)">
            <summary>
            Compiles the specified language prefix.
            </summary>
            <param name="dialect">The language prefix.</param>
            <param name="script">The script.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.script.ScriptingServiceImpl.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:com.espertech.esper.timer.EPLTimerTask">
            <summary>
            Timer task to simply invoke the callback when triggered.
            </summary>
        </member>
        <member name="T:com.espertech.esper.timer.TimerCallback">
            <summary>
            Invoked by the internal clocking service at regular intervals.
            </summary>
        </member>
        <member name="T:com.espertech.esper.timer.TimerService">
            <summary>
            Service interface for repeated callbacks at regular intervals.
            </summary>
        </member>
        <member name="M:com.espertech.esper.timer.TimerService.StartInternalClock">
            <summary> Start clock expecting callbacks at regular intervals and a fixed rate.
            Catch-up callbacks are possible should the callback fall behind.
            </summary>
        </member>
        <member name="M:com.espertech.esper.timer.TimerService.StopInternalClock(System.Boolean)">
            <summary> Stop internal clock.</summary>
            <param name="warnIfNotStarted">use true to indicate whether to warn if the clock is not Started, use false to not warn
            and expect the clock to be not Started. 
            </param>
        </member>
        <member name="P:com.espertech.esper.timer.TimerService.Callback">
            <summary> Set the callback method to invoke for clock ticks.</summary>
        </member>
        <member name="P:com.espertech.esper.timer.TimerService.AreStatsEnabled">
            <summary>
            Returns a flag indicating whether statistics are enabled.
            </summary>
        </member>
        <member name="P:com.espertech.esper.timer.TimerService.MaxDrift">
            <summary>
            Gets the maximum drift.
            </summary>
        </member>
        <member name="P:com.espertech.esper.timer.TimerService.LastDrift">
            <summary>
            Gets the last drift.
            </summary>
        </member>
        <member name="P:com.espertech.esper.timer.TimerService.TotalDrift">
            <summary>
            Gets the total drift.
            </summary>
        </member>
        <member name="P:com.espertech.esper.timer.TimerService.InvocationCount">
            <summary>
             Gets the number of times the timer has been invoked.
            </summary>
        </member>
        <member name="T:com.espertech.esper.timer.TimerServiceImpl">
            <summary>
            Implementation of the internal clocking service interface.
            </summary>
        </member>
        <member name="M:com.espertech.esper.timer.TimerServiceImpl.#ctor(System.String,System.Int64)">
            <summary> Constructor.</summary>
            <param name="msecTimerResolution">is the millisecond resolution or interval the internal timer thread processes schedules</param>
            <param name="engineURI">engine URI</param>
        </member>
        <member name="M:com.espertech.esper.timer.TimerServiceImpl.OnTimerElapsed(System.Object)">
            <summary>
            Handles the timer event
            </summary>
            <param name="state">The user state object.</param>
        </member>
        <member name="M:com.espertech.esper.timer.TimerServiceImpl.StartInternalClock">
            <summary>
            Start clock expecting callbacks at regular intervals and a fixed rate.
            Catch-up callbacks are possible should the callback fall behind.
            </summary>
        </member>
        <member name="M:com.espertech.esper.timer.TimerServiceImpl.StopInternalClock(System.Boolean)">
            <summary>
            Stop internal clock.
            </summary>
            <param name="warnIfNotStarted">use true to indicate whether to warn if the clock is not Started, use false to not warn
            and expect the clock to be not Started.</param>
        </member>
        <member name="P:com.espertech.esper.timer.TimerServiceImpl.Callback">
            <summary>
            Set the callback method to invoke for clock ticks.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.timer.TimerServiceImpl.MsecTimerResolution">
            <summary>
            Gets the msec timer resolution.
            </summary>
            <value>The msec timer resolution.</value>
        </member>
        <member name="P:com.espertech.esper.timer.TimerServiceImpl.AreStatsEnabled">
            <summary>
            Returns a flag indicating whether statistics are enabled.
            </summary>
        </member>
        <member name="P:com.espertech.esper.timer.TimerServiceImpl.InvocationCount">
            <summary>
             Gets the number of times the timer has been invoked.
            </summary>
        </member>
        <member name="P:com.espertech.esper.timer.TimerServiceImpl.Id">
            <summary>
            Gets the unique id for the timer.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:com.espertech.esper.timer.TimerServiceImpl.EngineURI">
            <summary>
            Gets the engine URI.
            </summary>
            <value>The engine URI.</value>
        </member>
        <member name="M:com.espertech.esper.timer.TimeSourceService.GetTimeMillis">
            <summary>
            Returns time in millis.
            </summary>
        </member>
        <member name="T:com.espertech.esper.timer.TimeSourceServiceHighResolution">
            <summary>
            Allow for different strategies for getting VM (wall clock) time.
            </summary>
        </member>
        <member name="M:com.espertech.esper.timer.TimeSourceServiceHighResolution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.timer.TimeSourceServiceHighResolution"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.timer.TimeSourceServiceHighResolution.GetTimeMillis">
            <summary>
            Returns time in millis.
            </summary>
        </member>
        <member name="T:com.espertech.esper.timer.TimeSourceServiceImpl">
            <summary>
            Allow for different strategies for getting VM (wall clock) time. See JIRA issue
            ESPER-191 Support nano/microsecond resolution for more information on system
            time-call performance, accuracy and drift.
            </summary>
        </member>
        <member name="F:com.espertech.esper.timer.TimeSourceServiceImpl.IS_SYSTEM_CURRENT_TIME">
            <summary>
            A public variable indicating whether to use the System millisecond time or nano
            time, to be configured through the engine settings.
            </summary>
        </member>
        <member name="M:com.espertech.esper.timer.TimeSourceServiceImpl.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.timer.TimeSourceServiceImpl.GetTimeMillis">
            <summary>
            Get time in milliseconds.
            </summary>
            <returns>wall-clock time in milliseconds</returns>
        </member>
        <member name="M:com.espertech.esper.timer.TimeSourceServiceImpl.GetTimeMicros">
            <summary>
            Get time in microseconds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.timer.TimeSourceServiceImpl.CalculateResolution">
            <summary>
            Calculate resolution of this timer in microseconds i.e. what is the resolution
            of the underlying platform's timer.
            </summary>
            <returns>
            timer resolution
            </returns>
        </member>
        <member name="M:com.espertech.esper.timer.TimeSourceServiceImpl.ToString">
            <summary>
            Provides a string rendering of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.type.BoolValue">
            <summary>
            Placeholder for a bool value in an event expression.
            </summary>
        </member>
        <member name="T:com.espertech.esper.type.PrimitiveValueBase">
            <summary>
            Abstract class for literal values supplied in an event expression string and prepared expression values supplied
            by set methods.
            </summary>
        </member>
        <member name="T:com.espertech.esper.type.PrimitiveValue">
            <summary>
            Classes implementing this interface are responsible for parsing, setting and getting
            the value of the different basic data types that occur in an event expression.
            <para>
            Placeholders represent all literal values in event expressions and set values in
            prepared event expressions.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.PrimitiveValue.Parse(System.String)">
            <summary> Parse the string literal value into the specific data type.</summary>
            <param name="value">is the textual value to parse
            </param>
        </member>
        <member name="M:com.espertech.esper.type.PrimitiveValue.Parse(System.String[])">
            <summary> Parse the string literal values supplied in the array into the specific data type.</summary>
            <param name="values">are the textual values to parse</param>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValue.ValueObject">
            <summary> Returns a value object.</summary>
            <returns> value object
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValue.Type">
            <summary> Returns the type of primitive value this instance represents.</summary>
            <returns> enum type of primitive
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValue._Boolean">
            <summary> Set a bool value.</summary>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValue._Byte">
            <summary> Set a byte value.</summary>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValue._Float">
            <summary> Set a float value.</summary>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValue._Int">
            <summary> Set an int value.</summary>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValue._Short">
            <summary> Set a short value.</summary>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValue._String">
            <summary> Set a string value.</summary>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValue._Double">
            <summary> Set a double value.</summary>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValue._Long">
            <summary> Set a long value.</summary>
        </member>
        <member name="M:com.espertech.esper.type.PrimitiveValueBase.Parse(System.String[])">
            <summary>
            Parse the string literal values supplied in the array into the 
            specific data type.
            </summary>
            <param name="values">are the textual values to parse</param>
        </member>
        <member name="M:com.espertech.esper.type.PrimitiveValueBase.Parse(System.String)">
            <summary>
            Parse the string literal value supplied into the specific
            the specific data type.
            </summary>
            <param name="param1"></param>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValueBase._Boolean">
            <summary>
            Set a bool value.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValueBase._Byte">
            <summary>
            Set a byte value.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValueBase._Float">
            <summary>
            Set a float value.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValueBase._Int">
            <summary>
            Set an int value.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValueBase._Short">
            <summary>
            Set a short value.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValueBase._String">
            <summary>
            Set a string value.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValueBase._Double">
            <summary>
            Set a double value.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValueBase._Long">
            <summary>
            Set a long value.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValueBase.Type">
            <summary>
            Returns the type of primitive value this instance represents.
            </summary>
            <value></value>
            <returns> enum type of primitive
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValueBase.ValueObject">
            <summary>
            Returns a value object.
            </summary>
            <value></value>
            <returns> value object
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.BoolValue.#ctor(System.Boolean)">
            <summary> Constructor.</summary>
            <param name="boolValue">sets the value.
            </param>
        </member>
        <member name="M:com.espertech.esper.type.BoolValue.#ctor">
            <summary> Constructor.</summary>
        </member>
        <member name="M:com.espertech.esper.type.BoolValue.ParseString(System.String)">
            <summary> Parse the bool string.</summary>
            <param name="value">is a bool value
            </param>
            <returns> parsed bool
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.BoolValue.ParseString(System.String[])">
            <summary> Parse the string array returning a bool array.</summary>
            <param name="values">string array
            </param>
            <returns> typed array
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.BoolValue.Parse(System.String)">
            <summary>
            Parse the string literal value into the specific data type.
            </summary>
            <param name="value">is the textual value to parse</param>
        </member>
        <member name="M:com.espertech.esper.type.BoolValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.BoolValue.Type">
            <summary>
            Returns the type of primitive value this instance represents.
            </summary>
            <value></value>
            <returns> enum type of primitive
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.BoolValue.ValueObject">
            <summary>
            Returns a value object.
            </summary>
            <value></value>
            <returns> value object
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.BoolValue._Boolean">
            <summary>
            Set a bool value.
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.type.ByteValue">
            <summary>
            Placeholder for a byte value in an event expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.ByteValue.ParseString(System.String)">
            <summary>Parses a string value as a byte.</summary>
            <param name="value">to parse</param>
            <returns>byte value</returns>
        </member>
        <member name="M:com.espertech.esper.type.ByteValue.Parse(System.String)">
            <summary>
            Parse the string literal value into the specific data type.
            </summary>
            <param name="value">is the textual value to parse</param>
        </member>
        <member name="M:com.espertech.esper.type.ByteValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.ByteValue.Type">
            <summary>
            Returns the type of primitive value this instance represents.
            </summary>
            <value></value>
            <returns> enum type of primitive
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.ByteValue.ValueObject">
            <summary>
            Returns a value object.
            </summary>
            <value></value>
            <returns> value object
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.ByteValue._Byte">
            <summary>
            Set a byte value.
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.type.CronOperatorEnum">
            <summary>
            Enumeration for special keywords in crontab timer.
            </summary>
        </member>
        <member name="F:com.espertech.esper.type.CronOperatorEnum.LASTDAY">
            <summary>Last day of week or month. </summary>
        </member>
        <member name="F:com.espertech.esper.type.CronOperatorEnum.WEEKDAY">
            <summary>Weekday (nearest to a date) </summary>
        </member>
        <member name="F:com.espertech.esper.type.CronOperatorEnum.LASTWEEKDAY">
            <summary>Last weekday in a month </summary>
        </member>
        <member name="M:com.espertech.esper.type.CronOperatorEnumExtensions.GetSyntax(com.espertech.esper.type.CronOperatorEnum)">
            <summary>Returns the syntax string for the operator. </summary>
            <returns>syntax string</returns>
        </member>
        <member name="M:com.espertech.esper.client.ServiceProviderEventArgs.#ctor(com.espertech.esper.client.EPServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.ServiceProviderEventArgs"/> class.
            </summary>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="P:com.espertech.esper.client.ServiceProviderEventArgs.ServiceProvider">
            <summary>
            Gets the service provider.
            </summary>
            <value>The service provider.</value>
        </member>
        <member name="T:com.espertech.esper.client.EPStatementState">
            <summary>Enumerates all statement states.</summary>
        </member>
        <member name="F:com.espertech.esper.client.EPStatementState.STARTED">
            <summary>Started state.</summary>
        </member>
        <member name="F:com.espertech.esper.client.EPStatementState.STOPPED">
            <summary>Stopped state.</summary>
        </member>
        <member name="F:com.espertech.esper.client.EPStatementState.DESTROYED">
            <summary>Destroyed state.</summary>
        </member>
        <member name="F:com.espertech.esper.client.EPStatementState.FAILED">
            <summary>Failed state.</summary>
        </member>
        <member name="T:com.espertech.esper.client.EPSender">
            <summary>
            Send a map containing event property values to the event stream processing runtime.
            Use the route method for sending events into the runtime from within UpdateListener code.
            </summary>
            <param name="mappedEvent">map that contains event property values. Keys are expected to be of type String while values
            can be of any type. Keys and values should match those declared via Configuration for the given eventTypeAlias. 
            </param>
            <throws>  EPException - when the processing of the event leads to an error </throws>
        </member>
        <member name="F:com.espertech.esper.client.PropertyResolutionStyle.CASE_SENSITIVE">
            <summary>
            Properties are only matched if the names are identical in name
            and case to the original property name.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.PropertyResolutionStyle.CASE_INSENSITIVE">
            <summary>
            Properties are matched if the names are identical.  A case insensitive
            search is used and will choose the first property that matches
            the name exactly or the first property that matches case insensitively
            should no match be found.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.PropertyResolutionStyle.DISTINCT_CASE_INSENSITIVE">
            <summary>
            Properties are matched if the names are identical.  A case insensitive
            search is used and will choose the first property that matches
            the name exactly case insensitively.  If more than one 'name' can be
            mapped to the property an exception is thrown.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.PropertyResolutionStyle.DEFAULT">
            <summary>
            Default
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.PropertyResolutionStyleHelper">
            <summary>
            A class that helps with the use of the PropertyResolutionStyle.  Among other
            things it allows developers to get or set the property resolution style that 
            should be used when one is not specified.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.PropertyResolutionStyleHelper.#cctor">
            <summary>
            Initializes the <see cref="T:com.espertech.esper.client.PropertyResolutionStyleHelper"/> class.
            </summary>
        </member>
        <member name="P:com.espertech.esper.client.PropertyResolutionStyleHelper.DefaultPropertyResolutionStyle">
            <summary>
            Gets or sets the property resolution style that should be used whe
            one is not specified.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.time.CurrentTimeEvent">
            <summary>
            Event for externally controlling the time within an <see cref="T:com.espertech.esper.client.EPRuntime"/> instance.
            External clocking must be enabled via <see cref="T:com.espertech.esper.client.time.TimerControlEvent"/> before this class can be used
            to externally feed time.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.time.CurrentTimeEvent.#ctor(System.Int64)">
            <summary> Constructor.</summary>
            <param name="timeInMillis">is the time in milliseconds
            </param>
        </member>
        <member name="M:com.espertech.esper.client.time.CurrentTimeEvent.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.time.CurrentTimeEvent.TimeInMillis">
            <summary> Returns the time in milliseconds.</summary>
            <returns> time in milliseconds
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.time.TimerControlEvent">
            <summary>
            Event for controlling clocking, i.e. to enable and disable external clocking.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.time.TimerControlEvent.#ctor(com.espertech.esper.client.time.TimerControlEvent.ClockTypeEnum)">
            <summary> Constructor takes a clocking type as parameter.</summary>
            <param name="clockType">for internal or external clocking
            </param>
        </member>
        <member name="P:com.espertech.esper.client.time.TimerControlEvent.ClockType">
            <summary> Returns clocking type.</summary>
            <returns> clocking type
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.time.TimerControlEvent.ClockTypeEnum">
            <summary>
            Enumeration that describes what type of clock we are using.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.time.TimerControlEvent.ClockTypeEnum.CLOCK_EXTERNAL">
            <summary> For external clocking.</summary>
        </member>
        <member name="F:com.espertech.esper.client.time.TimerControlEvent.ClockTypeEnum.CLOCK_INTERNAL">
            <summary> For internal clocking.</summary>
        </member>
        <member name="T:com.espertech.esper.client.UpdateListener">
            <summary>
            Defines an interface to notify of new and old events.
            <para>
            Also see <see cref="T:com.espertech.esper.client.StatementAwareUpdateListener"/> for update listeners that require
            the statement and service provider instance to be passed to the listener in addition
            to events.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.UpdateListener.Update(com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean[])">
            <summary>
            Notify that new events are available or old events are removed.
            If the call to update contains new (inserted) events, then the first argument will be a non-empty list and
            the second will be empty. Similarly, if the call is a notification of deleted events, then the first argument
            will be empty and the second will be non-empty.
            <para>
            Either the newEvents or oldEvents will be non-null. This method won't be called with both arguments being null,
            (unless using output rate limiting or force-output options),
            but either one could be null. The same is true for zero-length arrays.
            </para>
            <para>
            Either newEvents or oldEvents will be non-empty. If both are non-empty, then the update is a modification
            notification.
            </para>
            </summary>
            <param name="newEvents">is any new events. This will be null or empty if the update is for old events only.</param>
            <param name="oldEvents">is any old events. This will be null or empty if the update is for new events only.</param>
        </member>
        <member name="T:com.espertech.esper.client.soda.ArithmaticExpression">
            <summary>
            Arithmatic expression for addition, subtraction, multiplication, division and modulo.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ArithmaticExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.soda.ArithmaticExpression"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ArithmaticExpression.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="operator">can be any of '-', '+', '*', '/' or '%' (modulo).</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.ArithmaticExpression.#ctor(com.espertech.esper.client.soda.Expression,System.String,com.espertech.esper.client.soda.Expression)">
            <summary>Ctor.</summary>
            <param name="left">the left hand side</param>
            <param name="operator">can be any of '-', '+', '*', '/' or '%' (modulo).</param>
            <param name="right">the right hand side</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.ArithmaticExpression.Add(System.Object)">
            <summary>Add a constant to include in the computation.</summary>
            <param name="obj">constant to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.ArithmaticExpression.Add(com.espertech.esper.client.soda.Expression)">
            <summary>Add an expression to include in the computation.</summary>
            <param name="expression">to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.ArithmaticExpression.Add(System.String)">
            <summary>Add a property to include in the computation.</summary>
            <param name="propertyName">is the name of the property</param>
            <returns>expression</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.ArithmaticExpression.Operator">
            <summary>Gets the arithmatic operator.</summary>
            <returns>operator</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.ArrayExpression">
            <summary>
            Array expression forms array results, similar to the EPL syntax
            of "{element 1, element 2, ... element n}".
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ArrayExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.soda.ArrayExpression"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ArrayExpression.Add(System.String)">
            <summary>Add a property to the expression.</summary>
            <param name="property">to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.ArrayExpression.Add(System.Object)">
            <summary>
            Add a constant to the expression.
            </summary>
            <param name="object">Constant object that is to be added.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.ArrayExpression.Add(com.espertech.esper.client.soda.Expression)">
            <summary>Add an expression representing an array element to the expression.</summary>
            <param name="expression">to add</param>
            <returns>expression</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.AvedevProjectionExpression">
            <summary>
            Mean deviation of the (distinct) values returned by an expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.AvedevProjectionExpression.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.AvedevProjectionExpression.#ctor(System.Boolean)">
            <summary>
            Ctor - for use to create an expression tree, without inner expression.
            </summary>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.AvedevProjectionExpression.#ctor(com.espertech.esper.client.soda.Expression,System.Boolean)">
            <summary>Ctor - adds the expression to project. </summary>
            <param name="expression">returning values to project</param>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.AvedevProjectionExpression.IsDistinct">
            <summary>
            Returns true if the projection considers distinct values only.
            </summary>
            <value>true if distinct</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.AvgProjectionExpression">
            <summary>
            Average of the (distinct) values returned by an expression.
            <para/> Expects a single child expression providing the values to aggregate.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.AvgProjectionExpression.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.AvgProjectionExpression.#ctor(System.Boolean)">
            <summary>
            Ctor - for use to create an expression tree, without inner expression
            </summary>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.AvgProjectionExpression.#ctor(com.espertech.esper.client.soda.Expression,System.Boolean)">
            <summary>Ctor - adds the expression to project. </summary>
            <param name="expression">returning values to project</param>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.AvgProjectionExpression.IsDistinct">
            <summary>
            Returns true if the projection considers distinct values only.
            </summary>
            <value>true if distinct</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.BetweenExpression">
            <summary>
            Between checks that a given value is in a range between a low endpoint and a high endpoint.
            <para/>
            Closed and open ranges (endpoint included or excluded) are supported by this class, as is not-between.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.BetweenExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.soda.BetweenExpression"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.BetweenExpression.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Ctor, creates a between range check.</summary>
            <param name="datapoint">provides the datapoint</param>
            <param name="lower">provides lower boundary</param>
            <param name="higher">provides upper boundary</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.BetweenExpression.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            <para/>
            Use add methods to add child expressions to acts upon.
            </summary>
            <param name="lowEndpointIncluded">
            true if the low endpoint is included, false if not
            </param>
            <param name="highEndpointIncluded">
            true if the high endpoint is included, false if not
            </param>
            <param name="notBetween">true for not-between, false for between</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.BetweenExpression.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Ctor.</summary>
            <param name="datapoint">provides the datapoint</param>
            <param name="lower">provides lower boundary</param>
            <param name="higher">provides upper boundary</param>
            <param name="lowEndpointIncluded">
            true if the low endpoint is included, false if not
            </param>
            <param name="highEndpointIncluded">
            true if the high endpoint is included, false if not
            </param>
            <param name="notBetween">true for not-between, false for between</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.BetweenExpression.ToPrecedenceFreeEPL(System.IO.TextWriter)">
            <summary>Renders the clause in textual representation. </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.BetweenExpression.IsLowEndpointIncluded">
            <summary>True if the low endpoint is included.</summary>
            <returns>true for inclusive range.</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.BetweenExpression.IsHighEndpointIncluded">
            <summary>True if the high endpoint is included.</summary>
            <returns>true for inclusive range.</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.BetweenExpression.IsNotBetween">
            <summary>True for not-between, or false for between range.</summary>
            <returns>
            false is the default range check, true checks if the value is outside of the range
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.BitwiseOpExpression">
            <summary>
            Bitwise (binary) operator for binary AND, binary OR and binary XOR.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.BitwiseOpExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.soda.BitwiseOpExpression"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.BitwiseOpExpression.#ctor(com.espertech.esper.type.BitWiseOpEnum)">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            <para/>
            Use add methods to add child expressions to acts upon.
            </summary>
            <param name="binaryOp">the binary operator</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.BitwiseOpExpression.Add(System.String)">
            <summary>Add a property to the expression.</summary>
            <param name="property">to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.BitwiseOpExpression.Add(System.Object)">
            <summary>Add a constant to the expression.</summary>
            <param name="object">constant to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.BitwiseOpExpression.Add(com.espertech.esper.client.soda.Expression)">
            <summary>Add an expression to the expression.</summary>
            <param name="expression">to add</param>
            <returns>expression</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.BitwiseOpExpression.BinaryOp">
            <summary>Gets or sets the binary operator.</summary>
            <returns>operator</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.CaseSwitchExpression">
            <summary>
            Case-expression that acts as a switch testing a value against other values.
            <para>
            The first child expression provides the value to switch on.
            The following pairs of child expressions provide the "when expression then expression" results.
            The last child expression provides the "else" result.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CaseSwitchExpression.#ctor">
            <summary>
            Ctor - for use to create an expression tree, without inner expression
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CaseSwitchExpression.#ctor(com.espertech.esper.client.soda.Expression)">
            <summary>Ctor.</summary>
            <param name="switchValue">is the expression providing the value to switch on</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CaseSwitchExpression.Add(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>
            Adds a pair of expressions representing a "when" and a "then" in the switch.
            </summary>
            <param name="when">expression to match on</param>
            <param name="then">
            expression to return a conditional result when the when-expression matches
            </param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.CaseSwitchExpression.SetElse(com.espertech.esper.client.soda.Expression)">
            <summary>
            Sets the else-part of the case-switch. This result of this expression is returned
            when no when-expression matched.
            </summary>
            <param name="elseExpr">is the expression returning the no-match value</param>
            <returns>expression</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.CaseWhenThenExpression">
            <summary>
            Case expression that act as a when-then-else.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CaseWhenThenExpression.#ctor">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            <para>
            Use add methods to add child expressions to acts upon.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CaseWhenThenExpression.Add(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Adds a when-then pair of expressions.</summary>
            <param name="when">providings conditions to evaluate</param>
            <param name="then">provides the result when a condition evaluates to true</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.CaseWhenThenExpression.SetElse(com.espertech.esper.client.soda.Expression)">
            <summary>
            Sets the expression to provide a value when no when-condition matches.
            </summary>
            <param name="elseExpr">expression providing default result</param>
            <returns>expression</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.CastExpression">
            <summary>
            Cast expression casts the return value of an expression to a specified type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CastExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.soda.CastExpression"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CastExpression.#ctor(System.String)">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            </summary>
            <param name="typeName">
            is the type to cast to: a fully-qualified class name or primitive type name or "string"
            </param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CastExpression.#ctor(com.espertech.esper.client.soda.Expression,System.String)">
            <summary>Ctor.</summary>
            <param name="expressionToCheck">provides values to cast</param>
            <param name="typeName">
            is the type to cast to: a fully-qualified class names or primitive type names or "string"
            </param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CastExpression.ToPrecedenceFreeEPL(System.IO.TextWriter)">
            <summary>Renders the clause in textual representation.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.CastExpression.TypeName">
            <summary>Gets or sets the name of the type to cast to.</summary>
            <returns>type name</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.CoalesceExpression">
            <summary>
            Coalesce-function which returns the first non-null value in a list of values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CoalesceExpression.#ctor">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            <para/>
            Use add methods to add child expressions to acts upon.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CoalesceExpression.#ctor(System.String,System.String,System.String[])">
            <summary>Ctor.</summary>
            <param name="propertyOne">the first property in the expression</param>
            <param name="propertyTwo">the second property in the expression</param>
            <param name="moreProperties">optional more properties in the expression</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CoalesceExpression.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression[])">
            <summary>Ctor.</summary>
            <param name="exprOne">provides the first value in the expression</param>
            <param name="exprTwo">provides the second value in the expression</param>
            <param name="moreExpressions">
            optional more expressions that are part of the function
            </param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CoalesceExpression.Add(System.Object)">
            <summary>Add a constant to include in the computation.</summary>
            <param name="object">constant to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.CoalesceExpression.Add(com.espertech.esper.client.soda.Expression)">
            <summary>Add an expression to include in the computation.</summary>
            <param name="expression">to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.CoalesceExpression.Add(System.String)">
            <summary>Add a property to include in the computation.</summary>
            <param name="propertyName">is the name of the property</param>
            <returns>expression</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.ConcatExpression">
            <summary>
            Concatenation expression that concatenates the result of child expressions to the expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ConcatExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.soda.ConcatExpression"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ConcatExpression.Add(System.Object)">
            <summary>Add a constant to include in the computation.</summary>
            <param name="object">constant to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.ConcatExpression.Add(com.espertech.esper.client.soda.Expression)">
            <summary>Add an expression to include in the computation.</summary>
            <param name="expression">to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.ConcatExpression.Add(System.String)">
            <summary>Add a property to include in the computation.</summary>
            <param name="propertyName">is the name of the property</param>
            <returns>expression</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.Conjunction">
            <summary>
            Conjunction represents a logical AND allowing multiple sub-expressions to be connected by AND.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.Junction">
            <summary>
            Base junction for conjunction (and) and disjunction (or).
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.Junction.Add(com.espertech.esper.client.soda.Expression)">
            <summary>Expression to add to the conjunction (AND) or disjunction (OR). </summary>
            <param name="expression">to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Junction.Add(System.String)">
            <summary>Property to add to the conjunction (AND) or disjunction (OR). </summary>
            <param name="propertyName">is the name of the property</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Conjunction.#ctor">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            <para/>
            Use add methods to add child expressions to acts upon.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.Conjunction.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression[])">
            <summary>Ctor.</summary>
            <param name="first">provides value to AND</param>
            <param name="second">provides value to AND</param>
            <param name="expressions">is more expressions to put in the AND-relationship.</param>
        </member>
        <member name="T:com.espertech.esper.client.soda.ConstantExpression">
            <summary>Constant value returns a fixed value for use in expressions. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ConstantExpression.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ConstantExpression.#ctor(System.Object)">
            <summary>Ctor. </summary>
            <param name="constant">is the constant value, or null to represent the null value</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.ConstantExpression.#ctor(System.Object,System.String)">
            <summary>Ctor. </summary>
            <param name="constant">value</param>
            <param name="constantType">type</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.ConstantExpression.ConstantType">
            <summary>Returns the type of the constant. </summary>
            <value>type</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.ConstantExpression.Constant">
            <summary>Returns the constant value that the expression represents. </summary>
            <value>value of constant</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.CountProjectionExpression">
            <summary>
            Count of the (distinct) values returned by an expression, equivalent to "count(distinct property)"
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CountProjectionExpression.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CountProjectionExpression.#ctor(System.Boolean)">
            <summary>
            Ctor - for use to create an expression tree, without inner expression
            </summary>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.CountProjectionExpression.#ctor(com.espertech.esper.client.soda.Expression,System.Boolean)">
            <summary>
            Ctor - adds the expression to project.
            </summary>
            <param name="expression">returning values to project</param>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.CountProjectionExpression.IsDistinct">
            <summary>
            Returns true if the projection considers distinct values only.
            </summary>
            <value>true if distinct</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.CountStarProjectionExpression">
            <summary>Count of (distinct) rows, equivalent to "count(*)" </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CountStarProjectionExpression.#ctor">
            <summary>Ctor - for use to create an expression tree, without inner expression. </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.CurrentTimestampExpression">
            <summary>
            Current timestamp supplies the current engine time in an expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.CurrentTimestampExpression.#ctor">
            <summary>Ctor.</summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.Disjunction">
            <summary>
            Disjunction represents a logical OR allowing multiple sub-expressions to be connected by OR.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.Disjunction.#ctor">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            <para>
            Use add methods to add child expressions to acts upon.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.Disjunction.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression[])">
            <summary>Ctor.</summary>
            <param name="first">an expression to add to the OR-test</param>
            <param name="second">an expression to add to the OR-test</param>
            <param name="expressions">is the expression to put in the OR-relationship.</param>
        </member>
        <member name="T:com.espertech.esper.client.soda.EPBaseNamedObject">
            <summary>
            Base class for named engine objects such as views, patterns guards and observers.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPBaseNamedObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.soda.EPBaseNamedObject"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPBaseNamedObject.#ctor(System.String,System.String,System.Collections.Generic.IList{com.espertech.esper.client.soda.Expression})">
            <summary>
            Ctor.
            </summary>
            <param name="namespace">is the namespace of the object, i.e. view namespace or pattern object namespace</param>
            <param name="name">is the name of the object, such as the view name</param>
            <param name="parameters">is the optional parameters to the view or pattern object, or empty list for no parameters</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPBaseNamedObject.ToEPL(System.IO.TextWriter)">
            <summary>
            Writes the object in EPL-syntax in the format "namespace:name(parameter, parameter, ..., parameter)"
            </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPBaseNamedObject.Namespace">
            <summary>Gets or sets the object namespace name.</summary>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPBaseNamedObject.Name">
            <summary>Gets or sets the object name.</summary>
            <returns>object name</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPBaseNamedObject.Parameters">
            <summary>Gets or sets the object parameters.</summary>
            <returns>parameters for object, empty list for no parameters</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.EPStatementObjectModel">
            <summary>
            Object model of an EPL statement.
            <para/>
            Applications can create an object model by instantiating this class and then setting 
            the various clauses. When done, use <seealso cref="T:com.espertech.esper.client.EPAdministrator"/> 
            to create a statement from the model.
            <para/>
            Alternativly, a given textual EPL can be compiled into an object model representation via the 
            compile method on <seealso cref="T:com.espertech.esper.client.EPAdministrator"/>. 
            <para/> 
            Use the toEPL method to generate a textual EPL from an object model.
            <para/> 
            Minimally, and EPL statement consists of the select-clause and the where-clause. These are 
            represented by <seealso cref="P:com.espertech.esper.client.soda.EPStatementObjectModel.SelectClause"/> and <seealso cref="P:com.espertech.esper.client.soda.EPStatementObjectModel.FromClause"/> respectively. 
            <para/>
            Here is a short example that create a simple EPL statement such as "select page, responseTime 
            from PageLoad" :
            <pre>
               EPStatementObjectModel model = new EPStatementObjectModel(); 
               model.SetSelectClause(SelectClause.Create("page", "responseTime")); 
               model.FromClause = FromClause.Create(FilterStream.Create("PageLoad")); 
            </pre>
            <para/> 
            The select-clause and from-clause must be set for the statement object model to be useable by 
            the administrative API. All other clauses a optional. 
            <para/>
             Please see the documentation set for further examples.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPStatementObjectModel.GetInsertInto">
            <summary>Return the insert-into-clause, or null to indicate that the clause is absent. </summary>
            <returns>specification of the insert-into-clause, or null if none present</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPStatementObjectModel.SetInsertInto(com.espertech.esper.client.soda.InsertIntoClause)">
            <summary>Specify an insert-into-clause. </summary>
            <param name="insertInto">specifies the insert-into-clause, or null to indicate that the clause is absent</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPStatementObjectModel.GetSelectClause">
            <summary>Return the select-clause. </summary>
            <returns>specification of the select-clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPStatementObjectModel.SetSelectClause(com.espertech.esper.client.soda.SelectClause)">
            <summary>Specify a select-clause. </summary>
            <param name="selectClause">specifies the select-clause, the select-clause cannot be null and must be set</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPStatementObjectModel.GetFromClause">
            <summary>Return the from-clause. </summary>
            <returns>specification of the from-clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPStatementObjectModel.SetFromClause(com.espertech.esper.client.soda.FromClause)">
            <summary>Specify a from-clause. </summary>
            <param name="fromClause">specifies the from-clause, the from-clause cannot be null and must be set</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPStatementObjectModel.GetOnExpr">
            <summary>
            Gets the on expr.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPStatementObjectModel.SetOnExpr(com.espertech.esper.client.soda.OnClause)">
            <summary>
            Sets the on expr.
            </summary>
            <param name="onClause">The on clause.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPStatementObjectModel.GetWhereClause">
            <summary>Return the where-clause, or null to indicate that the clause is absent. </summary>
            <returns>specification of the where-clause, or null if none present</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPStatementObjectModel.SetWhereClause(com.espertech.esper.client.soda.Expression)">
            <summary>Specify a where-clause. </summary>
            <param name="whereClause">specifies the where-clause, which is optional and can be null</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPStatementObjectModel.GetGroupByClause">
            <summary>Return the group-by-clause, or null to indicate that the clause is absent. </summary>
            <returns>specification of the group-by-clause, or null if none present</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPStatementObjectModel.SetGroupByClause(com.espertech.esper.client.soda.GroupByClause)">
            <summary>Specify a group-by-clause. </summary>
            <param name="groupByClause">specifies the group-by-clause, which is optional and can be null</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPStatementObjectModel.GetHavingClause">
            <summary>Return the having-clause, or null to indicate that the clause is absent. </summary>
            <returns>specification of the having-clause, or null if none present</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPStatementObjectModel.SetHavingClause(com.espertech.esper.client.soda.Expression)">
            <summary>Specify a having-clause. </summary>
            <param name="havingClause">specifies the having-clause, which is optional and can be null</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPStatementObjectModel.GetOrderByClause">
            <summary>Return the order-by-clause, or null to indicate that the clause is absent. </summary>
            <returns>specification of the order-by-clause, or null if none present</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPStatementObjectModel.SetOrderByClause(com.espertech.esper.client.soda.OrderByClause)">
            <summary>Specify an order-by-clause. </summary>
            <param name="orderByClause">specifies the order-by-clause, which is optional and can be null</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPStatementObjectModel.GetOutputLimitClause">
            <summary>Return the output-rate-limiting-clause, or null to indicate that the clause is absent. </summary>
            <returns>specification of the output-rate-limiting-clause, or null if none present</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPStatementObjectModel.SetOutputLimitClause(com.espertech.esper.client.soda.OutputLimitClause)">
            <summary>Specify an output-rate-limiting-clause. </summary>
            <param name="outputLimitClause">specifies the output-rate-limiting-clause, which is optional and can be null</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPStatementObjectModel.GetUpdateClause">
            <summary>
            Gets the update clause.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPStatementObjectModel.SetUpdateClause(com.espertech.esper.client.soda.UpdateClause)">
            <summary>
            Sets the update clause.
            </summary>
            <param name="updateClause">The update clause.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPStatementObjectModel.GetCreateWindow">
            <summary>
            Gets the create window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPStatementObjectModel.SetCreateWindow(com.espertech.esper.client.soda.CreateWindowClause)">
            <summary>
            Sets the create window.
            </summary>
            <param name="createWindowClause">The create window clause.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPStatementObjectModel.GetCreateDataFlow">
            <summary>Returns the "create dataflow" part, if present. </summary>
            <returns>create dataflow clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPStatementObjectModel.SetCreateDataFlow(com.espertech.esper.client.soda.CreateDataFlowClause)">
            <summary>Sets the "create dataflow" part,. </summary>
            <param name="createDataFlow">create dataflow clause</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPStatementObjectModel.ToEPL">
            <summary>Renders the object model in it's EPL syntax textual representation. </summary>
            <returns>EPL representing the statement object model</returns>
            <throws>IllegalStateException if required clauses do not exist</throws>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPStatementObjectModel.ToEPL(System.IO.TextWriter)">
            <summary>
            Rendering using the provided writer.
            </summary>
            <param name="writer">to use</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPStatementObjectModel.ToEPL(com.espertech.esper.client.soda.EPStatementFormatter)">
            <summary>Rendering using the provided formatter. </summary>
            <param name="formatter">to use</param>
            <returns>rendered string</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.EPStatementObjectModel.ToEPL(com.espertech.esper.client.soda.EPStatementFormatter,System.IO.TextWriter)">
            <summary>
            Renders the object model in it's EPL syntax textual representation, using a whitespace-formatter as provided.
            </summary>
            <param name="formatter">the formatter to use</param>
            <param name="writer">The writer.</param>
            <throws>IllegalStateException if required clauses do not exist</throws>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.CreateWindow">
            <summary>Returns the create-window clause for creating named windows, or null if this statement does not create a named window. </summary>
            <value>named window creation clause</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.OnExpr">
            <summary>Returns the on-delete clause for deleting from named windows, or null if this statement does not delete from a named window </summary>
            <value>on delete clause</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.CreateVariable">
            <summary>Returns the create-variable clause if this is a statement creating a variable, or null if not. </summary>
            <value>create-variable clause</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.RowLimitClause">
            <summary>Returns the row limit specification, or null if none supplied. </summary>
            <value>row limit spec if any</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.UpdateClause">
            <summary>Returns the update specification. </summary>
            <value>update spec if defined</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.Annotations">
            <summary>Returns annotations. </summary>
            <value>annotations</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.MatchRecognizeClause">
            <summary>Match-recognize clause. </summary>
            <value>clause</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.CreateIndex">
            <summary>Sets create-index clause. </summary>
            <value>to set</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.CreateSchema">
            <summary>Returns the create-schema clause. </summary>
            <value>clause</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.CreateContext">
            <summary>Returns the create-context clause. </summary>
            <value>clause</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.CreateExpression">
            <summary>
            Gets or sets the create-expression clause, if any
            </summary>
            <value>The create expression.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.ForClause">
            <summary>Returns the for-clause. </summary>
            <value>for-clause</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.TreeObjectName">
            <summary>
            Gets or sets the internal expression id assigned for tools to identify the expression.
            </summary>
            <value>The name of the tree object.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.ExpressionDeclarations">
            <summary>Returns the expression declarations, if any. </summary>
            <value>expression declarations</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.ContextName">
            <summary>Returns the context name if context dimensions apply to statement. </summary>
            <value>context name</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.InsertInto">
            <summary>
            Gets or sets the insert into.
            </summary>
            <value>The insert into.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.SelectClause">
            <summary>
            Gets or sets the select clause.
            </summary>
            <value>The select clause.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.FromClause">
            <summary>
            Gets or sets from clause.
            </summary>
            <value>From clause.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.WhereClause">
            <summary>
            Gets or sets the where clause.
            </summary>
            <value>The where clause.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.GroupByClause">
            <summary>
            Gets or sets the group by clause.
            </summary>
            <value>The group by clause.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.HavingClause">
            <summary>
            Gets or sets the having clause.
            </summary>
            <value>The having clause.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.OrderByClause">
            <summary>
            Gets or sets the order by clause.
            </summary>
            <value>The order by clause.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.OutputLimitClause">
            <summary>
            Gets or sets the output limit clause.
            </summary>
            <value>The output limit clause.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.EPStatementObjectModel.ScriptExpressions">
            <summary>
            Gets or sets the script expressions.
            </summary>
            <value>The script expressions.</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.Expressions">
            <summary>
            Convenience factory for creating <seealso cref="T:com.espertech.esper.client.soda.Expression"/> instances. 
            <para/> Provides quick-access methods to create all possible expressions and provides typical parameter lists to each.
            <para/> Note that only the typical parameter lists are provided and expressions can allow adding additional parameters.
            <para/> Many expressions, for example logical AND and OR (conjunction and disjunction), allow adding an unlimited number of 
            additional sub-expressions to an expression. For those expressions there are additional add methods provided. 
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.CurrentTimestamp">
            <summary>Current system time supplies internal-timer provided time or the time provided by external timer events. </summary>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.ExistsProperty(System.String)">
            <summary>Exists-function for use with dynamic properties to test property existence. </summary>
            <param name="propertyName">name of the property to test whether it exists or not</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Cast(com.espertech.esper.client.soda.Expression,System.String)">
            <summary>Cast function, casts the result on an expression to the desired type, or returns null if the type cannot be casted to the type. <para /> The list of types can include fully-qualified class names plus any of the Java primitive type names: byte, char, short, int, long, float, double, bool. Alternatively to "System.String" the simple "string" is also permitted. <para /> Type checks include all superclasses and interfaces of the value returned by the expression. </summary>
            <param name="expression">returns the value to cast</param>
            <param name="typeName">is type to cast to</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Cast(System.String,System.String)">
            <summary>
            Cast function, casts the result on an expression to the desired type, or returns null if the type cannot be casted to the type. <para/> The list of types can include fully-qualified class names plus any of the Java primitive type names: byte, char, short, int, long, float, double, bool. Alternatively to "System.String" the simple "string" is also permitted. <para/> Type checks include all superclasses and interfaces of the value returned by the expression.
            </summary>
            <param name="propertyName">name of the property supplying the value to cast</param>
            <param name="typeName">is type to cast to</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.InstanceOf(com.espertech.esper.client.soda.Expression,System.String,System.String[])">
            <summary>
            Instance-of function, tests if the type of the return value of an expression is in a list of types.
            <para/> 
            The list of types can include fully-qualified class names plus any of the Java primitive type names: 
                byte, char, short, int, long, float, double, bool. Alternatively to "System.String" the simple 
                "string" is also permitted.
            <para/>
            Type checks include all superclasses and interfaces of the value returned by the expression.
            </summary>
            <param name="expression">returns the value to test whether the type returned is any of the  is the function name</param>
            <param name="typeName">is one type to check for</param>
            <param name="typeNames">is optional additional types to check for in a list</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.InstanceOf(System.String,System.String,System.String[])">
            <summary>
            Instance-of function, tests if the type of the return value of a property is in a list of types.
            <para/> 
            Useful with dynamic (unchecked) properties to check the type of property returned. 
            <para/> 
            The list of types can include fully-qualified class names plus any of the Java primitive type names: 
                byte, char, short, int, long, float, double, bool. Alternatively to "System.String" the simple "string" is also permitted. <para/> Type checks include all superclasses and interfaces of the value returned by the expression.
            </summary>
            <param name="propertyName">name of the property supplying the value to test</param>
            <param name="typeName">is one type to check for</param>
            <param name="typeNames">is optional additional types to check for in a list</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.TypeOf(com.espertech.esper.client.soda.Expression)">
            <summary>Type-of function, returns the event type name or result type as a string of a stream name, property or expression. </summary>
            <param name="expression">to evaluate and return it's result type as a string</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.TypeOf(System.String)">
            <summary>Type-of function, returns the event type name or result type as a string of a stream name, property or expression. </summary>
            <param name="propertyName">returns the property to evaluate and return its event type name or property class type</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.PlugInAggregation(System.String,com.espertech.esper.client.soda.Expression[])">
            <summary>Plug-in aggregation function. </summary>
            <param name="functionName">is the function name</param>
            <param name="moreExpressions">provides the values to aggregate</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Regexp(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Regular expression. </summary>
            <param name="left">returns the values to match</param>
            <param name="right">returns the value to match against</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Regexp(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,System.String)">
            <summary>Regular expression. </summary>
            <param name="left">returns the values to match</param>
            <param name="right">returns the value to match against</param>
            <param name="escape">is the escape character</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Regexp(System.String,System.String)">
            <summary>Regular expression. </summary>
            <param name="property">the name of the property returning values to match</param>
            <param name="regExExpression">a regular expression to match against</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Regexp(System.String,System.String,System.String)">
            <summary>Regular expression. </summary>
            <param name="property">the name of the property returning values to match</param>
            <param name="regExExpression">a regular expression to match against</param>
            <param name="escape">is the escape character</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.NotRegexp(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Regular expression negated (not regexp). </summary>
            <param name="left">returns the values to match</param>
            <param name="right">returns the value to match against</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.NotRegexp(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,System.String)">
            <summary>Regular expression negated (not regexp). </summary>
            <param name="left">returns the values to match</param>
            <param name="right">returns the value to match against</param>
            <param name="escape">is the escape character</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.NotRegexp(System.String,System.String)">
            <summary>Regular expression negated (not regexp). </summary>
            <param name="property">the name of the property returning values to match</param>
            <param name="regExExpression">a regular expression to match against</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.NotRegexp(System.String,System.String,System.String)">
            <summary>Regular expression negated (not regexp). </summary>
            <param name="property">the name of the property returning values to match</param>
            <param name="regExExpression">a regular expression to match against</param>
            <param name="escape">is the escape character</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Array">
            <summary>Array expression, representing the syntax of "{1, 2, 3}" returning an integer array of 3 elements valued 1, 2, 3. </summary>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.BinaryAnd">
            <summary>Bitwise (binary) AND. </summary>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.BinaryOr">
            <summary>Bitwise (binary) OR. </summary>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.BinaryXor">
            <summary>Bitwise (binary) XOR. </summary>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Min(System.String,System.String,System.String[])">
            <summary>Minimum value per-row function (not aggregating). </summary>
            <param name="propertyOne">the name of a first property to compare</param>
            <param name="propertyTwo">the name of a second property to compare</param>
            <param name="moreProperties">optional additional properties to compare</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Min(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression[])">
            <summary>Minimum value per-row function (not aggregating). </summary>
            <param name="exprOne">returns the first value to compare</param>
            <param name="exprTwo">returns the second value to compare</param>
            <param name="moreExpressions">optional additional values to compare</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Max(System.String,System.String,System.String[])">
            <summary>Maximum value per-row function (not aggregating). </summary>
            <param name="propertyOne">the name of a first property to compare</param>
            <param name="propertyTwo">the name of a second property to compare</param>
            <param name="moreProperties">optional additional properties to compare</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Max(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression[])">
            <summary>Maximum value per-row function (not aggregating). </summary>
            <param name="exprOne">returns the first value to compare</param>
            <param name="exprTwo">returns the second value to compare</param>
            <param name="moreExpressions">optional additional values to compare</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Coalesce(System.String,System.String,System.String[])">
            <summary>Coalesce. </summary>
            <param name="propertyOne">name of the first property returning value to coealesce</param>
            <param name="propertyTwo">name of the second property returning value to coealesce</param>
            <param name="moreProperties">name of the optional additional properties returning values to coealesce</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Coalesce(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression[])">
            <summary>Coalesce. </summary>
            <param name="exprOne">returns value to coalesce</param>
            <param name="exprTwo">returns value to coalesce</param>
            <param name="moreExpressions">returning optional additional values to coalesce</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Constant(System.Object)">
            <summary>Constant. </summary>
            <param name="value">is the constant value</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Constant(System.Object,System.Type)">
            <summary>Constant, use when the value is null. </summary>
            <param name="value">is the constant value</param>
            <param name="constantType">is the type of the constant</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.CaseWhenThen">
            <summary>Case-when-then expression. </summary>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.CaseSwitch(com.espertech.esper.client.soda.Expression)">
            <summary>Case-switch expresssion. </summary>
            <param name="valueToSwitchOn">provides the switch value</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.CaseSwitch(System.String)">
            <summary>Case-switch expresssion. </summary>
            <param name="propertyName">the name of the property that provides the switch value</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.In(System.String,System.Object[])">
            <summary>In-expression that is equivalent to the syntax of "property in (value, value, ... value)". </summary>
            <param name="property">is the name of the property</param>
            <param name="values">are the constants to check against</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.NotIn(System.String,System.Object[])">
            <summary>Not-In-expression that is equivalent to the syntax of "property not in (value, value, ... value)". </summary>
            <param name="property">is the name of the property</param>
            <param name="values">are the constants to check against</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.In(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression[])">
            <summary>In-expression that is equivalent to the syntax of "property in (value, value, ... value)". </summary>
            <param name="value">provides values to match</param>
            <param name="set">are expressons that provide match-against values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.NotIn(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression[])">
            <summary>Not-In-expression that is equivalent to the syntax of "property not in (value, value, ... value)". </summary>
            <param name="value">provides values to match</param>
            <param name="set">are expressons that provide match-against values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Not(com.espertech.esper.client.soda.Expression)">
            <summary>Not expression negates the sub-expression to the not which is expected to return bool-typed values. </summary>
            <param name="inner">is the sub-expression</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.StaticMethod(System.String,System.String,System.Object[])">
            <summary>Static method invocation. </summary>
            <param name="className">the name of the class to invoke a method on</param>
            <param name="method">the name of the method to invoke</param>
            <param name="parameters">zero, one or more constants that are the parameters to the static method</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.StaticMethod(System.String,System.String,com.espertech.esper.client.soda.Expression[])">
            <summary>Static method invocation. </summary>
            <param name="className">the name of the class to invoke a method on</param>
            <param name="method">the name of the method to invoke</param>
            <param name="parameters">zero, one or more expressions that provide parameters to the static method</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Prior(System.Int32,System.String)">
            <summary>Prior function. </summary>
            <param name="index">the numeric index of the prior event</param>
            <param name="property">the name of the property to obtain the value for</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Previous(com.espertech.esper.client.soda.Expression,System.String)">
            <summary>Previous function. </summary>
            <param name="expression">provides the numeric index of the previous event</param>
            <param name="property">the name of the property to obtain the value for</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Previous(System.Int32,System.String)">
            <summary>Previous function. </summary>
            <param name="index">the numeric index of the previous event</param>
            <param name="property">the name of the property to obtain the value for</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.PreviousTail(com.espertech.esper.client.soda.Expression,System.String)">
            <summary>Previous tail function. </summary>
            <param name="expression">provides the numeric index of the previous event</param>
            <param name="property">the name of the property to obtain the value for</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.PreviousTail(System.Int32,System.String)">
            <summary>Previous tail function. </summary>
            <param name="index">the numeric index of the previous event</param>
            <param name="property">the name of the property to obtain the value for</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.PreviousCount(System.String)">
            <summary>Previous count function. </summary>
            <param name="property">provides the properties or stream name to select for the previous event</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.PreviousWindow(System.String)">
            <summary>Previous window function. </summary>
            <param name="property">provides the properties or stream name to select for the previous event</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.BetweenProperty(System.String,System.String,System.String)">
            <summary>Between. </summary>
            <param name="property">the name of the property supplying data points.</param>
            <param name="lowBoundaryProperty">the name of the property supplying lower boundary.</param>
            <param name="highBoundaryProperty">the name of the property supplying upper boundary.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Between(System.String,System.Object,System.Object)">
            <summary>Between. </summary>
            <param name="property">the name of the property that returns the datapoint to check range</param>
            <param name="lowBoundary">constant indicating the lower boundary</param>
            <param name="highBoundary">constant indicating the upper boundary</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Between(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Between. </summary>
            <param name="datapoint">returns the datapoint to check range</param>
            <param name="lowBoundary">returns values for the lower boundary</param>
            <param name="highBoundary">returns values for the upper boundary</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Range(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,System.Boolean,System.Boolean)">
            <summary>Between (or range). </summary>
            <param name="datapoint">returns the datapoint to check range</param>
            <param name="lowBoundary">returns values for the lower boundary</param>
            <param name="highBoundary">returns values for the upper boundary</param>
            <param name="isLowIncluded">true to indicate lower boundary itself is included in the range</param>
            <param name="isHighIncluded">true to indicate upper boundary itself is included in the range</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Or">
            <summary>Logical OR disjunction. Use add methods to add expressions. </summary>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Or(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression[])">
            <summary>Logical OR disjunction. </summary>
            <param name="first">an expression returning values to junction</param>
            <param name="second">an expression returning values to junction</param>
            <param name="expressions">an optional list of expressions returning values to junction</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.And">
            <summary>Logical AND conjunction. Use add methods to add expressions. </summary>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.And(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression[])">
            <summary>Logical AND conjunction. </summary>
            <param name="first">an expression returning values to junction</param>
            <param name="second">an expression returning values to junction</param>
            <param name="expressions">an optional list of expressions returning values to junction</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Ge(System.String,System.Object)">
            <summary>Greater-or-equal between a property and a constant. </summary>
            <param name="propertyName">the name of the property providing left hand side values</param>
            <param name="value">is the constant to compare</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Ge(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Greater-or-equals between expression results. </summary>
            <param name="left">the expression providing left hand side values</param>
            <param name="right">the expression providing right hand side values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.GeProperty(System.String,System.String)">
            <summary>Greater-or-equal between properties. </summary>
            <param name="propertyLeft">the name of the property providing left hand side values</param>
            <param name="propertyRight">the name of the property providing right hand side values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Gt(System.String,System.Object)">
            <summary>Greater-then between a property and a constant. </summary>
            <param name="propertyName">the name of the property providing left hand side values</param>
            <param name="value">is the constant to compare</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Gt(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Greater-then between expression results. </summary>
            <param name="left">the expression providing left hand side values</param>
            <param name="right">the expression providing right hand side values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.GtProperty(System.String,System.String)">
            <summary>Greater-then between properties. </summary>
            <param name="propertyLeft">the name of the property providing left hand side values</param>
            <param name="propertyRight">the name of the property providing right hand side values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Le(System.String,System.Object)">
            <summary>Less-or-equals between a property and a constant. </summary>
            <param name="propertyName">the name of the property providing left hand side values</param>
            <param name="value">is the constant to compare</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.LeProperty(System.String,System.String)">
            <summary>Less-or-equal between properties. </summary>
            <param name="propertyLeft">the name of the property providing left hand side values</param>
            <param name="propertyRight">the name of the property providing right hand side values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Le(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Less-or-equal between expression results. </summary>
            <param name="left">the expression providing left hand side values</param>
            <param name="right">the expression providing right hand side values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Lt(System.String,System.Object)">
            <summary>Less-then between a property and a constant. </summary>
            <param name="propertyName">the name of the property providing left hand side values</param>
            <param name="value">is the constant to compare</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.LtProperty(System.String,System.String)">
            <summary>Less-then between properties. </summary>
            <param name="propertyLeft">the name of the property providing left hand side values</param>
            <param name="propertyRight">the name of the property providing right hand side values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Lt(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Less-then between expression results. </summary>
            <param name="left">the expression providing left hand side values</param>
            <param name="right">the expression providing right hand side values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Eq(System.String,System.Object)">
            <summary>Equals between a property and a constant. </summary>
            <param name="propertyName">the name of the property providing left hand side values</param>
            <param name="value">is the constant to compare</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Neq(System.String,System.Object)">
            <summary>Not-Equals between a property and a constant. </summary>
            <param name="propertyName">the name of the property providing left hand side values</param>
            <param name="value">is the constant to compare</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.EqProperty(System.String,System.String)">
            <summary>Equals between properties. </summary>
            <param name="propertyLeft">the name of the property providing left hand side values</param>
            <param name="propertyRight">the name of the property providing right hand side values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.NeqProperty(System.String,System.String)">
            <summary>Not-Equals between properties. </summary>
            <param name="propertyLeft">the name of the property providing left hand side values</param>
            <param name="propertyRight">the name of the property providing right hand side values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Eq(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Equals between expression results. </summary>
            <param name="left">the expression providing left hand side values</param>
            <param name="right">the expression providing right hand side values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Neq(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Not-Equals between expression results. </summary>
            <param name="left">the expression providing left hand side values</param>
            <param name="right">the expression providing right hand side values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.IsNotNull(System.String)">
            <summary>Not-null test. </summary>
            <param name="property">the name of the property supplying the value to check for null</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.IsNotNull(com.espertech.esper.client.soda.Expression)">
            <summary>Not-null test. </summary>
            <param name="expression">supplies the value to check for null</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Property(System.String)">
            <summary>Property value. <para /> An expression that returns the value of the named property. <para /> Nested, indexed or mapped properties follow the documented sytnax. </summary>
            <param name="propertyName">is the name of the property to return the value for.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Like(System.String,System.String)">
            <summary>SQL-Like. </summary>
            <param name="propertyName">the name of the property providing values to match</param>
            <param name="value">is the string to match against</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Like(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>SQL-Like. </summary>
            <param name="left">provides value to match</param>
            <param name="right">provides string to match against</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Like(System.String,System.Object,System.String)">
            <summary>SQL-Like. </summary>
            <param name="propertyName">the name of the property providing values to match</param>
            <param name="value">is the string to match against</param>
            <param name="escape">the escape Character(s)</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Like(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>SQL-Like. </summary>
            <param name="left">provides value to match</param>
            <param name="right">provides string to match against</param>
            <param name="escape">the escape Character(s)</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.NotLike(System.String,System.String)">
            <summary>SQL-Like negated (not like). </summary>
            <param name="propertyName">the name of the property providing values to match</param>
            <param name="value">is the string to match against</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.NotLike(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>SQL-Like negated (not like). </summary>
            <param name="left">provides value to match</param>
            <param name="right">provides string to match against</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.NotLike(System.String,System.Object,System.String)">
            <summary>SQL-Like negated (not like). </summary>
            <param name="propertyName">the name of the property providing values to match</param>
            <param name="value">is the string to match against</param>
            <param name="escape">the escape Character(s)</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.NotLike(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>SQL-Like negated (not like). </summary>
            <param name="left">provides value to match</param>
            <param name="right">provides string to match against</param>
            <param name="escape">the escape Character(s)</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Avg(System.String)">
            <summary>Average aggregation function. </summary>
            <param name="propertyName">name of the property providing the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Avg(com.espertech.esper.client.soda.Expression)">
            <summary>Average aggregation function. </summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.AvgDistinct(System.String)">
            <summary>Average aggregation function considering distinct values only. </summary>
            <param name="propertyName">name of the property providing the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.AvgDistinct(com.espertech.esper.client.soda.Expression)">
            <summary>Average aggregation function considering distinct values only. </summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Median(System.String)">
            <summary>Median aggregation function. </summary>
            <param name="propertyName">name of the property providing the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Median(com.espertech.esper.client.soda.Expression)">
            <summary>Median aggregation function. </summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.MedianDistinct(System.String)">
            <summary>Median aggregation function considering distinct values only. </summary>
            <param name="propertyName">name of the property providing the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.MedianDistinct(com.espertech.esper.client.soda.Expression)">
            <summary>Median aggregation function considering distinct values only. </summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Stddev(System.String)">
            <summary>Standard deviation aggregation function. </summary>
            <param name="propertyName">name of the property providing the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Stddev(com.espertech.esper.client.soda.Expression)">
            <summary>Standard deviation aggregation function. </summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.StddevDistinct(System.String)">
            <summary>Standard deviation function considering distinct values only. </summary>
            <param name="propertyName">name of the property providing the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.StddevDistinct(com.espertech.esper.client.soda.Expression)">
            <summary>Standard deviation function considering distinct values only. </summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Avedev(System.String)">
            <summary>Mean deviation aggregation function. </summary>
            <param name="propertyName">name of the property providing the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.LastEver(System.String)">
            <summary>Lastever-value aggregation function. </summary>
            <param name="propertyName">name of the property providing the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Last(System.String)">
            <summary>Lastever-value aggregation function. </summary>
            <param name="propertyName">name of the property providing the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.LastEver(com.espertech.esper.client.soda.Expression)">
            <summary>Lastever-value aggregation function. </summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Last(com.espertech.esper.client.soda.Expression)">
            <summary>Lastever-value aggregation function. </summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.First(System.String)">
            <summary>First-value (windowed) aggregation function. </summary>
            <param name="propertyName">name of the property providing the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.FirstEver(System.String)">
            <summary>First-value (ever) aggregation function. </summary>
            <param name="propertyName">name of the property providing the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.First(com.espertech.esper.client.soda.Expression)">
            <summary>First-value (in window) aggregation function. </summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.FirstEver(com.espertech.esper.client.soda.Expression)">
            <summary>First-value (ever) aggregation function. </summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Avedev(com.espertech.esper.client.soda.Expression)">
            <summary>Mean deviation aggregation function. </summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.AvedevDistinct(System.String)">
            <summary>Mean deviation function considering distinct values only. </summary>
            <param name="propertyName">name of the property providing the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.AvedevDistinct(com.espertech.esper.client.soda.Expression)">
            <summary>Mean deviation function considering distinct values only. </summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Sum(System.String)">
            <summary>Sum aggregation function. </summary>
            <param name="propertyName">name of the property providing the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Sum(com.espertech.esper.client.soda.Expression)">
            <summary>Sum aggregation function. </summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.SumDistinct(System.String)">
            <summary>Sum aggregation function considering distinct values only. </summary>
            <param name="propertyName">name of the property providing the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.SumDistinct(com.espertech.esper.client.soda.Expression)">
            <summary>Sum aggregation function considering distinct values only. </summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.CountStar">
            <summary>Count aggregation function not counting values, equivalent to "count(*)". </summary>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Count(System.String)">
            <summary>Count aggregation function. </summary>
            <param name="propertyName">name of the property providing the values to count.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Count(com.espertech.esper.client.soda.Expression)">
            <summary>Count aggregation function. </summary>
            <param name="expression">provides the values to count.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.CountDistinct(System.String)">
            <summary>Count aggregation function considering distinct values only. </summary>
            <param name="propertyName">name of the property providing the values to count.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.CountDistinct(com.espertech.esper.client.soda.Expression)">
            <summary>Count aggregation function considering distinct values only. </summary>
            <param name="expression">provides the values to count.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Min(System.String)">
            <summary>Minimum aggregation function. </summary>
            <param name="propertyName">name of the property providing the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Min(com.espertech.esper.client.soda.Expression)">
            <summary>Minimum aggregation function. </summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.MinDistinct(System.String)">
            <summary>Minimum aggregation function considering distinct values only. </summary>
            <param name="propertyName">name of the property providing the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.MinDistinct(com.espertech.esper.client.soda.Expression)">
            <summary>Minimum aggregation function considering distinct values only. </summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Max(System.String)">
            <summary>Maximum aggregation function. </summary>
            <param name="propertyName">name of the property providing the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Max(com.espertech.esper.client.soda.Expression)">
            <summary>Maximum aggregation function. </summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.MaxDistinct(System.String)">
            <summary>Maximum aggregation function considering distinct values only. </summary>
            <param name="propertyName">name of the property providing the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.MaxDistinct(com.espertech.esper.client.soda.Expression)">
            <summary>Maximum aggregation function considering distinct values only. </summary>
            <param name="expression">provides the values to aggregate.</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Modulo(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Modulo. </summary>
            <param name="left">the expression providing left hand values</param>
            <param name="right">the expression providing right hand values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Modulo(System.String,System.String)">
            <summary>Modulo. </summary>
            <param name="propertyLeft">the name of the property providing left hand values</param>
            <param name="propertyRight">the name of the property providing right hand values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Minus(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Subtraction. </summary>
            <param name="left">the expression providing left hand values</param>
            <param name="right">the expression providing right hand values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Minus(System.String,System.String)">
            <summary>Subtraction. </summary>
            <param name="propertyLeft">the name of the property providing left hand values</param>
            <param name="propertyRight">the name of the property providing right hand values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Plus(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Addition. </summary>
            <param name="left">the expression providing left hand values</param>
            <param name="right">the expression providing right hand values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Plus(System.String,System.String)">
            <summary>Addition. </summary>
            <param name="propertyLeft">the name of the property providing left hand values</param>
            <param name="propertyRight">the name of the property providing right hand values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Multiply(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Multiplication. </summary>
            <param name="left">the expression providing left hand values</param>
            <param name="right">the expression providing right hand values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Multiply(System.String,System.String)">
            <summary>Multiplication. </summary>
            <param name="propertyLeft">the name of the property providing left hand values</param>
            <param name="propertyRight">the name of the property providing right hand values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Divide(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>Division. </summary>
            <param name="left">the expression providing left hand values</param>
            <param name="right">the expression providing right hand values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Divide(System.String,System.String)">
            <summary>Division. </summary>
            <param name="propertyLeft">the name of the property providing left hand values</param>
            <param name="propertyRight">the name of the property providing right hand values</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Concat(System.String,System.String[])">
            <summary>Concatenation. </summary>
            <param name="property">the name of property returning values to concatenate</param>
            <param name="properties">the names of additional properties returning values to concatenate</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.Subquery(com.espertech.esper.client.soda.EPStatementObjectModel)">
            <summary>Subquery. </summary>
            <param name="model">is the object model of the lookup</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.SubqueryIn(System.String,com.espertech.esper.client.soda.EPStatementObjectModel)">
            <summary>Subquery with in-clause, represents the syntax of "value in (select ... from ...)". </summary>
            <param name="property">is the name of the property that returns the value to match against the values returned by the lookup</param>
            <param name="model">is the object model of the lookup</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.SubqueryNotIn(System.String,com.espertech.esper.client.soda.EPStatementObjectModel)">
            <summary>Subquery with not-in-clause, represents the syntax of "value not in (select ... from ...)". </summary>
            <param name="property">is the name of the property that returns the value to match against the values returned by the lookup</param>
            <param name="model">is the object model of the lookup</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.SubqueryExists(com.espertech.esper.client.soda.EPStatementObjectModel)">
            <summary>Subquery with exists-clause, represents the syntax of "select * from ... where exists (select ... from ...)". </summary>
            <param name="model">is the object model of the lookup</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.SubqueryIn(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.EPStatementObjectModel)">
            <summary>Subquery with in-clause, represents the syntax of "value in (select ... from ...)". </summary>
            <param name="expression">returns the value to match against the values returned by the lookup</param>
            <param name="model">is the object model of the lookup</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.SubqueryNotIn(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.EPStatementObjectModel)">
            <summary>Subquery with not-in-clause, represents the syntax of "value not in (select ... from ...)". </summary>
            <param name="expression">returns the value to match against the values returned by the lookup</param>
            <param name="model">is the object model of the lookup</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.TimePeriod(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>Returns a time period expression for the specified parts. <para /> Each part can be a null value in which case the part is left out. </summary>
            <param name="days">day part</param>
            <param name="hours">hour part</param>
            <param name="minutes">minute part</param>
            <param name="seconds">seconds part</param>
            <param name="milliseconds">milliseconds part</param>
            <returns>time period expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.TimePeriod(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>Returns a time period expression for the specified parts. <para /> Each part can be a null value in which case the part is left out. <para /> Each object value may be a String value for an event property, or a number for a constant. </summary>
            <param name="days">day part</param>
            <param name="hours">hour part</param>
            <param name="minutes">minute part</param>
            <param name="seconds">seconds part</param>
            <param name="milliseconds">milliseconds part</param>
            <returns>time period expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.CrontabScheduleWildcard">
            <summary>Creates a wildcard parameter. </summary>
            <returns>parameter</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.CrontabScheduleItem(System.Nullable{System.Int32},com.espertech.esper.client.soda.ScheduleItemType)">
            <summary>Creates a parameter of the given type and parameterized by a number. </summary>
            <param name="parameter">the constant parameter for the type</param>
            <param name="type">the type of crontab parameter</param>
            <returns>crontab parameter</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.CrontabScheduleFrequency(System.Int32)">
            <summary>Creates a frequency cron parameter. </summary>
            <param name="frequency">the constant for the frequency</param>
            <returns>cron parameter</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.CrontabScheduleRange(System.Int32,System.Int32)">
            <summary>Creates a range cron parameter. </summary>
            <param name="lowerBounds">the lower bounds</param>
            <param name="upperBounds">the upper bounds</param>
            <returns>crontab parameter</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.ToPropertyExpressions(System.String[])">
            <summary>Returns a list of expressions returning property values for the property names passed in. </summary>
            <param name="properties">is a list of property names</param>
            <returns>list of property value expressions</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Expressions.GetPropExpr(System.String)">
            <summary>Returns an expression returning the propertyName value for the propertyName name passed in. </summary>
            <param name="propertyName">the name of the property returning property values</param>
            <returns>expression</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.Filter">
            <summary>Filter defines the event type to be filtered for, and an optional expression that returns true if the filter should consider the event, or false to reject the event. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.Filter.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.Filter.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="eventTypeName">is the event type name</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.Filter.#ctor(System.String,com.espertech.esper.client.soda.Expression)">
            <summary>Ctor. </summary>
            <param name="eventTypeName">is the event type name</param>
            <param name="filter">is the filter expression</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.Filter.Create(System.String)">
            <summary> Creates a filter to the given named event type. </summary>
            <param name="eventTypeName">is the event type name to filter for</param>
            <returns>filter</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Filter.Create(System.String,com.espertech.esper.client.soda.Expression)">
            <summary>Creates a filter to the given named event type and filter expression. </summary>
            <param name="eventTypeName">is the event type name to filter for</param>
            <param name="filter">is the expression filtering out events</param>
            <returns>filter is the filter expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Filter.ToEPL(System.IO.TextWriter,com.espertech.esper.client.soda.EPStatementFormatter)">
            <summary>Returns a textual representation of the filter. </summary>
            <param name="writer">to output to</param>
            <param name="formatter">for newline-whitespace formatting</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.Filter.EventTypeName">
            <summary>Returns the name of the event type to filter for. </summary>
            <value>event type name</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.Filter.OptionalPropertySelects">
            <summary>Returns contained-event spec. </summary>
            <value>spec</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.Filter.FilterExpression">
            <summary>
            Returns the optional filter expression that tests the event, or null if no filter expression
            was defined.
            </summary>
            <value>filter expression</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.FilterStream">
            <summary>
            A stream upon which projections (views) can be added that selects events by name and filter expression.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.ProjectedStream">
            <summary>
            Abstract base class for streams that can be projected via views providing data window, uniqueness
            or other projections or deriving further information from streams.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ProjectedStream.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.ProjectedStream.ToEPLProjectedStream(System.IO.TextWriter,com.espertech.esper.client.soda.EPStatementFormatter)">
            <summary>
            Represent as textual.
            </summary>
            <param name="writer">to output to</param>
            <param name="formatter">for newline-whitespace formatting</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.ProjectedStream.ToEPLProjectedStreamType(System.IO.TextWriter)">
            <summary>
            Represent type as textual non complete.
            </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.ProjectedStream.#ctor(System.Collections.Generic.IList{com.espertech.esper.client.soda.View},System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="views">is a list of views upon the stream</param>
            <param name="optStreamName">is the stream as-name, or null if unnamed</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.ProjectedStream.AddView(System.String,System.String)">
            <summary>Adds an un-parameterized view to the stream. </summary>
            <param name="namespace">is the view namespace, for example "win" for most data windows</param>
            <param name="name">is the view name, for example "length" for a length window</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.ProjectedStream.AddView(System.String,System.String,System.Collections.Generic.List{com.espertech.esper.client.soda.Expression})">
            <summary>Adds a parameterized view to the stream. </summary>
            <param name="namespace">is the view namespace, for example "win" for most data windows</param>
            <param name="name">is the view name, for example "length" for a length window</param>
            <param name="parameters">is a list of view parameters</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.ProjectedStream.AddView(System.String,System.String,com.espertech.esper.client.soda.Expression[])">
            <summary>Adds a parameterized view to the stream. </summary>
            <param name="namespace">is the view namespace, for example "win" for most data windows</param>
            <param name="name">is the view name, for example "length" for a length window</param>
            <param name="parameters">is a list of view parameters</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.ProjectedStream.AddView(com.espertech.esper.client.soda.View)">
            <summary>Add a view to the stream. </summary>
            <param name="view">to add</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.ProjectedStream.ToEPLStream(System.IO.TextWriter,com.espertech.esper.client.soda.EPStatementFormatter)">
            <summary>
            Renders the clause in textual representation.
            </summary>
            <param name="writer">to output to</param>
            <param name="formatter">for newline-whitespace formatting</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.ProjectedStream.Unidirectional(System.Boolean)">
            <summary>Set to unidirectional. </summary>
            <param name="isUnidirectional">try if unidirectional</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.ProjectedStream.ToEPLViews(System.IO.TextWriter,System.Collections.Generic.IList{com.espertech.esper.client.soda.View})">
            <summary>Renders the views onto the projected stream. </summary>
            <param name="writer">to render to</param>
            <param name="views">to render</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.ProjectedStream.Views">
            <summary>Returns the list of views added to the stream. </summary>
            <value>list of views</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.ProjectedStream.IsUnidirectional">
            <summary>Returns true if the stream as unidirectional, for use in unidirectional joins. </summary>
            <value>true for unidirectional stream, applicable only for joins</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.ProjectedStream.IsRetainUnion">
            <summary>Returns true if multiple data window shall be treated as a union. </summary>
            <value>retain union</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.ProjectedStream.IsRetainIntersection">
            <summary>Returns true if multiple data window shall be treated as an intersection. </summary>
            <value>retain intersection</value>
        </member>
        <member name="M:com.espertech.esper.client.soda.FilterStream.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.FilterStream.Create(com.espertech.esper.client.soda.Filter)">
            <summary>Creates a stream using a filter that provides the event type name and filter expression to filter for. </summary>
            <param name="filter">defines what to look for</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.FilterStream.Create(System.String)">
            <summary>Creates a stream of events of the given name. </summary>
            <param name="eventTypeName">is the event type name to filter for</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.FilterStream.Create(System.String,System.String)">
            <summary>Creates a stream of events of the given event type name and names that stream. Example: "select * from MyeventTypeName as StreamName". </summary>
            <param name="eventTypeName">is the event type name to filter for</param>
            <param name="streamName">is an optional stream name</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.FilterStream.Create(com.espertech.esper.client.soda.Filter,System.String)">
            <summary>Creates a stream using a filter that provides the event type name and filter expression to filter for. </summary>
            <param name="filter">defines what to look for</param>
            <param name="streamName">is an optional stream name</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.FilterStream.Create(System.String,com.espertech.esper.client.soda.Expression)">
            <summary>Creates a stream of events of the given event type name and names that stream. Example: "select * from MyeventTypeName as StreamName". </summary>
            <param name="eventTypeName">is the event type name to filter for</param>
            <param name="filter">is the filter expression removing events from the stream</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.FilterStream.Create(System.String,System.String,com.espertech.esper.client.soda.Expression)">
            <summary>Creates a stream of events of the given event type name and names that stream. Example: "select * from MyeventTypeName as StreamName". </summary>
            <param name="eventTypeName">is the event type name to filter for</param>
            <param name="filter">is the filter expression removing events from the stream</param>
            <param name="streamName">is an optional stream name</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.FilterStream.#ctor(com.espertech.esper.client.soda.Filter)">
            <summary>Ctor. </summary>
            <param name="filter">specifies what events to look for</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.FilterStream.#ctor(com.espertech.esper.client.soda.Filter,System.String)">
            <summary>Ctor. </summary>
            <param name="filter">specifies what events to look for</param>
            <param name="name">is the as-name for the stream</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.FilterStream.#ctor(com.espertech.esper.client.soda.Filter,System.String,System.Collections.Generic.List{com.espertech.esper.client.soda.View})">
            <summary>Ctor. </summary>
            <param name="filter">specifies what events to look for</param>
            <param name="name">is the as-name for the stream</param>
            <param name="views">is a list of projections onto the stream</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.FilterStream.Filter">
            <summary>Returns the filter. </summary>
            <value>filter</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.FromClause">
            <summary>The from-clause names the streams to select upon. <para/> The most common projected stream is a filter-based stream which is created by <seealso cref="T:com.espertech.esper.client.soda.FilterStream"/>. <para/> Multiple streams can be joined by adding each stream individually. <para/> Outer joins are also handled by this class. To create an outer join consisting of 2 streams, add one <seealso cref="T:com.espertech.esper.client.soda.OuterJoinQualifier"/> that defines the outer join relationship between the 2 streams. The outer joins between N streams, add N-1 <seealso cref="T:com.espertech.esper.client.soda.OuterJoinQualifier"/> qualifiers. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.FromClause.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.FromClause.Create">
            <summary> Creates an empty from-clause to which one adds streams via the add methods. </summary>
            <returns>empty from clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.FromClause.Create(com.espertech.esper.client.soda.Stream,com.espertech.esper.client.soda.OuterJoinQualifier,com.espertech.esper.client.soda.Stream)">
            <summary>Creates a from-clause that lists 2 projected streams joined via outer join. </summary>
            <param name="stream">first stream in outer join</param>
            <param name="outerJoinQualifier">qualifies the outer join</param>
            <param name="streamSecond">second stream in outer join</param>
            <returns>from clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.FromClause.Create(com.espertech.esper.client.soda.Stream[])">
            <summary>Creates a from clause that selects from a single stream. <para/> Use <seealso cref="T:com.espertech.esper.client.soda.FilterStream"/> to create filter-based streams to add. </summary>
            <param name="streams">is one or more streams to add to the from clause.</param>
            <returns>from clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.FromClause.#ctor(com.espertech.esper.client.soda.Stream,com.espertech.esper.client.soda.OuterJoinQualifier,com.espertech.esper.client.soda.Stream)">
            <summary>Ctor for an outer join between two streams. </summary>
            <param name="streamOne">first stream in outer join</param>
            <param name="outerJoinQualifier">type of outer join and fields joined on</param>
            <param name="streamTwo">second stream in outer join</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.FromClause.#ctor(com.espertech.esper.client.soda.Stream[])">
            <summary>Ctor. </summary>
            <param name="streamsList">is zero or more streams in the from-clause.</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.FromClause.Add(com.espertech.esper.client.soda.Stream)">
            <summary>Adds a stream. <para/> Use <seealso cref="T:com.espertech.esper.client.soda.FilterStream"/> to add filter-based streams. </summary>
            <param name="stream">to add</param>
            <returns>from clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.FromClause.Add(com.espertech.esper.client.soda.OuterJoinQualifier)">
            <summary>Adds an outer join descriptor that defines how the streams are related via outer joins. <para /> For joining N streams, add N-1 outer join qualifiers. </summary>
            <param name="outerJoinQualifier">is the type of outer join and the fields in the outer join</param>
            <returns>from clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.FromClause.ToEPL(System.IO.TextWriter,com.espertech.esper.client.soda.EPStatementFormatter)">
            <summary>Renders the from-clause in textual representation. </summary>
            <param name="writer">to output to</param>
            <param name="formatter">for newline-whitespace formatting</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.FromClause.ToEPLOptions(System.IO.TextWriter,com.espertech.esper.client.soda.EPStatementFormatter,System.Boolean)">
            <summary>Renders the from-clause in textual representation. </summary>
            <param name="writer">to output to</param>
            <param name="includeFrom">flag whether to add the "from" literal</param>
            <param name="formatter">for newline-whitespace formatting</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.FromClause.Streams">
            <summary>Returns the list of streams in the from-clause. </summary>
            <value>list of streams</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.FromClause.OuterJoinQualifiers">
            <summary>
            Returns the outer join descriptors, if this is an outer join, or an empty list if none
            of the streams are outer joined.
            </summary>
            <value>list of outer join qualifiers</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.GroupByClause">
            <summary>
            The group-by clause consists of a list of expressions that provide the grouped-by values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.GroupByClause.Create">
            <summary>Creates an empty group-by clause, to add to via add methods.</summary>
            <returns>group-by clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.GroupByClause.Create(System.String[])">
            <summary>Creates a group-by clause from property names.</summary>
            <param name="properties">a list of one or more property names</param>
            <returns>group-by clause consisting of the properties</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.GroupByClause.Create(com.espertech.esper.client.soda.Expression[])">
            <summary>Creates a group-by clause from expressions.</summary>
            <param name="expressions">a list of one or more expressions</param>
            <returns>group-by clause consisting of the expressions</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.GroupByClause.#ctor">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            <para/>
            Use add methods to add child expressions to acts upon.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.GroupByClause.#ctor(System.String[])">
            <summary>Ctor.</summary>
            <param name="properties">is a list of property names</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.GroupByClause.#ctor(com.espertech.esper.client.soda.Expression[])">
            <summary>Ctor.</summary>
            <param name="expressions">list of expressions</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.GroupByClause.ToEPL(System.IO.TextWriter)">
            <summary>Renders the clause in textual representation.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.GroupByClause.GroupByExpressions">
            <summary>Gets or sets the expressions providing the grouped-by values.</summary>
            <returns>expressions</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.InExpression">
            <summary>
            In-expresson checks that a value is in (or not in) a set of values, equivalent to the syntax "color in ('red', 'blue')".
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.InExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.soda.InExpression"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.InExpression.#ctor(System.Boolean)">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            <para/>
            Use add methods to add child expressions to acts upon.
            </summary>
            <param name="isNotIn">
            true for the not-in expression, false for the in-expression
            </param>
        </member>
        <member name="M:com.espertech.esper.client.soda.InExpression.#ctor(com.espertech.esper.client.soda.Expression,System.Boolean,System.Object[])">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            <para/>
            Use add methods to add child expressions to acts upon.
            </summary>
            <param name="value">
            an expression that provides the value to search for in the set
            </param>
            <param name="isNotIn">
            true for the not-in expression, false for the in-expression
            </param>
            <param name="parameters">is a set of constants to match against</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.InExpression.Add(System.Object)">
            <summary>Add a constant to include in the computation.</summary>
            <param name="object">constant to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.InExpression.Add(com.espertech.esper.client.soda.Expression)">
            <summary>Add an expression to include in the computation.</summary>
            <param name="expression">to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.InExpression.Add(System.String)">
            <summary>Add a property to include in the computation.</summary>
            <param name="propertyName">is the name of the property</param>
            <returns>expression</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.InExpression.IsNotIn">
            <summary>
            True for the not-in expression, or false for an in-expression.
            </summary>
            <returns>true for not-in</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.InsertIntoClause">
            <summary>
            An insert-into clause consists of a stream name and column names and an optional stream selector.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.InsertIntoClause.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.InsertIntoClause.Create(System.String)">
            <summary>Creates the insert-into clause. </summary>
            <param name="streamName">the name of the stream to insert into</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.InsertIntoClause.Create(System.String,System.String[])">
            <summary>Creates the insert-into clause. </summary>
            <param name="streamName">the name of the stream to insert into</param>
            <param name="columns">is a list of column names</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.InsertIntoClause.Create(System.String,System.String[],com.espertech.esper.client.soda.StreamSelector)">
            <summary>Creates the insert-into clause. </summary>
            <param name="streamName">the name of the stream to insert into</param>
            <param name="columns">is a list of column names</param>
            <param name="streamSelector">selects the stream</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.InsertIntoClause.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="streamName">is the stream name to insert into</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.InsertIntoClause.#ctor(System.String,System.String[])">
            <summary>Ctor. </summary>
            <param name="streamName">is the stream name to insert into</param>
            <param name="columnNames">column names</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.InsertIntoClause.#ctor(System.String,System.Collections.Generic.IList{System.String},com.espertech.esper.client.soda.StreamSelector)">
            <summary>Ctor. </summary>
            <param name="streamName">is the stream name to insert into</param>
            <param name="columnNames">column names</param>
            <param name="streamSelector">selector for either insert stream (the default) or remove stream or both</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.InsertIntoClause.Add(System.String)">
            <summary>Add a column name to the insert-into clause. </summary>
            <param name="columnName">to add</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.InsertIntoClause.ToEPL(System.IO.TextWriter,com.espertech.esper.client.soda.EPStatementFormatter,System.Boolean)">
            <summary>Renders the clause in textual representation. </summary>
            <param name="writer">to output to</param>
            <param name="formatter">for newline-whitespace formatting</param>
            <param name="isTopLevel">to indicate if this insert-into-clause is inside other clauses.</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.InsertIntoClause.StreamSelector">
            <summary>Returns the stream selector for the insert into. </summary>
            <value>stream selector</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.InsertIntoClause.StreamName">
            <summary>Returns name of stream name to use for insert-into stream. </summary>
            <value>stream name</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.InsertIntoClause.ColumnNames">
            <summary>Returns a list of column names specified optionally in the insert-into clause, or empty if none specified. </summary>
            <value>column names or empty list if none supplied</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.InstanceOfExpression">
            <summary>
            Instance-of expression checks if an expression returns a certain type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.InstanceOfExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.soda.InstanceOfExpression"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.InstanceOfExpression.#ctor(System.Collections.Generic.IList{System.String})">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            </summary>
            <param name="typeNames">
            is the fully-qualified class names or primitive type names or "string"
            </param>
        </member>
        <member name="M:com.espertech.esper.client.soda.InstanceOfExpression.#ctor(com.espertech.esper.client.soda.Expression,System.String,System.String[])">
            <summary>Ctor.</summary>
            <param name="expressionToCheck">provides values to check the type of</param>
            <param name="typeName">
            is one fully-qualified class names or primitive type names or "string"
            </param>
            <param name="moreTypes">
            is additional optional fully-qualified class names or primitive type names or "string"
            </param>
        </member>
        <member name="M:com.espertech.esper.client.soda.InstanceOfExpression.ToPrecedenceFreeEPL(System.IO.TextWriter)">
            <summary>Renders the clause in textual representation.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.InstanceOfExpression.TypeNames">
            <summary>Gets or sets the types to compare to.</summary>
            <returns>list of types to compare to</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.LikeExpression">
            <summary>
            SQL-Like expression for matching '%' and '_' wildcard strings following SQL
            standards.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.LikeExpression.#ctor">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            <para/>
            Use add methods to add child expressions to acts upon.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.LikeExpression.#ctor(System.Boolean)">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            <para/>
            Use add methods to add child expressions to acts upon.
            </summary>
            <param name="isNot">if the like-expression is negated</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.LikeExpression.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>
            Ctor.
            </summary>
            <param name="left">provides the value to match</param>
            <param name="right">provides the like-expression to match against</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.LikeExpression.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>
            Ctor.
            </summary>
            <param name="left">provides the value to match</param>
            <param name="right">provides the like-expression to match against</param>
            <param name="escape">is the expression providing the string escape character</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.LikeExpression.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="left">provides the value to match</param>
            <param name="right">provides the like-expression to match against</param>
            <param name="isNot">if the like-expression is negated</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.LikeExpression.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="left">provides the value to match</param>
            <param name="right">provides the like-expression to match against</param>
            <param name="escape">is the expression providing the string escape character</param>
            <param name="isNot">if the like-expression is negated</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.LikeExpression.IsNot">
            <summary>
            Returns true if this is a "not like", or false if just a like
            </summary>
            <returns>
            indicator whether negated or not
            </returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.LikeExpression.Precedence">
            <summary>
            Gets the precedence.
            </summary>
            <value>The precedence.</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.MaxProjectionExpression">
            <summary>Maximum of the (distinct) values returned by an expression. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MaxProjectionExpression.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MaxProjectionExpression.#ctor(System.Boolean)">
            <summary>Ctor - for use to create an expression tree, without inner expression </summary>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.MaxProjectionExpression.#ctor(com.espertech.esper.client.soda.Expression,System.Boolean)">
            <summary>Ctor - adds the expression to project. </summary>
            <param name="expression">returning values to project</param>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.MaxProjectionExpression.IsDistinct">
            <summary>Returns true if the projection considers distinct values only. </summary>
            <value>true if distinct</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.MaxRowExpression">
            <summary>
            Maximum-value per-row expression (not aggregating) determines the maximum value among a set of values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MaxRowExpression.#ctor">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            <para/>
            Use add methods to add child expressions to acts upon.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MaxRowExpression.#ctor(System.String,System.String,System.String[])">
            <summary>Ctor.</summary>
            <param name="propertyOne">
            the name of the property providing a value to determine the maximum of
            </param>
            <param name="propertyTwo">
            the name of the property providing a value to determine the maximum of
            </param>
            <param name="moreProperties">optional additional properties to consider</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.MaxRowExpression.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression[])">
            <summary>Ctor.</summary>
            <param name="exprOne">provides a value to determine the maximum of</param>
            <param name="exprTwo">provides a value to determine the maximum of</param>
            <param name="moreExpressions">optional additional values to consider</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.MaxRowExpression.Add(System.Object)">
            <summary>Add a constant to include in the computation.</summary>
            <param name="object">constant to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.MaxRowExpression.Add(com.espertech.esper.client.soda.Expression)">
            <summary>Add an expression to include in the computation.</summary>
            <param name="expression">to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.MaxRowExpression.Add(System.String)">
            <summary>Add a property to include in the computation.</summary>
            <param name="propertyName">is the name of the property</param>
            <returns>expression</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.MedianProjectionExpression">
            <summary>Median projection (aggregation) in the distinct and regular form. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MedianProjectionExpression.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MedianProjectionExpression.#ctor(System.Boolean)">
            <summary> Ctor - for use to create an expression tree, without inner expression </summary>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.MedianProjectionExpression.#ctor(com.espertech.esper.client.soda.Expression,System.Boolean)">
            <summary>Ctor - adds the expression to project. </summary>
            <param name="expression">returning values to project</param>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.MedianProjectionExpression.IsDistinct">
            <summary>Returns true if the projection considers distinct values only. </summary>
            <returns>true if distinct</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.MinProjectionExpression">
            <summary>Minimum of the (distinct) values returned by an expression. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MinProjectionExpression.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MinProjectionExpression.#ctor(System.Boolean)">
            <summary>Ctor - for use to create an expression tree, without inner expression </summary>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.MinProjectionExpression.#ctor(com.espertech.esper.client.soda.Expression,System.Boolean)">
            <summary>Ctor - adds the expression to project. </summary>
            <param name="expression">returning values to project</param>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.MinProjectionExpression.IsDistinct">
            <summary>Returns true if the projection considers distinct values only. </summary>
            <value>true if distinct</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.MinRowExpression">
            <summary>
            Minimum-value per-row expression (not aggregating) determines the minimum value among a set of values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MinRowExpression.#ctor">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            <para/>
            Use add methods to add child expressions to acts upon.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.MinRowExpression.#ctor(System.String,System.String,System.String[])">
            <summary>Ctor.</summary>
            <param name="propertyOne">
            the name of the property providing a value to determine the minimum of
            </param>
            <param name="propertyTwo">
            the name of the property providing a value to determine the minimum of
            </param>
            <param name="moreProperties">optional additional properties to consider</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.MinRowExpression.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression[])">
            <summary>Ctor.</summary>
            <param name="exprOne">provides a value to determine the maximum of</param>
            <param name="exprTwo">provides a value to determine the maximum of</param>
            <param name="moreExpressions">optional additional values to consider</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.MinRowExpression.Add(System.Object)">
            <summary>Add a constant to include in the computation.</summary>
            <param name="object">constant to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.MinRowExpression.Add(com.espertech.esper.client.soda.Expression)">
            <summary>Add an expression to include in the computation.</summary>
            <param name="expression">to add</param>
            <returns>expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.MinRowExpression.Add(System.String)">
            <summary>Add a property to include in the computation.</summary>
            <param name="propertyName">is the name of the property</param>
            <returns>expression</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.NotExpression">
            <summary>
            Negates the contained-within subexpression.
            <para>
            Has a single child expression to be negated.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.NotExpression.#ctor(com.espertech.esper.client.soda.Expression)">
            <summary>Ctor.</summary>
            <param name="inner">is the expression to negate</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.NotExpression.#ctor">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.OrderByClause">
            <summary>
            An order-by clause consists of expressions and flags indicating if ascending or descending.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OrderByClause.Create">
            <summary>Create an empty order-by clause.</summary>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OrderByClause.Create(System.String[])">
            <summary>Create an order-by clause.</summary>
            <param name="properties">is the property names to order by</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OrderByClause.Create(com.espertech.esper.client.soda.Expression[])">
            <summary>Create an order-by clause.</summary>
            <param name="expressions">is the expressios returning values to order by</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OrderByClause.Add(System.String,System.Boolean)">
            <summary>Adds a property and flag.</summary>
            <param name="property">is the name of the property to add</param>
            <param name="isDescending">true for descending, false for ascending sort</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OrderByClause.Add(com.espertech.esper.client.soda.Expression,System.Boolean)">
            <summary>Adds an expression and flag.</summary>
            <param name="expression">returns values to order by</param>
            <param name="isDescending">true for descending, false for ascending sort</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OrderByClause.#ctor">
            <summary>Ctor.</summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OrderByClause.#ctor(System.String[])">
            <summary>Ctor.</summary>
            <param name="properties">property names</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OrderByClause.#ctor(com.espertech.esper.client.soda.Expression[])">
            <summary>Ctor.</summary>
            <param name="expressions">is the expressions</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OrderByClause.ToEPL(System.IO.TextWriter)">
            <summary>Renders the clause in textual representation.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.OrderByClause.OrderByExpressions">
            <summary>Gets or set a list of expressions and flags to order by.</summary>
            <returns>order-by elements</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.OrderByElement">
            <summary>
            A single entry in an order-by clause consisting of an expression and order ascending or descending flag.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OrderByElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.soda.OrderByElement"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OrderByElement.#ctor(com.espertech.esper.client.soda.Expression,System.Boolean)">
            <summary>Ctor.</summary>
            <param name="expression">is the expression to order by</param>
            <param name="descending">true for descending sort, false for ascending sort</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OrderByElement.ToEPL(System.IO.TextWriter)">
            <summary>Renders the clause in textual representation.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.OrderByElement.Expression">
            <summary>Gets or sets the order-by value expression.</summary>
            <returns>expression</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.OrderByElement.IsDescending">
            <summary>
            True for descending sorts for this column, false for ascending sort.
            </summary>
            <returns>true for descending sort</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.OuterJoinQualifier">
            <summary>
            Qualifies a join by providing the outer join type (full/left/right) and joined-on properties.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OuterJoinQualifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.soda.OuterJoinQualifier"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OuterJoinQualifier.#ctor(com.espertech.esper.type.OuterJoinType,com.espertech.esper.client.soda.PropertyValueExpression,com.espertech.esper.client.soda.PropertyValueExpression)">
            <summary>
            Ctor.
            </summary>
            <param name="type">is the type of outer join</param>
            <param name="left">is a property providing joined-on values</param>
            <param name="right">is a property providing joined-on values</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OuterJoinQualifier.#ctor(com.espertech.esper.type.OuterJoinType,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,System.Collections.Generic.IList{com.espertech.esper.client.soda.PropertyValueExpressionPair})">
            <summary>
            Ctor.
            </summary>
            <param name="type">is the type of outer join</param>
            <param name="left">is a property providing joined-on values</param>
            <param name="right">is a property providing joined-on values</param>
            <param name="additionalProperties">for any pairs of additional on-clause properties</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OuterJoinQualifier.Create(System.String,com.espertech.esper.type.OuterJoinType,System.String)">
            <summary>Creates qualifier.</summary>
            <param name="propertyLeft">is a property name providing joined-on values</param>
            <param name="type">is the type of outer join</param>
            <param name="propertyRight">is a property name providing joined-on values</param>
            <returns>qualifier</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OuterJoinQualifier.Add(System.String,System.String)">
            <summary>
            Add additional properties to the on-clause, which are logical-and to existing properties
            </summary>
            <param name="propertyLeft">property providing joined-on value</param>
            <param name="propertyRight">property providing joined-on value</param>
            <returns>outer join qualifier</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.OuterJoinQualifier.JoinType">
            <summary>Gets or sets the type of outer join.</summary>
            <returns>outer join type</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.OuterJoinQualifier.Left">
            <summary>Gets or sets the property value expression to join on.</summary>
            <returns>expression providing joined-on values</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.OuterJoinQualifier.Right">
            <summary>Gets or sets the property value expression to join on.</summary>
            <returns>expression providing joined-on values</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.OuterJoinQualifier.AdditionalProperties">
            <summary>
            Gets the optional additional properties in the on-clause of the outer join.
            </summary>
            <value>pairs of properties connected via logical-and in an on-clause</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.OutputLimitClause">
            <summary>
            An output limit clause defines how to limit output of statements and consists of a selector specifiying which events to select to output, a frequency and a unit.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.#ctor(com.espertech.esper.client.soda.OutputLimitSelector,com.espertech.esper.client.soda.OutputLimitUnit)">
            <summary>Ctor. </summary>
            <param name="selector">selector</param>
            <param name="unit">unit</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.Create(com.espertech.esper.client.soda.TimePeriodExpression)">
            <summary>Creates an output limit clause. </summary>
            <param name="timePeriodExpression">a frequency to output at</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.CreateAfter(com.espertech.esper.client.soda.TimePeriodExpression)">
            <summary>Create with after-only time period. </summary>
            <param name="afterTimePeriodExpression">time period</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.CreateAfter(System.Int32)">
            <summary>Create with after-only and number of events. </summary>
            <param name="afterNumEvents">num events</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.Create(com.espertech.esper.client.soda.OutputLimitSelector,com.espertech.esper.client.soda.TimePeriodExpression)">
            <summary>Creates an output limit clause. </summary>
            <param name="selector">is the events to select</param>
            <param name="timePeriodExpression">a frequency to output at</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.Create(com.espertech.esper.client.soda.OutputLimitSelector,System.Double)">
            <summary>Creates an output limit clause. </summary>
            <param name="selector">is the events to select</param>
            <param name="frequency">a frequency to output at</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.Create(com.espertech.esper.client.soda.OutputLimitSelector,System.String)">
            <summary>Creates an output limit clause. </summary>
            <param name="selector">is the events to select</param>
            <param name="frequencyVariable">is the variable providing the output limit frequency</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.Create(System.Double)">
            <summary>Creates an output limit clause. </summary>
            <param name="frequency">a frequency to output at</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.Create(System.String)">
            <summary>Creates an output limit clause. </summary>
            <param name="frequencyVariable">is the variable name providing output rate frequency values</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.Create(com.espertech.esper.client.soda.Expression)">
            <summary>Creates an output limit clause with a when-expression and optional then-assignment expressions to be added. </summary>
            <param name="whenExpression">the expression that returns true to trigger output</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.CreateSchedule(com.espertech.esper.client.soda.Expression[])">
            <summary>Creates an output limit clause with a crontab 'at' schedule parameters, see <seealso cref="T:com.espertech.esper.type.FrequencyParameter"/> and related. </summary>
            <param name="scheduleParameters">the crontab schedule parameters</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.#ctor(com.espertech.esper.client.soda.OutputLimitSelector,System.Double)">
            <summary>Ctor. </summary>
            <param name="selector">is the events to select</param>
            <param name="frequency">a frequency to output at</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.#ctor(com.espertech.esper.client.soda.OutputLimitSelector,com.espertech.esper.client.soda.TimePeriodExpression)">
            <summary>Ctor. </summary>
            <param name="selector">is the events to select</param>
            <param name="timePeriodExpression">the unit for the frequency</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.#ctor(com.espertech.esper.client.soda.TimePeriodExpression)">
            <summary>Ctor. </summary>
            <param name="afterTimePeriodExpression">timer period for after.</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.#ctor(com.espertech.esper.client.soda.OutputLimitSelector,System.String)">
            <summary>Ctor. </summary>
            <param name="selector">is the events to select</param>
            <param name="frequencyVariable">is the variable name providing output rate frequency values</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.#ctor(com.espertech.esper.client.soda.OutputLimitSelector,System.Nullable{System.Double},System.String,com.espertech.esper.client.soda.OutputLimitUnit)">
            <summary>Ctor. </summary>
            <param name="selector">is the events to select</param>
            <param name="frequency">a frequency to output at</param>
            <param name="unit">the unit for the frequency</param>
            <param name="frequencyVariable">is the variable name providing output rate frequency values</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.#ctor(com.espertech.esper.client.soda.OutputLimitSelector,com.espertech.esper.client.soda.OutputLimitUnit,com.espertech.esper.client.soda.TimePeriodExpression,System.Nullable{System.Int32})">
            <summary>Ctor. </summary>
            <param name="selector">is the events to select</param>
            <param name="unit">the unit of selection</param>
            <param name="afterTimePeriod">after-keyword time period</param>
            <param name="afterNumberOfEvents">after-keyword number of events</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.#ctor(com.espertech.esper.client.soda.OutputLimitSelector,com.espertech.esper.client.soda.Expression[])">
            <summary>Ctor. </summary>
            <param name="selector">is the events to select</param>
            <param name="crontabAtParameters">the crontab schedule parameters</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.#ctor(com.espertech.esper.client.soda.OutputLimitSelector,com.espertech.esper.client.soda.Expression,System.Collections.Generic.IList{com.espertech.esper.client.soda.AssignmentPair})">
            <summary>Ctor. </summary>
            <param name="selector">is the events to select</param>
            <param name="whenExpression">the bool expression to evaluate to control output</param>
            <param name="thenAssignments">the variable assignments, optional or an empty list</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.AddThenAssignment(System.String,com.espertech.esper.client.soda.Expression)">
            <summary>Adds a then-keyword variable assigment for use with the when-keyword. </summary>
            <param name="variableName">to set</param>
            <param name="assignmentExpression">expression to calculate new value</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.ToEPL(System.IO.TextWriter)">
            <summary>Renders the clause in textual representation. </summary>
            <param name="writer">to output to</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.SetAfterTimePeriodExpression(com.espertech.esper.client.soda.TimePeriodExpression)">
            <summary>Sets the after-keyword time period. </summary>
            <param name="afterTimePeriodExpression">after-keyword time period</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.OutputLimitClause.SetAfterNumberOfEvents(System.Nullable{System.Int32})">
            <summary>Sets the after-keyword number of events, or null if undefined. </summary>
            <param name="afterNumberOfEvents">set num events for after-keyword</param>
            <returns>clause</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.OutputLimitClause.Selector">
            <summary>Returns the selector indicating the events to output. </summary>
            <value>selector</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.OutputLimitClause.Frequency">
            <summary>Returns output frequency. </summary>
            <value>frequency of output</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.OutputLimitClause.Unit">
            <summary>Returns the unit the frequency is in. </summary>
            <value>unit for the frequency.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.OutputLimitClause.FrequencyVariable">
            <summary>Returns the variable name of the variable providing output rate frequency values, or null if the frequency is a fixed value. </summary>
            <value>variable name or null if no variable is used</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.OutputLimitClause.WhenExpression">
            <summary>Returns the expression that controls output for use with the when-keyword. </summary>
            <value>expression should be bool result</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.OutputLimitClause.TimePeriodExpression">
            <summary>Returns the time period, or null if none provided. </summary>
            <value>time period</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.OutputLimitClause.ThenAssignments">
            <summary>Returns the list of optional then-keyword variable assignments, if any </summary>
            <value>list of variable assignments or null if none</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.OutputLimitClause.AndAfterTerminateAndExpr">
            <summary>Returns the optional expression evaluated when a context partition terminates before triggering output. </summary>
            <returns>expression</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.OutputLimitClause.AndAfterTerminateThenAssignments">
            <summary>Returns the set-assignments to execute when a context partition terminates. </summary>
            <returns>set-assignments</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.OutputLimitClause.CrontabAtParameters">
            <summary>Returns the crontab parameters, or null if not using crontab-like schedule. </summary>
            <value>parameters</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.OutputLimitClause.IsAndAfterTerminate">
            <summary>Returns true for output upon termination of a context partition </summary>
            <value>indicator</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.OutputLimitClause.AfterTimePeriodExpression">
            <summary>Returns the after-keyword time period. </summary>
            <value>after-keyword time period</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.OutputLimitClause.AfterNumberOfEvents">
            <summary>Returns the after-keyword number of events, or null if undefined. </summary>
            <value>num events for after-keyword</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.OutputLimitSelector">
            <summary>
            Selector for use in output rate limiting.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.OutputLimitSelector.FIRST">
            <summary>
            Output first event of last interval.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.OutputLimitSelector.LAST">
            <summary>
            Output last event of last interval.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.OutputLimitSelector.ALL">
            <summary>
            Output all events of last interval.   For group-by statements, output all groups
            regardless whether the group changed between the last output.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.OutputLimitSelector.SNAPSHOT">
            <summary>
            Output all events as a snapshot considering the current state regardless of interval.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.OutputLimitSelector.DEFAULT">
            <summary>
            Output all events of last interval.
            </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.OutputLimitUnit">
            <summary>Unit for output rate limiting. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.OutputLimitUnit.TIME_PERIOD">
            <summary>The time period unit. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.OutputLimitUnit.EVENTS">
            <summary>The number of events unit. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.OutputLimitUnit.WHEN_EXPRESSION">
            <summary>The unit representing a when-expression. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.OutputLimitUnit.CRONTAB_EXPRESSION">
            <summary>The unit representing a crontab-at-expression. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.OutputLimitUnit.AFTER">
            <summary>The unit representing just after a time period or after a number of events. </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.OutputLimitUnit.CONTEXT_PARTITION_TERM">
            <summary>The unit representing that output occurs when the context partition terminates. </summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.PatternAndExpr">
            <summary>
            Logical AND for use in pattern expressions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternAndExpr.#ctor">
            <summary>
            Ctor - for use to create a pattern expression tree, without pattern child expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternAndExpr.#ctor(com.espertech.esper.client.soda.PatternExpr,com.espertech.esper.client.soda.PatternExpr,com.espertech.esper.client.soda.PatternExpr[])">
            <summary>Ctor. </summary>
            <param name="first">a first pattern expression in the AND relationship</param>
            <param name="second">a second pattern expression in the AND relationship</param>
            <param name="patternExprs">further optional pattern expressions in the AND relationship</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternAndExpr.Add(com.espertech.esper.client.soda.PatternExpr)">
            <summary>Adds a pattern expression to the AND relationship between patterns. </summary>
            <param name="expr">to add</param>
            <returns>pattern expression</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.PatternEveryExpr">
            <summary>Pattern 'every' expression that controls the lifecycle of pattern sub-expressions. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternEveryExpr.#ctor">
            <summary>Ctor - for use to create a pattern expression tree, without pattern child expression. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternEveryExpr.#ctor(com.espertech.esper.client.soda.PatternExpr)">
            <summary>Ctor. </summary>
            <param name="inner">is the pattern expression to control lifecycle on</param>
        </member>
        <member name="T:com.espertech.esper.client.soda.PatternFilterExpr">
            <summary>Filter for use in pattern expressions. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternFilterExpr.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternFilterExpr.#ctor(com.espertech.esper.client.soda.Filter)">
            <summary> Ctor. </summary>
            <param name="filter">specifies to events to filter out</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternFilterExpr.#ctor(com.espertech.esper.client.soda.Filter,System.String)">
            <summary>Ctor. </summary>
            <param name="filter">specifies to events to filter out</param>
            <param name="tagName">specifies the name of the tag to assigned to matching events</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.PatternFilterExpr.TagName">
            <summary>Returns the tag name. </summary>
            <value>tag name.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.PatternFilterExpr.Filter">
            <summary>Returns the filter specification. </summary>
            <value>filter</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.PatternFilterExpr.OptionalConsumptionLevel">
            <summary>Returns the consume level, if assigned. </summary>
            <value>consume level</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.PatternFollowedByExpr">
            <summary>
            Followed-by for use in pattern expressions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternFollowedByExpr.#ctor">
            <summary>
            Ctor - for use to create a pattern expression tree, without pattern child expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternFollowedByExpr.#ctor(System.Collections.Generic.IList{com.espertech.esper.client.soda.Expression})">
            <summary>
            Ctor.
            </summary>
            <param name="optionalMaxPerSubexpression">if parameterized by a max-limits for each pattern sub-expressions</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternFollowedByExpr.#ctor(com.espertech.esper.client.soda.PatternExpr,com.espertech.esper.client.soda.PatternExpr,com.espertech.esper.client.soda.PatternExpr[])">
            <summary>
            Ctor.
            </summary>
            <param name="first">a first pattern expression in the followed-by relationship</param>
            <param name="second">a second pattern expression in the followed-by relationship</param>
            <param name="patternExprs">further optional pattern expressions in the followed-by relationship</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternFollowedByExpr.Add(com.espertech.esper.client.soda.PatternExpr)">
            <summary>
            Adds a pattern expression to the followed-by relationship between patterns.
            </summary>
            <param name="expr">to add</param>
            <returns>pattern expression</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.PatternFollowedByExpr.OptionalMaxPerSubexpression">
            <summary>Returns the instance limits, if any, for pattern-subexpressions. </summary>
            <value>list of max-limit or null</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.PatternGuardExpr">
            <summary>
            Guard is the where timer-within pattern object for use in pattern expressions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternGuardExpr.#ctor(System.String,System.String,System.Collections.Generic.IList{com.espertech.esper.client.soda.Expression})">
            <summary>Ctor - for use to create a pattern expression tree, without pattern child expression. </summary>
            <param name="namespace">is the guard object namespace</param>
            <param name="name">is the guard object name</param>
            <param name="parameters">is guard object parameters</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternGuardExpr.#ctor(System.String,System.String,com.espertech.esper.client.soda.Expression[],com.espertech.esper.client.soda.PatternExpr)">
            <summary>Ctor - for use to create a pattern expression tree, without pattern child expression. </summary>
            <param name="namespace">is the guard object namespace</param>
            <param name="name">is the guard object name</param>
            <param name="parameters">is guard object parameters</param>
            <param name="guarded">is the guarded pattern expression</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternGuardExpr.#ctor(System.String,System.String,System.Collections.Generic.IList{com.espertech.esper.client.soda.Expression},com.espertech.esper.client.soda.PatternExpr)">
            <summary>Ctor - for use to create a pattern expression tree, without pattern child expression. </summary>
            <param name="namespace">is the guard object namespace</param>
            <param name="name">is the guard object name</param>
            <param name="parameters">is guard object parameters</param>
            <param name="guardedPattern">is the guarded pattern expression</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternGuardExpr.ToPrecedenceFreeEPL(System.IO.TextWriter,com.espertech.esper.client.soda.EPStatementFormatter)">
            <summary>
            Renders the expressions and all it's child expression, in full tree depth, as a string in language syntax.
            </summary>
            <param name="writer">is the output to use</param>
            <param name="formatter">for newline-whitespace formatting</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.PatternGuardExpr.Guarded">
            <summary>Get sub expression </summary>
            <value>sub pattern</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.PatternNotExpr">
            <summary>Not-expression for negating a pattern sub-expression for use in pattern expressions. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternNotExpr.#ctor">
            <summary>Ctor - for use to create a pattern expression tree, without pattern child expression. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternNotExpr.#ctor(com.espertech.esper.client.soda.PatternExpr)">
            <summary>Ctor. </summary>
            <param name="inner">is the pattern expression to negate</param>
        </member>
        <member name="T:com.espertech.esper.client.soda.PatternObserverExpr">
            <summary>
            Pattern observer expression observes occurances such as timer-at (crontab) and timer-interval.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternObserverExpr.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternObserverExpr.#ctor(System.String,System.String,System.Collections.Generic.IList{com.espertech.esper.client.soda.Expression})">
            <summary>Ctor - for use to create a pattern expression tree, without pattern child expression. </summary>
            <param name="namespace">is the guard object namespace</param>
            <param name="name">is the guard object name</param>
            <param name="parameters">is guard object parameters</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternObserverExpr.ToPrecedenceFreeEPL(System.IO.TextWriter)">
            <summary>Renders the expressions and all it's child expression, in full tree depth, as a string in language syntax. </summary>
            <param name="writer">is the output to use</param>
        </member>
        <member name="T:com.espertech.esper.client.soda.PatternOrExpr">
            <summary>Logical OR for use in pattern expressions. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternOrExpr.#ctor">
            <summary>Ctor - for use to create a pattern expression tree, without pattern child expression. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternOrExpr.#ctor(com.espertech.esper.client.soda.PatternExpr,com.espertech.esper.client.soda.PatternExpr,com.espertech.esper.client.soda.PatternExpr[])">
            <summary>Ctor. </summary>
            <param name="first">a first pattern expression in the OR relationship</param>
            <param name="second">a second pattern expression in the OR relationship</param>
            <param name="patternExprs">further optional pattern expressions in the OR relationship</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternOrExpr.Add(com.espertech.esper.client.soda.PatternExpr)">
            <summary>Adds a pattern expression to the OR relationship between patterns. </summary>
            <param name="expr">to add</param>
            <returns>pattern expression</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.PatternStream">
            <summary>
            A stream of events that is generated by pattern matches.
            <para/> Patterns matches are events that match pattern expressions. Pattern expressions
            are built using <seealso cref="T:com.espertech.esper.client.soda.Patterns"/>.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternStream.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternStream.Create(com.espertech.esper.client.soda.PatternExpr)">
            <summary> Creates a pattern stream from a pattern expression. </summary>
            <param name="expression">pattern expression</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternStream.Create(com.espertech.esper.client.soda.PatternExpr,System.String)">
            <summary>Creates a named pattern stream from a pattern expression. </summary>
            <param name="expression">pattern expression</param>
            <param name="optStreamName">is the pattern stream name (as-name)</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternStream.#ctor(com.espertech.esper.client.soda.PatternExpr)">
            <summary>Ctor. </summary>
            <param name="expression">pattern expression</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PatternStream.#ctor(com.espertech.esper.client.soda.PatternExpr,System.String)">
            <summary>Ctor. </summary>
            <param name="expression">pattern expression</param>
            <param name="optStreamName">is the pattern stream name (as-name)</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.PatternStream.Expression">
            <summary>Returns the pattern expression providing events to the stream. </summary>
            <value>pattern expression</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.Patterns">
            <summary>
            Convenience factory for creating <see cref="T:com.espertech.esper.client.soda.PatternExpr"/> instances, which represent pattern expression trees.
            <para>
            Provides quick-access method to create all possible pattern expressions and provides typical parameter lists to each.
            </para>
            <para>
            Note that only the typical parameter lists are provided and pattern expressions can allow adding
            additional parameters.
            </para>
            <para>
            Many expressions, for example logical AND and OR (conjunction and disjunction), allow
            adding an unlimited number of additional sub-expressions to a pattern expression. For those pattern expressions
            there are additional add methods.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.Every(com.espertech.esper.client.soda.PatternExpr)">
            <summary>
            Pattern-every expression control the lifecycle of the pattern sub-expression.
            </summary>
            <param name="inner">sub-expression to the every-keyword</param>
            <returns>pattern expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.And">
            <summary>
            Pattern-AND expression, allows adding sub-expressions that are connected by a logical AND.
            </summary>
            <returns>pattern expression representing the AND relationship</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.And(com.espertech.esper.client.soda.PatternExpr,com.espertech.esper.client.soda.PatternExpr,com.espertech.esper.client.soda.PatternExpr[])">
            <summary>
            Pattern-AND expression, allows adding sub-expressions that are connected by a logical AND.
            </summary>
            <param name="first">is the first pattern sub-expression to add to the AND</param>
            <param name="second">is a second pattern sub-expression to add to the AND</param>
            <param name="more">
            is optional additional pattern sub-expression to add to the AND
            </param>
            <returns>pattern expression representing the AND relationship</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.Or(com.espertech.esper.client.soda.PatternExpr,com.espertech.esper.client.soda.PatternExpr,com.espertech.esper.client.soda.PatternExpr[])">
            <summary>
            Pattern-OR expression, allows adding sub-expressions that are connected by a logical OR.
            </summary>
            <param name="first">is the first pattern sub-expression to add to the OR</param>
            <param name="second">is a second pattern sub-expression to add to the OR</param>
            <param name="more">
            is optional additional pattern sub-expression to add to the OR
            </param>
            <returns>pattern expression representing the OR relationship</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.Or">
            <summary>
            Pattern-OR expression, allows adding sub-expressions that are connected by a logical OR.
            </summary>
            <returns>pattern expression representing the OR relationship</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.FollowedBy(com.espertech.esper.client.soda.PatternExpr,com.espertech.esper.client.soda.PatternExpr,com.espertech.esper.client.soda.PatternExpr[])">
            <summary>
            Pattern followed-by expression, allows adding sub-expressions that are connected by a followed-by.
            </summary>
            <param name="first">
            is the first pattern sub-expression to add to the followed-by
            </param>
            <param name="second">
            is a second pattern sub-expression to add to the followed-by
            </param>
            <param name="more">
            is optional additional pattern sub-expression to add to the followed-by
            </param>
            <returns>pattern expression representing the followed-by relationship</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.FollowedBy">
            <summary>
            Pattern followed-by expression, allows adding sub-expressions that are connected by a followed-by.
            </summary>
            <returns>pattern expression representing the followed-by relationship</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.EveryFilter(System.String)">
            <summary>
            Pattern every-operator and filter in combination, equivalent to the "every
            MyEvent" syntax.
            </summary>
            <param name="eventTypeName">is the event type name to filter for</param>
            <returns>
            pattern expression
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.EveryFilter(System.String,System.String)">
            <summary>
            Pattern every-operator and filter in combination, equivalent to the "every
            tag=MyEvent" syntax.
            </summary>
            <param name="eventTypeName">is the event type name to filter for</param>
            <param name="tagName">is the tag name to assign to matching events</param>
            <returns>
            pattern expression
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.EveryFilter(com.espertech.esper.client.soda.Filter)">
            <summary>
            Pattern every-operator and filter in combination, equivalent to the "every MyEvent(vol &gt; 100)" syntax.
            </summary>
            <param name="filter">
            specifies the event type name and filter expression to filter for
            </param>
            <returns>pattern expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.EveryFilter(com.espertech.esper.client.soda.Filter,System.String)">
            <summary>
            Pattern every-operator and filter in combination, equivalent to the "every tag=MyEvent(vol &gt; 100)" syntax.
            </summary>
            <param name="filter">
            specifies the event type name and filter expression to filter for
            </param>
            <param name="tagName">is the tag name to assign to matching events</param>
            <returns>pattern expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.Filter(System.String)">
            <summary>
            Filter expression for use in patterns, equivalent to the simple "MyEvent"
            syntax.
            </summary>
            <param name="eventTypeName">is the event type name of the events to filter for</param>
            <returns>
            pattern expression
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.Filter(System.String,System.String)">
            <summary>
            Filter expression for use in patterns, equivalent to the simple "tag=MyEvent"
            syntax.
            </summary>
            <param name="eventTypeName">is the event type name of the events to filter for</param>
            <param name="tagName">is the tag name to assign to matching events</param>
            <returns>
            pattern expression
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.Filter(com.espertech.esper.client.soda.Filter)">
            <summary>
            Filter expression for use in patterns, equivalent to the "MyEvent(vol &gt; 100)" syntax.
            </summary>
            <param name="filter">
            specifies the event type name and filter expression to filter for
            </param>
            <returns>pattern expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.Filter(com.espertech.esper.client.soda.Filter,System.String)">
            <summary>
            Filter expression for use in patterns, equivalent to the "tag=MyEvent(vol &gt; 100)" syntax.
            </summary>
            <param name="filter">
            specifies the event type name and filter expression to filter for
            </param>
            <param name="tagName">is the tag name to assign to matching events</param>
            <returns>pattern expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.Guard(System.String,System.String,com.espertech.esper.client.soda.Expression[],com.espertech.esper.client.soda.PatternExpr)">
            <summary>
            Guard pattern expression guards a sub-expression, equivalent to the "every MyEvent where timer:within(1 sec)" syntax
            </summary>
            <param name="namespace">is the guard objects namespace, i.e. "timer"</param>
            <param name="name">is the guard objects name, i.e. ""within"</param>
            <param name="parameters">is the guard objects optional parameters, i.e. integer 1 for 1 second</param>
            <param name="guarded">is the pattern sub-expression to be guarded</param>
            <returns>pattern guard expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.Observer(System.String,System.String,com.espertech.esper.client.soda.Expression[])">
            <summary>
            Observer pattern expression, equivalent to the "every timer:interval(1 sec)" syntax
            </summary>
            <param name="namespace">is the observer objects namespace, i.e. "timer"</param>
            <param name="name">is the observer objects name, i.e. ""within"</param>
            <param name="parameters">is the observer objects optional parameters, i.e. integer 1 for 1 second</param>
            <returns>pattern observer expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.TimerWithin(System.Double,com.espertech.esper.client.soda.PatternExpr)">
            <summary>Timer-within guard expression.</summary>
            <param name="seconds">is the number of seconds for the guard</param>
            <param name="guarded">is the sub-expression to guard</param>
            <returns>pattern guard</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.WhileGuard(com.espertech.esper.client.soda.PatternExpr,com.espertech.esper.client.soda.Expression)">
            <summary>While-guard expression. </summary>
            <param name="expression">expression to evaluate against matches</param>
            <param name="guarded">is the sub-expression to guard</param>
            <returns>pattern guard</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.TimerWithinMax(System.Double,System.Int32,com.espertech.esper.client.soda.PatternExpr)">
            <summary>Timer-within-max guard expression. </summary>
            <param name="seconds">is the number of seconds for the guard</param>
            <param name="max">the maximum number of invocations for the guard</param>
            <param name="guarded">is the sub-expression to guard</param>
            <returns>pattern guard</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.TimerInterval(System.Double)">
            <summary>Timer-interval observer expression.</summary>
            <param name="seconds">is the number of seconds in the interval</param>
            <returns>pattern observer</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.NotFilter(System.String)">
            <summary>
            Pattern not-operator and filter in combination, equivalent to the "not MyEvent"
            syntax.
            </summary>
            <param name="eventTypeName">is the event type name to filter for</param>
            <returns>
            pattern expression
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.NotFilter(System.String,System.String)">
            <summary>
            Pattern not-operator and filter in combination, equivalent to the "not
            tag=MyEvent" syntax.
            </summary>
            <param name="name">is the event type name to filter for</param>
            <param name="tagName">is the tag name to assign to matching events</param>
            <returns>
            pattern expression
            </returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.NotFilter(com.espertech.esper.client.soda.Filter)">
            <summary>
            Pattern not-operator and filter in combination, equivalent to the "not MyEvent(vol &gt; 100)" syntax.
            </summary>
            <param name="filter">
            specifies the event type name and filter expression to filter for
            </param>
            <returns>pattern expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.NotFilter(com.espertech.esper.client.soda.Filter,System.String)">
            <summary>
            Pattern not-operator and filter in combination, equivalent to the "not tag=MyEvent(vol &gt; 100)" syntax.
            </summary>
            <param name="filter">
            specifies the event type name and filter expression to filter for
            </param>
            <param name="tagName">is the tag name to assign to matching events</param>
            <returns>pattern expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.Not(com.espertech.esper.client.soda.PatternExpr)">
            <summary>
            Not-keyword pattern expression flips the truth-value of the pattern sub-expression.
            </summary>
            <param name="subexpression">is the expression whose truth value to flip</param>
            <returns>pattern expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.MatchUntil(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.PatternExpr,com.espertech.esper.client.soda.PatternExpr)">
            <summary>
            Match-until-pattern expression matches a certain number of
            occurances until a second expression becomes true.
            </summary>
            <param name="low">low number of matches, or null if no lower boundary</param>
            <param name="high">high number of matches, or null if no high boundary</param>
            <param name="match">the pattern expression that is sought to match repeatedly</param>
            <param name="until">the pattern expression that ends matching (optional, can be null)</param>
            <returns>pattern expression</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.Patterns.TimerAt(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Timer-at observer
            </summary>
            <param name="minutes">a single integer value supplying the minute to fire the timer, or null for any (wildcard) minute</param>
            <param name="hours">a single integer value supplying the hour to fire the timer, or null for any (wildcard) hour</param>
            <param name="daysOfMonth">a single integer value supplying the day of the month to fire the timer, or null for any (wildcard) day of the month</param>
            <param name="month">a single integer value supplying the month to fire the timer, or null for any (wildcard) month</param>
            <param name="daysOfWeek">a single integer value supplying the days of the week to fire the timer, or null for any (wildcard) day of the week</param>
            <param name="seconds">a single integer value supplying the second to fire the timer, or null for any (wildcard) second</param>
            <returns>timer-at observer</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.PlugInProjectionExpression">
            <summary>
            Represents a plug-in aggregation function.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PlugInProjectionExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.soda.PlugInProjectionExpression"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PlugInProjectionExpression.#ctor(System.String,System.Boolean)">
            <summary>Ctor.</summary>
            <param name="functionName">the name of the function</param>
            <param name="isDistinct">true for distinct</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PlugInProjectionExpression.#ctor(System.String,System.Boolean,com.espertech.esper.client.soda.Expression[])">
            <summary>Ctor.</summary>
            <param name="functionName">the name of the function</param>
            <param name="isDistinct">true for distinct</param>
            <param name="moreExpressions">provides aggregated values</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PlugInProjectionExpression.ToPrecedenceFreeEPL(System.IO.TextWriter)">
            <summary>Renders the clause in textual representation.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.PlugInProjectionExpression.FunctionName">
            <summary>Gets or sets the function name.</summary>
            <returns>name of function</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.PlugInProjectionExpression.IsDistinct">
            <summary>Gets or sets the true for distinct.</summary>
            <returns>bool indicating distinct or not</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.PreviousExpression">
            <summary>
            Previous function for obtaining property values of previous events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PreviousExpression.#ctor">
            <summary>Ctor.</summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PreviousExpression.#ctor(com.espertech.esper.client.soda.Expression,System.String)">
            <summary>Ctor.</summary>
            <param name="expression">provides the index to use</param>
            <param name="propertyName">
            is the name of the property to return the value for
            </param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PreviousExpression.#ctor(System.Int32,System.String)">
            <summary>Ctor.</summary>
            <param name="index">provides the index</param>
            <param name="propertyName">
            is the name of the property to return the value for
            </param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PreviousExpression.#ctor(com.espertech.esper.client.soda.PreviousExpressionType,com.espertech.esper.client.soda.Expression)">
            <summary>
            Ctor.
            </summary>
            <param name="expressionType">Type of the expression.</param>
            <param name="expression">to evaluate</param>
        </member>
        <member name="T:com.espertech.esper.client.soda.PriorExpression">
            <summary>
            Expression representing the prior function.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PriorExpression.#ctor">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PriorExpression.#ctor(System.Int32,System.String)">
            <summary>Ctor.</summary>
            <param name="index">is the index of the prior event</param>
            <param name="propertyName">is the property to return</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PriorExpression.ToPrecedenceFreeEPL(System.IO.TextWriter)">
            <summary>Renders the clause in textual representation.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="T:com.espertech.esper.client.soda.PropertyExistsExpression">
            <summary>
            Property-exists checks if a dynamic property exists.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PropertyExistsExpression.#ctor">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PropertyExistsExpression.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="propertyName">is the name of the property to check existence</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PropertyExistsExpression.ToPrecedenceFreeEPL(System.IO.TextWriter)">
            <summary>Renders the clause in textual representation.</summary>
            <param name="writer">to output to</param>
        </member>
        <member name="T:com.espertech.esper.client.soda.PropertyValueExpression">
            <summary>
            Expression returning a property value.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PropertyValueExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.soda.PropertyValueExpression"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.PropertyValueExpression.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="propertyName">is the name of the property</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.PropertyValueExpression.ToPrecedenceFreeEPL(System.IO.TextWriter)">
            <summary>
            Renders the expressions and all it's child expression, in full tree depth, as a string in
            language syntax.
            </summary>
            <param name="writer">is the output to use</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.PropertyValueExpression.PropertyName">
            <summary>Gets or sets the property name.</summary>
            <returns>name of the property</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.PropertyValueExpression.Precedence">
            <summary>
            Gets the precedence.
            </summary>
            <value>The precedence.</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.RegExpExpression">
            <summary>
            Regular expression evaluates a "regexp" regular expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.RegExpExpression.#ctor(System.Boolean)">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            </summary>
            <param name="isNot">true for negated regex</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.RegExpExpression.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="left">provides values to match against regexp string</param>
            <param name="right">provides the regexp string</param>
            <param name="isNot">true for negated regex</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.RegExpExpression.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="left">provides values to match against regexp string</param>
            <param name="right">provides the regexp string</param>
            <param name="escape">provides the escape character</param>
            <param name="isNot">true for negated regex</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.RegExpExpression.#ctor">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.RegExpExpression.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>
            Ctor.
            </summary>
            <param name="left">provides values to match against regexp string</param>
            <param name="right">provides the regexp string</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.RegExpExpression.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.Expression)">
            <summary>
            Ctor.
            </summary>
            <param name="left">provides values to match against regexp string</param>
            <param name="right">provides the regexp string</param>
            <param name="escape">provides the escape character</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.RegExpExpression.IsNot">
            <summary>
            Returns true if negated.
            </summary>
            <returns>
            indicator whether negated
            </returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.RelationalOpExpression">
            <summary>
            Comparison using one of the relational operators (=, !=, &lt;, &lt;=, &gt;, &gt;=).
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.RelationalOpExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.soda.RelationalOpExpression"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.RelationalOpExpression.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="operator">is the relational operator.</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.RelationalOpExpression.#ctor(com.espertech.esper.client.soda.Expression,System.String,com.espertech.esper.client.soda.Expression)">
            <summary>Ctor.</summary>
            <param name="left">provides a value to compare against</param>
            <param name="operator">is the operator to use</param>
            <param name="right">provides a value to compare against</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.RelationalOpExpression.Operator">
            <summary>Gets or sets the operator to use.</summary>
            <returns>operator.</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.SQLStream">
            <summary>
            An SQL stream that polls via SQL for events via join.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.SQLStream.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.SQLStream.Create(System.String,System.String)">
            <summary>Creates a new SQL-based stream. </summary>
            <param name="databaseName">is the database name to poll</param>
            <param name="sqlWithSubsParams">is the SQL to use</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SQLStream.Create(System.String,System.String,System.String)">
            <summary>Creates a new SQL-based stream. </summary>
            <param name="databaseName">is the database name to poll</param>
            <param name="sqlWithSubsParams">is the SQL to use</param>
            <param name="optStreamName">is the as-name of the stream</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SQLStream.Create(System.String,System.String,System.String,System.String)">
            <summary>Creates a new SQL-based stream. </summary>
            <param name="databaseName">is the database name to poll</param>
            <param name="sqlWithSubsParams">is the SQL to use</param>
            <param name="optStreamName">is the as-name of the stream</param>
            <param name="optionalMetadataSQL">optional SQL delivering metadata of statement</param>
            <returns>stream</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SQLStream.#ctor(System.String,System.String,System.String,System.String)">
            <summary>Ctor. </summary>
            <param name="databaseName">is the database name to poll</param>
            <param name="sqlWithSubsParams">is the SQL to use</param>
            <param name="optStreamName">is the optional as-name of the stream, or null if unnamed</param>
            <param name="optionalMetadataSQL">optional SQL delivering metadata of statement</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.SQLStream.DatabaseName">
            <summary>Returns the database name. </summary>
            <value>database name</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.SQLStream.SqlWithSubsParams">
            <summary>Returns the SQL with optional substitution parameters in the SQL. </summary>
            <value>SQL</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.SQLStream.OptionalMetadataSQL">
            <summary>Returns the metadata SQL if any. </summary>
            <value>metadata SQL</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.SelectClause">
            <summary>
            A select-clause consists of a list of selection elements (expressions, Wildcard(s), stream wildcard 
            and the like) and an optional stream selector. 
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.#ctor(com.espertech.esper.client.soda.StreamSelector,System.Collections.Generic.List{com.espertech.esper.client.soda.SelectClauseElement})">
            <summary>Ctor. </summary>
            <param name="streamSelector">selects the stream</param>
            <param name="selectList">is a list of elements in the select-clause</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.CreateWildcard">
            <summary>Creates a wildcard select-clause, additional expressions can still be added. </summary>
            <returns>select-clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.Create">
            <summary>Creates an empty select-clause to be added to via add methods. </summary>
            <returns>select-clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.Create(System.String[])">
            <summary>Creates a select-clause consisting of a list of property names. </summary>
            <param name="propertyNames">is the names of properties to select</param>
            <returns>select-clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.CreateStreamWildcard(System.String)">
            <summary>Creates a select-clause with a single stream wildcard selector (e.g. select streamName.* from MyStream as streamName) </summary>
            <param name="streamName">is the name given to a stream</param>
            <returns>select-clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.CreateWildcard(com.espertech.esper.client.soda.StreamSelector)">
            <summary>Creates a wildcard select-clause, additional expressions can still be added. </summary>
            <param name="streamSelector">can be used to select insert or remove streams</param>
            <returns>select-clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.Create(com.espertech.esper.client.soda.StreamSelector)">
            <summary>Creates an empty select-clause. </summary>
            <param name="streamSelector">can be used to select insert or remove streams</param>
            <returns>select-clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.Create(com.espertech.esper.client.soda.StreamSelector,System.String[])">
            <summary>Creates a select-clause consisting of a list of property names. </summary>
            <param name="propertyNames">is the names of properties to select</param>
            <param name="streamSelector">can be used to select insert or remove streams</param>
            <returns>select-clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.Add(System.String[])">
            <summary>Adds property names to be selected. </summary>
            <param name="propertyNames">is a list of property names to add</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.AddWithAsProvidedName(System.String,System.String)">
            <summary>Adds a single property name and an "as"-asName for the column. </summary>
            <param name="propertyName">name of property</param>
            <param name="asName">is the "as"-asName for the column</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.Add(com.espertech.esper.client.soda.Expression)">
            <summary>Adds an expression to the select clause. </summary>
            <param name="expression">to add</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.Add(com.espertech.esper.client.soda.Expression,System.String)">
            <summary>Adds an expression to the select clause and an "as"-asName for the column. </summary>
            <param name="expression">to add</param>
            <param name="asName">is the "as"-provided for the column</param>
            <returns>clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.AddStreamWildcard(System.String)">
            <summary>Adds to the select-clause a stream wildcard selector (e.g. select streamName.* from MyStream as streamName) </summary>
            <param name="streamName">is the name given to a stream</param>
            <returns>select-clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.AddWildcard">
            <summary>Adds to the select-clause a  wildcard selector (e.g. select * from MyStream as streamName) </summary>
            <returns>select-clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.AddStreamWildcard(System.String,System.String)">
            <summary>Adds to the select-clause a stream wildcard selector with column name (e.g. select streamName.* as colName from MyStream as streamName) </summary>
            <param name="streamName">is the name given to a stream</param>
            <param name="columnName">the name given to the column</param>
            <returns>select-clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.GetStreamSelector">
            <summary>Returns the stream selector. </summary>
            <returns>stream selector</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.SetStreamSelector(com.espertech.esper.client.soda.StreamSelector)">
            <summary>Sets the stream selector. </summary>
            <param name="streamSelector">stream selector to set</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.AddElements(System.Collections.Generic.IEnumerable{com.espertech.esper.client.soda.SelectClauseElement})">
            <summary>Add a select expression element. </summary>
            <param name="selectClauseElements">to add</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.ToEPL(System.IO.TextWriter,com.espertech.esper.client.soda.EPStatementFormatter,System.Boolean,System.Boolean)">
            <summary>
            Renders the clause in textual representation.
            </summary>
            <param name="writer">to output to</param>
            <param name="formatter">for newline-whitespace formatting</param>
            <param name="isTopLevel">to indicate if this select-clause is inside other clauses.</param>
            <param name="andDelete">indicator whether select and delete.</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.Distinct(System.Boolean)">
            <summary>Sets distinct </summary>
            <param name="distinct">distinct indicator</param>
            <returns>the select clause</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClause.Distinct">
            <summary>Sets distinct to true. </summary>
            <returns>the select clause</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.SelectClause.SelectList">
            <summary>Returns the list of expressions in the select clause. </summary>
            <value>list of expressions with column names</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.SelectClause.StreamSelector">
            <summary>
            Gets or sets the stream selector.
            </summary>
            <value>The stream selector.</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.SelectClause.IsDistinct">
            <summary>Returns indicator whether distinct or not. </summary>
            <value>distinct indicator</value>
        </member>
        <member name="M:com.espertech.esper.client.soda.SelectClauseElementExtension.ToEPL(com.espertech.esper.client.soda.SelectClauseElement)">
            <summary>
            Converts the element to a string.
            </summary>
            <param name="selectClauseElement">The select clause element.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.StaticMethodExpression">
            <summary>Static method call consists of a class name and method name. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.StaticMethodExpression.#ctor(System.String,System.String,System.Object[])">
            <summary>Ctor. </summary>
            <param name="className">class name providing the static method</param>
            <param name="method">method name</param>
            <param name="parameters">an optiona array of parameters</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.StaticMethodExpression.#ctor(System.String,System.Collections.Generic.List{com.espertech.esper.client.soda.DotExpressionItem})">
            <summary>Ctor. </summary>
            <param name="className">class name providing the static method</param>
            <param name="chain">method chain</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.StaticMethodExpression.Chain">
            <summary>Returns the chain of method invocations, each pair a method name and list of parameter expressions </summary>
            <value>method chain</value>
        </member>
        <member name="P:com.espertech.esper.client.soda.StaticMethodExpression.ClassName">
            <summary>Returns the class name. </summary>
            <value>class name</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.StddevProjectionExpression">
            <summary>Standard deviation of the (distinct) values returned by an expression. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.StddevProjectionExpression.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.StddevProjectionExpression.#ctor(System.Boolean)">
            <summary>Ctor - for use to create an expression tree, without inner expression </summary>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.StddevProjectionExpression.#ctor(com.espertech.esper.client.soda.Expression,System.Boolean)">
            <summary>Ctor - adds the expression to project. </summary>
            <param name="expression">returning values to project</param>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.StddevProjectionExpression.IsDistinct">
            <summary>Returns true if the projection considers distinct values only. </summary>
            <value>true if distinct</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.StreamSelector">
            <summary>
            Enumeration for representing selection of the remove stream or the insert stream, or both.
            </summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.StreamSelector.RSTREAM_ONLY">
            <summary>Indicates selection of the remove stream only.</summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.StreamSelector.ISTREAM_ONLY">
            <summary>Indicates selection of the insert stream only.</summary>
        </member>
        <member name="F:com.espertech.esper.client.soda.StreamSelector.RSTREAM_ISTREAM_BOTH">
            <summary>Indicates selection of both the insert and the remove stream.</summary>
        </member>
        <member name="T:com.espertech.esper.client.soda.SubqueryExistsExpression">
            <summary>
            Exists-expression for a set of values returned by a lookup.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.SubqueryExistsExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.soda.SubqueryExistsExpression"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.SubqueryExistsExpression.#ctor(com.espertech.esper.client.soda.EPStatementObjectModel)">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            </summary>
            <param name="model">is the lookup statement object model</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.SubqueryExistsExpression.Model">
            <summary>Gets or sets the lookup statement object model.</summary>
            <returns>lookup model</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.SubqueryExpression">
            <summary>
            Subquery-expression returns values returned by a lookup modelled by a further <see cref="T:com.espertech.esper.client.soda.EPStatementObjectModel"/>.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.SubqueryExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.soda.SubqueryExpression"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.SubqueryExpression.#ctor(com.espertech.esper.client.soda.EPStatementObjectModel)">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            </summary>
            <param name="model">is the lookup statement object model</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.SubqueryExpression.Model">
            <summary>Gets or sets the lookup statement object model.</summary>
            <returns>lookup model</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.SubqueryInExpression">
            <summary>
            In-expression for a set of values returned by a lookup.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.SubqueryInExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.soda.SubqueryInExpression"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.SubqueryInExpression.#ctor(com.espertech.esper.client.soda.EPStatementObjectModel,System.Boolean)">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            </summary>
            <param name="model">is the lookup statement object model</param>
            <param name="isNotIn">is true for not-in</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.SubqueryInExpression.#ctor(com.espertech.esper.client.soda.Expression,com.espertech.esper.client.soda.EPStatementObjectModel,System.Boolean)">
            <summary>
            Ctor - for use to create an expression tree, without child expression.
            </summary>
            <param name="expression">is the expression providing the value to match</param>
            <param name="model">is the lookup statement object model</param>
            <param name="isNotIn">is true for not-in</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.SubqueryInExpression.IsNotIn">
            <summary>Gets or sets the true for not-in, or false for in-lookup.</summary>
            <returns>true for not-in</returns>
        </member>
        <member name="P:com.espertech.esper.client.soda.SubqueryInExpression.Model">
            <summary>Gets or sets the lookup statement object model.</summary>
            <returns>lookup model</returns>
        </member>
        <member name="T:com.espertech.esper.client.soda.SumProjectionExpression">
            <summary>Sum of the (distinct) values returned by an expression. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.SumProjectionExpression.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.SumProjectionExpression.#ctor(System.Boolean)">
            <summary>Ctor - for use to create an expression tree, without inner expression </summary>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="M:com.espertech.esper.client.soda.SumProjectionExpression.#ctor(com.espertech.esper.client.soda.Expression,System.Boolean)">
            <summary>Ctor - adds the expression to project. </summary>
            <param name="expression">returning values to project</param>
            <param name="isDistinct">true if distinct</param>
        </member>
        <member name="P:com.espertech.esper.client.soda.SumProjectionExpression.IsDistinct">
            <summary>Returns true if the projection considers distinct values only. </summary>
            <value>true if distinct</value>
        </member>
        <member name="T:com.espertech.esper.client.soda.View">
            <summary>
            A view provides a projection upon a stream, such as a data window, grouping or unique.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.View.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.soda.View"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.soda.View.Create(System.String,System.String)">
            <summary>
            Creates a view.
            </summary>
            <param name="namespace">the view namespace, i.e. "win" for data windows</param>
            <param name="name">the view name, i.e. "length" for length window</param>
            <returns>view</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.View.Create(System.String,System.String,System.Collections.Generic.IList{com.espertech.esper.client.soda.Expression})">
            <summary>
            Creates a view.
            </summary>
            <param name="namespace">the view namespace, i.e. "win" for data windows</param>
            <param name="name">the view name, i.e. "length" for length window</param>
            <param name="parameters">a list of view parameters, or empty if there are no parameters for the view</param>
            <returns>view</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.View.Create(System.String,System.String,com.espertech.esper.client.soda.Expression[])">
            <summary>
            Creates a view.
            </summary>
            <param name="namespace">the view namespace, i.e. "win" for data windows</param>
            <param name="name">the view name, i.e. "length" for length window</param>
            <param name="parameters">a list of view parameters, or empty if there are no parameters for the view</param>
            <returns>view</returns>
        </member>
        <member name="M:com.espertech.esper.client.soda.View.#ctor(System.String,System.String,System.Collections.Generic.IList{com.espertech.esper.client.soda.Expression})">
            <summary>
            Creates a view.
            </summary>
            <param name="namespace">the view namespace, i.e. "win" for data windows</param>
            <param name="name">the view name, i.e. "length" for length window</param>
            <param name="parameters">a list of view parameters, or empty if there are no parameters for the view</param>
        </member>
        <member name="T:com.espertech.esper.collection.ArrayBackedCollection`1">
            <summary>
            A fast collection backed by an array with severe limitations. Allows direct access to the backing array
            - this must be used with care as old elements could be in the array and the array is only valid until
            the number of elements indicated by size.
            <p>
            Implements only the add, size and clear methods of the collection interface.
            </p>
            <p>
            When running out of space for the underlying array, allocates a new array of double the size of the
            current array.
            </p>
            <p>
            Not synchronized and not thread-safe.
            </p>
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.ArrayBackedCollection`1.#ctor(System.Int32)">
            <summary>Ctor.</summary>
            <param name="currentSize">is the initial size of the backing array.</param>
        </member>
        <member name="M:com.espertech.esper.collection.ArrayBackedCollection`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.collection.ArrayBackedCollection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:com.espertech.esper.collection.ArrayBackedCollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.ArrayBackedCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.ArrayBackedCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.ArrayBackedCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:com.espertech.esper.collection.ArrayBackedCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.collection.ArrayBackedCollection`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"></see>.
            </summary>
            
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
            
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
        </member>
        <member name="M:com.espertech.esper.collection.ArrayBackedCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"></see> at the specified index.
            </summary>
            
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:com.espertech.esper.collection.ArrayBackedCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="P:com.espertech.esper.collection.ArrayBackedCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.collection.ArrayBackedCollection`1.Array">
            <summary>
            Returns the backing object array, valid until the current size.
            <para/>
            Applications must ensure to not read past current size as old elements can be encountered.
            </summary>
            <returns>backing array</returns>
        </member>
        <member name="P:com.espertech.esper.collection.ArrayBackedCollection`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:com.espertech.esper.collection.ArrayBackedCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:com.espertech.esper.collection.ArrayBackedCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            
            <returns>
            The element at the specified index.
            </returns>
            
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
        </member>
        <member name="T:com.espertech.esper.collection.FlushedEventBuffer">
            <summary>
            Buffer for events - accumulates events until flushed.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.FlushedEventBuffer.Add(com.espertech.esper.client.EventBean[])">
            <summary>Add an event array to buffer.</summary>
            <param name="events">to add</param>
        </member>
        <member name="M:com.espertech.esper.collection.FlushedEventBuffer.GetAndFlush">
            <summary>
            Get the events currently buffered. Returns null if the buffer is empty. Flushes the buffer.
            </summary>
            <returns>array of events in buffer or null if empty</returns>
        </member>
        <member name="M:com.espertech.esper.collection.FlushedEventBuffer.Flush">
            <summary>Empty buffer.</summary>
        </member>
        <member name="T:com.espertech.esper.collection.InterchangeablePair`2">
            <summary> General-purpose pair of values of any type. The pair equals another pair if
            the objects that form the pair equal in any order, ie. first pair first object equals (.equals)
            the second pair first object or second object, and the first pair second object equals the second pair first object
            or second object.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.InterchangeablePair`2.#ctor(`0,`1)">
            <summary> Construct pair of values.</summary>
            <param name="first">is the first value</param>
            <param name="second">is the second value</param>
        </member>
        <member name="M:com.espertech.esper.collection.InterchangeablePair`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.InterchangeablePair`2.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.InterchangeablePair`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.collection.InterchangeablePair`2.First">
            <summary>
            Gets or sets the first value within the pair.
            </summary>
        </member>
        <member name="P:com.espertech.esper.collection.InterchangeablePair`2.Second">
            <summary>
            Gets or sets the second value within the pair.
            </summary>
        </member>
        <member name="T:com.espertech.esper.collection.IterablesListIterator">
            <summary>
            An iterator over a list of iterables.
            The IterablesListIterator iterator takes a list of Iterable instances as a parameter. The iterator will
            Start at the very first Iterable and obtain it's iterator. It then allows iteration over this first iterator
            until that iterator returns no next value. Then the IterablesListIterator iterator will obtain the next iterable and iterate
            over this next iterable's iterator until no more values can be obtained. This continues until the last Iterable
            in the order of the list of Iterables.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.IterablesListIterator.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{com.espertech.esper.client.EventBean}})">
            <summary>
            Constructor - takes a list of Iterable that supply the iterators to iterate over.
            </summary>
            <param name="iterables">is a list of Iterable instances for which iterators to iterator over</param>
        </member>
        <member name="M:com.espertech.esper.collection.IterablesListIterator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:com.espertech.esper.collection.IterablesListIterator.AdvanceChild">
            <summary>
            Advances the currentListIterator to the next item in the
            parent enumerator.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.IterablesListIterator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:com.espertech.esper.collection.IterablesListIterator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:com.espertech.esper.collection.IterablesListIterator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="P:com.espertech.esper.collection.IterablesListIterator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="T:com.espertech.esper.collection.MultiKey`1">
            <summary> Functions as a key value for Maps where keys need to be composite values.
            The class allows a Map that uses MultiKeyUntyped entries for key values to use multiple objects as keys.
            It calculates the hashCode from the key objects on construction and caches the hashCode.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.MultiKey`1.#ctor(`0[])">
            <summary> Constructor for multiple keys supplied in an object array.</summary>
            <param name="keys">is an array of key objects
            </param>
        </member>
        <member name="M:com.espertech.esper.collection.MultiKey`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="other">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.MultiKey`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.MultiKey`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.collection.MultiKey`1.Array">
            <summary> Returns the key value array.</summary>
            <returns> key value array
            </returns>
        </member>
        <member name="P:com.espertech.esper.collection.MultiKey`1.Count">
            <summary> Returns the number of key objects.</summary>
            <returns> size of key object array
            </returns>
        </member>
        <member name="P:com.espertech.esper.collection.MultiKey`1.Item(System.Int32)">
            <summary> Returns the key object at the specified position.</summary>
            <param name="index">is the array position
            </param>
            <returns> key object at position
            </returns>
        </member>
        <member name="T:com.espertech.esper.collection.MultiKeyUntyped">
            <summary>
            Functions as a key value for Maps where keys need to be composite values. The class allows a 
            Map that uses MultiKeyUntyped entries for key values to use multiple objects as keys. It 
            calculates the hashCode from the key objects on construction and caches the hashCode. 
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.MultiKeyUntyped.#ctor(System.Object[])">
            <summary>
            Constructor for multiple keys supplied in an object array.
            </summary>
            <param name="keys">is an array of key objects</param>
        </member>
        <member name="M:com.espertech.esper.collection.MultiKeyUntyped.#ctor(System.Object)">
            <summary>Constructor for a single key object. </summary>
            <param name="key">is the single key object</param>
        </member>
        <member name="M:com.espertech.esper.collection.MultiKeyUntyped.#ctor(System.Object,System.Object)">
            <summary>Constructor for a pair of key objects. </summary>
            <param name="key1">is the first key object</param>
            <param name="key2">is the second key object</param>
        </member>
        <member name="M:com.espertech.esper.collection.MultiKeyUntyped.#ctor(System.Object,System.Object,System.Object)">
            <summary>Constructor for three key objects. </summary>
            <param name="key1">is the first key object</param>
            <param name="key2">is the second key object</param>
            <param name="key3">is the third key object</param>
        </member>
        <member name="M:com.espertech.esper.collection.MultiKeyUntyped.#ctor(System.Object,System.Object,System.Object,System.Object)">
            <summary>Constructor for four key objects. </summary>
            <param name="key1">is the first key object</param>
            <param name="key2">is the second key object</param>
            <param name="key3">is the third key object</param>
            <param name="key4">is the fourth key object</param>
        </member>
        <member name="M:com.espertech.esper.collection.MultiKeyUntyped.Get(System.Int32)">
            <summary>Returns the key object at the specified position. </summary>
            <param name="index">is the array position</param>
            <returns>key object at position</returns>
        </member>
        <member name="P:com.espertech.esper.collection.MultiKeyUntyped.Count">
            <summary>Returns the number of key objects. </summary>
            <value>size of key object array</value>
        </member>
        <member name="P:com.espertech.esper.collection.MultiKeyUntyped.Keys">
            <summary>Returns keys. </summary>
            <value>keys object array</value>
        </member>
        <member name="T:com.espertech.esper.collection.NumberSetPermutationEnumeration">
            <summary> Based on the <see cref="T:com.espertech.esper.collection.PermutationEnumerator"/> this enumeration provides, among a set of supplied integer
            values, all permutations of order these values can come in, ie.
            Example: {0, 2, 3} results in 6 enumeration values ending in {3, 2, 0}.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.NumberSetPermutationEnumeration.#ctor(System.Int32[])">
            <summary>
            Constructor
            </summary>
            <param name="numberSet">set of integer numbers to permutate and provide each combination.</param>
        </member>
        <member name="M:com.espertech.esper.collection.NumberSetPermutationEnumeration.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.NumberSetPermutationEnumeration.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:com.espertech.esper.collection.NumberSetPermutationEnumeration.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="P:com.espertech.esper.collection.NumberSetPermutationEnumeration.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="P:com.espertech.esper.collection.NumberSetPermutationEnumeration.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="T:com.espertech.esper.collection.Pair`2">
            <summary>
            General-purpose pair of values of any type. The pair only equals another pair if
            the objects that form the pair equal, ie. first pair first object equals (.equals) the second pair first object,
            and the first pair second object equals the second pair second object.
            </summary>
        </member>
        <member name="F:com.espertech.esper.collection.Pair`2.First">
            <summary>
            Gets or sets the first value within pair.
            </summary>
            <value>The first.</value>
        </member>
        <member name="F:com.espertech.esper.collection.Pair`2.Second">
            <summary>
            Gets or sets the second value within pair.
            </summary>
            <value>The second.</value>
        </member>
        <member name="M:com.espertech.esper.collection.Pair`2.#ctor(`0,`1)">
            <summary>
            Construct pair of values.
            </summary>
            <param name="first">is the first value</param>
            <param name="second">is the second value</param>
        </member>
        <member name="M:com.espertech.esper.collection.Pair`2.#ctor(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.collection.Pair`2"/> class.
            </summary>
            <param name="keyValuePair">The key value pair.</param>
        </member>
        <member name="M:com.espertech.esper.collection.Pair`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.Pair`2.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.Pair`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.collection.PermutationEnumerator">
            <summary> Provides a N! (n-faculty) number of permutations for N elements.
            Example: for 3 elements provides 6 permutations exactly as follows:
            {0, 1, 2}
            {0, 2, 1}
            {1, 0, 2}
            {1, 2, 0}
            {2, 0, 1}
            {2, 1, 0}
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.PermutationEnumerator.Create(System.Int32)">
            <summary>
            Creates the permutation.
            </summary>
            <param name="numElements">The number of elements.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.collection.PermutationEnumerator.GetPermutation(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Gets the permutation.
            </summary>
            <param name="numElements">The num elements.</param>
            <param name="permutation">The permutation.</param>
            <param name="factors">factors for each index</param>
            <returns>permutation</returns>
        </member>
        <member name="M:com.espertech.esper.collection.PermutationEnumerator.GetFactors(System.Int32)">
            <summary>Returns factors for computing the permutation.</summary>
            <param name="numElements">number of factors to compute</param>
            <returns>factors list</returns>
        </member>
        <member name="M:com.espertech.esper.collection.PermutationEnumerator.Faculty(System.Int32)">
            <summary>Computes faculty of N.</summary>
            <param name="num">to compute faculty for</param>
            <returns>N!</returns>
        </member>
        <member name="T:com.espertech.esper.collection.RefCountedMap`2">
            <summary>
            Reference-counting map based on a HashMap implementation that stores as a value a pair of value and reference counter.
            The class provides a reference method that takes a key
            and increments the reference count for the key. It also provides a de-reference method that takes a key and
            decrements the reference count for the key, and removes the key if the reference count reached zero.
            Null values are not allowed as keys.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.RefCountedMap`2.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.RefCountedMap`2.Reference(`0)">
            <summary> Increase the reference count for a given key by one.
            Throws an ArgumentException if the key was not found.
            </summary>
            <param name="key">is the key to increase the ref count for
            </param>
        </member>
        <member name="M:com.espertech.esper.collection.RefCountedMap`2.Dereference(`0)">
            <summary> Decreases the reference count for a given key by one. Returns true if the reference count reaches zero.
            Removes the key from the collection when the reference count reaches zero.
            Throw an ArgumentException if the key is not found.
            </summary>
            <param name="key">to de-reference
            </param>
            <returns> true to indicate the reference count reached zero, false to indicate more references to the key exist.
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.RefCountedMap`2.Clear">
            <summary>
            Clear out the collection.
            </summary>
        </member>
        <member name="P:com.espertech.esper.collection.RefCountedMap`2.Item(`0)">
            <summary>
            Gets or sets the item with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.collection.RefCountedSet`1">
            <summary> reference-counting set based on a HashMap implementation that stores keys and a reference counter for
            each unique key value. Each time the same key is added, the reference counter increases.
            Each time a key is removed, the reference counter decreases.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.RefCountedSet`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.RefCountedSet`1.AddNull">
            <summary>
            Adds a key to the set, but the key is null.  It behaves the same, but has its own
            variables that need to be incremented.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.RefCountedSet`1.Add(`0)">
            <summary> Add a key to the set. Add with a reference count of one if the key didn't exist in the set.
            Increase the reference count by one if the key already exists.
            Return true if this is the first time the key was encountered, or false if key is already in set.
            </summary>
            <param name="key">to add
            </param>
            <returns> true if the key is not in the set already, false if the key is already in the set
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.RefCountedSet`1.RemoveNull">
            <summary>
            Removes the null key
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.RefCountedSet`1.Add(`0,System.Int32)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="numReferences">The num references.</param>
        </member>
        <member name="M:com.espertech.esper.collection.RefCountedSet`1.Remove(`0)">
            <summary> Removed a key to the set. Removes the key if the reference count is one.
            Decreases the reference count by one if the reference count is more then one.
            Return true if the reference count was one and the key thus removed, or false if key is stays in set.
            </summary>
            <param name="key">to add
            </param>
            <returns> true if the key is removed, false if it stays in the set
            </returns>
            <throws>  IllegalStateException is a key is removed that wasn't added to the map </throws>
        </member>
        <member name="M:com.espertech.esper.collection.RefCountedSet`1.RemoveAll(`0)">
            <summary>
            Remove a key from the set regardless of the number of references.
            </summary>
            <param name="key">to add</param>
            <returns>
            true if the key is removed, false if the key was not found
            </returns>
            <throws>IllegalStateException if a key is removed that wasn't added to the map</throws>
        </member>
        <member name="M:com.espertech.esper.collection.RefCountedSet`1.GetEnumerator">
            <summary> Returns an iterator over the entry set.</summary>
            <returns> entry set iterator
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.RefCountedSet`1.Clear">
            <summary>
            Clear out the collection.
            </summary>
        </member>
        <member name="P:com.espertech.esper.collection.RefCountedSet`1.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:com.espertech.esper.collection.RefCountedSet`1.Count">
            <summary> Returns the number of values in the collection.</summary>
            <returns> size
            </returns>
        </member>
        <member name="T:com.espertech.esper.collection.RollingEventBuffer">
            <summary>
            Event buffer of a given size provides a random access API into the most current event to prior events
            up to the given size. Oldest events roll out of the buffer first.
            <para>
            Backed by a fixed-size array that is filled forward, then rolls back to the beginning
            keeping track of the current position.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.RollingEventBuffer.#ctor(System.Int32)">
            <summary>Ctor.</summary>
            <param name="size">is the maximum number of events in buffer</param>
        </member>
        <member name="M:com.espertech.esper.collection.RollingEventBuffer.Add(com.espertech.esper.client.EventBean[])">
            <summary>Add events to the buffer.</summary>
            <param name="events">to add</param>
        </member>
        <member name="M:com.espertech.esper.collection.RollingEventBuffer.Add(com.espertech.esper.client.EventBean)">
            <summary>Add an event to the buffer.</summary>
            <param name="event">to add</param>
        </member>
        <member name="M:com.espertech.esper.collection.RollingEventBuffer.Get(System.Int32)">
            <summary>
            Get an event prior to the last event posted given a number of events before the last.
            <para>
            Thus index 0 returns the last event added, index 1 returns the prior to the last event added
            up to the maximum buffer size.
            </para>
            </summary>
            <param name="index">prior event index from zero to max size</param>
            <returns>prior event at given index</returns>
        </member>
        <member name="T:com.espertech.esper.collection.SortedDoubleVector">
            <summary>
            Sorted, reference-counting set based on a SortedDictionary implementation that stores keys and a
            reference counter for each unique key value. Each time the same key is added, the reference
            counter increases. Each time a key is removed, the reference counter decreases.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.SortedDoubleVector.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.SortedDoubleVector.#ctor(System.Collections.Generic.List{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.collection.SortedDoubleVector"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:com.espertech.esper.collection.SortedDoubleVector.Add(System.Double)">
            <summary> Add a value to the collection.</summary>
            <param name="val">is the double-type value to add
            </param>
        </member>
        <member name="M:com.espertech.esper.collection.SortedDoubleVector.Remove(System.Double)">
            <summary> Remove a value from the collection.</summary>
            <param name="val">to remove
            </param>
            <throws>  IllegalStateException if the value has not been added </throws>
        </member>
        <member name="M:com.espertech.esper.collection.SortedDoubleVector.Clear">
            <summary>
            Clear out the collection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.SortedDoubleVector.FindInsertIndex(System.Double)">
            <summary> Returns the index into which to insert to.
            Proptected access level for convenient testing.
            </summary>
            <param name="val">to find insert index
            </param>
            <returns> position to insert the value to, or -1 to indicate to add to the end.
            </returns>
        </member>
        <member name="P:com.espertech.esper.collection.SortedDoubleVector.Count">
            <summary> Returns the number of items in the collection.</summary>
            <returns> size
            </returns>
        </member>
        <member name="P:com.espertech.esper.collection.SortedDoubleVector.Item(System.Int32)">
            <summary> Returns the value at a given index.</summary>
            <param name="index">for which to return value for
            </param>
            <returns> value at index
            </returns>
        </member>
        <member name="P:com.espertech.esper.collection.SortedDoubleVector.Values">
            <summary>
            Returns underlying vector, for testing purposes only.
            </summary>
            <returns>vector with double values</returns>
        </member>
        <member name="T:com.espertech.esper.collection.SortedRefCountedSet`1">
            <summary>
            Sorted, reference-counting set based on a SortedDictionary implementation that stores keys and a reference counter for
            each unique key value. Each time the same key is added, the reference counter increases.
            Each time a key is removed, the reference counter decreases.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.SortedRefCountedSet`1.#ctor">
            <summary>
             Constructor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.SortedRefCountedSet`1.Add(`0)">
            <summary> Add a key to the set. Add with a reference count of one if the key didn't exist in the set.
            Increase the reference count by one if the key already exists.
            </summary>
            <param name="key">to add
            </param>
        </member>
        <member name="M:com.espertech.esper.collection.SortedRefCountedSet`1.Add(`0,System.Int32)">
            <summary>
            Add a key to the set with the given number of references.
            </summary>
            <param name="key">The key.</param>
            <param name="numReferences">The num references.</param>
        </member>
        <member name="M:com.espertech.esper.collection.SortedRefCountedSet`1.Clear">
            <summary>
            Clear out the collection.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.SortedRefCountedSet`1.Remove(`0)">
            <summary> Remove a key from the set. Removes the key if the reference count is one.
            Decreases the reference count by one if the reference count is more then one.
            </summary>
            <param name="key">to add
            </param>
            <throws>  IllegalStateException is a key is removed that wasn't added to the map </throws>
        </member>
        <member name="P:com.espertech.esper.collection.SortedRefCountedSet`1.CountPoints">
            <summary>
            Gets the number of data points.
            </summary>
        </member>
        <member name="P:com.espertech.esper.collection.SortedRefCountedSet`1.RefSet">
            <summary>
            Gets the ref set.
            </summary>
            <value>The ref set.</value>
        </member>
        <member name="P:com.espertech.esper.collection.SortedRefCountedSet`1.MaxValue">
            <summary> Returns the largest key value, or null if the collection is empty.</summary>
            <returns> largest key value, null if none
            </returns>
        </member>
        <member name="P:com.espertech.esper.collection.SortedRefCountedSet`1.MinValue">
            <summary> Returns the smallest key value, or null if the collection is empty.</summary>
            <returns> smallest key value, default(K) if none
            </returns>
        </member>
        <member name="T:com.espertech.esper.collection.ThreadWorkQueue">
            <summary>
            Simple queue implementation based on a Linked List per thread.
            Objects can be added to the queue tail or queue head.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.ThreadWorkQueue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.collection.ThreadWorkQueue"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.ThreadWorkQueue.AddBack(System.Object)">
            <summary>Adds event to the end of the event queue.</summary>
            <param name="ev">event to add</param>
        </member>
        <member name="M:com.espertech.esper.collection.ThreadWorkQueue.AddFront(System.Object)">
            <summary>Adds event to the front of the queue.</summary>
            <param name="ev">event to add</param>
        </member>
        <member name="P:com.espertech.esper.collection.ThreadWorkQueue.ThreadQueue">
            <summary>
            Gets the thread queue.
            </summary>
            <value>The thread queue.</value>
        </member>
        <member name="T:com.espertech.esper.collection.TimeWindow">
            <summary>
            <para>
            Container for events per time slot. The time is provided as long milliseconds by client classes.
            Events are for a specified timestamp and the implementation creates and adds the event to a slot for that timestamp.
            Events can be expired from the window via the expireEvents method when their timestamp is before
            (or less then) an expiry timestamp passed in. Expiry removes the event from the window.
            The window allows iteration through its contents.
            </para>
            <para>
            It is assumed that the timestamp passed to the add method is ascending. The window is backed by a
            collection reflecting the timestamp order rather then any sorted map or linked hash map for
            performance reasons.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.TimeWindow.#ctor(System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="isSupportRemoveStream">
            true to indicate the time window should support effective removal of events
            in the window based on the remove stream events received, or false to not 
            accomodate removal at all
            </param>
        </member>
        <member name="M:com.espertech.esper.collection.TimeWindow.Adjust(System.Int64)">
            <summary>Adjust expiry dates.  </summary>
            <param name="delta">delta to adjust for</param>
        </member>
        <member name="M:com.espertech.esper.collection.TimeWindow.Add(System.Int64,com.espertech.esper.client.EventBean)">
            <summary>Adds event to the time window for the specified timestamp.  </summary>
            <param name="timestamp">the time slot for the event</param>
            <param name="bean">event to add</param>
        </member>
        <member name="M:com.espertech.esper.collection.TimeWindow.Remove(com.espertech.esper.client.EventBean)">
            <summary>Removes the event from the window, if remove stream handling is enabled.  </summary>
            <param name="theEvent">to remove</param>
        </member>
        <member name="M:com.espertech.esper.collection.TimeWindow.ExpireEvents(System.Int64)">
            <summary>
            Return and remove events in time-slots earlier (less) then the timestamp passed in, returning the list of events expired.
            </summary>
            <param name="expireBefore">is the timestamp from which on to keep events in the window</param>
            <returns>
            a list of events expired and removed from the window, or null if none expired
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.TimeWindow.GetEnumerator">
            <summary>
            Returns event iterator.
            </summary>
            <returns>iterator over events currently in window</returns>
        </member>
        <member name="M:com.espertech.esper.collection.TimeWindow.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.TimeWindow.IsEmpty">
            <summary>
            Returns true if the window is currently empty.
            </summary>
            <returns>true if empty, false if not</returns>
        </member>
        <member name="P:com.espertech.esper.collection.TimeWindow.OldestTimestamp">
            <summary>
            Returns the oldest timestamp in the collection if there is at least one entry, else it returns null if the window is empty.
            </summary>
            <value>
            	null if empty, oldest timestamp if not empty
            </value>
        </member>
        <member name="P:com.espertech.esper.collection.TimeWindow.ReverseIndex">
            <summary>Returns the reverse index, for testing purposes.  </summary>
            <value>reverse index</value>
        </member>
        <member name="T:com.espertech.esper.collection.TimeWindowEnumerator">
            <summary>
            Iterator for <see cref="T:com.espertech.esper.collection.TimeWindow"/> to iterate over a timestamp slots that hold events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.TimeWindowEnumerator.#ctor(System.Collections.Generic.IEnumerable{com.espertech.esper.collection.TimeWindowPair})">
            <summary>
            Ctor.
            </summary>
            <param name="window">is the time-slotted collection</param>
        </member>
        <member name="T:com.espertech.esper.collection.TransformEventMethod">
            <summary>Transform event returning the transformed event.</summary>
            <param name="_event">event to transform</param>
            <returns>transformed event</returns>
        </member>
        <member name="T:com.espertech.esper.collection.TransformEventUtil">
            <summary>
            Utility for reading and transforming a source event iterator.
            Works with a <see cref="T:com.espertech.esper.collection.TransformEventMethod"/> as the transformation method.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.TransformEventUtil.TransformEnumerator(System.Collections.Generic.IEnumerator{com.espertech.esper.client.EventBean},com.espertech.esper.collection.TransformEventMethod)">
            <summary>
            Transforms the enumerator using the transform method supplied.
            </summary>
            <param name="sourceEnum">The source enum.</param>
            <param name="transformEventMethod">The transform event method.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.collection.UniformPair`1">
            <summary> General-purpose pair of values of any type. The pair only equals another pair if
            the objects that form the pair equal, ie. first pair first object equals (.equals) the second pair first object,
            and the first pair second object equals the second pair second object.
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.UniformPair`1.#ctor(`0,`0)">
            <summary>
            Construct pair of values.
            </summary>
            <param name="first">is the first value</param>
            <param name="second">is the second value</param>
        </member>
        <member name="M:com.espertech.esper.collection.UniformPair`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.UniformPair`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.collection.UniformPair`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.collection.UniformPair`1.First">
            <summary>
            Gets or sets the first value within pair.
            </summary>
            <value>The first.</value>
        </member>
        <member name="P:com.espertech.esper.collection.UniformPair`1.Second">
            <summary>
            Gets or sets the second value within pair.
            </summary>
            <value>The second.</value>
        </member>
        <member name="T:com.espertech.esper.collection.ViewUpdatedCollection">
            <summary>
            A general-purpose collection interface for collections updated by view data.
            <para>
            Views post delta-data in terms of new data (insert stream) events and old data (remove stream) event that
            leave a window.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.collection.ViewUpdatedCollection.Update(com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean[])">
            <summary>
            Accepts view insert and remove stream.
            </summary>
            <param name="newData">is the insert stream events or null if no data</param>
            <param name="oldData">is the remove stream events or null if no data</param>
        </member>
        <member name="T:com.espertech.esper.compat.ArrayHelper">
            <summary>
            Helper class that assists with operations on arrays.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.ArrayHelper.AreEqual(System.Array,System.Array)">
            <summary>
            Compares two arrays for equality
            </summary>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.compat.threading.BaseLock">
            <summary>
            Base class for disposable lock pattern.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.BaseLock.ACQUIRE_TEXT">
            <summary>Acquire text.</summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.BaseLock.ACQUIRED_TEXT">
            <summary>Acquired text.</summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.BaseLock.RELEASE_TEXT">
            <summary>Release text.</summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.BaseLock.RELEASED_TEXT">
            <summary>Released text.</summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.BaseLock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.collections.Collections">
            <summary>
            Provides additional functions that are useful when operating on
            collections.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.Collections.List``1(``0[])">
            <summary>
            Instas the list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.Collections.SingletonList``1(``0)">
            <summary>
            Creates a singleton list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.Collections.GetEmptyMap``2">
            <summary>
            Returns an empty IDictionary for type K,V
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.Collections.GetEmptyList``1">
            <summary>
            Returns an empty IList for type T.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.Collections.GetEmptySet``1">
            <summary>
            Returns an empty collection for type T.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.Collections.AreEqual``1(``0[],``0[])">
            <summary>
            Compares two collections of objects.  The objects must share the same generic
            parameter, but can be of different collections.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="baseObj"></param>
            <param name="compObj"></param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.Collections.AreEqual``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Compares two collections of objects.  The objects must share the same generic
            parameter, but can be of different collections.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="baseObj"></param>
            <param name="compObj"></param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.Collections.AreEqual``1(System.Collections.Generic.IEnumerator{``0},System.Collections.Generic.IEnumerator{``0})">
            <summary>
            Compares two collections of objects.  The objects must share the same generic
            parameter, but can be of different collections.
            </summary>
            <param name="baseEnum">The base enumerator.</param>
            <param name="compEnum">The comp enumerator.</param>
            <returns></returns>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.compat.collections.Collections.ToArray``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Converts all of the items in source to an array.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.Collections.Next``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
            Advances the enumerator and returns the next item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumObj"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.Collections.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Shuffles the list.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.Collections.Shuffle``1(System.Collections.Generic.IList{``0},System.Random)">
            <summary>
            Shuffles the list.  User supplies the randomizer.
            </summary>
            <param name="list"></param>
            <param name="random"></param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.Collections.Shuffle``1(System.Collections.Generic.IList{``0},System.Int32,System.Random)">
            <summary>
            Shuffles the list.  User supplies the randomizer.  Performs
            at least iteration swaps.
            </summary>
            <param name="list"></param>
            <param name="iterations"></param>
            <param name="random"></param>
        </member>
        <member name="T:com.espertech.esper.compat.CollectionPlus`1">
            <summary>
            Collection that wraps another collection + an item
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionPlus`1.#ctor(System.Collections.Generic.ICollection{`0},`0)">
            <summary>
            Constructs a new collection plus an item
            </summary>
            <param name="baseCollection"></param>
            <param name="item"></param>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionPlus`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionPlus`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionPlus`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
            
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionPlus`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionPlus`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionPlus`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:com.espertech.esper.compat.CollectionPlus`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:com.espertech.esper.compat.CollectionPlus`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            
        </member>
        <member name="P:com.espertech.esper.compat.CollectionPlus`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.
            </returns>
            
        </member>
        <member name="M:com.espertech.esper.compat.collections.CopyOnWriteList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.CopyOnWriteList`1"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CopyOnWriteList`1.ToArray">
            <summary>
            Converts the list to an array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CopyOnWriteList`1.ForEach(System.Action{`0})">
            <summary>
            Iterates over each item in the list executing the specified
            action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CopyOnWriteList`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CopyOnWriteList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the range.
            </summary>
            <param name="itemList">The item list.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CopyOnWriteList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CopyOnWriteList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CopyOnWriteList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CopyOnWriteList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CopyOnWriteList`1.RemoveAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CopyOnWriteList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CopyOnWriteList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CopyOnWriteList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"></see>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CopyOnWriteList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.CopyOnWriteList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="P:com.espertech.esper.compat.collections.CopyOnWriteList`1.WriteLock">
            <summary>
            Gets the write lock.
            </summary>
            <value>The write lock.</value>
        </member>
        <member name="P:com.espertech.esper.compat.collections.CopyOnWriteList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.CopyOnWriteList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.CopyOnWriteList`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:com.espertech.esper.compat.CopyOnWriteArraySet`1.AddAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds all of the items in the source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:com.espertech.esper.compat.CopyOnWriteArraySet`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="P:com.espertech.esper.compat.CopyOnWriteArraySet`1.First">
            <summary>
            Returns the first item in the set
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.CopyOnWriteArraySet`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:com.espertech.esper.compat.DateTimeHelper">
            <summary>
            Assistant class to help with conversions between Java-style and
            granularity dates and CLR-style DateTime.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.DateTimeHelper.TICKS_PER_MILLI">
            <summary>
            Number of ticks per millisecond
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.DateTimeHelper.NANOS_PER_TICK">
            <summary>
            Number of nanoseconds per tick
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.DateTimeHelper.TicksToMillis(System.Int64)">
            <summary>
            Converts ticks to milliseconds
            </summary>
            <param name="ticks"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.DateTimeHelper.TicksToNanos(System.Int64)">
            <summary>
            Converts ticks to nanoseconds
            </summary>
            <param name="ticks"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.DateTimeHelper.MillisToTicks(System.Int64)">
            <summary>
            Converts milliseconds to ticks
            </summary>
            <param name="millis"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.DateTimeHelper.NanosToTicks(System.Int64)">
            <summary>
            Nanoses to ticks.
            </summary>
            <param name="nanos">The nanos.</param>
        </member>
        <member name="M:com.espertech.esper.compat.DateTimeHelper.MillisToDateTime(System.Int64)">
            <summary>
            Converts milliseconds to DateTime 
            </summary>
            <param name="millis">The millis.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.DateTimeHelper.TimeInNanos(System.DateTime)">
            <summary>
            Gets the number of nanoseconds needed to represent
            the datetime.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.DateTimeHelper.InNanos(System.DateTime)">
            <summary>
            Gets the number of nanoseconds.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.DateTimeHelper.TimeInMillis(System.DateTime)">
            <summary>
            Gets the number of milliseconds needed to represent
            the datetime.  This is needed to convert from Java
            datetime granularity (milliseconds) to CLR datetimes.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.DateTimeHelper.InMillis(System.DateTime)">
            <summary>
            Gets the number of milliseconds needed to represent
            the datetime.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.DateTimeHelper.TimeFromMillis(System.Int64)">
            <summary>
            Gets the datetime that matches the number of milliseconds provided.
            As with TimeInMillis, this is needed to convert from Java datetime
            granularity to CLR granularity.
            </summary>
            <param name="millis"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.DateTimeHelper.GetCurrentTimeMillis">
            <summary>
            Returns the current time in millis
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.DateTimeHelper.MillisToJavaMillis(System.Int64)">
            <summary>
            Converts millis in CLR to millis in Java
            </summary>
            <param name="millis"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.DateTimeHelper.JavaMillisToMillis(System.Int64)">
            <summary>
            Converts milliseconds in Java to milliseconds in CLR
            </summary>
            <param name="javaMillis"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.DateTimeHelper.MoveToDayOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Returns a datetime for the week given on the specified day of the week.
            </summary>
            <param name="from">From.</param>
            <param name="dayOfWeek">The day of week.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.DateTimeHelper.EndOfMonth(System.DateTime)">
            <summary>
            Returns a datetime for the end of the month.
            </summary>
            <param name="from">From.</param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.DateTimeHelper.CurrentTimeMillis">
            <summary>
            Returns the current time in millis
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.DateTimeHelper.CurrentTimeNanos">
            <summary>
            Gets the current time in nanoseconds.
            </summary>
            <value>The current time nanos.</value>
        </member>
        <member name="T:com.espertech.esper.compat.DebugList`1">
            <summary>
            Used to debug calls to a list.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.compat.DebugList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"></see>.
            </summary>
            
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
            
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
        </member>
        <member name="M:com.espertech.esper.compat.DebugList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"></see> at the specified index.
            </summary>
            
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.DebugList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.DebugList`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.DebugList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:com.espertech.esper.compat.DebugList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
            
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
        </member>
        <member name="M:com.espertech.esper.compat.DebugList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.DebugList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.DebugList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:com.espertech.esper.compat.DebugList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.compat.DebugList`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.DebugList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.DebugList`1"/> class.
            </summary>
            <param name="subList">The sub list.</param>
        </member>
        <member name="P:com.espertech.esper.compat.DebugList`1.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:com.espertech.esper.compat.DebugList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            
            <returns>
            The element at the specified index.
            </returns>
            
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
        </member>
        <member name="P:com.espertech.esper.compat.DebugList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            
        </member>
        <member name="P:com.espertech.esper.compat.DebugList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.
            </returns>
            
        </member>
        <member name="T:com.espertech.esper.compat.collections.BaseMap`2">
            <summary>
            Base for dictionaries that contain extended functionality.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
        </member>
        <member name="F:com.espertech.esper.compat.collections.BaseMap`2._nullEntry">
            <summary>
            Entry for handling null keys.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.BaseMap`2.#ctor">
            <summary>
            Allows subclasses to bind the subdictionary later in their
            initialization process.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.BaseMap`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Constructs a new dictionary
            </summary>
            <param name="subDictionary"></param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.BaseMap`2.Get(`0,`1)">
            <summary>
            Fetches the value associated with the specified key.
            If no value can be found, then the defaultValue is
            returned.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.BaseMap`2.Get(`0)">
            <summary>
            Fetches the value associated with the specified key.
            If no value can be found, then default(V) is returned.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.BaseMap`2.Remove(`0,`1@)">
            <summary>
            Removes the item from the dictionary that is associated with
            the specified key.  Returns the value that was found at that
            location and removed or the defaultValue.
            </summary>
            <param name="key">Search key into the dictionary</param>
            <param name="value">The value removed from the dictionary (if found).</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.BaseMap`2.RemoveAndReturn(`0)">
            <summary>
            Removes the item from the dictionary that is associated with
            the specified key.  The item if found is returned; if not,
            default(V) is returned.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.BaseMap`2.Put(`0,`1)">
            <summary>
            Sets the given key in the dictionary.  If the key
            already exists, then it is remapped to thenew value.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.BaseMap`2.Push(`0,`1)">
            <summary>
            Sets the given key in the dictionary.  If the key
            already exists, then it is remapped to the new value.
            If a value was previously mapped it is returned.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.BaseMap`2.PutAll(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Puts all values from the source dictionary into
            this dictionary.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.BaseMap`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.BaseMap`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.BaseMap`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if key was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.BaseMap`2.TryGetValue(`0,`1@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.BaseMap`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.BaseMap`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.BaseMap`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.BaseMap`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.BaseMap`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.BaseMap`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.BaseMap`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.BaseMap`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.BaseMap`2.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.BaseMap`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.BaseMap`2.AsEDictionary(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Creates an Map from the IDictionary.
            </summary>
            <param name="sourceDictionary"></param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.BaseMap`2.SubDictionary">
            <summary>
            Gets or sets the subdictionary.
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.collections.BaseMap`2.FirstValue">
            <summary>
            Returns the first value in the enumeration of values
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.BaseMap`2.Item(`0)">
            <summary>
            Gets or sets the item with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.compat.collections.BaseMap`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.BaseMap`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.BaseMap`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.BaseMap`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:com.espertech.esper.compat.collections.EnumerationHelper`1">
            <summary>
            Collection of utilities specifically to help with enumeration.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.compat.collections.EnumerationHelper`1.CreateEmptyEnumerator">
            <summary>
            Creates the empty enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.EnumerationHelper`1.CreateSingletonEnumerator(`0)">
            <summary>
            Creates the singleton enumerator.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.EnumerationHelper`1.AdvanceEnumerable(System.Collections.Generic.IEnumerator{`0},System.Int32)">
            <summary>
            Creates an enumerator that skips a number of items in the
            subEnumerator.
            </summary>
            <param name="subEnumerator">The child enumerator.</param>
            <param name="numToAdvance">The num to advance.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.compat.FlowTracer">
            <summary>
            Can be used to trace flow through a process.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.FlowTracer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.FlowTracer"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.FlowTracer.#ctor(com.espertech.esper.compat.logging.ILog)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.FlowTracer"/> class.
            </summary>
            <param name="log">The log.</param>
        </member>
        <member name="M:com.espertech.esper.compat.FlowTracer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.FlowTracer"/> class.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:com.espertech.esper.compat.FlowTracer.#ctor(com.espertech.esper.compat.logging.ILog,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.FlowTracer"/> class.
            </summary>
            <param name="log">The log.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:com.espertech.esper.compat.FlowTracer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.collections.HashMap`2">
            <summary>
            An extended dictionary based upon a closed hashing
            algorithm.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
        </member>
        <member name="M:com.espertech.esper.compat.collections.HashMap`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.HashMap`2"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.HashMap`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.HashMap`2"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.HashMap`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.HashMap`2"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.HashMap`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.HashMap`2"/> class.
            </summary>
            <param name="subDictionary">The sub dictionary.</param>
        </member>
        <member name="T:com.espertech.esper.compat.threading.MonitorLock">
            <summary>
            MonitorLock is a class for assisting people with synchronized operations.
            Traditionally, code might have looked something like this:
            <code>
            lock( object ) { 
              ...
            }
            </code>
            However, this has a few issues.  It's prone to deadlock because the lock
            operator does not have a timeout.  It's also difficult to determine who
            owns a lock at a given time.  So eventually people changed to this form:
            <code>
            if (Monitor.TryEnter(object, timeout)) {
              try {
               ...
              } finally {
                Monitor.Exit(object);
              }
            }
            </code>
            It gets bulky and begins to become difficult to maintain over time.
            MonitorLock works much like the lock( object ) model except that it relies
            upon the IDisposable interface to help with scoping of the lock.  So to
            use MonitorLock, first instantiate one and then replace your lock(object)
            with this:
            <code>
            using(lockObj.Acquire()) {
              ...
            }
            </code>
            Your code will work as before except that the monitorLock will use a timed
            entry into critical sections and it can be used to diagnose issues that
            may be occuring in your thread locking.
            <para>
            MonitorLock allows users to specify events that can be consumed on lock
            acquisition or release.  Additionally, it can inform you when a lock
            is acquired within an existing lock.  And last, if you want to know where
            your locks are being acquired, it can maintain a StackTrace of points
            where allocations are occuring.
            </para>
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.MonitorLock._uLockId">
            <summary>
            Uniquely identifies the lock.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.MonitorLock._uLockObj">
            <summary>
            Underlying object that is locked
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.MonitorLock._uLockTimeout">
            <summary>
            Number of milliseconds until the lock acquisition fails
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.MonitorLock._uLockOwner">
            <summary>
            Owner of the lock.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.MonitorLock._uLockDepth">
            <summary>
            Used to track recursive locks.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.MonitorLock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.threading.MonitorLock"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.MonitorLock.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.threading.MonitorLock"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.MonitorLock.Acquire">
            <summary>
            Acquires a lock against this instance.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.MonitorLock.InternalAcquire">
            <summary>
            Internally acquires the lock.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.MonitorLock.InternalRelease">
            <summary>
            Internally releases the lock.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.MonitorLock.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.threading.MonitorLock.LockTimeout">
            <summary>
            Gets the number of milliseconds until the lock acquisition fails.
            </summary>
            <value>The lock timeout.</value>
        </member>
        <member name="P:com.espertech.esper.compat.threading.MonitorLock.LockDepth">
            <summary>
            Gets the lock depth.
            </summary>
            <value>The lock depth.</value>
        </member>
        <member name="P:com.espertech.esper.compat.threading.MonitorLock.IsHeldByCurrentThread">
            <summary>
            Gets a value indicating whether this instance is held by current thread.
            </summary>
            <value>
            	<c>true</c> if this instance is held by current thread; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:com.espertech.esper.compat.EventCoordinator">
            <summary>
            Use this to coordinate an event that has multiple participants.
            To use it, have each participant increment the coordinator during
            their initialization and have each participant signal the coordinator
            when they are ready.  An application that is pending coordination
            should call the WaitAll() method to wait for all participants.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.EventCoordinator.Signal">
            <summary>
            Signals this instance.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.EventCoordinator.Increment">
            <summary>
            Increments the counter.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.EventCoordinator.WaitAll">
            <summary>
            Waits all.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.NullEnumerator`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.compat.collections.NullEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.compat.collections.NullEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:com.espertech.esper.compat.collections.NullEnumerator`1.System#Collections#Generic#IEnumerator{T}#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
            
        </member>
        <member name="P:com.espertech.esper.compat.collections.NullEnumerator`1.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            
            <returns>
            The current element in the collection.
            </returns>
            
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="T:com.espertech.esper.compat.ObjectFactory`1">
            <summary>
            Parses an object from an input.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.compat.ScopedInstance`1">
            <summary>
            Provides a generic item that can be scoped statically as a singleton; avoids the
            need to define a threadstatic variable.  Also provides a consistent model for
            providing this service.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.compat.ScopedInstance`1.Set(`0)">
            <summary>
            Sets the specified instance.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.ScopedInstance`1.Current">
            <summary>
            Gets the current instance value.
            </summary>
            <value>The current.</value>
        </member>
        <member name="T:com.espertech.esper.compat.ScopedInstance`1.DisposableScope">
            <summary>
            Disposable scope
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.ScopedInstance`1.DisposableScope.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.ScopedInstance`1.DisposableScope"/> class.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:com.espertech.esper.compat.ScopedInstance`1.DisposableScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.threading.SlimLock">
            <summary>
            Implements a simple spinLock algorithm.  The spinLock will attempt
            to exchange a value atomically.  If the exchange can not be done then
            the spinLock will enter a loop for a maximum amount of time as
            specified.  In the loop it will use a spinWait to allow the CPU to
            idle for a few cycles in an attempt to wait for the resource to be
            freed up.  If after a number of attempts the resource has not been
            freed, the spinLock will give up its quanta using a sleep.  The sleep
            will force the thread to yield and if all goes well releases the thread
            (which may be on the same processor) to release the critical resource.
            There's no reason to use this as a general purpose lock, monitors do
            just fine.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.SlimLock.Enter(System.Int32)">
            <summary>
            Acquires the lock.  If the lock can be acquired immediately
            it does so.  In the event that the lock can not be acquired
            the lock will use a spin-lock algorithm to acquire the lock.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.SlimLock.Enter">
            <summary>
            Acquires the lock.  If the lock can be acquired immediately
            it does so.  In the event that the lock can not be acquired
            the lock will use a spin-lock algorithm to acquire the lock.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.threading.SlimLock.EnterMyLockSpin(System.Threading.Thread,System.Int32)">
            <summary>
            Enters the lock spin with a timeout.  Returns true if the
            lock was acquired within the time allotted.
            </summary>
            <param name="thread">The thread.</param>
            <param name="timeoutInMillis">The timeout in millis.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.threading.SlimLock.Release">
            <summary>
            Releases the lock, allowing waiters to proceed.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.SynchronizedSet`1.m_facade">
            <summary>
            Underlying set.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.SynchronizedSet`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.SynchronizedSet`1"/> class.
            </summary>
            <param name="facade">The facade.</param>
        </member>
        <member name="M:com.espertech.esper.compat.SynchronizedSet`1.ToArray">
            <summary>
            Converts the set to an array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.SynchronizedSet`1.AddAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds all of the items in the source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:com.espertech.esper.compat.SynchronizedSet`1.RemoveAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:com.espertech.esper.compat.SynchronizedSet`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.SynchronizedSet`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:com.espertech.esper.compat.SynchronizedSet`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
            
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
        </member>
        <member name="M:com.espertech.esper.compat.SynchronizedSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.SynchronizedSet`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.SynchronizedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:com.espertech.esper.compat.SynchronizedSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:com.espertech.esper.compat.SynchronizedSet`1.First">
            <summary>
            Returns the first item in the set
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.SynchronizedSet`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:com.espertech.esper.compat.SynchronizedSet`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            
        </member>
        <member name="P:com.espertech.esper.compat.SynchronizedSet`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.
            </returns>
            
        </member>
        <member name="T:com.espertech.esper.compat.collections.TreeSet`1">
            <summary>
            An extended set that uses a tree-based backing store.
            As such, the set is always sorted.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.compat.collections.TreeSet`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.TreeSet`1"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.TreeSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.TreeSet`1"/> class.
            </summary>
            <param name="sourceData">The source data.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.TreeSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.TreeSet`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.TreeSet`1.#ctor(System.Func{`0,`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.TreeSet`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.TreeSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.TreeSet`1"/> class.
            </summary>
            <param name="sourceData">The source data.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.TreeSet`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.TreeSet`1.RemoveAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.TreeSet`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.TreeSet`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.compat.HighResolutionTimer">
            <summary>
            Windows timers are based on the system timer.  The system timer runs at a
            frequency of about 50-60 hz depending on your machine.  This presents a 
            problem for applications that require finer granularity.  The HighRes timer
            allows us to get better granularity, but currently it only works on Windows.
            
            Thanks to Luc Pattyn for clarifying some of the issues with high resolution
            timers with the post on CodeProject.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.ITimer">
            <summary>
            An object that represents a timer.  Timers must be
            disposable.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.HighResolutionTimer.TIME_CALLBACK_FUNCTION">
            <summary>
            Callback is a function
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.HighResolutionTimer.TIME_CALLBACK_EVENT_SET">
            <summary>
            Callback is an event -- use SetEvent
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.HighResolutionTimer.TIME_CALLBACK_EVENT_PULSE">
            <summary>
            Callback is an event -- use PulseEvent
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.HighResolutionTimer.TIME_KILL_SYNCHRONOUS">
            <summary>
            This flag prevents the event from occurring after the user calls timeKillEvent() to
            destroy it.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.HighResolutionTimer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.HighResolutionTimer"/> class.
            </summary>
            <param name="timerCallback">The timer callback.</param>
            <param name="state">The state.</param>
            <param name="dueTime">The due time.</param>
            <param name="period">The period.</param>
        </member>
        <member name="M:com.espertech.esper.compat.HighResolutionTimer.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.HighResolutionTimer.OnTimerEvent(System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Called when timer event occurs.
            </summary>
            <param name="id">The id.</param>
            <param name="msg">The MSG.</param>
            <param name="userCtx">The user CTX.</param>
            <param name="rsv1">The RSV1.</param>
            <param name="rsv2">The RSV2.</param>
        </member>
        <member name="M:com.espertech.esper.compat.HighResolutionTimer.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.HighResolutionTimer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.HighResolutionTimer.m_appDomain">
            <summary>
            Reference to the appDomain for this instance
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.HighResolutionTimer.OnAppDomainUnload(System.Object,System.EventArgs)">
            <summary>
            Called when an AppDomain is unloaded.  Our goal here is to ensure that
            all timers created by this class under the banner of this AppDomain
            are cleaned up prior to the AppDomain unloading.  Failure to do so will
            cause applications to crash due to exceptions outside of the AppDomain.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:com.espertech.esper.compat.HighResolutionTimer.TimerEventHandler">
            <summary>
            Delegate that is called by the windows multimedia timer upon trigger
            of the timer.
            </summary>
            <param name="id"></param>
            <param name="msg"></param>
            <param name="userCtx"></param>
            <param name="rsv1"></param>
            <param name="rsv2"></param>
        </member>
        <member name="T:com.espertech.esper.compat.HighResolutionTimerFactory">
            <summary>
            Implementation of the TimerFactory that uses the HighResolutionTimer.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.ITimerFactory">
            <summary>
            Factory object that creates timers.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.ITimerFactory.CreateTimer(System.Threading.TimerCallback,System.Int64)">
            <summary>
            Creates a timer.  The timer will begin after dueTime (in milliseconds)
            has passed and will occur at an interval specified by the period.
            </summary>
            <param name="timerCallback"></param>
            <param name="period"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.HighResolutionTimerFactory.CreateTimer(System.Threading.TimerCallback,System.Int64)">
            <summary>
            Creates a timer.  The timer will begin after dueTime (in milliseconds)
            has passed and will occur at an interval specified by the period.
            </summary>
            <param name="timerCallback"></param>
            <param name="period"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.compat.collections.IdentityDictionary`2">
            <summary>
            An extended dictionary based upon a closed hashing
            algorithm.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
        </member>
        <member name="M:com.espertech.esper.compat.collections.IdentityDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.IdentityDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.IdentityDictionary`2.EqualityComparer.Equals(`0,`0)">
            <summary>
            Returns true if the two objects are equal.  In the case of the
            identity dictionary, equality is true only if the objects are
            the same reference.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.IdentityDictionary`2.EqualityComparer.GetHashCode(`0)">
            <summary>
            Returns a hashcode for the object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.compat.IllegalStateException">
            <summary>
            An exception that occurs when some illegal state occurs.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.IllegalStateException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.IllegalStateException"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.IllegalStateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.IllegalStateException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:com.espertech.esper.compat.IllegalStateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.IllegalStateException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="e">The underlying exception.</param>
        </member>
        <member name="T:com.espertech.esper.compat.collections.LinkedHashMap`2">
            <summary>
            Hashtable and linked list implementation designed to mimic Java's LinkedHashMap
            functionality.
            </summary>
            <typeparam name="TK"></typeparam>
            <typeparam name="TV"></typeparam>
        </member>
        <member name="F:com.espertech.esper.compat.collections.LinkedHashMap`2._hashList">
            <summary>
            A list of all key-value pairs added to the table.  The list
            preserves insertion order and is used to preserve enumeration
            ordering.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.collections.LinkedHashMap`2._hashTable">
            <summary>
            Contains a reference to the key and is used for all lookups.  Refers
            to the node in the linked list node.  Provides for fast removal of
            the node upon removal.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.collections.LinkedHashMap`2._shuffleOnAccess">
            <summary>
            Shuffles items on access
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashMap`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.LinkedHashMap`2"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashMap`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.LinkedHashMap`2"/> class.
            </summary>
            <param name="sourceTable"></param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashMap`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashMap`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"></see>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashMap`2.Get(`0,`1)">
            <summary>
            Fetches the value associated with the specified key.
            If no value can be found, then the defaultValue is
            returned.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashMap`2.Get(`0)">
            <summary>
            Fetches the value associated with the specified key.
            If no value can be found, then default(V) is returned.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashMap`2.Put(`0,`1)">
            <summary>
            Sets the given key in the dictionary.  If the key
            already exists, then it is remapped to thenew value.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashMap`2.Push(`0,`1)">
            <summary>
            Sets the given key in the dictionary.  If the key
            already exists, then it is remapped to the new value.
            If a value was previously mapped it is returned.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashMap`2.PutAll(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Puts all values from the source dictionary into
            this dictionary.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashMap`2.Remove(`0,`1@)">
            <summary>
            Removes the item from the dictionary that is associated with
            the specified key.  Returns the value that was found at that
            location and removed or the defaultValue.
            </summary>
            <param name="key">Search key into the dictionary</param>
            <param name="value">The value removed from the dictionary (if found).</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashMap`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashMap`2.CheckEldest">
            <summary>
            Checks the eldest entry and see if we should remove it.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashMap`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashMap`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if key was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashMap`2.RemoveAndReturn(`0)">
            <summary>
            Removes the item from the dictionary that is associated with
            the specified key.  The item if found is returned; if not,
            default(V) is returned.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashMap`2.TryGetValue(`0,`1@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashMap`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashMap`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashMap`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashMap`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            The table to the target array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashMap`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashMap`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashMap`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.LinkedHashMap`2.ShuffleOnAccess">
            <summary>
            Returns a value indicating if items should be shuffled (pushed to the
            head of the list) on access requests.
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.collections.LinkedHashMap`2.FirstValue">
            <summary>
            Returns the first value in the enumeration of values
            </summary>
            <returns></returns>
        </member>
        <member name="E:com.espertech.esper.compat.collections.LinkedHashMap`2.RemoveEldest">
            <summary>
            Occurs when a potentially destructive operations occurs on the dictionary
            and the dictionary is allowed to rebalance.
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.collections.LinkedHashMap`2.FastKeyEnumerator">
            <summary>
            Gets the key enumerator in a faster and more efficient manner.
            </summary>
            <value>The fast key enumerator.</value>
        </member>
        <member name="P:com.espertech.esper.compat.collections.LinkedHashMap`2.FastKeyArray">
            <summary>
            Gets the keys in a faster and more efficient manner.
            </summary>
            <value>The fast key array.</value>
        </member>
        <member name="P:com.espertech.esper.compat.collections.LinkedHashMap`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.LinkedHashMap`2.FastKeys">
            <summary>
            Gets a faster lighter enumeration of keys.
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.collections.LinkedHashMap`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.LinkedHashMap`2.Item(`0)">
            <summary>
            Gets or sets the value the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.compat.collections.LinkedHashMap`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.LinkedHashMap`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:com.espertech.esper.compat.collections.LinkedHashMap`2.EntryEventHandler">
            <summary>
            Delegate for handling events on dictionary entries.
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.compat.collections.LinkedHashSet`1">
            <summary>
            Description of LinkedHashSet.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.collections.LinkedHashSet`1._entryListHead">
            <summary>
            A list of all key-value pairs added to the table.  The list
            preserves insertion order and is used to preserve enumeration
            ordering.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.collections.LinkedHashSet`1._indexTable">
            <summary>
            Contains a reference to the key and is used for all lookups.  Refers
            to the node in the linked list node.  Provides for fast removal of
            the node upon removal.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashSet`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.LinkedHashSet`1"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.collections.LinkedHashSet`1"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"></see>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashSet`1.AddRange(System.Collections.Generic.ICollection{`0})">
            <summary>
            Add all values from the source
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashSet`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashSet`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashSet`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.collections.LinkedHashSet`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="P:com.espertech.esper.compat.collections.LinkedHashSet`1.IsEmpty">
            <summary>
            Returns true if the window is empty, or false if not empty.
            </summary>
            <returns>true if empty</returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.LinkedHashSet`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.collections.LinkedHashSet`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:com.espertech.esper.compat.threading.LockConstants">
            <summary>
            Constants we keep for our locking algorithms.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.threading.LockConstants.WriterTimeout">
            <summary>
            Number of milliseconds until write locks timeout
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.Properties">
            <summary>
            Collection that maps a string to a string.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.Properties.Equals(com.espertech.esper.compat.Properties)">
            <summary>
            Compares one properties set to another.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.Properties.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.compat.Properties.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:com.espertech.esper.compat.ReadOnlyList`1">
            <summary>
            A wrapper that provide a list that is readonly.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.ReadOnlyList`1"/> class.
            </summary>
            <param name="parentList">The parent list.</param>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"></see>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyList`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.ReadOnlyList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.ReadOnlyList`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.compat.ReadOnlyList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.ReadOnlyList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:com.espertech.esper.compat.ResourceManager">
            <summary>
            Manages access to named resources
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.ResourceManager.AddSearchPathElement(System.String)">
            <summary>
            Adds to the search path
            </summary>
            <param name="searchPathElement"></param>
        </member>
        <member name="M:com.espertech.esper.compat.ResourceManager.ResolveResourceFile(System.String,System.String)">
            <summary>
            Resolves a resource and returns the file info.
            </summary>
            <param name="name">The name.</param>
            <param name="searchPath">The search path.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.ResourceManager.ResolveResourceFile(System.String)">
            <summary>
            Resolves a resource and returns the file info.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:com.espertech.esper.compat.ResourceManager.ResolveResourceURL(System.String)">
            <summary>
            Resolves a resource and the URL for the resource
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.ResourceManager.GetResourceAsStream(System.String)">
            <summary>
            Attempts to retrieve the resource identified by the specified
            name as a stream.  If the stream can not be retrieved, this
            method returns null.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.ResourceManager.#cctor">
            <summary>
            Initializes the class
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.ResourceManager.SearchPath">
            <summary>
            Gets or sets the search path.
            </summary>
            <value>The search path.</value>
        </member>
        <member name="T:com.espertech.esper.compat.timers.SystemTimerFactory">
            <summary>
            Implementation of the timer factory that uses the system timer.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.timers.SystemTimerFactory.CreateBaseTimer">
            <summary>
            Creates the timer.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.timers.SystemTimerFactory.IsIdling(System.Int64)">
            <summary>
            Determines whether the specified generations are idling.
            </summary>
            <param name="idleGenerations">The idle generations.</param>
            <returns>
            	<c>true</c> if the specified idle generations is idling; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.timers.SystemTimerFactory.IsPruneGeneration(System.Int64)">
            <summary>
            Determines whether [is prune generation] [the specified generation].
            </summary>
            <param name="generation">The generation.</param>
            <returns>
            	<c>true</c> if [is prune generation] [the specified generation]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.timers.SystemTimerFactory.OnPruneCallbacks">
            <summary>
            Prunes dead callbacks.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.timers.SystemTimerFactory.OnTimerEvent(System.Object)">
            <summary>
            Occurs when the timer event fires.
            </summary>
            <param name="userData">The user data.</param>
        </member>
        <member name="M:com.espertech.esper.compat.timers.SystemTimerFactory.CreateTimer(System.Threading.TimerCallback,System.Int64)">
            <summary>
            Creates a timer.  The timer will begin after dueTime (in milliseconds)
            has passed and will occur at an interval specified by the period.
            </summary>
            <param name="timerCallback"></param>
            <param name="period"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.compat.timers.SystemTimerFactory.InternalTimer">
            <summary>
            Disposable timer kept for internal purposes; cascades the timer effect.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.timers.SystemTimerFactory.InternalTimer.#ctor(System.Int64,System.Threading.TimerCallback)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.timers.SystemTimerFactory.InternalTimer"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.timers.SystemTimerFactory.InternalTimer.OnTimerCallback(System.Int64)">
            <summary>
            Called when [timer callback].
            </summary>
            <param name="currTime">The curr time.</param>
        </member>
        <member name="M:com.espertech.esper.compat.timers.SystemTimerFactory.InternalTimer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.timers.SystemTimerFactory.HarmonicTimer">
            <summary>
            Thread-based timer that used a harmonic algorithm to ensure that
            the thread clicks at a regular interval.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.timers.SystemTimerFactory.HarmonicTimer.Start">
            <summary>
            Starts thread processing.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.timers.SystemTimerFactory.HarmonicTimer.#ctor(System.Threading.TimerCallback)">
            <summary>
            Creates the timer and wraps it
            </summary>
            <param name="timerCallback"></param>
        </member>
        <member name="M:com.espertech.esper.compat.timers.SystemTimerFactory.HarmonicTimer.Finalize">
            <summary>
            Called when the object is destroyed.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.timers.SystemTimerFactory.HarmonicTimer.Dispose">
            <summary>
            Cleans up system resources
            </summary>
        </member>
        <member name="T:com.espertech.esper.compat.TimerException">
            <summary>
            A general purpose exception for timer events
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.TimerException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.TimerException"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.TimerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.TimerException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:com.espertech.esper.compat.TimerFactory">
            <summary>
            Creates timers.
            </summary>
        </member>
        <member name="P:com.espertech.esper.compat.TimerFactory.DefaultTimerFactory">
            <summary>
            Gets the default timer factory
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.UnsupportedOperationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.UnsupportedOperationException"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.UnsupportedOperationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.UnsupportedOperationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:com.espertech.esper.compat.WeakDictionary`2">
             <summary>
             A generic dictionary, which allows its keys
             to be garbage collected if there are no other references
             to them than from the dictionary itself.
             </summary>
            
             <remarks>
             If the key of a particular entry in the dictionary has been
             collected, then both the key and value become effectively
             unreachable. However, left-over WeakReference objects for the key
             will physically remain in the dictionary until RemoveCollectedEntries
             is called. This will lead to a discrepancy between the Count property
             and the number of iterations required to visit all of the elements of
             the dictionary using its enumerator or those of the Keys and Values
             collections. Similarly, CopyTo will copy fewer than Count elements
             in this situation.
             </remarks>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.WeakDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.WeakDictionary`2"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.WeakDictionary`2"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.WeakDictionary`2"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if key was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.SetValue(`0,`1)">
            <summary>
            Sets the value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.RemoveCollectedEntries">
            <summary>
            Removes the left-over weak references for entries in the dictionary
            whose key or value has already been reclaimed by the garbage
            collector. This will reduce the dictionary's Count by the number
            of dead key-value pairs that were eliminated.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, Starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.Get(`0,`1)">
            <summary>
            Fetches the value associated with the specified key.
            If no value can be found, then the defaultValue is
            returned.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.Get(`0)">
            <summary>
            Fetches the value associated with the specified key.
            If no value can be found, then default(V) is returned.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.Put(`0,`1)">
            <summary>
            Sets the given key in the dictionary.  If the key
            already exists, then it is remapped to thenew value.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.Push(`0,`1)">
            <summary>
            Sets the given key in the dictionary.  If the key
            already exists, then it is remapped to the new value.
            If a value was previously mapped it is returned.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.PutAll(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Puts all values from the source dictionary into
            this dictionary.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.Remove(`0,`1@)">
            <summary>
            Removes the item from the dictionary that is associated with
            the specified key.
            </summary>
            <param name="key">Search key into the dictionary</param>
            <param name="value">The value removed from the dictionary (if found).</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.WeakDictionary`2.RemoveAndReturn(`0)">
            <summary>
            Removes the item from the dictionary that is associated with
            the specified key.  The item if found is returned; if not,
            default(V) is returned.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:com.espertech.esper.compat.WeakDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <remarks>
            WARNING: The count returned here may include entries for which
            either the key or value objects have already been garbage
            collected. Call RemoveCollectedEntries to weed out collected
            entries and update the count accordingly.
            </remarks>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.WeakDictionary`2.KeysEnum">
            <summary>
            Gets an enumerator that enumerates the keys.
            </summary>
            <value>The keys enum.</value>
        </member>
        <member name="P:com.espertech.esper.compat.WeakDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.WeakDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.WeakDictionary`2.Item(`0)">
            <summary>
            Gets or sets the item with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:com.espertech.esper.compat.WeakDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:com.espertech.esper.compat.WeakDictionary`2.FirstValue">
            <summary>
            Returns the first value in the enumeration of values
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.compat.WeakKeyComparer`1.Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="x">The first object of type T to compare.</param>
            <param name="y">The second object of type T to compare.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
            <remark>
            Note: There are actually 9 cases to handle here.
            Let Wa = Alive Weak Reference
            Let Wd = Dead Weak Reference
            Let S  = Strong Reference
            x  | y  | Equals(x,y)
            -------------------------------------------------
            Wa | Wa | comparer.Equals(x.Target, y.Target)
            Wa | Wd | false
            Wa | S  | comparer.Equals(x.Target, y)
            Wd | Wa | false
            Wd | Wd | x == y
            Wd | S  | false
            S  | Wa | comparer.Equals(x, y.Target)
            S  | Wd | false
            S  | S  | comparer.Equals(x, y)
            -------------------------------------------------
            </remark>
        </member>
        <member name="T:com.espertech.esper.compat.WeakKeyReference`1">
            <summary>
            Provides a weak reference to an object of the given type to be used in
            a WeakDictionary along with the given comparer.
            </summary>
        </member>
        <member name="M:com.espertech.esper.compat.WeakReference`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.compat.WeakReference`1"/> class.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:com.espertech.esper.compat.WeakReference`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.compat.WeakReference`1.IsDead">
            <summary>
            Gets a value indicating whether this instance is dead.
            </summary>
            <value><c>true</c> if this instance is dead; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:com.espertech.esper.compat.WeakReference`1.Target">
            <summary>
            Gets or sets the object (the target) referenced by the current <see cref="T:System.WeakReference"></see> object.
            </summary>
            <value></value>
            <returns>null if the object referenced by the current <see cref="T:System.WeakReference"></see> object has been garbage collected; otherwise, a reference to the object referenced by the current <see cref="T:System.WeakReference"></see> object.</returns>
            <exception cref="T:System.InvalidOperationException">The reference to the target object is invalid. This can occur if the current <see cref="T:System.WeakReference"></see> object has been finalized.</exception>
        </member>
        <member name="T:com.espertech.esper.compat.XMLConstants">
            <summary>
            Contains constants for XML processing.
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.XMLConstants.NULL_NS_URI">
            <summary>
            Namespace URI to use to represent that there is no Namespace.
            <para/>
            Defined by the Namespace specification to be "".
            <para/>
            <a href="http://www.w3.org/TR/REC-xml-names/#defaulting">Namespaces in XML, 5.2 Namespace Defaulting</a>
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.XMLConstants.DEFAULT_NS_PREFIX">
            <summary>
            Prefix to use to represent the default XML Namespace.
            <para/>
            Defined by the XML specification to be "".
            <para/>
            <a href="http://www.w3.org/TR/REC-xml-names/#ns-qualnames"> Namespaces in XML, 3. Qualified Names</a>
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.XMLConstants.XML_NS_URI">
            <summary>
            The official XML Namespace name URI.
            <para/>
            Defined by the XML specification to be
            <code>http://www.w3.org/XML/1998/namespace</code>.
            <para/>
            <a href="http://www.w3.org/TR/REC-xml-names/#ns-qualnames"> Namespaces in XML, 3. Qualified Names</a>
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.XMLConstants.XML_NS_PREFIX">
            <summary>
            The official XML Namespace prefix.
            <para/>
            Defined by the XML specification to be <code>xml</code>.
            <para/>
            <a href="http://www.w3.org/TR/REC-xml-names/#ns-qualnames"> Namespaces in XML, 3. Qualified Names</a>
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.XMLConstants.XMLNS_ATTRIBUTE_NS_URI">
            <summary>
            The official XML attribute used for specifying XML Namespace declarations,
            <see cref="F:com.espertech.esper.compat.XMLConstants.XMLNS_ATTRIBUTE"/>, Namespace name URI.
            <para/>
            Defined by the XML specification to be
            <code>http://www.w3.org/2000/xmlns/</code>.
            <a href="http://www.w3.org/TR/REC-xml-names/#ns-qualnames"> Namespaces in XML, 3. Qualified Names</a>
            <a href="http://www.w3.org/XML/xml-names-19990114-errata/"> Namespaces in XML Errata</a>
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.XMLConstants.XMLNS_ATTRIBUTE">
            <summary>
            The official XML attribute used for specifying XML Namespace declarations.
            <para/>
            It is <strong><em>NOT</em></strong> valid to use as a prefix.  Defined by the
            XML specification to be <code>xmlns</code>.
            <para/>
            <a href="http://www.w3.org/TR/REC-xml-names/#ns-qualnames"> Namespaces in XML, 3. Qualified Names</a>
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.XMLConstants.W3C_XML_SCHEMA_NS_URI">
            <summary>
            W3C XML Schema Namespace URI.
            <para/>
            Defined to be <code>http://www.w3.org/2001/XMLSchema</code>.
            <para/>
            <a href="http://www.w3.org/TR/xmlschema-1/#Instance_Document_Constructions"> XML Schema Part 1: Structures, 2.6 Schema-Related Markup in Documents Being Validated</a>
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI">
            <summary>
            W3C XML Schema Instance Namespace URI.
            <para/>
            Defined to be <code>http://www.w3.org/2001/XMLSchema-instance</code>.
            <para/>
            <a href="http://www.w3.org/TR/xmlschema-1/#Instance_Document_Constructions"> XML Schema Part 1: Structures, 2.6 Schema-Related Markup in Documents Being Validated</a>
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.XMLConstants.W3C_XPATH_DATATYPE_NS_URI">
            <summary>
            W3C XPath Datatype Namespace URI.
            <para/>
            Defined to be "<code>http://www.w3.org/2003/11/xpath-datatypes</code>".
            <para/>
            <a href="http://www.w3.org/TR/xpath-datamodel">XQuery 1.0 and XPath 2.0 Data Model</a>
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.XMLConstants.XML_DTD_NS_URI">
            <summary>
            XML Document Type Declaration Namespace URI as an arbitrary value.
            <para/>
            Since not formally defined by any existing standard, arbitrarily define to be
            <code>http://www.w3.org/TR/REC-xml</code>.
            <para/>
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.XMLConstants.RELAXNG_NS_URI">
            <summary>
            RELAX NG Namespace URI.
            <para/>
            Defined to be <code>http://relaxng.org/ns/structure/1.0</code>.
            <para/>
            <a href="http://relaxng.org/spec-20011203.html">RELAX NG Specification</a>
            </summary>
        </member>
        <member name="F:com.espertech.esper.compat.XMLConstants.FEATURE_SECURE_PROCESSING">
            <summary>
            Feature for secure processing. 
            <list>
            <item>
            <code>true</code> instructs the
            implementation to process XML securely. This may set limits on XML constructs to
            avoid conditions such as denial of service attacks.
            </item>
            <item>
            <code>false</code>
            instructs the implementation to process XML acording the letter of the XML
            specifications ingoring security issues such as limits on XML constructs to avoid
            conditions such as denial of service attacks.
            </item>
            </list>
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.DirectoryException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.DirectoryException"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.client.DirectoryException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.client.DirectoryException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:com.espertech.esper.events.EventAdapterException">
            <summary>
            This exception is thrown to indicate a problem resolving an event type by name.
            </summary>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterException.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="message">error message
            </param>
        </member>
        <member name="M:com.espertech.esper.events.EventAdapterException.#ctor(System.String,System.Exception)">
            <summary> Ctor.</summary>
            <param name="message">error message
            </param>
            <param name="nested">nested exception
            </param>
        </member>
        <member name="T:com.espertech.esper.events.EventPropertyType">
            <summary> Enumeration of property types.</summary>
        </member>
        <member name="F:com.espertech.esper.events.EventPropertyType.SIMPLE">
            <summary> Simple property.</summary>
        </member>
        <member name="F:com.espertech.esper.events.EventPropertyType.INDEXED">
            <summary> Indexed property.</summary>
        </member>
        <member name="F:com.espertech.esper.events.EventPropertyType.MAPPED">
            <summary> Mapped property.</summary>
        </member>
        <member name="T:com.espertech.esper.filter.DoubleRange">
            <summary>Holds a range of double values with a minimum (start) value and a maximum (end) value. </summary>
        </member>
        <member name="M:com.espertech.esper.filter.DoubleRange.#ctor(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>Constructor - takes range endpoints. </summary>
            <param name="min">is the low endpoint</param>
            <param name="max">is the high endpoint</param>
        </member>
        <member name="M:com.espertech.esper.filter.DoubleRange.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. 
                            </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:com.espertech.esper.filter.DoubleRange.Min">
            <summary>Returns low endpoint. </summary>
            <value>low endpoint</value>
        </member>
        <member name="P:com.espertech.esper.filter.DoubleRange.Max">
            <summary>Returns high endpoint. </summary>
            <value>high endpoint</value>
        </member>
        <member name="T:com.espertech.esper.filter.DoubleRangeComparator">
            <summary>
            Comparator for DoubleRange values.
            <para>
            Sorts double ranges as this:     sort by min asc, max asc.
            I.e. same minimum value sorts maximum value ascending.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.filter.DoubleRangeComparator.Compare(com.espertech.esper.filter.DoubleRange,com.espertech.esper.filter.DoubleRange)">
            <summary>
            Compares the specified double ranges.
            </summary>
            <param name="r1">The r1.</param>
            <param name="r2">The r2.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.type.BitWiseOpEnum">
            <summary>
            Enum representing relational types of operation.
            </summary>
        </member>
        <member name="F:com.espertech.esper.type.BitWiseOpEnum.BAND">
            <summary>
            Bitwise and.
            </summary>
        </member>
        <member name="F:com.espertech.esper.type.BitWiseOpEnum.BOR">
            <summary>
            Bitwise or.
            </summary>
        </member>
        <member name="F:com.espertech.esper.type.BitWiseOpEnum.BXOR">
            <summary>
            Bitwise xor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnumExtensions.GetComputeDescription(com.espertech.esper.type.BitWiseOpEnum)">
            <summary>Returns string rendering of enum.</summary>
            <returns>bitwise operator string</returns>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnumExtensions.#cctor">
            <summary>
            Initializes the <see cref="T:com.espertech.esper.type.BitWiseOpEnum"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnumExtensions.GetComputer(com.espertech.esper.type.BitWiseOpEnum,System.Type)">
            <summary>
            Returns number or bool computation for the target coercion type.
            </summary>
            <param name="value">The value.</param>
            <param name="coercedType">target type</param>
            <returns>number cruncher</returns>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnumExtensions.BAndByte(System.Object,System.Object)">
            <summary>
            Bit Wise And.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnumExtensions.BOrByte(System.Object,System.Object)">
            <summary>
            Bit Wise Or.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnumExtensions.BXorByte(System.Object,System.Object)">
            <summary>
            Bit Wise Xor.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnumExtensions.BAndShort(System.Object,System.Object)">
            <summary>
            Bit Wise And.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnumExtensions.BOrShort(System.Object,System.Object)">
            <summary>
            Bit Wise Or.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnumExtensions.BXorShort(System.Object,System.Object)">
            <summary>
            Bit Wise Xor.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnumExtensions.BAndInt(System.Object,System.Object)">
            <summary>
            Bit Wise And.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnumExtensions.BOrInt(System.Object,System.Object)">
            <summary>
            Bit Wise Or.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnumExtensions.BXorInt(System.Object,System.Object)">
            <summary>
            Bit Wise Xor.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnumExtensions.BAndLong(System.Object,System.Object)">
            <summary>
            Bit Wise And.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnumExtensions.BOrLong(System.Object,System.Object)">
            <summary>
            Bit Wise Or.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnumExtensions.BXorLong(System.Object,System.Object)">
            <summary>
            Bit Wise Xor.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnumExtensions.BAndBoolean(System.Object,System.Object)">
            <summary>
            Bit Wise And.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnumExtensions.BOrBoolean(System.Object,System.Object)">
            <summary>
            Bit Wise Or.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.BitWiseOpEnumExtensions.BXorBoolean(System.Object,System.Object)">
            <summary>
            Bit Wise Xor.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.type.BitWiseOpEnumExtensions.Computer">
            <summary>Computer for relational op.</summary>
        </member>
        <member name="T:com.espertech.esper.type.CronParameter">
            <summary>
            Hold parameters for timer:at.
            </summary>
        </member>
        <member name="T:com.espertech.esper.type.NumberSetParameter">
            <summary>
            Interface to generate a set of integers from parameters that include ranges, lists and frequencies.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.NumberSetParameter.IsWildcard(System.Int32,System.Int32)">
            <summary> Returns true if all values between and including min and max are supplied by the parameter.</summary>
            <param name="min">lower end of range
            </param>
            <param name="max">upper end of range
            </param>
            <returns> true if parameter specifies all int values between min and max, false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.NumberSetParameter.GetValuesInRange(System.Int32,System.Int32)">
            <summary> Return a set of int values representing the value of the parameter for the given range.</summary>
            <param name="min">lower end of range
            </param>
            <param name="max">upper end of range
            </param>
            <returns> set of integer
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.CronParameter.#ctor(com.espertech.esper.type.CronOperatorEnum,System.Nullable{System.Int32},System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.type.CronParameter"/> class.
            </summary>
            <param name="operator">The cron operator.</param>
            <param name="day">The day.</param>
            <param name="engineTime">The engine time.</param>
        </member>
        <member name="M:com.espertech.esper.type.CronParameter.ToEPL(System.IO.TextWriter)">
            <summary>
            Writes the EQL to the StringWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:com.espertech.esper.type.CronParameter.IsWildcard(System.Int32,System.Int32)">
            <summary>
            Returns true if all values between and including min and max are supplied by the parameter.
            </summary>
            <param name="min">lower end of range</param>
            <param name="max">upper end of range</param>
            <returns>
            true if parameter specifies all int values between min and max, false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.CronParameter.GetValuesInRange(System.Int32,System.Int32)">
            <summary>
            Return a set of int values representing the value of the parameter for the given range.
            </summary>
            <param name="min">lower end of range</param>
            <param name="max">upper end of range</param>
            <returns>set of integer</returns>
        </member>
        <member name="M:com.espertech.esper.type.CronParameter.DetermineLastDayOfMonth">
            <summary>
            Determines the last day of month.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.CronParameter.DetermineLastDayOfWeekInMonth">
            <summary>
            Determines the last day of week in the month.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.CronParameter.DetermineLastDayOfWeek">
            <summary>
            Determines the last day of week.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.CronParameter.GetDayOfWeek">
            <summary>
            Gets the day of week.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.CronParameter.DetermineLastWeekDayOfMonth">
            <summary>
            Determines the last week day of the month.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.CronParameter.SetTime">
            <summary>
            Sets the time.
            </summary>
        </member>
        <member name="P:com.espertech.esper.type.CronParameter.Month">
            <summary>
            Sets the month.
            </summary>
            <value>The month.</value>
        </member>
        <member name="T:com.espertech.esper.type.DecimalValue">
            <summary>
            Placeholder for a decimal value in an event expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.DecimalValue.#ctor">
            <summary> Constructor.</summary>
        </member>
        <member name="M:com.espertech.esper.type.DecimalValue.#ctor(System.Decimal)">
            <summary>
            Constructor setting the value.
            </summary>
            <param name="decimalValue">The decimal value.</param>
        </member>
        <member name="M:com.espertech.esper.type.DecimalValue.ParseString(System.String)">
            <summary>
            Parse string value returning a decimal.
            </summary>
            <param name="value">value to parse</param>
            <returns>parsed value</returns>
        </member>
        <member name="M:com.espertech.esper.type.DecimalValue.Parse(System.String)">
            <summary>
            Parse the string literal value into the specific data type.
            </summary>
            <param name="value">is the textual value to parse</param>
        </member>
        <member name="M:com.espertech.esper.type.DecimalValue.ParseString(System.String[])">
            <summary> Parse the string array returning a decimal array.</summary>
            <param name="values">string array
            </param>
            <returns> typed array
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.DecimalValue.GetDecimal">
            <summary> Return the value as an unboxed.</summary>
            <returns> value
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.DecimalValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.DecimalValue.Type">
            <summary>
            Returns the type of primitive value this instance represents.
            </summary>
            <value></value>
            <returns> enum type of primitive
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.DecimalValue.ValueObject">
            <summary>
            Returns a value object.
            </summary>
            <value></value>
            <returns> value object
            </returns>
        </member>
        <member name="T:com.espertech.esper.type.DoubleValue">
            <summary>
            Placeholder for a double value in an event expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.DoubleValue.#ctor">
            <summary> Constructor.</summary>
        </member>
        <member name="M:com.espertech.esper.type.DoubleValue.#ctor(System.Double)">
            <summary> Constructor setting the value.</summary>
            <param name="doubleValue">value to set.
            </param>
        </member>
        <member name="M:com.espertech.esper.type.DoubleValue.ParseString(System.String)">
            <summary> Parse string value returning a double.</summary>
            <param name="value">to parse
            </param>
            <returns> parsed value
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.DoubleValue.Parse(System.String)">
            <summary>
            Parse the string literal value into the specific data type.
            </summary>
            <param name="value">is the textual value to parse</param>
        </member>
        <member name="M:com.espertech.esper.type.DoubleValue.ParseString(System.String[])">
            <summary> Parse the string array returning a double array.</summary>
            <param name="values">string array
            </param>
            <returns> typed array
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.DoubleValue.GetDouble">
            <summary> Return the value as an unboxed.</summary>
            <returns> value
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.DoubleValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.DoubleValue.Type">
            <summary>
            Returns the type of primitive value this instance represents.
            </summary>
            <value></value>
            <returns> enum type of primitive
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.DoubleValue.ValueObject">
            <summary>
            Returns a value object.
            </summary>
            <value></value>
            <returns> value object
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.DoubleValue._Double">
            <summary>
            Set a double value.
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.type.FloatValue">
            <summary>
            Placeholder for a float value in an event expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.FloatValue.ParseString(System.String)">
            <summary> Parse string value returning a float.</summary>
            <param name="value">to parse
            </param>
            <returns> parsed value
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.FloatValue.ParseString(System.String[])">
            <summary> Parse the string array returning a float array.</summary>
            <param name="values">string array
            </param>
            <returns> typed array
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.FloatValue.Parse(System.String)">
            <summary>
            Parse the string literal value into the specific data type.
            </summary>
            <param name="value">is the textual value to parse</param>
        </member>
        <member name="M:com.espertech.esper.type.FloatValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.FloatValue.Type">
            <summary>
            Returns the type of primitive value this instance represents.
            </summary>
            <value></value>
            <returns> enum type of primitive
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.FloatValue.ValueObject">
            <summary>
            Returns a value object.
            </summary>
            <value></value>
            <returns> value object
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.FloatValue._Float">
            <summary>
            Set a float value.
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.type.FrequencyParameter">
            <summary>
            Encapsulates a parameter specifying a frequency, i.e. '* / 5'.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.FrequencyParameter.#ctor(System.Int32)">
            <summary> Ctor.</summary>
            <param name="frequency">divisor specifying frequency
            </param>
        </member>
        <member name="M:com.espertech.esper.type.FrequencyParameter.IsWildcard(System.Int32,System.Int32)">
            <summary>
            Returns true if all values between and including min and max are supplied by the parameter.
            </summary>
            <param name="min">lower end of range</param>
            <param name="max">upper end of range</param>
            <returns>
            true if parameter specifies all int values between min and max, false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.FrequencyParameter.GetValuesInRange(System.Int32,System.Int32)">
            <summary>
            Return a set of int values representing the value of the parameter for the given range.
            </summary>
            <param name="min">lower end of range</param>
            <param name="max">upper end of range</param>
            <returns>set of integer</returns>
        </member>
        <member name="P:com.espertech.esper.type.FrequencyParameter.Frequency">
            <summary> Returns frequency.</summary>
            <returns> frequency divisor
            </returns>
        </member>
        <member name="T:com.espertech.esper.type.IntParameter">
            <summary>
            Parameter supplying a single int value is a set of numbers.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.IntParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.type.IntParameter"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.IntParameter.#ctor(System.Int32)">
            <summary> Ctor.</summary>
            <param name="intValue">single in value
            </param>
        </member>
        <member name="M:com.espertech.esper.type.IntParameter.IsWildcard(System.Int32,System.Int32)">
            <summary>
            Returns true if all values between and including min and max are supplied by the parameter.
            </summary>
            <param name="min">lower end of range</param>
            <param name="max">upper end of range</param>
            <returns>
            true if parameter specifies all int values between min and max, false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.IntParameter.GetValuesInRange(System.Int32,System.Int32)">
            <summary>
            Return a set of int values representing the value of the parameter for the given range.
            </summary>
            <param name="min">lower end of range</param>
            <param name="max">upper end of range</param>
            <returns>set of integer</returns>
        </member>
        <member name="P:com.espertech.esper.type.IntParameter.IntValue">
            <summary> Returns int value.</summary>
            <returns> int value
            </returns>
        </member>
        <member name="T:com.espertech.esper.type.IntValue">
            <summary>
             Placeholder for an integer value in an event expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.IntValue.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.IntValue.#ctor(System.Int32)">
            <summary> Constructor.</summary>
            <param name="intValue">is the value to set to
            </param>
        </member>
        <member name="M:com.espertech.esper.type.IntValue.ParseString(System.String[])">
            <summary> Parse the string array returning a int array.</summary>
            <param name="values">string array
            </param>
            <returns> typed array
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.IntValue.ParseString(System.String)">
            <summary> Parse string value returning a int.</summary>
            <param name="value">to parse
            </param>
            <returns> parsed value
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.IntValue.Parse(System.String)">
            <summary>
            Parse the string literal value into the specific data type.
            </summary>
            <param name="value">is the textual value to parse</param>
        </member>
        <member name="M:com.espertech.esper.type.IntValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.IntValue.Type">
            <summary>
            Returns the type of primitive value this instance represents.
            </summary>
            <value></value>
            <returns> enum type of primitive
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.IntValue.ValueObject">
            <summary>
            Returns a value object.
            </summary>
            <value></value>
            <returns> value object
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.IntValue._Int">
            <summary>
            Set an int value.
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.type.ListParameter">
            <summary>
            Represents a list of values in a set of numeric parameters.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.ListParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.type.ListParameter"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.ListParameter.#ctor(System.Collections.Generic.IList{com.espertech.esper.type.NumberSetParameter})">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.type.ListParameter"/> class.
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:com.espertech.esper.type.ListParameter.Add(com.espertech.esper.type.NumberSetParameter)">
            <summary> Add to the list a further parameter.</summary>
            <param name="numberSetParameter">is the parameter to add
            </param>
        </member>
        <member name="M:com.espertech.esper.type.ListParameter.IsWildcard(System.Int32,System.Int32)">
            <summary>
            Returns true if all values between and including min and max are supplied by the parameter.
            </summary>
            <param name="min">lower end of range</param>
            <param name="max">upper end of range</param>
            <returns>
            true if parameter specifies all int values between min and max, false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.ListParameter.GetValuesInRange(System.Int32,System.Int32)">
            <summary>
            Return a set of int values representing the value of the parameter for the given range.
            </summary>
            <param name="min">lower end of range</param>
            <param name="max">upper end of range</param>
            <returns>set of integer</returns>
        </member>
        <member name="P:com.espertech.esper.type.ListParameter.Parameters">
            <summary> Returns list of parameters.</summary>
            <returns> list of parameters
            </returns>
        </member>
        <member name="T:com.espertech.esper.type.LongValue">
            <summary>
            Placeholder for a long-typed value in an event expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.LongValue.Parse(System.String)">
            <summary>
            Parse the string literal value into the specific data type.
            </summary>
            <param name="value">is the textual value to parse</param>
        </member>
        <member name="M:com.espertech.esper.type.LongValue.ParseString(System.String)">
            <summary> Parse the string containing a long value.</summary>
            <param name="value">is the textual long value
            </param>
            <returns> long value
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.LongValue.ParseString(System.String[])">
            <summary> Parse the string array returning a long array.</summary>
            <param name="values">string array
            </param>
            <returns> typed array
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.LongValue.GetLong">
            <summary> Returns the long value.</summary>
            <returns> long value
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.LongValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.LongValue.Type">
            <summary>
            Returns the type of primitive value this instance represents.
            </summary>
            <value></value>
            <returns> enum type of primitive
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.LongValue.ValueObject">
            <summary>
            Returns a value object.
            </summary>
            <value></value>
            <returns> value object
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.LongValue._Long">
            <summary>
            Set a long value.
            </summary>
            <value></value>
        </member>
        <member name="F:com.espertech.esper.type.MathArithTypeEnum.ADD">
            <summary>
            Plus.
            </summary>
        </member>
        <member name="F:com.espertech.esper.type.MathArithTypeEnum.SUBTRACT">
            <summary>
            Minus
            </summary>
        </member>
        <member name="F:com.espertech.esper.type.MathArithTypeEnum.DIVIDE">
            <summary>
            Divide
            </summary>
        </member>
        <member name="F:com.espertech.esper.type.MathArithTypeEnum.MULTIPLY">
            <summary>
            Multiply.
            </summary>
        </member>
        <member name="F:com.espertech.esper.type.MathArithTypeEnum.MODULO">
            <summary>
            Modulo.
            </summary>
        </member>
        <member name="T:com.espertech.esper.type.MathArithTypeEnumExtensions">
            <summary>
            Enumeration for the type of arithmatic to use.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.GetExpressionText(com.espertech.esper.type.MathArithTypeEnum)">
            <summary>Returns string representation of enum.</summary>
            <returns>text for enum</returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.ParseOperator(System.String)">
            <summary>
            Returns the math operator for the string.
            </summary>
            <param name="value">operator to parse</param>
            <returns>math enum</returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.GetComputer(com.espertech.esper.type.MathArithTypeEnum,System.Type,System.Type,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Returns number cruncher for the target coercion type.
            </summary>
            <param name="value">The value.</param>
            <param name="coercedType">target type</param>
            <param name="typeOne">the LHS type</param>
            <param name="typeTwo">the RHS type</param>
            <param name="isIntegerDivision">false for division returns double, true for using standard integer division</param>
            <param name="isDivisionByZeroReturnsNull">false for division-by-zero returns infinity, true for null</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.AddDecimal(System.Object,System.Object)">
            <summary>
            Adds decimals.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.AddDouble(System.Object,System.Object)">
            <summary>
            Adds doubles.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.AddSingle(System.Object,System.Object)">
            <summary>
            Adds singles.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.AddInt64(System.Object,System.Object)">
            <summary>
            Adds int64s.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.AddInt32(System.Object,System.Object)">
            <summary>
            Adds int32s.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.AddUInt64(System.Object,System.Object)">
            <summary>
            Adds unsigned int64s.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.AddUInt32(System.Object,System.Object)">
            <summary>
            Adds unsigned 32-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.SubtractDecimal(System.Object,System.Object)">
            <summary>
            Subtracts decimals.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.SubtractDouble(System.Object,System.Object)">
            <summary>
            Subtracts doubles.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.SubtractSingle(System.Object,System.Object)">
            <summary>
            Subtracts singles.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.SubtractInt64(System.Object,System.Object)">
            <summary>
            Subtracts 64-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.SubtractInt32(System.Object,System.Object)">
            <summary>
            Subtracts 32-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.SubtractUInt64(System.Object,System.Object)">
            <summary>
            Subtracts unsigned 64-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.SubtractUInt32(System.Object,System.Object)">
            <summary>
            Subtracts unsigned 32-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.DivideDecimalChecked(System.Object,System.Object)">
            <summary>
            Divides decimals.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.DivideDecimalUnchecked(System.Object,System.Object)">
            <summary>
            Divides decimals.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.DivideDoubleUnchecked(System.Object,System.Object)">
            <summary>
            Divides doubles.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.DivideDoubleChecked(System.Object,System.Object)">
            <summary>
            Divides doubles.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.DivideSingle(System.Object,System.Object)">
            <summary>
            Divides singles.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.DivideInt64(System.Object,System.Object)">
            <summary>
            Divides 64-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.DivideInt32(System.Object,System.Object)">
            <summary>
            Divides 32-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.DivideUInt64(System.Object,System.Object)">
            <summary>
            Divides unsigned 64-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.DivideUInt32(System.Object,System.Object)">
            <summary>
            Divides unsigned 32-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.MultiplyDecimal(System.Object,System.Object)">
            <summary>
            Multiplies decimals.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.MultiplyDouble(System.Object,System.Object)">
            <summary>
            Multiplies doubles.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.MultiplySingle(System.Object,System.Object)">
            <summary>
            Multiplies singles.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.MultiplyInt64(System.Object,System.Object)">
            <summary>
            Multiplies 64-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.MultiplyInt32(System.Object,System.Object)">
            <summary>
            Multiplies 32-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.MultiplyUInt64(System.Object,System.Object)">
            <summary>
            Multiplies unsigned 64-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.MultiplyUInt32(System.Object,System.Object)">
            <summary>
            Multiplies unsigned 32-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.ModuloDecimal(System.Object,System.Object)">
            <summary>
            Moduloes decimals.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.ModuloDouble(System.Object,System.Object)">
            <summary>
            Moduloes doubles.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.ModuloSingle(System.Object,System.Object)">
            <summary>
            Moduloes singles.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.ModuloInt64(System.Object,System.Object)">
            <summary>
            Moduloes 64-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.ModuloInt32(System.Object,System.Object)">
            <summary>
            Moduloes 32-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.ModuloUInt64(System.Object,System.Object)">
            <summary>
            Moduloes unsigned 64-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.MathArithTypeEnumExtensions.ModuloUInt32(System.Object,System.Object)">
            <summary>
            Moduloes unsigned 32-bit ints.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.type.MathArithTypeEnumExtensions.Computer">
            <summary>
            Interface for number cruncher.
            </summary>
        </member>
        <member name="T:com.espertech.esper.type.MinMaxTypeEnum">
            <summary>
            Enumeration for the type of arithmatic to use.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.MinMaxTypeEnumExtensions.CreateMinDoubleComputer(com.espertech.esper.epl.expression.ExprEvaluator[])">
            <summary>
            Determines minimum using a conversion to normalize type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.MinMaxTypeEnumExtensions.CreateMaxDoubleComputer(com.espertech.esper.epl.expression.ExprEvaluator[])">
            <summary>
            Determines maximum using a conversion to normalize type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.MinMaxTypeEnumExtensions.CreateMinDecimalComputer(com.espertech.esper.epl.expression.ExprEvaluator[])">
            <summary>
            Determines minimum using a conversion to normalize type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.MinMaxTypeEnumExtensions.CreateMaxDecimalComputer(com.espertech.esper.epl.expression.ExprEvaluator[])">
            <summary>
            Determines maximum using a conversion to normalize type.
            </summary>
        </member>
        <member name="T:com.espertech.esper.type.MinMaxTypeEnumExtensions.Computer">
            <summary>Executes child expression nodes and compares results, returning the min/max. </summary>
            <param name="eventsPerStream">events per stream</param>
            <param name="isNewData">true if new data</param>
            <param name="exprEvaluatorContext">the expression evaluator context</param>
            <returns>result</returns>
        </member>
        <member name="T:com.espertech.esper.type.OuterJoinType">
            <summary> Enum for the type of outer join.</summary>
        </member>
        <member name="F:com.espertech.esper.type.OuterJoinType.LEFT">
            <summary> Left outer join.</summary>
        </member>
        <member name="F:com.espertech.esper.type.OuterJoinType.RIGHT">
            <summary> Right outer join.</summary>
        </member>
        <member name="F:com.espertech.esper.type.OuterJoinType.FULL">
            <summary> Full outer join.</summary>
        </member>
        <member name="F:com.espertech.esper.type.OuterJoinType.INNER">
            <summary> Inner join.</summary>
        </member>
        <member name="T:com.espertech.esper.type.PrimitiveValueFactory">
            <summary>
            Factory class for PrimitiveValue for all fundamental types.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.PrimitiveValueFactory.Create(System.Type)">
            <summary>
            Create a placeholder instance for the primitive type passed in.
            Returns null if the type passed in is not a primitive type.
            </summary>
            <param name="type">a fundamental type</param>
            <returns>
            instance of placeholder representing the type, or null if not a primitive type
            </returns>
        </member>
        <member name="T:com.espertech.esper.type.PrimitiveValueType">
            <summary>
            Enumeration of types of primitive values.
            </summary>
        </member>
        <member name="F:com.espertech.esper.type.PrimitiveValueType.BYTE">
            <summary> Byte.</summary>
        </member>
        <member name="F:com.espertech.esper.type.PrimitiveValueType.SHORT">
            <summary> Short.</summary>
        </member>
        <member name="F:com.espertech.esper.type.PrimitiveValueType.INTEGER">
            <summary> Integer.</summary>
        </member>
        <member name="F:com.espertech.esper.type.PrimitiveValueType.LONG">
            <summary> Long.</summary>
        </member>
        <member name="F:com.espertech.esper.type.PrimitiveValueType.FLOAT">
            <summary> Float.</summary>
        </member>
        <member name="F:com.espertech.esper.type.PrimitiveValueType.DOUBLE">
            <summary> Double.</summary>
        </member>
        <member name="F:com.espertech.esper.type.PrimitiveValueType.DECIMAL">
            <summary> Double.</summary>
        </member>
        <member name="F:com.espertech.esper.type.PrimitiveValueType.BOOL">
            <summary> Boolean.</summary>
        </member>
        <member name="F:com.espertech.esper.type.PrimitiveValueType.STRING">
            <summary> String.</summary>
        </member>
        <member name="M:com.espertech.esper.type.PrimitiveValueType.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.PrimitiveValueType.TypeName">
            <summary> Returns the name of the type.</summary>
            <returns> type name
            </returns>
        </member>
        <member name="T:com.espertech.esper.type.RangeParameter">
            <summary>
            Represents a range of numbers as a parameter.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.RangeParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.type.RangeParameter"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.RangeParameter.#ctor(System.Int32,System.Int32)">
            <summary>Ctor. </summary>
            <param name="low">start of range</param>
            <param name="high">end of range</param>
        </member>
        <member name="P:com.espertech.esper.type.RangeParameter.Low">
            <summary>Returns start of range. </summary>
            <value>start of range</value>
        </member>
        <member name="P:com.espertech.esper.type.RangeParameter.High">
            <summary>Returns end of range. </summary>
            <value>end of range</value>
        </member>
        <member name="T:com.espertech.esper.type.RelationalOpEnum">
            <summary>
            Enum representing relational types of operation.
            </summary>
        </member>
        <member name="F:com.espertech.esper.type.RelationalOpEnum.GT">
            <summary>Greater then.</summary>
        </member>
        <member name="F:com.espertech.esper.type.RelationalOpEnum.GE">
            <summary>Greater equals.</summary>
        </member>
        <member name="F:com.espertech.esper.type.RelationalOpEnum.LT">
            <summary>Lesser then.</summary>
        </member>
        <member name="F:com.espertech.esper.type.RelationalOpEnum.LE">
            <summary>Lesser equals.</summary>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.Reverse(com.espertech.esper.type.RelationalOpEnum)">
            <summary>
            Reverses this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.Parse(System.String)">
            <summary>
            Parses the operator and returns an enum for the operator.
            </summary>
            <param name="op">operand to parse</param>
            <returns>enum representing relational operation</returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.GetComputer(com.espertech.esper.type.RelationalOpEnum,System.Type,System.Type,System.Type)">
            <summary>
            Returns the computer to use for the relational operation based on the
            coercion type.
            </summary>
            <param name="value">The value.</param>
            <param name="coercedType">is the object type</param>
            <param name="typeOne">The type one.</param>
            <param name="typeTwo">The type two.</param>
            <returns>
            computer for performing the relational op
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.GTStringComputer(System.Object,System.Object)">
            <summary>
            Greater than string computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.GEStringComputer(System.Object,System.Object)">
            <summary>
            Greater-than or equal to string computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.LEStringComputer(System.Object,System.Object)">
            <summary>
            Less-than or equal to string computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.LTStringComputer(System.Object,System.Object)">
            <summary>
            Less-than string computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.GTInt16Computer(System.Object,System.Object)">
            <summary>
            Greater-than int16 computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.GEInt16Computer(System.Object,System.Object)">
            <summary>
            Greater-than or equal to int16 computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.LTInt16Computer(System.Object,System.Object)">
            <summary>
            Less-than int16 computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.LEInt16Computer(System.Object,System.Object)">
            <summary>
            Less-than or equal to int16 computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.GTUInt16Computer(System.Object,System.Object)">
            <summary>
            Greater-than int16 computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.GEUInt16Computer(System.Object,System.Object)">
            <summary>
            Greater-than or equal to int16 computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.LTUInt16Computer(System.Object,System.Object)">
            <summary>
            Less-than int16 computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.LEUInt16Computer(System.Object,System.Object)">
            <summary>
            Less-than or equal to int16 computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.GTInt32Computer(System.Object,System.Object)">
            <summary>
            Greater-than int computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.GEInt32Computer(System.Object,System.Object)">
            <summary>
            Greater-than or equal to int computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.LTInt32Computer(System.Object,System.Object)">
            <summary>
            Less-than int computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.LEInt32Computer(System.Object,System.Object)">
            <summary>
            Less-than or equal to int computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.GTUInt32Computer(System.Object,System.Object)">
            <summary>
            Greater-than int computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.GEUInt32Computer(System.Object,System.Object)">
            <summary>
            Greater-than or equal to int computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.LTUInt32Computer(System.Object,System.Object)">
            <summary>
            Less-than int computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.LEUInt32Computer(System.Object,System.Object)">
            <summary>
            Less-than or equal to int computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.GTLongComputer(System.Object,System.Object)">
            <summary>
            Greater-than long computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.GELongComputer(System.Object,System.Object)">
            <summary>
            Greater-than or equal to long computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.LTLongComputer(System.Object,System.Object)">
            <summary>
            Less-than long computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.LELongComputer(System.Object,System.Object)">
            <summary>
            Less-than or equal to long computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.GTULongComputer(System.Object,System.Object)">
            <summary>
            Greater-than unsigned long computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.GEULongComputer(System.Object,System.Object)">
            <summary>
            Greater-than or equal to unsigned long computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.LTULongComputer(System.Object,System.Object)">
            <summary>
            Less-than unsigned long computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.LEULongComputer(System.Object,System.Object)">
            <summary>
            Less-than or equal to unsigned long computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.GTSingleComputer(System.Object,System.Object)">
            <summary>
            Greater-than float computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.GESingleComputer(System.Object,System.Object)">
            <summary>
            Greater-than or equal to float computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.LTSingleComputer(System.Object,System.Object)">
            <summary>
            Less-than float computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.LESingleComputer(System.Object,System.Object)">
            <summary>
            Less-than or equal to float computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.GTDoubleComputer(System.Object,System.Object)">
            <summary>
            Greater-than double computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.GEDoubleComputer(System.Object,System.Object)">
            <summary>
            Greater-than or equal to double computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.LTDoubleComputer(System.Object,System.Object)">
            <summary>
            Less-than double computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.LEDoubleComputer(System.Object,System.Object)">
            <summary>
            Less-than or equal to double computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.GTDecimalComputer(System.Object,System.Object)">
            <summary>
            Greater-than decimal computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.GEDecimalComputer(System.Object,System.Object)">
            <summary>
            Greater-than or equal to decimal computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.LTDecimalComputer(System.Object,System.Object)">
            <summary>
            Less-than decimal computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.LEDecimalComputer(System.Object,System.Object)">
            <summary>
            Less-than or equal to decimal computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.GTDateTimeComputer(System.Object,System.Object)">
            <summary>
            Greater-than datetime computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.GEDateTimeComputer(System.Object,System.Object)">
            <summary>
            Greater-than or equal to datetime computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.LTDateTimeComputer(System.Object,System.Object)">
            <summary>
            Less-than datetime computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.RelationalOpEnumExtensions.LEDateTimeComputer(System.Object,System.Object)">
            <summary>
            Less-than or equal to datetime computer.
            </summary>
            <param name="objOne">The obj one.</param>
            <param name="objTwo">The obj two.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.type.RelationalOpEnumExtensions.Computer">
            <summary>
            Delegate for computing a relational operation on two objects.
            </summary>
            <param name="objOne"></param>
            <param name="objTwo"></param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.type.ScheduleUnit">
            <summary>
            Enumeration of units in a specification of schedule, which contains elements for each of the following units:
            minute, hour, day of month, month, day of week and seconds.
            Notice: value ranges are the same as the "crontab" standard values.
            </summary>
        </member>
        <member name="F:com.espertech.esper.type.ScheduleUnit.SECONDS">
            <summary> Second.</summary>
        </member>
        <member name="F:com.espertech.esper.type.ScheduleUnit.MINUTES">
            <summary> Minute.</summary>
        </member>
        <member name="F:com.espertech.esper.type.ScheduleUnit.HOURS">
            <summary> Hour.</summary>
        </member>
        <member name="F:com.espertech.esper.type.ScheduleUnit.DAYS_OF_MONTH">
            <summary> Day of month.</summary>
        </member>
        <member name="F:com.espertech.esper.type.ScheduleUnit.MONTHS">
            <summary> Month.</summary>
        </member>
        <member name="F:com.espertech.esper.type.ScheduleUnit.DAYS_OF_WEEK">
            <summary> Day of week.</summary>
        </member>
        <member name="F:com.espertech.esper.type.ScheduleUnit.Values">
            <summary>
            Available constant values from this class
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.ScheduleUnit.Min">
            <summary> Returns minimum valid value for the unit.</summary>
            <returns> minimum unit value
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.ScheduleUnit.Max">
            <summary> Returns minimum valid value for the unit.</summary>
            <returns> maximum unit value
            </returns>
        </member>
        <member name="T:com.espertech.esper.type.ShortValue">
            <summary>
             Placeholder for a short-typed value in an event expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.ShortValue.ParseString(System.String)">
            <summary>Parses a string value as a short.</summary>
            <param name="value">to parse</param>
            <returns>short value</returns>
        </member>
        <member name="M:com.espertech.esper.type.ShortValue.Parse(System.String)">
            <summary>
            Parse the string literal value into the specific data type.
            </summary>
            <param name="value">is the textual value to parse</param>
        </member>
        <member name="M:com.espertech.esper.type.ShortValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.ShortValue.Type">
            <summary>
            Returns the type of primitive value this instance represents.
            </summary>
            <value></value>
            <returns> enum type of primitive
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.ShortValue.ValueObject">
            <summary>
            Returns a value object.
            </summary>
            <value></value>
            <returns> value object
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.ShortValue._Short">
            <summary>
            Set a short value.
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.type.StringPatternSet">
            <summary>Implementation match a string against a pattern. </summary>
        </member>
        <member name="M:com.espertech.esper.type.StringPatternSet.Match(System.String)">
            <summary>Returns true for a match, false for no-match. </summary>
            <param name="stringToMatch">value to match</param>
            <returns>match result</returns>
        </member>
        <member name="M:com.espertech.esper.type.StringPatternSetLike.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="likeString">pattern to match</param>
        </member>
        <member name="M:com.espertech.esper.type.StringPatternSetLike.Match(System.String)">
            <summary>Match the string returning true for a match, using SQL-like semantics. </summary>
            <param name="stringToMatch">string to match</param>
            <returns>true for match</returns>
        </member>
        <member name="M:com.espertech.esper.type.StringPatternSetLike.Equals(com.espertech.esper.type.StringPatternSetLike)">
            <summary>
            Equalses the specified obj.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.StringPatternSetLike.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:com.espertech.esper.type.StringPatternSetLike.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.type.StringPatternSetRegex">
            <summary>Regular expression matcher. </summary>
        </member>
        <member name="M:com.espertech.esper.type.StringPatternSetRegex.#ctor(System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="patternText">regex to match</param>
        </member>
        <member name="M:com.espertech.esper.type.StringPatternSetRegex.Match(System.String)">
            <summary>
            Match the string returning true for a match, using regular expression semantics.
            </summary>
            <param name="stringToMatch">string to match</param>
            <returns>true for match</returns>
        </member>
        <member name="M:com.espertech.esper.type.StringPatternSetRegex.Equals(com.espertech.esper.type.StringPatternSetRegex)">
            <summary>
            Equalses the specified obj.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.type.StringPatternSetRegex.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:com.espertech.esper.type.StringPatternSetRegex.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:com.espertech.esper.type.StringPatternSetUtil">
            <summary>
            Pattern matching utility.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.StringPatternSetUtil.Evaluate(System.Boolean,System.Collections.Generic.IEnumerable{com.espertech.esper.collection.Pair{com.espertech.esper.type.StringPatternSet,System.Boolean}},System.String)">
            <summary>
            Executes a seriers of include/exclude patterns against a match string,
            returning the last pattern match result as bool in/out.
            </summary>
            <param name="defaultValue">the default value if there are no patterns or no matches change the value</param>
            <param name="patterns">to match against, true in the pair for include, false for exclude</param>
            <param name="literal">to match</param>
            <returns>true for included, false for excluded</returns>
        </member>
        <member name="T:com.espertech.esper.type.StringValue">
            <summary>
            Placeholder for a String value in an event expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.StringValue.#ctor(System.String)">
            <summary> Constructor.</summary>
            <param name="stringValue">sets initial value
            </param>
        </member>
        <member name="M:com.espertech.esper.type.StringValue.#ctor">
            <summary> Constructor.</summary>
        </member>
        <member name="M:com.espertech.esper.type.StringValue.ParseString(System.String[])">
            <summary> Parse the string array returning a string array.</summary>
            <param name="values">string array
            </param>
            <returns> typed array
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.StringValue.Parse(System.String)">
            <summary>
            Parse the string literal value into the specific data type.
            </summary>
            <param name="value">is the textual value to parse</param>
        </member>
        <member name="M:com.espertech.esper.type.StringValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.StringValue.ParseString(System.String)">
            <summary> Parse the string literal consisting of text between double-quotes or single-quotes.</summary>
            <param name="value">is the text wthin double or single quotes
            </param>
            <returns> parsed value
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.StringValue.Type">
            <summary>
            Returns the type of primitive value this instance represents.
            </summary>
            <value></value>
            <returns> enum type of primitive
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.StringValue.ValueObject">
            <summary>
            Returns a value object.
            </summary>
            <value></value>
            <returns> value object
            </returns>
        </member>
        <member name="P:com.espertech.esper.type.StringValue._String">
            <summary>
            Set a string value.
            </summary>
            <value></value>
        </member>
        <member name="T:com.espertech.esper.type.WildcardParameter">
            <summary>
            Represents a wildcard as a parameter.
            </summary>
        </member>
        <member name="M:com.espertech.esper.type.WildcardParameter.IsWildcard(System.Int32,System.Int32)">
            <summary>
            Returns true if all values between and including min and max are supplied by the parameter.
            </summary>
            <param name="min">lower end of range</param>
            <param name="max">upper end of range</param>
            <returns>
            true if parameter specifies all int values between min and max, false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.type.WildcardParameter.GetValuesInRange(System.Int32,System.Int32)">
            <summary>
            Return a set of int values representing the value of the parameter for the given range.
            </summary>
            <param name="min">lower end of range</param>
            <param name="max">upper end of range</param>
            <returns>set of integer</returns>
        </member>
        <member name="T:com.espertech.esper.util.AuditPath">
            <summary>
            Global bool for enabling and disable audit path reporting.
            </summary>
        </member>
        <member name="F:com.espertech.esper.util.AuditPath.QUERYPLAN_LOG">
            <summary>Log destination for the query plan logging./// </summary>
        </member>
        <member name="F:com.espertech.esper.util.AuditPath.JDBC_LOG">
            <summary>Log destination for the JDBC logging./// </summary>
        </member>
        <member name="F:com.espertech.esper.util.AuditPath.AUDIT_LOG">
            <summary>Log destination for the audit logging/// </summary>
        </member>
        <member name="F:com.espertech.esper.util.AuditPath.isAuditEnabled">
            <summary>Public access. </summary>
        </member>
        <member name="P:com.espertech.esper.util.AuditPath.IsAuditEnabled">
            <summary>
            Gets or sets execution path debug logging.
            </summary>
        </member>
        <member name="T:com.espertech.esper.util.MultiKeyCastingComparator">
            <summary>
            A comparator on multikeys. The multikeys must contain the same number of values.
            </summary>
        </member>
        <member name="T:com.espertech.esper.util.ObjectCollatingComparator">
            <summary>
            A comparator on objects that takes a bool array for ascending/descending.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.ObjectCollatingComparator.#ctor(System.Boolean)">
            <summary>Ctor. </summary>
            <param name="isDescendingValue">ascending or descending</param>
        </member>
        <member name="T:com.espertech.esper.util.ObjectComparator">
            <summary>
            A comparator on objects that takes a bool array for ascending/descending.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.ObjectComparator.#ctor(System.Boolean)">
            <summary>Ctor. </summary>
            <param name="isDescendingValue">ascending or descending</param>
        </member>
        <member name="M:com.espertech.esper.util.SerializerUtil.ObjectToByteArr(System.Object)">
            <summary>Serialize object to byte array. </summary>
            <param name="underlying">to serialize</param>
            <returns>byte array</returns>
        </member>
        <member name="M:com.espertech.esper.util.SerializerUtil.ByteArrToObject(System.Byte[])">
            <summary>Deserialize byte arry to object. </summary>
            <param name="bytes">to read</param>
            <returns>object</returns>
        </member>
        <member name="T:com.espertech.esper.util.TypeInstantiationException">
            <summary>
            Exception to represent an error instantiating a class from a class name.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.TypeInstantiationException.#ctor(System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="message">supplies the detailed description</param>
        </member>
        <member name="M:com.espertech.esper.util.TypeInstantiationException.#ctor(System.String,System.Exception)">
            <summary>Ctor. </summary>
            <param name="message">supplies the detailed description</param>
            <param name="cause">the exception cause</param>
        </member>
        <member name="M:com.espertech.esper.util.CoercerFactory.GetCoercer(System.Type)">
            <summary>
            Gets the type coercer from any object to the target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.util.CoercerFactory.GetCoercer(System.Type,System.Type)">
            <summary>
            Gets the type coercer between two types.
            </summary>
            <param name="fromType">From type.</param>
            <param name="targetType">Boxed target type.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.util.CoercerFactory.CoerceBoxed(System.Object,System.Type)">
            <summary>
            CoerceIndex the given number to the given type. Allows coerce to lower resultion number.
            Doesn't coerce to primitive types.
            <param name="itemToCoerce">numToCoerce is the number to coerce to the given type</param>
            <param name="resultBoxedType">the result type to return</param>
            <returns>the itemToCoerce as a value in the given result type</returns>
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.CoercerFactory.NullCoercion(System.Object)">
            <summary>
            Performs a null coercion.
            </summary>
            <param name="itemToCoerce">The item to coerce.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.util.CollectionUtil">
            <summary>
            Utility for handling collection or array tasks.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.CollectionUtil.IntArray(System.Collections.Generic.ICollection{System.Int32})">
            <summary>Returns an array of integer values from the set of integer values </summary>
            <param name="set">to return array for</param>
            <returns>array</returns>
        </member>
        <member name="M:com.espertech.esper.util.CollectionUtil.ToString``1(System.Collections.Generic.ICollection{``0})">
            <summary>Returns a list of the elements invoking toString on non-null elements. </summary>
            <param name="set">to render</param>
            <param name="&lt;T&gt;">type</param>
            <returns>comma-separate list of values (no escape)</returns>
        </member>
        <member name="T:com.espertech.esper.util.DatabaseTypeBinding">
            <summary>
            Binding from database output column type to object.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.DatabaseTypeBinding.GetValue(System.Object,System.String)">
            <summary>
            Returns the object for the given column.
            </summary>
            <param name="rawObject">The raw object.</param>
            <param name="columnName">is the column name</param>
            <returns>object</returns>
            <throws>SQLException if the mapping cannot be performed</throws>
        </member>
        <member name="P:com.espertech.esper.util.DatabaseTypeBinding.DataType">
            <summary>Returns the target data type.</summary>
            <returns>Data type</returns>
        </member>
        <member name="T:com.espertech.esper.util.DataRetriever">
            <summary>
            Returns the object for the given column.
            </summary>
        </member>
        <member name="T:com.espertech.esper.util.ProxyDatabaseTypeBinding`1">
            <summary>
            Implementation of the DataTypeBinding that uses delegates
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:com.espertech.esper.util.ProxyDatabaseTypeBinding`1.#ctor(com.espertech.esper.util.DataRetriever)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.util.ProxyDatabaseTypeBinding`1"/> class.
            </summary>
            <param name="retriever">The retriever.</param>
        </member>
        <member name="M:com.espertech.esper.util.ProxyDatabaseTypeBinding`1.GetValue(System.Object,System.String)">
            <summary>
            Returns the object for the given column.
            </summary>
            <param name="rawObject">The raw object.</param>
            <param name="columnName">is the column name</param>
            <returns>object</returns>
            <throws>SQLException if the mapping cannot be performed</throws>
        </member>
        <member name="P:com.espertech.esper.util.ProxyDatabaseTypeBinding`1.DataType">
            <summary>Returns the target data type.</summary>
            <returns>Data type</returns>
        </member>
        <member name="T:com.espertech.esper.util.DatabaseTypeEnum">
            <summary>
            Enumeration of the different built-in types that are used to represent database output column values.
            <para>
            Assigns a name to each type that serves as a short name in mapping, and a type.
            </para>
            <para>
            Provides binding implementations that use the correct ResultSet.get method to pull the correct type
            out of a statement's result set.
            </para>
            </summary>
        </member>
        <member name="F:com.espertech.esper.util.DatabaseTypeEnum.Boolean">
            <summary>Boolean type.</summary>
        </member>
        <member name="F:com.espertech.esper.util.DatabaseTypeEnum.Byte">
            <summary>Byte type.</summary>
        </member>
        <member name="F:com.espertech.esper.util.DatabaseTypeEnum.ByteArray">
            <summary>Byte array type.</summary>
        </member>
        <member name="F:com.espertech.esper.util.DatabaseTypeEnum.Decimal">
            <summary>Big decimal.</summary>
        </member>
        <member name="F:com.espertech.esper.util.DatabaseTypeEnum.Double">
            <summary>Double type.</summary>
        </member>
        <member name="F:com.espertech.esper.util.DatabaseTypeEnum.Float">
            <summary>Float type.</summary>
        </member>
        <member name="F:com.espertech.esper.util.DatabaseTypeEnum.Int">
            <summary>Integer type.</summary>
        </member>
        <member name="F:com.espertech.esper.util.DatabaseTypeEnum.Long">
            <summary>Long type.</summary>
        </member>
        <member name="F:com.espertech.esper.util.DatabaseTypeEnum.Short">
            <summary>Short type.</summary>
        </member>
        <member name="F:com.espertech.esper.util.DatabaseTypeEnum.String">
            <summary>String type.</summary>
        </member>
        <member name="F:com.espertech.esper.util.DatabaseTypeEnum.Timestamp">
            <summary>timestamp type.</summary>
        </member>
        <member name="M:com.espertech.esper.util.DatabaseTypeEnum.GetEnum(System.String)">
            <summary>
            Given a type name, matches for simple and fully-qualified type name (case-insensitive)
            as well as case-insensitive type name.
            </summary>
            <param name="type">is the named type</param>
            <returns>type enumeration value for type</returns>
        </member>
        <member name="P:com.espertech.esper.util.DatabaseTypeEnum.DataType">
            <summary>Retuns the type for the name.</summary>
        </member>
        <member name="P:com.espertech.esper.util.DatabaseTypeEnum.BoxedType">
            <summary>
            Gets the boxed data type.
            </summary>
            <value>The type of the boxed.</value>
        </member>
        <member name="P:com.espertech.esper.util.DatabaseTypeEnum.Binding">
            <summary>
            Returns the binding for this enumeration value for
            reading the database result set and returning the right type.
            </summary>
            <value>The binding.</value>
            <returns>mapping of output column type to built-in</returns>
        </member>
        <member name="T:com.espertech.esper.util.DependencyGraph">
            <summary>
            Model of dependency of lookup, in which one stream supplies values for lookup in another stream.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.DependencyGraph.#ctor(System.Int32,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="numStreams">number of streams</param>
            <param name="allowDependencySame">if set to <c>true</c> [allow dependency same].</param>
        </member>
        <member name="M:com.espertech.esper.util.DependencyGraph.AddDependency(System.Int32,System.Collections.Generic.ICollection{System.Int32})">
            <summary>
            Adds dependencies that a target may have on required streams.
            </summary>
            <param name="target">the stream having dependencies on one or more other streams</param>
            <param name="requiredStreams">the streams that the target stream has a dependency on</param>
        </member>
        <member name="M:com.espertech.esper.util.DependencyGraph.AddDependency(System.Int32,System.Int32)">
            <summary>
            Adds a single dependency of target on a required streams.
            </summary>
            <param name="target">the stream having dependencies on one or more other streams</param>
            <param name="from">a single required streams that the target stream has a dependency on</param>
        </member>
        <member name="M:com.espertech.esper.util.DependencyGraph.HasDependency(System.Int32)">
            <summary>
            Returns true if the stream asked for has a dependency.
            </summary>
            <param name="stream">to check dependency for</param>
            <returns>true if a dependency exist, false if not</returns>
        </member>
        <member name="M:com.espertech.esper.util.DependencyGraph.GetDependenciesForStream(System.Int32)">
            <summary>Returns the set of dependent streams for a given stream. </summary>
            <param name="stream">to return dependent streams for</param>
            <returns>set of stream numbers of stream providing properties</returns>
        </member>
        <member name="M:com.espertech.esper.util.DependencyGraph.GetRootNodes(System.Collections.Generic.ICollection{System.Int32})">
            <summary>
            Return the root nodes ignoring the nodes provided.
            </summary>
            <param name="ignoreList">nodes to be ignored</param>
            <returns>root nodes</returns>
        </member>
        <member name="M:com.espertech.esper.util.DependencyGraph.HasUnsatisfiedDependency(System.Int32,System.Collections.Generic.ICollection{System.Int32})">
            <summary>Check if the given stream has any dependencies, direct or indirect, to any of the streams that are not in the ignore list. </summary>
        </member>
        <member name="P:com.espertech.esper.util.DependencyGraph.NumStreams">
            <summary>Returns the number of streams. </summary>
            <value>number of streams</value>
        </member>
        <member name="P:com.espertech.esper.util.DependencyGraph.Dependencies">
            <summary>
            Returns a map of stream number and the streams dependencies.
            </summary>
            <value>map of dependencies</value>
        </member>
        <member name="P:com.espertech.esper.util.DependencyGraph.RootNodes">
            <summary>
            Returns a set of stream numbers that are the root dependencies, i.e. the dependencies with the deepest graph.
            </summary>
            <value>set of stream number of streams</value>
        </member>
        <member name="P:com.espertech.esper.util.DependencyGraph.FirstCircularDependency">
            <summary>Returns any circular dependency as a stack of stream numbers, or null if none exist. </summary>
            <value>circular dependency stack</value>
        </member>
        <member name="T:com.espertech.esper.util.EsperSectionHandler">
            <summary>
            Handles custom configuration sections for Esper.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.EsperSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates the section from the node information.
            </summary>
            <param name="parent"></param>
            <param name="configContext">Configuration context object.</param>
            <param name="section"></param>
            <returns>The created section handler object.</returns>
        </member>
        <member name="T:com.espertech.esper.util.GraphCircularDependencyException">
            <summary>Exception to represent a circular dependency. </summary>
        </member>
        <member name="M:com.espertech.esper.util.GraphCircularDependencyException.#ctor(System.String)">
            <summary>Ctor. </summary>
            <param name="message">supplies the detailed description</param>
        </member>
        <member name="M:com.espertech.esper.util.GraphCircularDependencyException.#ctor(System.String,System.Exception)">
            <summary>Ctor. </summary>
            <param name="message">supplies the detailed description</param>
            <param name="innerException">the exception cause</param>
        </member>
        <member name="T:com.espertech.esper.util.GraphUtil">
            <summary>
            Utility for working with acyclic graph: determines cyclic dependency and dependency-satisfying processing order.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.GraphUtil.MergeNestableMap(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Deep-merge a map into another map returning a result map.
            <para/>
            Copies all values present in the original map to a new map, adding additional value present in
            the second map passed in, ignoring same-key values in the second map that are present in the original.
            <para/>
            If the value is a Map itself, repeats the operation on the Map value.
            </summary>
            <param name="original">nestable Map of entries to retain and not overwrite</param>
            <param name="additional">nestable Map of entries to add to the original</param>
            <returns>
            merge of original and additional nestable map
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.GraphUtil.GetTopDownOrder(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.ICollection{System.String}})">
            <summary>Check cyclic dependency and determine processing order for the given graph. </summary>
            <param name="graph">is represented as child nodes that have one or more parent nodes that they are dependent on</param>
            <returns>set of parent and child nodes in order such that no node's dependency is not satisfiedby a prior nodein the set </returns>
            <throws>GraphCircularDependencyException if a dependency has been detected</throws>
        </member>
        <member name="M:com.espertech.esper.util.GraphUtil.GetFirstCircularDependency(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.ICollection{System.String}})">
            <summary>Returns any circular dependency as a stack of stream numbers, or null if none exist. </summary>
            <param name="graph">the dependency graph</param>
            <returns>circular dependency stack</returns>
        </member>
        <member name="T:com.espertech.esper.util.LevenshteinDistance">
            <summary>
            Utility for string comparison based on the Levenshtein algo.
            </summary>
        </member>
        <member name="F:com.espertech.esper.util.LevenshteinDistance.ACCEPTABLE_DISTANCE">
            <summary>Make 3 characters an acceptable distance for reporting. </summary>
        </member>
        <member name="M:com.espertech.esper.util.LevenshteinDistance.ComputeLevenshteinDistance(System.String,System.String)">
            <summary>
            Compute the distance between two strins using the Levenshtein algorithm, including a case-insensitive string comparison.
            </summary>
            <param name="str1">first string</param>
            <param name="str2">second string</param>
            <returns>
            distance or zero if case-insensitive string comparison found equal stringsor int.MaxValue for invalid comparison because of null values.
            </returns>
        </member>
        <member name="T:com.espertech.esper.util.MetricUtil">
            <summary>
            Utility for CPU and wall time metrics.
            </summary>
        </member>
        <member name="P:com.espertech.esper.util.MetricUtil.CurrentProcessThread">
            <summary>
            Gets the current process thread.
            </summary>
            <value>The current process thread.</value>
        </member>
        <member name="P:com.espertech.esper.util.MetricUtil.UserProcessorTime">
            <summary>
            Gets the user processor time for the current thread.
            </summary>
            <value>The user processor time.</value>
        </member>
        <member name="P:com.espertech.esper.util.MetricUtil.TotalProcessorTime">
            <summary>
            Gets the total processor time for the current thread.
            </summary>
            <value>The total processor time.</value>
        </member>
        <member name="T:com.espertech.esper.util.MultiKeyCollatingComparator">
            <summary>
            A comparator on multikeys with string values and using the Collator for
            comparing. The multikeys must contain the same number of values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.MultiKeyCollatingComparator.#ctor(System.Boolean[],System.Boolean[])">
            <summary>
            Ctor.
            </summary>
            <param name="isDescendingValues">each value is true if the corresponding (same index)entry in the multi-keys is to be sorted in descending order. The multikeys to be compared must have the same number of values as this array.</param>
            <param name="stringTypeValues">true for each string-typed column</param>
        </member>
        <member name="T:com.espertech.esper.util.PlaceholderParseException">
            <summary> Exception to indicate a parse error in parsing placeholders.</summary>
        </member>
        <member name="M:com.espertech.esper.util.PlaceholderParseException.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="message">is the error message
            </param>
        </member>
        <member name="T:com.espertech.esper.util.PlaceholderParser">
            <summary>
            Parser for strings with substitution parameters of the form ${parameter}.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.PlaceholderParser.ParsePlaceholder(System.String)">
            <summary> Parses a string to find placeholders of format ${placeholder}.
            <para>
            Example: "My ${thing} is ${color}"
            </para>
            <para>
            The example above parses into 4 fragements: a text fragment of value "My ",
            a parameter fragment "thing", a text fragement " is " and a parameter
            fragment "color".
            </para>
            </summary>
            <param name="parseString">is the string to parse
            </param>
            <returns> list of fragements that can be either text fragments or placeholder fragments
            </returns>
            <throws>  PlaceholderParseException if the string cannot be parsed to indicate syntax errors </throws>
        </member>
        <member name="T:com.espertech.esper.util.PlaceholderParser.Fragment">
            <summary>
            Fragment is a parse result, a parse results in an ordered list of fragments.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.PlaceholderParser.Fragment.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="value">is the fragment text
            </param>
        </member>
        <member name="M:com.espertech.esper.util.PlaceholderParser.Fragment.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.util.PlaceholderParser.Fragment.Value">
            <summary> Returns the string text of the fragment.</summary>
            <returns> fragment string
            </returns>
        </member>
        <member name="P:com.espertech.esper.util.PlaceholderParser.Fragment.IsParameter">
            <summary> Returns true to indicate this is a parameter and not a text fragment.</summary>
            <returns> true if parameter fragement, false if text fragment.
            </returns>
        </member>
        <member name="T:com.espertech.esper.util.PlaceholderParser.TextFragment">
            <summary>
            Represents a piece of text in a parse string with placeholder values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.PlaceholderParser.TextFragment.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="value">is the text
            </param>
        </member>
        <member name="M:com.espertech.esper.util.PlaceholderParser.TextFragment.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.PlaceholderParser.TextFragment.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.PlaceholderParser.TextFragment.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.util.PlaceholderParser.TextFragment.IsParameter">
            <summary>
            Returns true to indicate this is a parameter and not a text fragment.
            </summary>
            <value></value>
            <returns> true if parameter fragement, false if text fragment.
            </returns>
        </member>
        <member name="T:com.espertech.esper.util.PlaceholderParser.ParameterFragment">
            <summary>
             Represents a parameter in a parsed string of texts and parameters.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.PlaceholderParser.ParameterFragment.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="value">is the parameter name
            </param>
        </member>
        <member name="M:com.espertech.esper.util.PlaceholderParser.ParameterFragment.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.PlaceholderParser.ParameterFragment.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.PlaceholderParser.ParameterFragment.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.util.PlaceholderParser.ParameterFragment.IsParameter">
            <summary>
            Returns true to indicate this is a parameter and not a text fragment.
            </summary>
            <value></value>
            <returns> true if parameter fragement, false if text fragment.
            </returns>
        </member>
        <member name="T:com.espertech.esper.util.SerializableObjectCopier">
            <summary>
            Utility class for copying serializable objects via object input and output streams.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.SerializableObjectCopier.Copy(System.Object)">
            <summary>Deep copies the input object.</summary>
            <param name="orig">is the object to be copied, must be serializable</param>
            <returns>copied object</returns>
            <throws>IOException if the streams returned an exception</throws>
            <throws>ClassNotFoundException if the de-serialize fails</throws>
        </member>
        <member name="M:com.espertech.esper.util.StreamSerializer.Accepts(System.Type)">
            <summary>
            Acceptses the specified c.
            </summary>
            <param name="c">The c.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.util.StreamSerializer.SerializeAny(System.Object,System.IO.Stream)">
            <summary>
            Serializes any.
            </summary>
            <param name="value">The value.</param>
            <param name="stream">The output stream.</param>
        </member>
        <member name="M:com.espertech.esper.util.StreamSerializer.DeserializeAny(System.IO.Stream)">
            <summary>
            Deserializes any.
            </summary>
            <param name="stream">The input stream.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.util.SimpleTypeCaster">
            <summary>
            Casts an object to another type, typically for numeric types.
            <para/>
            May performs a compatibility check and returns null if not compatible.
            </summary>
            <param name="value">to cast</param>
            <returns>casted or transformed object, possibly the same, or null if the cast cannot be made</returns>
        </member>
        <member name="T:com.espertech.esper.util.SimpleTypeCasterFactory">
            <summary>
            Factory for casters, which take an object and safely cast to a given type, 
            performing coercion or dropping precision if required. 
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.SimpleTypeCasterFactory.GetCaster(System.Type,System.Type)">
            <summary>
            Returns a caster that casts to a target type.
            </summary>
            <param name="fromType">can be null, if not known</param>
            <param name="targetType">to cast to</param>
            <returns>
            caster for casting objects to the required type
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.SimpleTypeCasterFactory.GetCaster(System.Type)">
            <summary>
            Returns a caster that casts to a target type.
            </summary>
            <param name="targetType">to cast to</param>
            <returns>
            caster for casting objects to the required type
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.SimpleTypeCasterFactory.GetCaster(System.Type,System.Boolean@)">
            <summary>
            Returns a caster that casts to a target type.
            </summary>
            <param name="targetType">to cast to</param>
            <param name="isNumeric">if set to <c>true</c> [is numeric].</param>
            <returns>
            caster for casting objects to the required type
            </returns>
        </member>
        <member name="T:com.espertech.esper.util.SimpleTypeParser">
            <summary>Parser of a String input to an object. </summary>
        </member>
        <member name="T:com.espertech.esper.util.SimpleTypeParserFactory">
            <summary>
            A factory for creating an instance of a parser that parses a String and returns a target type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.SimpleTypeParserFactory.GetParser(System.Type)">
            <summary>
            Returns a parsers for the String value using the given built-in class for parsing.
            </summary>
            <param name="type">is the type to parse the value to</param>
            <returns>value matching the type passed in</returns>
        </member>
        <member name="T:com.espertech.esper.util.SQLTypeMapUtil">
            <summary>
            Utility for mapping SQL types to native types.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.SQLTypeMapUtil.SqlTypeToClass(System.Int32,System.String)">
            <summary>
            Converts a SQLType to a native type.
            </summary>
            <param name="sqlType">to return type for</param>
            <param name="className">
            is the classname that result metadata returns for a column
            </param>
            <returns>Type for sql types</returns>
        </member>
        <member name="T:com.espertech.esper.util.StopCallback">
            <summary>
             General pupose callback to Stop a resource and free it's underlying resources.
            </summary>
        </member>
        <member name="T:com.espertech.esper.util.CoercionException">
            <summary>
            Exception to represent a Mismatch in types in an expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.CoercionException.#ctor(System.String)">
            <summary> Ctor.</summary>
            <param name="message">supplies the detailed description
            </param>
        </member>
        <member name="T:com.espertech.esper.util.ConstructorHelper">
            <summary>
            Helper class to find and invoke a class constructors that matches the types of arguments supplied.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.ConstructorHelper.InvokeConstructor(System.Type,System.Object[])">
            <summary>
            Find and invoke constructor matching the argument number and types returning an instance of given class.
            </summary>
            <param name="type">is the class of instance to construct</param>
            <param name="arguments">is the arguments for the constructor to match in number and type</param>
            <returns>instance of class</returns>
            <throws>IllegalAccessException thrown if no access to class</throws>
            <throws>NoSuchMethodException thrown when the constructor is not found</throws>
            <throws>TargetInvocationException thrown when the ctor throws and exception</throws>
            <throws>InstantiationException thrown when the class cannot be loaded</throws>
        </member>
        <member name="T:com.espertech.esper.util.ExecutionPathDebugLog">
            <summary>
            Utility class that control debug-level logging in the execution path
            beyond which is controlled by logging infrastructure.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.ExecutionPathDebugLog.#cctor">
            <summary>
            Initializes the <see cref="T:com.espertech.esper.util.ExecutionPathDebugLog"/> class.
            </summary>
        </member>
        <member name="P:com.espertech.esper.util.ExecutionPathDebugLog.IsEnabled">
            <summary>
            Gets or sets a flag that allows execution path debug logging.
            </summary>
        </member>
        <member name="P:com.espertech.esper.util.ExecutionPathDebugLog.IsTimerDebugEnabled">
            <summary>
            Public access.
            </summary>
        </member>
        <member name="T:com.espertech.esper.util.Indent">
            <summary>
            Utility class around indenting and formatting text.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.Indent.CreateIndent(System.Int32)">
            <summary> Utility method to indent a text for a number of characters.</summary>
            <param name="numChars">is the number of character to indent with spaces
            </param>
            <returns> the formatted string
            </returns>
        </member>
        <member name="T:com.espertech.esper.util.IndentWriter">
            <summary>
            Writer that uses an underlying PrintWriter to indent output text for easy reading.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.IndentWriter.#ctor(System.IO.TextWriter,System.Int32,System.Int32)">
            <summary> Ctor.</summary>
            <param name="writer">to output to
            </param>
            <param name="startIndent">is the depth of indent to Start
            </param>
            <param name="deltaIndent">is the number of characters to indent for every incrIndent() call
            </param>
        </member>
        <member name="M:com.espertech.esper.util.IndentWriter.IncrIndent">
            <summary> Increase the indentation one level.</summary>
        </member>
        <member name="M:com.espertech.esper.util.IndentWriter.DecrIndent">
            <summary> Decrease the indentation one level.</summary>
        </member>
        <member name="M:com.espertech.esper.util.IndentWriter.WriteLine(System.String)">
            <summary> Print text to the underlying writer.</summary>
            <param name="text">to print
            </param>
        </member>
        <member name="T:com.espertech.esper.util.LikeUtil">
            <summary>
             Utility for performing a SQL Like comparsion.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.LikeUtil.#ctor(System.String,System.Nullable{System.Char},System.Boolean)">
            <summary> Ctor.</summary>
            <param name="pattern">is the SQL-like pattern to</param>
            <param name="escape">is the escape character</param>
            <param name="ignorecase">is true to ignore the case, or false if not</param>
        </member>
        <member name="M:com.espertech.esper.util.LikeUtil.Compare(System.String)">
            <summary> Execute the string.</summary>
            <param name="compareString">is the string to compare
            </param>
            <returns> true if pattern matches, or false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.LikeUtil.ResetPattern(System.String)">
            <summary> Resets the search pattern.</summary>
            <param name="pattern">is the new pattern to match against
            </param>
        </member>
        <member name="T:com.espertech.esper.util.MultiKeyComparator">
            <summary> A comparator on multikeys. The multikeys must contain the same
            number of values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.MultiKeyComparator.#ctor(System.Boolean[])">
            <summary> Ctor.</summary>
            <param name="isDescendingValues">each value is true if the corresponding (same index)
            entry in the multi-keys is to be sorted in descending order. The multikeys
            to be compared must have the same number of values as this array.
            </param>
        </member>
        <member name="M:com.espertech.esper.util.MultiKeyComparator.Compare(com.espertech.esper.collection.MultiKeyUntyped,com.espertech.esper.collection.MultiKeyUntyped)">
            <summary>
            Compares the specified first values.
            </summary>
            <param name="firstValues">The first values.</param>
            <param name="secondValues">The second values.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.util.MultiKeyComparator.CompareValues(System.Object,System.Object,System.Boolean)">
            <summary>
            Compares two nullable values.
            </summary>
            <param name="valueOne">first value to compare</param>
            <param name="valueTwo">second value to compare</param>
            <param name="isDescending">true for descending</param>
            <returns>
            compare result
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.MultiKeyComparator.CompareValues(System.Object,System.Object,System.Boolean,System.StringComparison)">
            <summary>
            Compares two nullable values using string options for use with string-typed values.
            </summary>
            <param name="valueOne">first value to compare</param>
            <param name="valueTwo">second value to compare</param>
            <param name="isDescending">true for descending</param>
            <param name="comparisonOptions">the options string for comparison</param>
            <returns>compare result</returns>
        </member>
        <member name="M:com.espertech.esper.util.MultiKeyComparator.CompareValues(System.Object,System.Object,System.Boolean,System.StringComparer)">
            <summary>
            Compares two nullable values using string options for use with string-typed values.
            </summary>
            <param name="valueOne">first value to compare</param>
            <param name="valueTwo">second value to compare</param>
            <param name="isDescending">true for descending</param>
            <param name="comparer">the options string for comparison</param>
            <returns>compare result</returns>
        </member>
        <member name="T:com.espertech.esper.util.NullableObject`1">
            <summary>
            A generic class to hold an object that may itself be a null value versus an
            undefined (not existing) value.
            <para/>
            The presence of a reference indicates that a value exists, the absence of a reference
            to this object indicates that there is no value (similar to a Pair&lt;Object, Boolean&gt;).
             </summary>
        </member>
        <member name="M:com.espertech.esper.util.NullableObject`1.#ctor(`0)">
            <summary>Ctor. </summary>
            <param name="value">the value to contain</param>
        </member>
        <member name="P:com.espertech.esper.util.NullableObject`1.Value">
            <summary>Returns the contained value. </summary>
            <returns>contained value</returns>
        </member>
        <member name="T:com.espertech.esper.util.MethodResolver">
            <summary>
            Used for retrieving static and instance method objects. It provides two points of added functionality
            over the standard reflection mechanism of retrieving methods. First, class names can be partial, and 
            if the class name is partial then System is searched for the class. Second, invocation parameter 
            types don't have to match the declaration parameter types exactly when the standard conversion mechanisms 
            (currently autoboxing and widening conversions) will make the invocation valid. Preference is given to 
            those methods that require the fewest widening conversions.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.MethodResolver.ResolveMethod(System.Type,System.String,System.Type[],System.Boolean)">
            <summary>Attempts to find the static or instance method described by the parameters, or a method of the same name that will accept the same type of parameters. </summary>
            <param name="declaringClass">the class to search for the method</param>
            <param name="methodName">the name of the method</param>
            <param name="paramTypes">the parameter types for the method</param>
            <param name="allowInstance">true to allow instance methods as well, false to allow only static method</param>
            <returns>- the Method object for this method</returns>
            <throws>EngineNoSuchMethodException if the method could not be found</throws>
        </member>
        <member name="P:com.espertech.esper.util.MethodResolver.WideningConversions">
            <summary>
            Returns the allowable widening conversions.
            </summary>
            <value>
            map where key is the class that we are asking to be widened into, anda set of classes that can be widened from
            </value>
        </member>
        <member name="T:com.espertech.esper.util.ThreadLogUtil">
            <summary>
            Utility class for logging threading-related messages.
            <para>
            Prints thread information and lock-specific info.
            </para>
            </summary>
        </member>
        <member name="F:com.espertech.esper.util.ThreadLogUtil.ENABLED_TRACE">
            <summary>Enable trace logging.</summary>
        </member>
        <member name="F:com.espertech.esper.util.ThreadLogUtil.ENABLED_INFO">
            <summary>Enable info logging.</summary>
        </member>
        <member name="F:com.espertech.esper.util.ThreadLogUtil.TRACE">
            <summary>Set trace log level.</summary>
        </member>
        <member name="F:com.espertech.esper.util.ThreadLogUtil.INFO">
            <summary>Set info log level.</summary>
        </member>
        <member name="M:com.espertech.esper.util.ThreadLogUtil.Trace(System.String,System.Object[])">
            <summary>If enabled, logs for trace level the given objects and text</summary>
            <param name="text">to log</param>
            <param name="objects">to write</param>
        </member>
        <member name="M:com.espertech.esper.util.ThreadLogUtil.Info(System.String,System.Object[])">
            <summary>If enabled, logs for info level the given objects and text</summary>
            <param name="text">to log</param>
            <param name="objects">to write</param>
        </member>
        <member name="M:com.espertech.esper.util.ThreadLogUtil.TraceLock(System.String,System.Object)">
            <summary>Logs the lock and action.</summary>
            <param name="lockAction">is the action towards the lock</param>
            <param name="lockObj">is the lock instance</param>
        </member>
        <member name="M:com.espertech.esper.util.ThreadLogUtil.TraceLock(System.String,System.Threading.ReaderWriterLock)">
            <summary>Logs the lock and action.</summary>
            <param name="lockAction">is the action towards the lock</param>
            <param name="lockObj">is the lock instance</param>
        </member>
        <member name="T:com.espertech.esper.util.TypeHelper">
            <summary>
            Helper for questions about types.
            <para> what is the boxed type for a primitive type</para>
            	<para> is this a numeric type.</para>
            </summary>
        </member>
        <member name="F:com.espertech.esper.util.TypeHelper.IntegralTypes">
            <summary>
            Integral types (used for testing)
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.#cctor">
            <summary>
            Initializes the <see cref="T:com.espertech.esper.util.TypeHelper"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetParameterAsString(System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo})">
            <summary>
            Gets the parameter as string.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetParameterAsString(System.Collections.Generic.IEnumerable{System.Type},System.Boolean)">
            <summary>
            Returns a comma-separated parameter type list in readable form,considering arrays and null-type parameters.
            </summary>
            <param name="parameters">is the parameter types to render</param>
            <param name="useFullName">if set to <c>true</c> [use full name].</param>
            <returns>rendered list of parameters</returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetParameterAsString(System.Type,System.Boolean)">
            <summary>
            Returns a parameter as a string text, allowing null values to represent a nullselect expression type.
            </summary>
            <param name="param">is the parameter type</param>
            <param name="useFullName">if set to <c>true</c> [use full name].</param>
            <returns>string representation of parameter</returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetBoxedType(System.Object)">
            <summary>
            Gets the boxed type for the value.
            </summary>
            <param name="any">Any.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetBoxedType(System.Type)">
            <summary>
            Returns the boxed class for the given class, or the class itself if already boxed or not a primitive type.
            For primitive unboxed types returns the boxed types, e.g. returns typeof(int?) for passing typeof(int).
            For any other class, returns the class passed.
            </summary>
            <param name="type">is the type to return the boxed type for</param>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetPrimitiveType(System.Type)">
            <summary>
            Returns the un-boxed class for the given class, or the class itself if already un-boxed or not a primitive type.
            For primitive boxed types returns the unboxed primitive type, e.g. returns typeof(int) for passing typeof(int?).
            For any other class, returns the class passed.
            </summary>
            <param name="type">
            is the class to return the unboxed (or primitive) class for
            </param>
            <returns>primitive variant of the same class</returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetBoxedTypeName(System.String)">
            <summary>
            Returns for the class name given the class name of the boxed (wrapped) type if
            the class name is one of the CLR primitive types.
            </summary>
            <param name="typeName">a type name, a CLR primitive type or other class</param>
            <returns>boxed type name if CLR primitive type, or just same class name passed in if not a primitive type</returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsBoolean(System.Type)">
            <summary>
            Determines whether the specified type is bool.
            </summary>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if the specified type is bool; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsCharacter(System.Type)">
            <summary>
            Returns true if the type represents a character type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsFloatingPoint(System.Type)">
            <summary>
            Returns true if the type represents a floating point numeric type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsIntegral(System.Type,System.Type)">
            <summary>
            Determines whether the specified type is integral.
            </summary>
            <param name="type">The type.</param>
            <param name="maxIntegralType">Widest integral type.</param>
            <returns>
            	<c>true</c> if the specified type is integral; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsIntegral(System.Type)">
            <summary> Determines if the type passed in is one of the integral numeric types.</summary>
            <param name="type">to check</param>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsIntegralNumber(System.Object,System.Type)">
            <summary>
            Determines if the type passed in is one of the integral numeric types.
            </summary>
            <param name="value">to check</param>
            <param name="maxIntegralType">Type of the max integral.</param>
            <returns>
            	<c>true</c> if [is integral number] [the specified value]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsIntegralNumber(System.Object)">
            <summary> Determines if the type passed in is one of the integral numeric types.</summary>
            <param name="value">to check</param>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsNumeric(System.Type)">
            <summary> Determines if the type passed in is one of the numeric types.</summary>
            <param name="type">to check</param>
            <returns> true if numeric, false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsNumericNonFP(System.Type)">
            <summary>Determines if the class passed in is one of the numeric classes and not a floating point.</summary>
            <param name="type">type to check</param>
            <returns>true if numeric and not a floating point, false if not</returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsNumericValue(System.Object)">
            <summary> Determines if the value passed in is one of the numeric types.</summary>
            <param name="value">to check</param>
            <returns> true if numeric, false if not</returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetArithmaticCoercionType(System.Type,System.Type)">
            <summary>
            Returns the coercion type for the 2 numeric types for use in arithmatic.
            Note: byte and short types always result in integer.
            </summary>
            <param name="typeOne">The first type.</param>
            <param name="typeTwo">The second type.</param>
            <returns>coerced type</returns>
            <throws>  CoercionException if types don't allow coercion </throws>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsFloatingPointNumber(System.Object)">
            <summary>
            Returns true if the Number instance is a floating point number.
            </summary>
            <param name="number">to check</param>
            <returns>true if number is Float or double type</returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsFloatingPointClass(System.Type)">
            <summary>
            Returns true if the supplied type is a floating point number.
            </summary>
            <param name="type">to check</param>
            <returns>
            true if primitive or boxed float or double
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetCompareToCoercionType(System.Type,System.Type)">
            <summary>
            Returns for 2 classes to be compared via relational operator the Class type of
            common comparison. The output is always typeof(long?), typeof(double), typeof(String) or typeof(bool)
            depending on whether the passed types are numeric and floating-point.
            Accepts primitive as well as boxed types.
            </summary>
            <param name="typeOne">The first type.</param>
            <param name="typeTwo">The second type.</param>
            <returns>
            One of typeof(long?), typeof(double) or typeof(String)
            </returns>
            <throws>  ArgumentException if the types cannot be compared </throws>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.CanCoerce(System.Type,System.Type)">
            <summary>
            Determines if a number can be coerced upwards to another number class without loss.
            <para>
            Clients must pass in two classes that are numeric types.
            </para>
            <para>
            Any number class can be coerced to double, while only double cannot be coerced to float.
            Any non-floating point number can be coerced to long.
            Integer can be coerced to Byte and Short even though loss is possible, for convenience.
            </para>
            </summary>
            <param name="numberClassToBeCoerced">the number class to be coerced</param>
            <param name="numberClassToCoerceTo">the number class to coerce to</param>
            <returns>true if numbers can be coerced without loss, false if not</returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsBuiltinDataType(System.Type)">
            <summary>
            Returns true if the class passed in is a built-in data type (primitive or wrapper)
            including String.
            </summary>
            <param name="type">The type.</param>
            <returns>
            true if built-in data type, or false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsAssignmentCompatible(System.Type,System.Type)">
            <summary>
            Returns true if 2 classes are assignment compatible.
            </summary>
            <param name="invocationType">type to assign from</param>
            <param name="declarationType">type to assign to</param>
            <returns>
            true if assignment compatible, false if not
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetCommonCoercionType(System.Collections.Generic.IList{System.Type})">
            <summary>
            Determines a common denominator type to which one or more types can be casted or coerced.
            For use in determining the result type in certain expressions (coalesce, case).
            <para>
            Null values are allowed as part of the input and indicate a 'null' constant value
            in an expression tree. Such as value doesn't have any type and can be ignored in
            determining a result type.
            </para>
            	<para>
            For numeric types, determines a coercion type that all types can be converted to
            via the method GetArithmaticCoercionType.
            </para>
            	<para>
            Indicates that there is no common denominator type by throwing <see cref="T:com.espertech.esper.util.CoercionException"/>.
            </para>
            </summary>
            <param name="types">is an array of one or more types, which can be built-in (primitive or wrapper)
            or user types</param>
            <returns>
            common denominator type if any can be found, for use in comparison
            </returns>
            <throws>  CoercionException </throws>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetTypeForSimpleName(System.String)">
            <summary>
            Returns the boxed class for the given type name, recognizing all primitive and abbreviations,
            uppercase and lowercase.
            <para/>
            Recognizes "int" as System.Int32 and "strIng" as System.String, and "Integer" as System.Int32,
            and so on.
            </summary>
            <param name="typeName">is the name to recognize</param>
            <returns>class</returns>
            <throws>EventAdapterException is throw if the class cannot be identified</throws>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetPrimitiveTypeForName(System.String)">
            <summary>
            Gets the primitive type for the given name.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.Parse(System.Type,System.String)">
            <summary>Parse the String using the given built-in class for parsing.</summary>
            <param name="clazz">is the class to parse the value to</param>
            <param name="text">is the text to parse</param>
            <returns>value matching the type passed in</returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsImplementsInterface(System.Type,System.Type)">
            <summary>
            Method to check if a given class, and its superclasses and interfaces (deep), implement a given interface.
            </summary>
            <param name="clazz">to check, including all its superclasses and their interfaces and extends</param>
            <param name="interfaceClass">is the interface class to look for</param>
            <returns>
            true if such interface is implemented by any of the clazz or its superclasses orextends by any interface and superclasses (deep check)
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.ResolveType(System.String,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
            Resolves a type using the assembly qualified type name.  If the type
            can not be resolved using a simple Type.GetType() [which many can not],
            then the method will check all assemblies in the assembly search path.
            </summary>
            <param name="assemblyQualifiedTypeName">Name of the assembly qualified type.</param>
            <param name="assemblySearchPath">The assembly search path.</param>
            <param name="throwOnError">if set to <c>true</c> [throw on missing].</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.ResolveType(System.String,System.Boolean)">
            <summary>
            Resolves a type using the assembly qualified type name.  If the type
            can not be resolved using a simple Type.GetType() [which many can not],
            then the method will check all assemblies currently loaded into the
            AppDomain.
            </summary>
            <param name="assemblyQualifiedTypeName">Name of the assembly qualified type.</param>
            <param name="throwOnError">if set to <c>true</c> [throw on missing].</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsOpenDictionary(System.Type)">
            <summary>
            Determines whether the type is usable as an dictionary.
            </summary>
            <param name="t">The t.</param>
            <returns>
            	<c>true</c> if [is dictionary type] [the specified t]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsSubclassOrImplementsInterface(System.Type,System.Type)">
            <summary>Method to check if a given class, and its superclasses and interfaces (deep), implement a given interface or extend a given class.</summary>
            <param name="extendorOrImplementor">is the class to inspects its extends and implements clauses</param>
            <param name="extendedOrImplemented">is the potential interface, or superclass, to check</param>
            <returns>true if such interface is implemented by any of the clazz or its superclasses orextends by any interface and superclasses (deep check)</returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.Instantiate(System.Type)">
            <summary>
            Instantiates the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.Instantiate``1(System.String)">
            <summary>
            Looks up the given class and checks that it implements or extends the required interface,and instantiates an object.
            </summary>
            <typeparam name="T">is the type that the looked-up class should extend or implement</typeparam>
            <param name="typeName">of the class to load, check type and instantiate</param>
            <returns>instance of given class, via newInstance</returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetBaseInterfaces(System.Type,System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Gets the base interfaces for the provided type and store them
            in the result set.
            </summary>
            <param name="type">The type.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetBaseClasses(System.Type,System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Gets the base classes for the provided type and store them
            in the result set.
            </summary>
            <param name="type">The type.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetBase(System.Type,System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Populates all interface and superclasses for the given class, recursivly.
            </summary>
            <param name="type">to reflect upon</param>
            <param name="result">set of classes to populate</param>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.IsFragmentableType(System.Type)">
            <summary>
            Returns true if the Class is a fragmentable type, i.e. not a primitive or boxed
            type or any of the common built-in types or does not implement Map.
            </summary>
            <param name="propertyType">type to check</param>
            <returns>
            true if fragmentable
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetGenericReturnType(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Returns the generic type parameter of a return value by a field, property or method.
            </summary>
            <param name="memberInfo">The member info.</param>
            <param name="isAllowNull">if set to <c>true</c> [is allow null].</param>
            <returns>generic type parameter</returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetGenericReturnTypeMap(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Returns the second generic type parameter of a return value by a field or
            method.
            </summary>
            <param name="memberInfo">The member info.</param>
            <param name="isAllowNull">whether null is allowed as a return value or expected typeof(object)</param>
            <returns>generic type parameter</returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetGenericReturnType(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            Returns the generic type parameter of a return value by a method.
            </summary>
            <param name="method">method or null if field</param>
            <param name="isAllowNull">whether null is allowed as a return value or expected typeof(object)</param>
            <returns>
            generic type parameter
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetGenericReturnTypeMap(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            Returns the second generic type parameter of a return value by a field or
            method.
            </summary>
            <param name="method">method or null if field</param>
            <param name="isAllowNull">whether null is allowed as a return value or expected typeof(object)</param>
            <returns>
            generic type parameter
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetGenericPropertyType(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Returns the generic type parameter of a return value by a property.
            </summary>
            <param name="property">property or null if method</param>
            <param name="isAllowNull">whether null is allowed as a return value or expected typeof(object)</param>
            <returns>
            generic type parameter
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetGenericPropertyTypeMap(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Returns the generic type parameter of a return value by a property.
            </summary>
            <param name="property">property or null if method</param>
            <param name="isAllowNull">whether null is allowed as a return value or expected typeof(object)</param>
            <returns>
            generic type parameter
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetGenericFieldType(System.Reflection.FieldInfo,System.Boolean)">
            <summary>
            Returns the generic type parameter of a return value by a field.
            </summary>
            <param name="field">field or null if method</param>
            <param name="isAllowNull">whether null is allowed as a return value or expected typeof(object)</param>
            <returns>
            generic type parameter
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetGenericFieldTypeMap(System.Reflection.FieldInfo,System.Boolean)">
            <summary>
            Returns the generic type parameter of a return value by a field or method.
            </summary>
            <param name="field">field or null if method</param>
            <param name="isAllowNull">whether null is allowed as a return value or expected typeof(object)</param>
            <returns>
            generic type parameter
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetGenericReturnType(System.Reflection.MethodInfo,System.Reflection.FieldInfo,System.Boolean)">
            <summary>Returns the generic type parameter of a return value by a field or method. </summary>
            <param name="method">method or null if field</param>
            <param name="field">field or null if method</param>
            <param name="isAllowNull">whether null is allowed as a return value or expected Object.class</param>
            <returns>generic type parameter</returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.ResolveIdentAsEnumConst(System.String,com.espertech.esper.epl.core.MethodResolutionService,com.espertech.esper.epl.core.EngineImportService)">
            <summary>
            Resolves the ident as enum const.
            </summary>
            <param name="constant">The constant.</param>
            <param name="methodResolutionService">The method resolution service.</param>
            <param name="engineImportService">The engine import service.</param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.ResolveIdentAsEnumConst(System.String,System.Func{System.String,System.Type},System.Func{System.String,System.Type})">
            <summary>
            Resolve a string constant as a possible enumeration value, returning null if not
            resolved.
            </summary>
            <param name="constant">to resolve</param>
            <param name="methodResolutionService">for statement-level use to resolve enums, can be null</param>
            <param name="engineImportService">for engine-level use to resolve enums, can be null</param>
            <returns>null or enumeration value</returns>
            <throws>ExprValidationException if there is an error accessing the enum</throws>
        </member>
        <member name="M:com.espertech.esper.util.TypeHelper.GetAnnotationHook(System.Attribute[],com.espertech.esper.client.annotation.HookType,System.Type,com.espertech.esper.epl.core.MethodResolutionService)">
            <summary>Returns an instance of a hook as specified by an annotation. </summary>
            <param name="annotations">to search</param>
            <param name="hookType">type to look for</param>
            <param name="interfaceExpected">interface required</param>
            <param name="resolution">for resolving references, optional, if not provided then using ResolveType</param>
            <returns>hook instance</returns>
            <throws>ExprValidationException if instantiation failed</throws>
        </member>
        <member name="T:com.espertech.esper.util.TypeWidener">
            <summary>
            Widens a type.
            </summary>
        </member>
        <member name="T:com.espertech.esper.util.TypeWidenerBoxedNumeric">
            <summary>
            Widerner that coerces to a widened boxed number.
            </summary>
        </member>
        <member name="M:com.espertech.esper.util.TypeWidenerBoxedNumeric.#ctor(com.espertech.esper.util.Coercer)">
            <summary>Ctor. </summary>
            <param name="coercer">the coercer</param>
        </member>
        <member name="T:com.espertech.esper.util.TypeWidenerFactory">
            <summary>Factory for type widening. </summary>
        </member>
        <member name="M:com.espertech.esper.util.TypeWidenerFactory.GetCheckPropertyAssignType(System.String,System.Type,System.Type,System.String)">
            <summary>Returns the widener. </summary>
            <param name="columnName">name of column</param>
            <param name="columnType">type of column</param>
            <param name="writeablePropertyType">property type</param>
            <param name="writeablePropertyName">propery name</param>
            <returns>type widender</returns>
            <throws>ExprValidationException if type validation fails</throws>
        </member>
        <member name="T:com.espertech.esper.util.TypeWidenerStringToCharCoercer">
            <summary>Type widener that coerces from String to char if required. </summary>
        </member>
        <member name="T:com.espertech.esper.util.URIUtil">
            <summary>Utility for inspecting and comparing Uri. </summary>
        </member>
        <member name="M:com.espertech.esper.util.URIUtil.IsOpaque(System.Uri)">
            <summary>
            Determines whether the specified URI is opaque.  A URI is opaque if
            is not hierarchical.  An example of an opaque URL is the mailto URI.
            </summary>
            <param name="uri">The URI.</param>
            <returns>
            	<c>true</c> if the specified URI is opaque; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:com.espertech.esper.util.URIUtil.FilterSort``1(System.Uri,System.Collections.Generic.IDictionary{System.Uri,``0})">
            <summary>
            Given a child Uri and a map of factory URIs, inspect the child Uri against
            the factory URIs and return a collection of entries for which the child Uri falls
            within or is equals to the factory Uri.
            </summary>
            <param name="child">is the child Uri to match against factory URIs</param>
            <param name="uris">is a map of factory Uri and an object</param>
            <returns>matching factory URIs, if any</returns>
        </member>
        <member name="M:com.espertech.esper.util.UuidGenerator.Generate">
            <summary>
            Returns a unique uuid.
            </summary>
            <returns>a unique uuid</returns>
        </member>
        <member name="T:com.espertech.esper.view.AsymetricDataWindowViewFactory">
            <summary>
            Marker interface for use with view factories that create data window views that 
            are asymetric in posting insert and remove stream data: Data windows that post 
            only a partial insert and remove stream as output when compared to the insert 
            and remove stream received. 
            <para/>
            Please <see cref="T:com.espertech.esper.view.DataWindowView"/> for details on 
            views that meet data window requirements.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.CloneableView">
            <summary>
            Views that can work under a group-by must be able to duplicate and are required 
            to implement this interface.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.CloneableView.CloneView">
            <summary>
            Duplicates the view.
            <para /> Expected to return a same view in initialized state for grouping. 
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.DataWindowBatchingViewFactory">
            <summary>
            Tag interface for data window view factories that express a batch expiry policy.
            <para/>
            Such data windows allow iteration through the currently batched events, and such 
            data windows post insert stream events only when batching conditions have been met 
            and the batch is released.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.DataWindowView">
            <summary>
            Tag interface for data window views. Data window views follow the view interface but keep a window over the
            data received by their parent view. Data window view may keep length windows or time windows or other windows.
            <para/>
            Data window views generally follow the following behavior:
            <para/>
            They publish the data that was received as new data from their parent view directly or at a later time as
            new data to child views.
            <para/>
            They publish the data that expires out of the window (for length or time reasons or other reasons) as old data to
            their child views.
            <para/>
            They do not change event type compared to their parent view, since they only hold events temporarily.
            <para/>
            They remove the data they receive as old data from their parent view out of the window and report the data
            removed as old data to child views (this is an optional capability for performance reasons).
            <para/>
            Certain views may decide to attach only to data window views directly. One reason for this is that
            window limit the number of event instances kept in a collection. Without this limitation some views may
            not work correctly over time as events accumulate but are not removed from the view by means old data updates
            received from a parent data window.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.EventStream">
            <summary>
            A streams is a conduct for incoming events. Incoming data is placed into streams for consumption by queries.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.EventStream.Insert(com.espertech.esper.client.EventBean)">
            <summary> Insert a new event onto the stream.</summary>
            <param name="theEvent">to insert</param>
        </member>
        <member name="M:com.espertech.esper.view.EventStream.Insert(com.espertech.esper.client.EventBean[])">
            <summary>
            Insert new events onto the stream.
            </summary>
            <param name="events">to insert</param>
        </member>
        <member name="T:com.espertech.esper.view.ext.IStreamSortRankRandomAccess">
            <summary>
            Provides random access into a rank-window's data.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.window.RandomAccessByIndex">
            <summary>Random access interface to insert stream and remove stream data based on an index. </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.RandomAccessByIndex.GetNewData(System.Int32)">
            <summary>Returns an new data event given an index. </summary>
            <param name="index">to return new data for</param>
            <returns>new data event</returns>
        </member>
        <member name="M:com.espertech.esper.view.window.RandomAccessByIndex.GetOldData(System.Int32)">
            <summary>Returns an old data event given an index. </summary>
            <param name="index">to return old data for</param>
            <returns>old data event</returns>
        </member>
        <member name="M:com.espertech.esper.view.ext.IStreamSortRankRandomAccess.#ctor(com.espertech.esper.view.window.RandomAccessByIndexObserver)">
            <summary>Ctor. </summary>
            <param name="updateObserver">for indicating updates to</param>
        </member>
        <member name="M:com.espertech.esper.view.ext.IStreamSortRankRandomAccess.Refresh(System.Collections.Generic.SortedDictionary{System.Object,System.Object},System.Int32,System.Int32)">
            <summary>Refreshes the random access data with the updated information. </summary>
            <param name="sortedEvents">is the sorted window contents</param>
            <param name="currentSize">is the current size of the window</param>
            <param name="maxSize">is the maximum size of the window</param>
        </member>
        <member name="T:com.espertech.esper.view.ext.RankWindowEnumerator">
            <summary>
            Iterator for use by {@link com.espertech.esper.view.ext.RankWindowView}.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ext.RankWindowEnumerator.#ctor(System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>Ctor. </summary>
            <param name="window">sorted map with events</param>
        </member>
        <member name="T:com.espertech.esper.view.ext.RankWindowView">
            <summary>
            Window sorting by values in the specified field extending a specified number of elements 
            from the lowest value up or the highest value down and retaining only the last unique 
            value per key. The type of the field to be sorted in the event must implement the Comparable
            interface. The natural order in which events arrived is used as the second sorting criteria. 
            Thus should events arrive with equal sort values the oldest event leaves the sort window first. 
            Old values removed from a another view are removed from the sort view. 
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ext.RankWindowView.#ctor(com.espertech.esper.view.ext.RankWindowViewFactory,com.espertech.esper.epl.expression.ExprNode[],com.espertech.esper.epl.expression.ExprEvaluator[],com.espertech.esper.epl.expression.ExprNode[],com.espertech.esper.epl.expression.ExprEvaluator[],System.Boolean[],System.Int32,com.espertech.esper.view.ext.IStreamSortRankRandomAccess,System.Boolean,com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext)">
            <summary>
            Ctor.
            </summary>
            <param name="rankWindowViewFactory">for copying this view in a group-by</param>
            <param name="uniqueCriteriaExpressions">The unique criteria expressions.</param>
            <param name="uniqueCriteriaEvaluators">The unique criteria evaluators.</param>
            <param name="sortCriteriaExpressions">is the event property names to sort</param>
            <param name="sortCriteriaEvaluators">The sort criteria evaluators.</param>
            <param name="descendingValues">indicates whether to sort ascending or descending for each field</param>
            <param name="sortWindowSize">is the window size</param>
            <param name="optionalRankedRandomAccess">is the friend class handling the random access, if required byexpressions</param>
            <param name="isSortUsingCollator">for string value sorting using compare or Collator</param>
            <param name="agentInstanceViewFactoryContext">The agent instance view factory context.</param>
        </member>
        <member name="M:com.espertech.esper.view.ext.RankWindowView.IsEmpty">
            <summary>True to indicate the sort window is empty, or false if not empty. </summary>
            <returns>true if empty sort window</returns>
        </member>
        <member name="T:com.espertech.esper.view.ext.RankWindowViewFactory">
            <summary>Factory for rank window views. </summary>
        </member>
        <member name="F:com.espertech.esper.view.ext.RankWindowViewFactory._uniqueCriteriaExpressions">
            <summary>The unique-by expressions. </summary>
        </member>
        <member name="F:com.espertech.esper.view.ext.RankWindowViewFactory._sortCriteriaExpressions">
            <summary>The sort-by expressions. </summary>
        </member>
        <member name="F:com.espertech.esper.view.ext.RankWindowViewFactory._isDescendingValues">
            <summary>The flags defining the ascending or descending sort order. </summary>
        </member>
        <member name="F:com.espertech.esper.view.ext.RankWindowViewFactory._sortWindowSize">
            <summary>The sort window size. </summary>
        </member>
        <member name="T:com.espertech.esper.view.ext.SortWindowView">
            <summary>
            Window sorting by values in the specified field extending a specified number of 
            elements from the lowest value up or the highest value down. The view accepts 3 
            parameters. The first parameter is the field name to get the values to sort for,
             the second parameter defines whether to sort ascending or descending, the third 
            parameter is the number of elements to keep in the sorted list. The type of the 
            field to be sorted in the event must implement the Comparable interface. The 
            natural order in which events arrived is used as the second sorting criteria. 
            Thus should events arrive with equal sort values the oldest event leaves the sort 
            window first. Old values removed from a prior view are removed from the sort view.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ext.SortWindowView.#ctor(com.espertech.esper.view.ext.SortWindowViewFactory,com.espertech.esper.epl.expression.ExprNode[],com.espertech.esper.epl.expression.ExprEvaluator[],System.Boolean[],System.Int32,com.espertech.esper.view.ext.IStreamSortRankRandomAccess,System.Boolean,com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext)">
            <summary>
            Ctor.
            </summary>
            <param name="sortWindowViewFactory">for copying this view in a group-by</param>
            <param name="sortCriteriaExpressions">is the event property names to sort</param>
            <param name="sortCriteriaEvaluators">The sort criteria evaluators.</param>
            <param name="descendingValues">indicates whether to sort ascending or descending for each field</param>
            <param name="sortWindowSize">is the window size</param>
            <param name="optionalSortedRandomAccess">is the friend class handling the random access, if required byexpressions</param>
            <param name="isSortUsingCollator">for string value sorting using compare or Collator</param>
            <param name="agentInstanceViewFactoryContext">The agent instance view factory context.</param>
        </member>
        <member name="M:com.espertech.esper.view.ext.SortWindowView.IsEmpty">
            <summary>True to indicate the sort window is empty, or false if not empty. </summary>
            <returns>true if empty sort window</returns>
        </member>
        <member name="P:com.espertech.esper.view.ext.SortWindowView.SortCriteriaExpressions">
            <summary>Returns the field names supplying the values to sort by. </summary>
            <value>field names to sort by</value>
        </member>
        <member name="P:com.espertech.esper.view.ext.SortWindowView.IsDescendingValues">
            <summary>Returns the flags indicating whether to sort in descending order on each property. </summary>
            <value>the isDescending value for each sort property</value>
        </member>
        <member name="P:com.espertech.esper.view.ext.SortWindowView.SortWindowSize">
            <summary>Returns the number of elements kept by the sort window. </summary>
            <value>size of window</value>
        </member>
        <member name="T:com.espertech.esper.view.ext.SortWindowViewFactory">
            <summary>Factory for sort window views. </summary>
        </member>
        <member name="F:com.espertech.esper.view.ext.SortWindowViewFactory.SortCriteriaExpressions">
            <summary>The sort-by expressions. </summary>
        </member>
        <member name="F:com.espertech.esper.view.ext.SortWindowViewFactory.IsDescendingValues">
            <summary>The flags defining the ascending or descending sort order. </summary>
        </member>
        <member name="F:com.espertech.esper.view.ext.SortWindowViewFactory.SortWindowSize">
            <summary>The sort window size. </summary>
        </member>
        <member name="T:com.espertech.esper.view.ext.TimeOrderView">
            <summary>
            Window retaining timestamped events up to a given number of seconds such that older
            events that arrive later are sorted into the window and released in timestamp order. 
            <para/>
            The insert stream consists of all arriving events. The remove stream consists of events 
            in order of timestamp value as supplied by each event. <para/>Timestamp values on events 
            should match engine time. The window compares engine time to timestamp value and releases 
            events when the event's timestamp is less then engine time minus interval size (the event 
            is older then the window tail). <para/>The view accepts 2 parameters. The first parameter 
            is the field name to get the event timestamp value from, the second parameter defines the 
            interval size.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ext.TimeOrderView.#ctor(com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext,com.espertech.esper.view.ext.TimeOrderViewFactory,com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.epl.expression.ExprEvaluator,System.Int64,com.espertech.esper.view.ext.IStreamSortRankRandomAccess)">
            <summary>
            Ctor.
            </summary>
            <param name="agentInstanceContext">The agent instance context.</param>
            <param name="timeOrderViewFactory">for copying this view in a group-by</param>
            <param name="timestampExpr">the property name of the event supplying timestamp values</param>
            <param name="timestampEvaluator">The timestamp evaluator.</param>
            <param name="intervalSize">the interval time length</param>
            <param name="optionalSortedRandomAccess">is the friend class handling the random access, if required byexpressions</param>
        </member>
        <member name="M:com.espertech.esper.view.ext.TimeOrderView.IsEmpty">
            <summary>True to indicate the sort window is empty, or false if not empty. </summary>
            <returns>true if empty sort window</returns>
        </member>
        <member name="M:com.espertech.esper.view.ext.TimeOrderView.Expire">
            <summary>This method removes (expires) objects from the window and schedules a new callback for the time when the next oldest message would expire from the window. </summary>
        </member>
        <member name="P:com.espertech.esper.view.ext.TimeOrderView.TimestampExpression">
            <summary>Returns the timestamp property name. </summary>
            <value>property name supplying timestamp values</value>
        </member>
        <member name="P:com.espertech.esper.view.ext.TimeOrderView.IntervalSize">
            <summary>Returns the time interval size. </summary>
            <value>interval size</value>
        </member>
        <member name="T:com.espertech.esper.view.ext.TimeOrderViewFactory">
            <summary>Factory for views for time-ordering events. </summary>
        </member>
        <member name="F:com.espertech.esper.view.ext.TimeOrderViewFactory.IntervalSize">
            <summary>The interval to wait for newer events to arrive. </summary>
        </member>
        <member name="F:com.espertech.esper.view.ext.TimeOrderViewFactory.TimestampExpression">
            <summary>The timestamp expression. </summary>
        </member>
        <member name="T:com.espertech.esper.view.InitializableView">
            <summary>
            Views that require initialization after view instantiation and after view hook-up with the parent view
            can impleeent this interface and get invoked to initialize.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.InitializableView.Initialize">
            <summary>Initializes a view.</summary>
        </member>
        <member name="M:com.espertech.esper.view.internals.ProxyBufferObserver.#ctor(com.espertech.esper.view.internals.BufferObserverDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.view.internals.ProxyBufferObserver"/> class.
            </summary>
            <param name="d">The d.</param>
        </member>
        <member name="M:com.espertech.esper.view.internals.ProxyBufferObserver.NewData(System.Int32,com.espertech.esper.collection.FlushedEventBuffer,com.espertech.esper.collection.FlushedEventBuffer)">
            <summary>
            Receive new and old events from a stream.
            </summary>
            <param name="streamId">the stream number sending the events</param>
            <param name="newEventBuffer">buffer for new events</param>
            <param name="oldEventBuffer">buffer for old events</param>
        </member>
        <member name="T:com.espertech.esper.view.internals.BufferView">
            <summary>
            A view that acts as an adapter between views and update listeners.
            The view can be added to a parent view. When the parent view publishes data, the view will forward the
            data to the UpdateListener implementation that has been supplied. If no UpdateListener has been supplied,
            then the view will cache the last data published by the parent view.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.internals.BufferView.#ctor(System.Int32)">
            <summary> Ctor.</summary>
            <param name="streamId">number of the stream for which the view buffers the generated events.
            </param>
        </member>
        <member name="M:com.espertech.esper.view.internals.BufferView.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.internals.BufferView.Update(com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean[])">
            <summary>
            Notify that data has been added or removed from the Viewable parent.
            The last object in the newData array of objects would be the newest object added to the parent view.
            The first object of the oldData array of objects would be the oldest object removed from the parent view.
            <para>
            If the call to update contains new (inserted) data, then the first argument will be a non-empty list and the
            second will be empty. Similarly, if the call is a notification of deleted data, then the first argument will be
            empty and the second will be non-empty. Either the newData or oldData will be non-null.
            This method won't be called with both arguments being null, but either one could be null.
            The same is true for zero-length arrays. Either newData or oldData will be non-empty.
            If both are non-empty, then the update is a modification notification.
            </para>
            	<para>
            When update() is called on a view by the parent object, the data in newData will be in the collection of the
            parent, and its data structures will be arranged to reflect that.
            The data in oldData will not be in the parent's data structures, and any access to the parent will indicate that
            that data is no longer there.
            </para>
            </summary>
            <param name="newData">is the new data that has been added to the parent view</param>
            <param name="oldData">is the old data that has been removed from the parent view</param>
        </member>
        <member name="P:com.espertech.esper.view.internals.BufferView.Observer">
            <summary> Set the observer for indicating new and old data.</summary>
        </member>
        <member name="P:com.espertech.esper.view.internals.BufferView.EventType">
            <summary>
            Provides metadata information about the type of object the event collection contains.
            </summary>
            <value></value>
            <returns>
            metadata for the objects in the collection
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.internals.BufferView.NewDataBuffer">
            <summary>Returns the buffer for new data.</summary>
            <returns>new data buffer</returns>
        </member>
        <member name="T:com.espertech.esper.view.internals.IntersectAsymetricView">
            <summary>
            A view that represents an intersection of multiple data windows.
             <para/>
            The view is parameterized by two or more data windows. From an external 
            viewpoint, the view retains all events that is in all of the data windows 
            at the same time (an intersection) and removes all events that leave any 
            of the data windows.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.internals.LastPostObserver">
            <summary>
            Observer interface to a stream publishing new and old events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.internals.LastPostObserver.NewData(System.Int32,com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean[])">
            <summary>
            Receive new and old events from a stream.
            </summary>
            <param name="streamId">the stream number sending the events</param>
            <param name="newEvents">new events</param>
            <param name="oldEvents">old events</param>
        </member>
        <member name="M:com.espertech.esper.view.internals.IntersectAsymetricView.#ctor(com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext,com.espertech.esper.view.internals.IntersectViewFactory,com.espertech.esper.client.EventType,System.Collections.Generic.IList{com.espertech.esper.view.View})">
            <summary>
            Ctor.
            </summary>
            <param name="agentInstanceViewFactoryContext">The agent instance view factory context.</param>
            <param name="factory">the view factory</param>
            <param name="eventType">the parent event type</param>
            <param name="viewList">the list of data window views</param>
        </member>
        <member name="T:com.espertech.esper.view.internals.IntersectBatchView">
            <summary>
            A view that represents an intersection of multiple data windows. 
            <para />
            The view is parameterized by two or more data windows. From an external viewpoint, the 
            view retains all events that is in all of the data windows at the same time (an intersection) 
            and removes all events that leave any of the data windows.
            <para />
            This special batch-version has the following logic:
             - only one batching view allowed as sub-view 
             - all externally-received newData events are inserted into each view 
             - all externally-received oldData events are removed from each view 
             - any non-batch view has its newData output ignored 
             - the single batch-view has its newData posted to child views, and removed from all non-batch views 
             - all oldData events received from all non-batch views are removed from each view
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.internals.IntersectBatchView.#ctor(com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext,com.espertech.esper.view.internals.IntersectViewFactory,com.espertech.esper.client.EventType,System.Collections.Generic.IList{com.espertech.esper.view.View},System.Collections.Generic.IList{com.espertech.esper.view.ViewFactory},System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="agentInstanceViewFactoryContext">The agent instance view factory context.</param>
            <param name="factory">the view factory</param>
            <param name="eventType">the parent event type</param>
            <param name="viewList">the list of data window views</param>
            <param name="viewFactories">view factories</param>
            <param name="hasAsymetric">if set to <c>true</c> [has asymetric].</param>
        </member>
        <member name="T:com.espertech.esper.view.internals.IntersectView">
            <summary>
            A view that represents an intersection of multiple data windows.
            <para />
            The view is parameterized by two or more data windows. From an external viewpoint, the view 
            retains all events that is in all of the data windows at the same time (an intersection) and 
            removes all events that leave any of the data windows. 
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.internals.IntersectView.#ctor(com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext,com.espertech.esper.view.internals.IntersectViewFactory,com.espertech.esper.client.EventType,System.Collections.Generic.List{com.espertech.esper.view.View})">
            <summary>
            Ctor.
            </summary>
            <param name="agentInstanceViewFactoryContext">The agent instance view factory context.</param>
            <param name="factory">the view factory</param>
            <param name="eventType">the parent event type</param>
            <param name="viewList">the list of data window views</param>
        </member>
        <member name="T:com.espertech.esper.view.internals.IntersectViewFactory">
            <summary>
            Factory for union-views.
            </summary>
        </member>
        <member name="P:com.espertech.esper.view.internals.IntersectViewFactory.ParentEventType">
            <summary>Sets the parent event type. </summary>
            <value>type</value>
        </member>
        <member name="P:com.espertech.esper.view.internals.IntersectViewFactory.ViewFactories">
            <summary>Sets the view factories. </summary>
            <value>factories</value>
        </member>
        <member name="T:com.espertech.esper.view.internals.LastPostObserverView">
            <summary>A view that retains the last update. </summary>
        </member>
        <member name="M:com.espertech.esper.view.internals.LastPostObserverView.#ctor(System.Int32)">
            <summary>Ctor. </summary>
            <param name="streamId">number of the stream for which the view buffers the generated events.</param>
        </member>
        <member name="P:com.espertech.esper.view.internals.LastPostObserverView.Observer">
            <summary>Set an observer. </summary>
            <value>to be called when results are available</value>
        </member>
        <member name="T:com.espertech.esper.view.internals.PriorEventBufferMulti">
            <summary>
            Buffers view-posted insert stream (new data) and remove stream (old data) events for 
            use with determining prior results in these streams, for multiple different prior events.
            <para>
            Buffers only exactly those events in new data and old data that are being asked for via 
            the 2 or more 'prior' functions that specify different indexes. For example 
            "select prior(2, price), prior(1, price)" results in on buffer instance handling both the need
             to the immediatly prior (1) and the 2-events-ago event (2).
            </para>
            <para>
            As all views are required to post new data and post old data that removes the new data 
            to subsequent views, this buffer can be attached to all views and should not result in a
             memory leak.
            </para>
            <para>
            When the buffer receives old data (rstream) events it removes the prior
            events to the rstream events from the buffer the next time it receives a post (not immediatly) 
            to allow queries to the buffer.
            </para>
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.window.RelativeAccessByEventNIndex">
            <summary>
            Provides access to prior events given an event from which to count back, and an index to look at.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.RelativeAccessByEventNIndex.GetRelativeToEvent(com.espertech.esper.client.EventBean,System.Int32)">
            <summary>
            Returns the prior event to the given event counting back the number of events as supplied by index.
            </summary>
            <param name="theEvent">is the event to count back from</param>
            <param name="index">is the number of events to go back</param>
            <returns>event</returns>
        </member>
        <member name="M:com.espertech.esper.view.internals.PriorEventBufferMulti.#ctor(System.Int32[])">
            <summary>
            Ctor.
            </summary>
            <param name="priorToIndexSet">holds a list of prior-event indexes.
            <para/> For example, an array {0,4,6} means the current event, 4 events before the current event and 6 events before the current event.</param>
        </member>
        <member name="T:com.espertech.esper.view.internals.PriorEventBufferSingle">
            <summary>
            Buffers view-posted insert stream (new data) and remove stream (old data) events for
            use with serving prior results in these streams, for a single prior event.
            <para>
            Buffers only exactly those events in new data and old data that are being asked for via the
            2 or more 'prior' functions that specify different indexes. For example &quot;select prior(2, price), prior(1, price)&quot;
            results in on buffer instance handling both the need to the immediatly prior (1) and the 2-events-ago
            event (2).
            </para>
            <para>
            As all views are required to post new data and post old data that removes the new data to subsequent views,
            this buffer can be attached to all views and should not result in a memory leak.
            </para>
            <para>
            When the buffer receives old data (rstream) events it removes the prior events to the rstream events
            from the buffer the next time it receives a post (not immediatly) to allow queries to the buffer.
            </para>
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.internals.PriorEventBufferSingle.#ctor(System.Int32)">
            <summary>Ctor.</summary>
            <param name="priorEventIndex">
            is the number-of-events prior to the current event we are interested in
            </param>
        </member>
        <member name="M:com.espertech.esper.view.internals.PriorEventBufferSingle.Update(com.espertech.esper.client.EventBean[],com.espertech.esper.client.EventBean[])">
            <summary>
            Accepts view insert and remove stream.
            </summary>
            <param name="newData">is the insert stream events or null if no data</param>
            <param name="oldData">is the remove stream events or null if no data</param>
        </member>
        <member name="M:com.espertech.esper.view.internals.PriorEventBufferSingle.GetRelativeToEvent(com.espertech.esper.client.EventBean,System.Int32)">
            <summary>
            Gets the relative to event.
            </summary>
            <param name="theEvent">The _event.</param>
            <param name="priorToIndex">Index of the prior to.</param>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.view.internals.PriorEventBufferUnbound">
            <summary>
            Buffer class for insert stream events only for use with unbound streams that inserts
            data only, to serve up one or more prior events in the insert stream based on an index.
            <para />
            Does not expect or care about the remove stream and simple keeps a rolling buffer of 
            new data events up to the maximum prior event we are asking for.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.internals.PriorEventBufferUnbound.#ctor(System.Int32)">
            <summary>Ctor. </summary>
            <param name="maxPriorIndex">is the highest prior-event index required by any expression</param>
        </member>
        <member name="T:com.espertech.esper.view.internals.PriorEventView">
            <summary>
            View that provides access to prior events posted by the parent view for use by 'prior' expression nodes.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.internals.PriorEventView.#ctor(com.espertech.esper.collection.ViewUpdatedCollection)">
            <summary>Ctor.</summary>
            <param name="buffer">
            is handling the actual storage of events for use in the 'prior' expression
            </param>
        </member>
        <member name="P:com.espertech.esper.view.internals.PriorEventView.Parent">
            <summary>
            Gets or sets the View's parent Viewable.
            </summary>
            <value></value>
            <returns> viewable
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.internals.PriorEventView.Buffer">
            <summary>Returns the underlying buffer used for access to prior events.</summary>
            <returns>buffer</returns>
        </member>
        <member name="T:com.espertech.esper.view.internals.PriorEventViewFactory">
            <summary>
            Factory for making <seealso cref="T:com.espertech.esper.view.internals.PriorEventView"/> instances.
            </summary>
        </member>
        <member name="F:com.espertech.esper.view.internals.PriorEventViewFactory.IsUnbound">
            <summary>
            unbound to indicate the we are not receiving remove stream events 
            (unbound stream, stream without child views) therefore must use a 
            different buffer. 
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.internals.PriorEventViewRelAccess.#ctor(com.espertech.esper.view.window.RelativeAccessByEventNIndex,System.Int32)">
            <summary>Ctor. </summary>
            <param name="buffer">is the buffer to acces</param>
            <param name="relativeIndex">is the index to pull out</param>
        </member>
        <member name="T:com.espertech.esper.view.internals.RouteResultView">
            <summary>
            View for processing split-stream syntax.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.internals.RouteResultView.#ctor(System.Boolean,com.espertech.esper.client.EventType,com.espertech.esper.core.service.EPStatementHandle,com.espertech.esper.core.service.InternalEventRouter,System.Boolean[],com.espertech.esper.epl.core.ResultSetProcessor[],com.espertech.esper.epl.expression.ExprNode[],com.espertech.esper.core.service.StatementContext)">
            <summary>
            Ctor.
            </summary>
            <param name="isFirst">true for the first-where clause, false for all where-clauses</param>
            <param name="eventType">output type</param>
            <param name="epStatementHandle">handle</param>
            <param name="internalEventRouter">routining output events</param>
            <param name="isNamedWindowInsert">The is named window insert.</param>
            <param name="processors">processors for select clauses</param>
            <param name="whereClauses">where expressions</param>
            <param name="statementContext">statement context</param>
        </member>
        <member name="T:com.espertech.esper.view.internals.RouteResultViewHandler">
            <summary>
            Handler for incoming events for split-stream syntax, encapsulates where-clause
            evaluation strategies.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.internals.RouteResultViewHandler.Handle(com.espertech.esper.client.EventBean,com.espertech.esper.epl.expression.ExprEvaluatorContext)">
            <summary>
            Handle event.
            </summary>
            <param name="theEvent">to handle</param>
            <param name="exprEvaluatorContext">The expression evaluator context.</param>
            <returns>
            true if at least one match was found, false if not
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.internals.RouteResultViewHandlerAll">
            <summary>
            Handler for split-stream evaluating the all where-clauses and their matching select-clauses.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.internals.RouteResultViewHandlerAll.#ctor(com.espertech.esper.core.service.EPStatementHandle,com.espertech.esper.core.service.InternalEventRouter,System.Boolean[],com.espertech.esper.epl.core.ResultSetProcessor[],com.espertech.esper.epl.expression.ExprEvaluator[],com.espertech.esper.core.service.StatementContext)">
            <summary>
            Ctor.
            </summary>
            <param name="epStatementHandle">handle</param>
            <param name="internalEventRouter">routes generated events</param>
            <param name="isNamedWindowInsert">The is named window insert.</param>
            <param name="processors">select clauses</param>
            <param name="whereClauses">where clauses</param>
            <param name="statementContext">statement services</param>
        </member>
        <member name="T:com.espertech.esper.view.internals.RouteResultViewHandlerFirst">
            <summary>Handler for split-stream evaluating the first where-clause matching select-clause. </summary>
        </member>
        <member name="M:com.espertech.esper.view.internals.RouteResultViewHandlerFirst.#ctor(com.espertech.esper.core.service.EPStatementHandle,com.espertech.esper.core.service.InternalEventRouter,System.Boolean[],com.espertech.esper.epl.core.ResultSetProcessor[],com.espertech.esper.epl.expression.ExprEvaluator[],com.espertech.esper.core.service.StatementContext)">
            <summary>
            Ctor.
            </summary>
            <param name="epStatementHandle">handle</param>
            <param name="internalEventRouter">routes generated events</param>
            <param name="isNamedWindowInsert">The is named window insert.</param>
            <param name="processors">select clauses</param>
            <param name="whereClauses">where clauses</param>
            <param name="statementContext">statement services</param>
        </member>
        <member name="T:com.espertech.esper.view.internals.SingleStreamDispatchView">
            <summary>
            View to dispatch for a single stream (no join).
             </summary>
        </member>
        <member name="T:com.espertech.esper.view.internals.UnionAsymetricView">
            <summary>
            A view that represents a union of multiple data windows wherein at least one is asymetric:
                it does not present a insert stream for each insert stream event received. 
            <para/>
            The view is parameterized by two or more data windows. From an external viewpoint, the view 
            retains all events that is in any of the data windows (a union).
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.internals.UnionAsymetricView.#ctor(com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext,com.espertech.esper.view.internals.UnionViewFactory,com.espertech.esper.client.EventType,System.Collections.Generic.List{com.espertech.esper.view.View})">
            <summary>
            Ctor.
            </summary>
            <param name="agentInstanceViewFactoryContext">The agent instance view factory context.</param>
            <param name="factory">the view factory</param>
            <param name="eventType">the parent event type</param>
            <param name="viewList">the list of data window views</param>
        </member>
        <member name="T:com.espertech.esper.view.internals.UnionView">
            <summary>
            A view that represents a union of multiple data windows.
            <para/>
            The view is parameterized by two or more data windows. From an external viewpoint, the 
            view retains all events that is in any of the data windows (a union).
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.internals.UnionView.#ctor(com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext,com.espertech.esper.view.internals.UnionViewFactory,com.espertech.esper.client.EventType,System.Collections.Generic.List{com.espertech.esper.view.View})">
            <summary>
            Ctor.
            </summary>
            <param name="agentInstanceViewFactoryContext">The agent instance view factory context.</param>
            <param name="factory">the view factory</param>
            <param name="eventType">the parent event type</param>
            <param name="viewList">the list of data window views</param>
        </member>
        <member name="T:com.espertech.esper.view.internals.UnionViewFactory">
            <summary>Factory for union-views. </summary>
        </member>
        <member name="F:com.espertech.esper.view.internals.UnionViewFactory.ParentEventType">
            <summary>The event type. </summary>
        </member>
        <member name="F:com.espertech.esper.view.internals.UnionViewFactory.ViewFactories">
            <summary>The view factories. </summary>
        </member>
        <member name="M:com.espertech.esper.view.internals.UnionViewFactory.SetParentEventType(com.espertech.esper.client.EventType)">
            <summary>Sets the parent event type. </summary>
            <param name="parentEventType">type</param>
        </member>
        <member name="M:com.espertech.esper.view.internals.UnionViewFactory.SetViewFactories(System.Collections.Generic.List{com.espertech.esper.view.ViewFactory})">
            <summary>Sets the view factories. </summary>
            <param name="viewFactories">factories</param>
        </member>
        <member name="T:com.espertech.esper.view.PropertyCheckHelper">
            <summary>
            Utility class for checking in a schema if fields exist and/or have an
            expected type.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.PropertyCheckHelper.Exists(com.espertech.esper.client.EventType,System.String)">
            <summary> Check if the field identified by the field name exists according to the schema.</summary>
            <param name="type">contains metadata about fields</param>
            <param name="fieldName">is the field's field name to test</param>
            <returns> a String error message if the field doesn't exist, or null to indicate success</returns>
        </member>
        <member name="M:com.espertech.esper.view.PropertyCheckHelper.Exists(com.espertech.esper.client.EventType,System.String,System.String)">
            <summary> Check if the fields identified by the field names both exists according to the schema.</summary>
            <param name="type">contains metadata about fields</param>
            <param name="fieldNameOne">is the first field's field name to test</param>
            <param name="fieldNameTwo">is the first field's field name to test</param>
            <returns> a String error message if either of the fields doesn't exist, or null to indicate success
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.PropertyCheckHelper.CheckNumeric(com.espertech.esper.client.EventType,System.String)">
            <summary> Check if the field identified by the field name is a valid numeric field according to the schema.</summary>
            <param name="type">contains metadata about fields</param>
            <param name="numericFieldName">is the field's field name to test</param>
            <returns> a String error message if the field doesn't exist or is not numeric, or null to indicate success</returns>
        </member>
        <member name="M:com.espertech.esper.view.PropertyCheckHelper.CheckNumeric(com.espertech.esper.client.EventType,System.String,System.String)">
            <summary> Check if the fields identified by their field names are valid numeric field according to the schema.</summary>
            <param name="type">contains metadata about fields</param>
            <param name="numericFieldNameX">is the first field's field name to test</param>
            <param name="numericFieldNameY">is the second field's field name to test</param>
            <returns> a String error message if the field doesn't exist or is not numeric, or null to indicate success
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.PropertyCheckHelper.CheckLong(com.espertech.esper.client.EventType,System.String)">
            <summary> Check if the field identified by the field name is of type long according to the schema.</summary>
            <param name="type">contains metadata about fields</param>
            <param name="longFieldName">is the field's field name to test</param>
            <returns> a String error message if the field doesn't exist or is not a long, or null to indicate success</returns>
        </member>
        <member name="M:com.espertech.esper.view.PropertyCheckHelper.GetClass(com.espertech.esper.client.EventType,System.String)">
            <summary> Returns the class for the field as defined in the schema.</summary>
            <param name="type">contains metadata about fields
            </param>
            <param name="fieldName">is the field's name to return the type for
            </param>
            <returns> type of field.
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.StatementStopCallback">
            <summary>Callback to indicate that a statement has stopped. </summary>
        </member>
        <member name="T:com.espertech.esper.view.StatementStopService">
            <summary>
            Provides statement resources with the means to register a callback and be informed when a statement stopped
            and resources for the statement must be release.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.StatementStopService.FireStatementStopped">
            <summary>
            Used by the engine to indicate a statement stopped, invoking any callbacks registered.
            </summary>
        </member>
        <member name="E:com.espertech.esper.view.StatementStopService.StatementStopped">
            <summary>
            Callback that is performed for a stop of a statement.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.StatementStopServiceImpl">
            <summary>
            Provides subscription list for statement stop callbacks.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.StatementStopServiceImpl.FireStatementStopped">
            <summary>
            Used by the engine to indicate a statement stopped, invoking any callbacks registered.
            </summary>
        </member>
        <member name="E:com.espertech.esper.view.StatementStopServiceImpl.StatementStopped">
            <summary>
            Callback that is performed for a stop of a statement.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.stat.BaseBivariateStatisticsView">
            <summary>
            View for computing statistics that require 2 input variable arrays containing X and Y 
            datapoints. Subclasses compute correlation or regression values, for instance.
            </summary>
        </member>
        <member name="F:com.espertech.esper.view.stat.BaseBivariateStatisticsView._additionalProps">
            <summary>Additional properties. </summary>
        </member>
        <member name="F:com.espertech.esper.view.stat.BaseBivariateStatisticsView._agentInstanceContext">
            <summary>Services required by implementing classes. </summary>
        </member>
        <member name="F:com.espertech.esper.view.stat.BaseBivariateStatisticsView._eventType">
            <summary>Event type. </summary>
        </member>
        <member name="F:com.espertech.esper.view.stat.BaseBivariateStatisticsView._statisticsBean">
            <summary>This bean can be overridden by subclasses providing extra values such as correlation, regression. </summary>
        </member>
        <member name="M:com.espertech.esper.view.stat.BaseBivariateStatisticsView.#ctor(com.espertech.esper.core.context.util.AgentInstanceContext,com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.client.EventType,com.espertech.esper.view.stat.StatViewAdditionalProps)">
            <summary>Constructor requires the name of the two fields to use in the parent view to compute the statistics. </summary>
            <param name="expressionX">is the expression to get the X values from</param>
            <param name="expressionY">is the expression to get the Y values from</param>
            <param name="agentInstanceContext">contains required view services</param>
            <param name="eventType">type of event</param>
            <param name="additionalProps">additional props</param>
        </member>
        <member name="M:com.espertech.esper.view.stat.BaseBivariateStatisticsView.PopulateMap(com.espertech.esper.view.stat.BaseStatisticsBean,com.espertech.esper.events.EventAdapterService,com.espertech.esper.client.EventType,com.espertech.esper.view.stat.StatViewAdditionalProps,System.Object[])">
            <summary>Populate bean. </summary>
            <param name="baseStatisticsBean">results</param>
            <param name="eventAdapterService">event adapters</param>
            <param name="eventType">type</param>
            <param name="additionalProps">additional props</param>
            <param name="decoration">decoration values</param>
            <returns>bean</returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseBivariateStatisticsView.ExpressionX">
            <summary>Returns the expression supplying X data points. </summary>
            <value>X expression</value>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseBivariateStatisticsView.ExpressionY">
            <summary>Returns the expression supplying Y data points. </summary>
            <value>Y expression</value>
        </member>
        <member name="T:com.espertech.esper.view.stat.BaseStatisticsBean">
            <summary>
            Bean for performing statistical calculations. The bean keeps sums of X and Y datapoints and sums on squares
            that can be reused by subclasses. The bean calculates standard deviation (sample and population), variance,
            average and sum.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stat.BaseStatisticsBean.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stat.BaseStatisticsBean.AddPoint(System.Double)">
            <summary> Add a data point for the X data set only.</summary>
            <param name="x">is the X data point to add.
            </param>
        </member>
        <member name="M:com.espertech.esper.view.stat.BaseStatisticsBean.AddPoint(System.Double,System.Double)">
            <summary> Add a data point.</summary>
            <param name="x">is the X data point to add.
            </param>
            <param name="y">is the Y data point to add.
            </param>
        </member>
        <member name="M:com.espertech.esper.view.stat.BaseStatisticsBean.RemovePoint(System.Double)">
            <summary> Remove a X data point only.</summary>
            <param name="x">is the X data point to remove.
            </param>
        </member>
        <member name="M:com.espertech.esper.view.stat.BaseStatisticsBean.RemovePoint(System.Double,System.Double)">
            <summary> Remove a data point.</summary>
            <param name="x">is the X data point to remove.
            </param>
            <param name="y">is the Y data point to remove.
            </param>
        </member>
        <member name="M:com.espertech.esper.view.stat.BaseStatisticsBean.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.BaseStatisticsBean.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.XStandardDeviationPop">
            <summary> Calculates standard deviation for X based on the entire population given as arguments.
            Equivalent to Microsoft Excel formula STDEVPA.
            </summary>
            <returns> standard deviation assuming population for X
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.YStandardDeviationPop">
            <summary> Calculates standard deviation for Y based on the entire population given as arguments.
            Equivalent to Microsoft Excel formula STDEVPA.
            </summary>
            <returns> standard deviation assuming population for Y
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.XStandardDeviationSample">
            <summary> Calculates standard deviation for X based on the sample data points supplied.
            Equivalent to Microsoft Excel formula STDEV.
            </summary>
            <returns> standard deviation assuming sample for X
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.YStandardDeviationSample">
            <summary> Calculates standard deviation for Y based on the sample data points supplied.
            Equivalent to Microsoft Excel formula STDEV.
            </summary>
            <returns> standard deviation assuming sample for Y
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.XVariance">
            <summary> Calculates standard deviation for X based on the sample data points supplied.
            Equivalent to Microsoft Excel formula STDEV.
            </summary>
            <returns> variance as the square of the sample standard deviation for X
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.YVariance">
            <summary> Calculates standard deviation for Y based on the sample data points supplied.
            Equivalent to Microsoft Excel formula STDEV.
            </summary>
            <returns> variance as the square of the sample standard deviation for Y
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.N">
            <summary> Returns the number of data points.</summary>
            <returns> number of data points
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.DataPoints">
            <summary>
            Gets or sets the number of data points.
            </summary>
            <value>The number of data points.</value>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.XSum">
            <summary> Returns the sum of all X data points.</summary>
            <returns> sum of X data points
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.YSum">
            <summary> Returns the sum of all Y data points.</summary>
            <returns> sum of Y data points
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.XAverage">
            <summary> Returns the average of all X data points.</summary>
            <returns> average of X data points
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.YAverage">
            <summary> Returns the average of all Y data points.</summary>
            <returns> average of Y data points
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.SumX">
            <summary> Returns the sum of all X data points.</summary>
            <returns> sum of X data points
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.SumY">
            <summary> Returns the sum of all Y data points.</summary>
            <returns> sum of Y data points
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.SumXSq">
            <summary> For use by subclasses, returns sum (X * X).</summary>
            <returns> sum of X squared
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.SumYSq">
            <summary> For use by subclasses, returns sum (Y * Y).</summary>
            <returns> sum of Y squared
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.SumXY">
            <summary> For use by subclasses, returns sum (X * Y).</summary>
            <returns> sum of X times Y
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.YIntercept">
            <summary>Returns the Y intercept. </summary>
            <returns>Y intercept</returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.Slope">
            <summary>Returns the slope. </summary>
            <returns>regression slope</returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.BaseStatisticsBean.Correlation">
            <summary>Return the correlation value for the two data series (Microsoft Excel function CORREL). </summary>
            <returns>correlation value</returns>
        </member>
        <member name="T:com.espertech.esper.view.stat.CorrelationView">
            <summary>
            A view that calculates correlation on two fields. The view uses
            internally a <seealso cref="T:com.espertech.esper.view.stat.BaseStatisticsBean"/> instance for the calculations, 
            it also returns this bean as the result. This class accepts most of its behaviour 
            from its parent, <seealso cref="T:com.espertech.esper.view.stat.BaseBivariateStatisticsView"/>. 
            It adds the usage of the correlation bean and the appropriate schema.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stat.CorrelationView.#ctor(com.espertech.esper.core.context.util.AgentInstanceContext,com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.client.EventType,com.espertech.esper.view.stat.StatViewAdditionalProps)">
            <summary>Constructor. </summary>
            <param name="xExpression">is the expression providing X data points</param>
            <param name="yExpression">is the expression providing X data points</param>
            <param name="agentInstanceContext">contains required view services</param>
            <param name="eventType">event type</param>
            <param name="additionalProps">additional properties</param>
        </member>
        <member name="M:com.espertech.esper.view.stat.CorrelationView.DoPopulateMap(com.espertech.esper.view.stat.BaseStatisticsBean,com.espertech.esper.events.EventAdapterService,com.espertech.esper.client.EventType,com.espertech.esper.view.stat.StatViewAdditionalProps,System.Object[])">
            <summary>Populate bean. </summary>
            <param name="baseStatisticsBean">results</param>
            <param name="eventAdapterService">event wrapping</param>
            <param name="eventType">type to produce</param>
            <param name="additionalProps">addition properties</param>
            <param name="decoration">decoration values</param>
            <returns>bean</returns>
        </member>
        <member name="M:com.espertech.esper.view.stat.CorrelationView.CreateEventType(com.espertech.esper.core.service.StatementContext,com.espertech.esper.view.stat.StatViewAdditionalProps,System.Int32)">
            <summary>
            Creates the event type for this view.
            </summary>
            <param name="statementContext">is the event adapter service</param>
            <param name="additionalProps">additional props</param>
            <param name="streamNum">The stream num.</param>
            <returns>event type of view</returns>
        </member>
        <member name="T:com.espertech.esper.view.stat.CorrelationViewFactory">
            <summary>Factory for <seealso cref="T:com.espertech.esper.view.stat.CorrelationView"/> instances. </summary>
        </member>
        <member name="F:com.espertech.esper.view.stat.CorrelationViewFactory.ExpressionX">
            <summary>Property name of X field. </summary>
        </member>
        <member name="F:com.espertech.esper.view.stat.CorrelationViewFactory.ExpressionY">
            <summary>Property name of Y field. </summary>
        </member>
        <member name="F:com.espertech.esper.view.stat.CorrelationViewFactory.AdditionalProps">
            <summary>Additional properties. </summary>
        </member>
        <member name="T:com.espertech.esper.view.stat.RegressionLinestView">
            <summary>
            A view that calculates regression on two fields. The view uses internally a <seealso cref="T:com.espertech.esper.view.stat.BaseStatisticsBean"/> 
            instance for the calculations, it also returns this bean as the result. This class accepts most of its 
            behaviour from its parent, <seealso cref="T:com.espertech.esper.view.stat.BaseBivariateStatisticsView"/>. 
            It adds the usage of the regression bean and the appropriate schema. 
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stat.RegressionLinestView.#ctor(com.espertech.esper.core.context.util.AgentInstanceContext,com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.client.EventType,com.espertech.esper.view.stat.StatViewAdditionalProps)">
            <summary>
            Constructor.
            </summary>
            <param name="agentInstanceContext">contains required view services</param>
            <param name="xFieldName">is the field name of the field providing X data points</param>
            <param name="yFieldName">is the field name of the field providing X data points</param>
            <param name="eventType">Type of the event.</param>
            <param name="additionalProps">The additional props.</param>
        </member>
        <member name="M:com.espertech.esper.view.stat.RegressionLinestView.CreateEventType(com.espertech.esper.core.service.StatementContext,com.espertech.esper.view.stat.StatViewAdditionalProps,System.Int32)">
            <summary>
            Creates the event type for this view.
            </summary>
            <param name="statementContext">is the event adapter service</param>
            <param name="additionalProps">The additional props.</param>
            <param name="streamNum">The stream num.</param>
            <returns>event type of view</returns>
        </member>
        <member name="T:com.espertech.esper.view.stat.RegressionLinestViewFactory">
            <summary>Factory for <seealso cref="T:com.espertech.esper.view.stat.RegressionLinestView"/> instances. </summary>
        </member>
        <member name="F:com.espertech.esper.view.stat.RegressionLinestViewFactory.expressionX">
            <summary>Expression X field. </summary>
        </member>
        <member name="F:com.espertech.esper.view.stat.RegressionLinestViewFactory.expressionY">
            <summary>Expression Y field. </summary>
        </member>
        <member name="T:com.espertech.esper.view.stat.UnivariateStatisticsView">
            <summary>
            View for computing statistics, which the view exposes via fields representing the 
            sum, count, standard deviation for sample and for population and variance.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stat.UnivariateStatisticsView.#ctor(com.espertech.esper.core.context.util.AgentInstanceContext,com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.client.EventType,com.espertech.esper.view.stat.StatViewAdditionalProps)">
            <summary>
            Constructor requires the name of the field to use in the parent view to compute the statistics.
            </summary>
            <param name="agentInstanceContext">The agent instance context.</param>
            <param name="fieldExpression">is the expression to use to get numeric data points for this view tocompute the statistics on.</param>
            <param name="eventType">Type of the event.</param>
            <param name="additionalProps">The additional props.</param>
        </member>
        <member name="M:com.espertech.esper.view.stat.UnivariateStatisticsView.CreateEventType(com.espertech.esper.core.service.StatementContext,com.espertech.esper.view.stat.StatViewAdditionalProps,System.Int32)">
            <summary>
            Creates the event type for this view.
            </summary>
            <param name="statementContext">is the event adapter service</param>
            <param name="additionalProps">The additional props.</param>
            <param name="streamNum">The stream num.</param>
            <returns>event type of view</returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.UnivariateStatisticsView.FieldExpression">
            <summary>Returns field name of the field to report statistics on. </summary>
            <value>field name</value>
        </member>
        <member name="T:com.espertech.esper.view.stat.UnivariateStatisticsViewFactory">
            <summary>
            Factory for <seealso cref="T:com.espertech.esper.view.stat.UnivariateStatisticsView"/> instances.
            </summary>
        </member>
        <member name="F:com.espertech.esper.view.stat.UnivariateStatisticsViewFactory._fieldExpression">
            <summary>Property name of data field. </summary>
        </member>
        <member name="T:com.espertech.esper.view.stat.WeightedAverageView">
            <summary>
            View for computing a weighted average. The view uses 2 fields within the parent view 
            to compute the weighted average. The X field and weight field. In a price-volume example 
            it calculates the volume-weighted average price as
               (Sum(price * volume) / Sum(volume)). Example: Weighted_avg("price", "volume")
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stat.WeightedAverageView.#ctor(com.espertech.esper.core.context.util.AgentInstanceContext,com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.client.EventType,com.espertech.esper.view.stat.StatViewAdditionalProps)">
            <summary>
            Constructor requires the name of the field to use in the parent view to compute the weighted 
            average on, as well as the name of the field in the parent view to get the weight from.
            </summary>
            <param name="agentInstanceContext">contains required view services</param>
            <param name="fieldNameX">is the name of the field within the parent view to use to get numeric data points for this view to compute the average for.</param>
            <param name="fieldNameWeight">is the field name for the weight to apply to each data point</param>
            <param name="eventType">Type of the event.</param>
            <param name="additionalProps">The additional props.</param>
        </member>
        <member name="M:com.espertech.esper.view.stat.WeightedAverageView.CreateEventType(com.espertech.esper.core.service.StatementContext,com.espertech.esper.view.stat.StatViewAdditionalProps,System.Int32)">
            <summary>
            Creates the event type for this view.
            </summary>
            <param name="statementContext">is the event adapter service</param>
            <param name="additionalProps">The additional props.</param>
            <param name="streamNum">The stream num.</param>
            <returns>event type of view</returns>
        </member>
        <member name="P:com.espertech.esper.view.stat.WeightedAverageView.FieldNameX">
            <summary>Returns the expression supplying the X values. </summary>
            <value>expression supplying X data points</value>
        </member>
        <member name="P:com.espertech.esper.view.stat.WeightedAverageView.FieldNameWeight">
            <summary>Returns the expression supplying the weight values. </summary>
            <value>expression supplying weight</value>
        </member>
        <member name="T:com.espertech.esper.view.stat.WeightedAverageViewFactory">
            <summary>Factory for <seealso cref="T:com.espertech.esper.view.stat.WeightedAverageView"/> instances. </summary>
        </member>
        <member name="F:com.espertech.esper.view.stat.WeightedAverageViewFactory.fieldNameX">
            <summary>Expression of X field. </summary>
        </member>
        <member name="F:com.espertech.esper.view.stat.WeightedAverageViewFactory.fieldNameWeight">
            <summary>Expression of weight field. </summary>
        </member>
        <member name="T:com.espertech.esper.view.std.AddPropertyValueView">
            <summary>
            This view simply adds a property to the events posted to it. This is useful for the group-merge views.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.std.AddPropertyValueView.#ctor(com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext,System.String[],System.Object,com.espertech.esper.client.EventType)">
            <summary>Constructor. </summary>
            <param name="propertyNames">is the name of the field that is added to any events received by this view.</param>
            <param name="mergeValues">is the values of the field that is added to any events received by this view.</param>
            <param name="mergedResultEventType">is the event type that the merge view reports to it's child views</param>
            <param name="agentInstanceContext">contains required view services</param>
        </member>
        <member name="M:com.espertech.esper.view.std.AddPropertyValueView.AddProperty(com.espertech.esper.client.EventBean,System.String[],System.Object,com.espertech.esper.client.EventType,com.espertech.esper.events.EventAdapterService)">
            <summary>Add a property to the event passed in. </summary>
            <param name="originalEvent">event to add property to</param>
            <param name="propertyNames">names of properties to add</param>
            <param name="propertyValues">value of properties to add</param>
            <param name="targetEventType">new event type</param>
            <param name="eventAdapterService">service for generating events and handling event types</param>
            <returns>event with added property</returns>
        </member>
        <member name="P:com.espertech.esper.view.std.AddPropertyValueView.PropertyNames">
            <summary>Returns field name for which to set the merge value for. </summary>
            <value>field name to use to set value</value>
        </member>
        <member name="P:com.espertech.esper.view.std.AddPropertyValueView.PropertyValues">
            <summary>Returns the value to set for the field. </summary>
            <value>value to set</value>
        </member>
        <member name="T:com.espertech.esper.view.std.FirstElementView">
            <summary>
            View retaining the very first event. Any subsequent events received are simply discarded 
            and not entered into either insert or remove stream. Only the very first event received is 
            entered into the remove stream. 
            <para/> 
            The view thus never posts a remove stream unless explicitly deleted from when used with a named window. 
            </summary>
        </member>
        <member name="P:com.espertech.esper.view.std.FirstElementView.FirstEvent">
            <summary>The first new element posted from a parent view. </summary>
        </member>
        <member name="T:com.espertech.esper.view.std.FirstElementViewFactory">
            <summary>Factory for <seealso cref="T:com.espertech.esper.view.std.FirstElementView"/> instances. </summary>
        </member>
        <member name="T:com.espertech.esper.view.std.FirstUniqueByPropertyView">
            <summary>
            This view retains the first event for each multi-key of distinct property values. 
            <para />
            The view does not post a remove stream unless explicitly deleted from.
            <para />
            The view swallows any insert stream events that provide no new distinct set of 
            property values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.std.FirstUniqueByPropertyView.#ctor(com.espertech.esper.epl.expression.ExprNode[],com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext)">
            <summary>
            Constructor.
            </summary>
            <param name="uniqueCriteria">is the expressions from which to pull the unique value</param>
            <param name="agentInstanceViewFactoryContext">The agent instance view factory context.</param>
        </member>
        <member name="M:com.espertech.esper.view.std.FirstUniqueByPropertyView.IsEmpty">
            <summary>Returns true if empty. </summary>
            <returns>true if empty</returns>
        </member>
        <member name="P:com.espertech.esper.view.std.FirstUniqueByPropertyView.UniqueCriteria">
            <summary>Returns the expressions supplying the unique value to keep the most recent record for. </summary>
            <value>expressions for unique value</value>
        </member>
        <member name="T:com.espertech.esper.view.std.FirstUniqueByPropertyViewFactory">
            <summary>
            Factory for <seealso cref="T:com.espertech.esper.view.std.FirstUniqueByPropertyView"/> instances.
            </summary>
        </member>
        <member name="F:com.espertech.esper.view.std.FirstUniqueByPropertyViewFactory._viewParameters">
            <summary>View parameters. </summary>
        </member>
        <member name="F:com.espertech.esper.view.std.FirstUniqueByPropertyViewFactory._criteriaExpressions">
            <summary>Property name to evaluate unique values. </summary>
        </member>
        <member name="T:com.espertech.esper.view.std.GroupByViewFactory">
            <summary>Factory for <seealso cref="T:com.espertech.esper.view.std.GroupByView"/> instances. </summary>
        </member>
        <member name="F:com.espertech.esper.view.std.GroupByViewFactory.ViewParameters">
            <summary>View parameters. </summary>
        </member>
        <member name="P:com.espertech.esper.view.std.GroupByViewFactory.CriteriaExpressions">
            <summary>Returns the names of fields to group by </summary>
            <value>field names</value>
        </member>
        <member name="T:com.espertech.esper.view.std.GroupByViewImpl">
            <summary>
            The group view splits the data in a stream to multiple subviews, based on a key
            index. The key is one or more fields in the stream. Any view that follows the 
            GROUP view will be executed separately on each subview, one per unique key. The 
            view takes a single parameter which is the field name returning the key value to 
            group. This view can, for example, be used to calculate the average price per 
            symbol for a list of symbols. The view treats its child views and their child 
            views as prototypes. It dynamically instantiates copies of each child view and 
            their child views, and the child view's child views as so on. When there are no 
            more child views or the special merge view is encountered, it ends. The view 
            installs a special merge view unto each leaf child view that merges the value key 
            that was grouped by back into the stream using the group-by field name.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.std.GroupByViewImpl.#ctor(com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext,com.espertech.esper.epl.expression.ExprNode[],com.espertech.esper.epl.expression.ExprEvaluator[])">
            <summary>
            Constructor.
            </summary>
            <param name="agentInstanceContext">contains required view services</param>
            <param name="criteriaExpressions">is the fields from which to pull the values to group by</param>
            <param name="criteriaEvaluators">The criteria evaluators.</param>
        </member>
        <member name="M:com.espertech.esper.view.std.GroupByViewImpl.MakeSubViews(com.espertech.esper.view.std.GroupByView,System.String[],System.Object,com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext)">
            <summary>
            Instantiate subviews for the given group view and the given key value to group-by. Makes shallow copies of each child view and its subviews up to the merge point. Sets up merge data views for merging the group-by key value back in.
            </summary>
            <param name="groupView">is the parent view for which to copy subviews for</param>
            <param name="propertyNames">names of expressions or properties</param>
            <param name="groupByValues">is the key values to group-by</param>
            <param name="agentInstanceContext">is the view services that sub-views may need</param>
            <returns>
            a single view or a list of views that are copies of the original list, with copied children, withdata merge views added to the copied child leaf views.
            </returns>
        </member>
        <member name="P:com.espertech.esper.view.std.GroupByViewImpl.CriteriaExpressions">
            <summary>Returns the field name that provides the key valie by which to group by. </summary>
            <value>field name providing group-by key.</value>
        </member>
        <member name="M:com.espertech.esper.view.std.GroupByViewReclaimAged.#ctor(com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext,com.espertech.esper.epl.expression.ExprNode[],com.espertech.esper.epl.expression.ExprEvaluator[],System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="agentInstanceContext">contains required view services</param>
            <param name="criteriaExpressions">is the fields from which to pull the values to group by</param>
            <param name="criteriaEvaluators">The criteria evaluators.</param>
            <param name="reclaimMaxAge">age after which to reclaim group</param>
            <param name="reclaimFrequency">frequency in which to check for groups to reclaim</param>
        </member>
        <member name="P:com.espertech.esper.view.std.GroupByViewReclaimAged.CriteriaExpressions">
            <summary>Returns the field name that provides the key valie by which to group by. </summary>
            <value>field name providing group-by key.</value>
        </member>
        <member name="T:com.espertech.esper.view.std.LastElementView">
            <summary>
            This view is a very simple view presenting the last event posted by the parent view to any subviews.
            Only the very last event object is kept by this view. The update method invoked by the parent view 
            supplies new data in an object array, of which the view keeps the very last instance as the 'last' 
            or newest event. The view always has the same schema as the parent view and attaches to anything, 
            and accepts no parameters.  Thus if 5 pieces of new data arrive, the child view receives 5 elements 
            of new data and also 4 pieces of old data which is the first 4 elements of new data. I.e. New data 
            elements immediatly gets to be old data elements.  Old data received from parent is not handled, it 
            is ignored. We thus post old data as follows: last event is not null + new data from index zero to 
            N-1, where N is the index of the last element in new data
            </summary>
        </member>
        <member name="F:com.espertech.esper.view.std.LastElementView.LastEvent">
            <summary>The last new element posted from a parent view. </summary>
        </member>
        <member name="T:com.espertech.esper.view.std.LastElementViewFactory">
            <summary>Factory for <seealso cref="T:com.espertech.esper.view.std.LastElementView"/> instances. </summary>
        </member>
        <member name="T:com.espertech.esper.view.std.MergeView">
            <summary>
            The merge view works together with a group view that splits the data in a stream to 
            multiple subviews, based on a key index. Every group view requires a merge view to 
            merge the many subviews back into a single view. Typically the last view in a chain 
            containing a group view is a merge view. The merge view has no other responsibility 
            then becoming the single last instance in the chain to which external listeners for 
            updates can be attached to receive updates for the many subviews that have this merge 
            view as common child views. The parent view of this view is generally the AddPropertyValueView 
            that adds the grouped-by information back into the data.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.std.MergeView.#ctor(com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext,com.espertech.esper.epl.expression.ExprNode[],com.espertech.esper.client.EventType)">
            <summary>Constructor. </summary>
            <param name="agentInstanceContext"></param>
            <param name="groupCriteria">is the fields from which to pull the value to group by</param>
            <param name="resultEventType">is passed by the factory as the factory adds the merged fields to an event type</param>
        </member>
        <member name="M:com.espertech.esper.view.std.MergeView.AddParentView(com.espertech.esper.view.std.AddPropertyValueView)">
            <summary>Add a parent data merge view. </summary>
            <param name="parentView">is the parent data merge view to add</param>
        </member>
        <member name="P:com.espertech.esper.view.std.MergeView.GroupFieldNames">
            <summary>Returns the field name that contains the values to group by. </summary>
            <value>field name providing group key value</value>
        </member>
        <member name="T:com.espertech.esper.view.std.MergeViewFactory">
            <summary>Factory for <seealso cref="T:com.espertech.esper.view.std.MergeView"/> instances. </summary>
        </member>
        <member name="T:com.espertech.esper.view.std.SizeView">
            <summary>
            This view is a very simple view presenting the number of elements in a stream or view.
            The view computes a single long-typed count of the number of events passed through it similar
            to the base statistics COUNT column.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.std.SizeView.#ctor(com.espertech.esper.core.context.util.AgentInstanceContext,com.espertech.esper.client.EventType,com.espertech.esper.view.stat.StatViewAdditionalProps)">
            <summary>
            Ctor.
            </summary>
            <param name="agentInstanceContext">is services</param>
            <param name="eventType">Type of the event.</param>
            <param name="additionalProps">The additional props.</param>
        </member>
        <member name="M:com.espertech.esper.view.std.SizeView.CreateEventType(com.espertech.esper.core.service.StatementContext,com.espertech.esper.view.stat.StatViewAdditionalProps,System.Int32)">
            <summary>
            Creates the event type for this view
            </summary>
            <param name="statementContext">is the event adapter service</param>
            <param name="additionalProps">The additional props.</param>
            <param name="streamNum">The stream num.</param>
            <returns>event type for view</returns>
        </member>
        <member name="T:com.espertech.esper.view.std.SizeViewFactory">
            <summary>Factory for <seealso cref="T:com.espertech.esper.view.std.SizeView"/> instances. </summary>
        </member>
        <member name="T:com.espertech.esper.view.std.UniqueByPropertyView">
            <summary>
            This view includes only the most recent among events having the same value for the specified field or fields.
            The view accepts the field name as parameter from which the unique values are obtained. For example, a trade's 
            symbol could be used as a unique value. In this example, the first trade for symbol IBM would be posted as new 
            data to child views. When the second trade for symbol IBM arrives the second trade is posted as new data to 
            child views, and the first trade is posted as old data. Should more than one trades for symbol IBM arrive at 
            the same time (like when batched) then the child view will get all new events in newData and all new events in 
            oldData minus the most recent event. When the current new event arrives as old data, the the current unique 
            event gets thrown away and posted as old data to child views. Iteration through the views data shows only the 
            most recent events received for the unique value in the order that events arrived in. The type of the field 
            returning the unique value can be any type but should override equals and HashCode() as the type plays the role 
            of a key in a map storing unique values.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.std.UniqueByPropertyView.#ctor(com.espertech.esper.epl.expression.ExprNode[],com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext)">
            <summary>Constructor. </summary>
            <param name="criteriaExpressions">is the expressions from which to pull the unique value</param>
            <param name="agentInstanceViewFactoryContext">context for expression evaluation</param>
        </member>
        <member name="M:com.espertech.esper.view.std.UniqueByPropertyView.IsEmpty">
            <summary>Returns true if the view is empty. </summary>
            <returns>true if empty</returns>
        </member>
        <member name="P:com.espertech.esper.view.std.UniqueByPropertyView.CriteriaExpressions">
            <summary>Returns the name of the field supplying the unique value to keep the most recent record for. </summary>
            <value>expressions for unique value</value>
        </member>
        <member name="T:com.espertech.esper.view.std.UniqueByPropertyViewFactory">
            <summary>
            Factory for <seealso cref="T:com.espertech.esper.view.std.UniqueByPropertyView"/> instances.
            </summary>
        </member>
        <member name="F:com.espertech.esper.view.std.UniqueByPropertyViewFactory._viewParameters">
            <summary>View parameters. </summary>
        </member>
        <member name="F:com.espertech.esper.view.std.UniqueByPropertyViewFactory._criteriaExpressions">
            <summary>Property name to evaluate unique values. </summary>
        </member>
        <member name="M:com.espertech.esper.view.stream.EventStreamProxy.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            Intercepts the specified invocation.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="T:com.espertech.esper.view.stream.StreamFactoryService">
            <summary>
            Service on top of the filter service for reuseing filter callbacks and their associated 
            EventStream instances. Same filter specifications (equal) do not need to be added to the 
            filter service twice and the EventStream instance that is the stream of events for that 
            filter can be reused.
            
            <para/> 
            We are re-using streams such that views under such streams can be reused for efficient 
            resource use. 
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stream.StreamFactoryService.CreateStream(System.String,com.espertech.esper.filter.FilterSpecCompiled,com.espertech.esper.filter.FilterService,com.espertech.esper.core.context.util.EPStatementAgentInstanceHandle,System.Boolean,System.Boolean,com.espertech.esper.epl.expression.ExprEvaluatorContext,System.Boolean,System.Boolean,System.Attribute[],System.Boolean)">
            <summary>
            Create or reuse existing EventStream instance representing that event filter. When called for some filters, should return same stream.
            </summary>
            <param name="statementId">the statement id</param>
            <param name="filterSpec">event filter definition</param>
            <param name="filterService">filter service to activate filter if not already active</param>
            <param name="epStatementAgentInstanceHandle">is the statements-own handle for use in registering callbacks with services</param>
            <param name="isJoin">is indicatng whether the stream will participate in a join statement, informationnecessary for stream reuse and multithreading concerns</param>
            <param name="isSubSelect">true for subselects</param>
            <param name="exprEvaluatorContext">expression evaluation context</param>
            <param name="isNamedWindowTrigger">if a named window or trigger querying from named window</param>
            <param name="filterWithSameTypeSubselect">if set to <c>true</c> [filter with same type subselect].</param>
            <param name="annotations">The annotations.</param>
            <param name="stateless">if set to <c>true</c> [stateless].</param>
            <returns>event stream representing active filter</returns>
        </member>
        <member name="M:com.espertech.esper.view.stream.StreamFactoryService.DropStream(com.espertech.esper.filter.FilterSpecCompiled,com.espertech.esper.filter.FilterService,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Drop the event stream associated with the filter passed in. Throws an exception if already dropped.
            </summary>
            <param name="filterSpec">is the event filter definition associated with the event stream to be dropped</param>
            <param name="filterService">to be used to deactivate filter when the last event stream is dropped</param>
            <param name="isJoin">is indicatng whether the stream will participate in a join statement, informationnecessary for stream reuse and multithreading concerns</param>
            <param name="isSubSelect">true for subselects</param>
            <param name="isNamedWindowTrigger">if a named window or trigger querying from named window</param>
            <param name="filterWithSameTypeSubselect">if set to <c>true</c> [filter with same type subselect].</param>
            <param name="stateless">if set to <c>true</c> [stateless].</param>
        </member>
        <member name="T:com.espertech.esper.view.stream.StreamFactoryServiceProvider">
            <summary>
            Static factory for implementations of the StreamFactoryService interface.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stream.StreamFactoryServiceProvider.NewService(System.String,System.Boolean)">
            <summary>Creates an implementation of the StreamFactoryService interface.</summary>
            <param name="isReuseViews">
            indicator on whether stream and view resources are to be reused between statements
            </param>
            <returns>implementation</returns>
        </member>
        <member name="T:com.espertech.esper.view.stream.StreamFactorySvcImpl">
            <summary>
            Service implementation to reuse or not reuse event streams and existing filters depending 
            on the type of statement. 
            
            <para/>
            For non-join statements, the class manages the reuse of event streams when filters match, 
            and thus when an event stream is reused such can be the views under the stream. For joins 
            however, this can lead to problems in multithread-safety since the statement resource lock 
            would then have to be multiple locks, i.e. the reused statement's resource lock and the 
            join statement's own lock, at a minimum.
            
            <para/>
            For join statements, always creating a new event stream and therefore not reusing view 
            resources, for use with joins.
            
            <para/>
            This can be very effective in that if a client applications creates a large number of very 
            similar statements in terms of filters and views used then these resources are all re-used
            across statements.
            
            <para/>
            The re-use is multithread-safe in that 
            (A) statement start/stop is locked against other engine processing 
            (B) the first statement supplies the lock for shared filters and views, protecting multiple threads from entering into the same view. 
            (C) joins statements do not participate in filter and view reuse 
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.stream.StreamFactorySvcImpl.#ctor(System.String,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="engineURI">The engine URI.</param>
            <param name="isReuseViews">indicator on whether stream and view resources are to be reused between statements</param>
        </member>
        <member name="M:com.espertech.esper.view.stream.StreamFactorySvcImpl.CreateStream(System.String,com.espertech.esper.filter.FilterSpecCompiled,com.espertech.esper.filter.FilterService,com.espertech.esper.core.context.util.EPStatementAgentInstanceHandle,System.Boolean,System.Boolean,com.espertech.esper.epl.expression.ExprEvaluatorContext,System.Boolean,System.Boolean,System.Attribute[],System.Boolean)">
            <summary>
            See the method of the same name in <seealso cref="T:com.espertech.esper.view.stream.StreamFactoryService"/>. Always attempts to reuse an existing event stream. May thus return a new event stream or an existing event stream depending on whether filter criteria match.
            </summary>
            <param name="statementId">The statement id.</param>
            <param name="filterSpec">is the filter definition</param>
            <param name="filterService">The filter service.</param>
            <param name="epStatementAgentInstanceHandle">is the statement resource lock</param>
            <param name="isJoin">if set to <c>true</c> [is join].</param>
            <param name="isSubSelect">if set to <c>true</c> [is sub select].</param>
            <param name="exprEvaluatorContext">The expr evaluator context.</param>
            <param name="isNamedWindowTrigger">if set to <c>true</c> [is named window trigger].</param>
            <param name="filterWithSameTypeSubselect">if set to <c>true</c> [filter with same type subselect].</param>
            <param name="annotations">The annotations.</param>
            <param name="stateless">if set to <c>true</c> [stateless].</param>
            <returns>
            newly createdStatement event stream, not reusing existing instances
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.stream.StreamFactorySvcImpl.DropStream(com.espertech.esper.filter.FilterSpecCompiled,com.espertech.esper.filter.FilterService,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            See the method of the same name in <seealso cref="T:com.espertech.esper.view.stream.StreamFactoryService"/>.
            </summary>
            <param name="filterSpec">is the filter definition</param>
            <param name="filterService">to be used to deactivate filter when the last event stream is dropped</param>
            <param name="isJoin">is indicatng whether the stream will participate in a join statement, informationnecessary for stream reuse and multithreading concerns</param>
            <param name="isSubSelect">true for subselects</param>
            <param name="isNamedWindowTrigger">if a named window or trigger querying from named window</param>
            <param name="filterWithSameTypeSubselect">if set to <c>true</c> [filter with same type subselect].</param>
            <param name="stateless">if set to <c>true</c> [stateless].</param>
        </member>
        <member name="M:com.espertech.esper.view.ViewableDefaultImpl.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.LENGTH">
            <summary>Length window.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.FIRST_LENGTH_WINDOW">
            <summary> Length first window.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.LENGTH_BATCH">
            <summary>Length batch window.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.TIME_WINDOW">
            <summary>Time window.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.FIRST_TIME_WINDOW">
            <summary> Time first window.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.TIME_BATCH">
            <summary>Time batch.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.TIME_LENGTH_BATCH">
            <summary>Time length batch.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.TIME_ACCUM">
            <summary>Time accumulating view.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.EXT_TIMED_WINDOW">
            <summary>Externally timed window.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.EXT_TIMED_BATCH">
            <summary>Externally timed window.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.KEEPALL_WINDOW">
            <summary>Keep-all data window.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.SIZE">
            <summary>Size view.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.LAST_EVENT">
            <summary>Last event.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.FIRST_EVENT">
            <summary> First event.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.UNIQUE_BY_PROPERTY">
            <summary>Unique.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.UNIQUE_FIRST_BY_PROPERTY">
            <summary> Unique.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.GROUP_MERGE">
            <summary>Group-by merge.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.GROUP_PROPERTY">
            <summary>Group-by.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.UNIVARIATE_STATISTICS">
            <summary>Univariate statistics.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.WEIGHTED_AVERAGE">
            <summary>Weighted avg.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.CORRELATION">
            <summary>Correlation.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.REGRESSION_LINEST">
            <summary>Linest.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.SORT_WINDOW">
            <summary>Sorted window.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.RANK_WINDOW">
            <summary>Rank window.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.TIME_ORDER">
            <summary>Time order event window.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.PRIOR_EVENT_VIEW">
            <summary>Prior event view.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.INTERNAL_UNION">
            <summary>For retain-union policy.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.INTERNAL_INTERSECT">
            <summary>For retain-intersection policy.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.INTERNAL_MATCH_RECOG">
            <summary>Match-recognize.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.EXPRESSION_WINDOW">
            <summary>Length window.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewEnum.EXPRESSION_BATCH_WINDOW">
            <summary>Expression batch window.</summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewEnumExtensions.GetNamespace(com.espertech.esper.view.ViewEnum)">
            <summary> Returns namespace that the object belongs to.</summary>
            <returns> namespace
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.ViewEnumExtensions.GetName(com.espertech.esper.view.ViewEnum)">
            <summary> Returns name of the view that can be used to reference the view in a view expression.</summary>
            <returns> short name of view
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.ViewEnumExtensions.GetFactoryType(com.espertech.esper.view.ViewEnum)">
            <summary> Gets the view's factory class.</summary>
            <returns> view's factory class
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.ViewEnumExtensions.GetMergeView(com.espertech.esper.view.ViewEnum)">
            <summary> Returns the enumeration value of the view for merging the data generated by another view.</summary>
            <returns> view enum for the merge view
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.ViewEnumExtensions.ForName(System.String,System.String)">
            <summary>
            Returns the view enumeration value given the name of the view.
            </summary>
            <param name="nspace">The nspace.</param>
            <param name="name">is the short name of the view as used in view expressions</param>
            <returns>
            view enumeration value, or null if no such view name is among the enumerated values
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.ViewEnumHelper">
            <summary>Helper producing a repository of built-in views.</summary>
        </member>
        <member name="P:com.espertech.esper.view.ViewEnumHelper.BuiltinViews">
            <summary>Returns a collection of plug-in views.</summary>
            <returns>built-in view definitions</returns>
        </member>
        <member name="T:com.espertech.esper.view.ViewResourceCallback">
            <summary>
            Callback for use by expression nodes to receive view resources.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.ViewFactoryChain">
            <summary>
            Holder for the logical chain of view factories.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewFactoryChain.#ctor(com.espertech.esper.client.EventType,System.Collections.Generic.IList{com.espertech.esper.view.ViewFactory})">
            <summary>Ctor.</summary>
            <param name="streamEventType">is the event type of the event stream</param>
            <param name="viewFactoryChain">is the chain of view factories</param>
        </member>
        <member name="P:com.espertech.esper.view.ViewFactoryChain.EventType">
            <summary>
            Returns the final event type which is the event type of the last view factory in the chain,
            or if the chain is empty then the stream's event type.
            </summary>
            <returns>final event type of the last view or stream</returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewFactoryChain.FactoryChain">
            <summary>Returns the chain of view factories.</summary>
            <returns>view factory list</returns>
        </member>
        <member name="P:com.espertech.esper.view.ViewFactoryChain.DataWindowViewFactoryCount">
            <summary>
            Returns the number of data window factories for the chain.
            </summary>
            <returns>
            number of data window factories
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.ViewFactoryContext">
            <summary>Context calss for specific views within a statement. Each view in a statement gets it's own context containing the statement context. </summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewFactoryContext.#ctor(com.espertech.esper.core.service.StatementContext,System.Int32,System.Int32,System.String,System.String)">
            <summary>Ctor. </summary>
            <param name="statementContext">is the statement-level services</param>
            <param name="streamNum">is the stream number from zero to N</param>
            <param name="viewNum">is the view number from zero to N</param>
            <param name="namespaceName">is the view namespace</param>
            <param name="viewName">is the view name</param>
        </member>
        <member name="P:com.espertech.esper.view.ViewFactoryContext.SchedulingService">
            <summary>Returns service to use for schedule evaluation. </summary>
            <value>schedule evaluation service implemetation</value>
        </member>
        <member name="P:com.espertech.esper.view.ViewFactoryContext.EventAdapterService">
            <summary>Returns service for generating events and handling event types. </summary>
            <value>event adapter service</value>
        </member>
        <member name="P:com.espertech.esper.view.ViewFactoryContext.ScheduleBucket">
            <summary>Returns the schedule bucket for ordering schedule callbacks within this pattern. </summary>
            <value>schedule bucket</value>
        </member>
        <member name="P:com.espertech.esper.view.ViewFactoryContext.EpStatementHandle">
            <summary>Returns the statement's resource locks. </summary>
            <value>statement resource lock/handle</value>
        </member>
        <member name="P:com.espertech.esper.view.ViewFactoryContext.ExtensionServicesContext">
            <summary>Returns extension svc. </summary>
            <value>svc</value>
        </member>
        <member name="P:com.espertech.esper.view.ViewFactoryContext.StatementId">
            <summary>Returns the statement id. </summary>
            <value>statement id</value>
        </member>
        <member name="P:com.espertech.esper.view.ViewFactoryContext.StreamNum">
            <summary>Returns the stream number. </summary>
            <value>stream number</value>
        </member>
        <member name="P:com.espertech.esper.view.ViewFactoryContext.ViewNum">
            <summary>Returns the view number </summary>
            <value>view number</value>
        </member>
        <member name="P:com.espertech.esper.view.ViewFactoryContext.NamespaceName">
            <summary>Returns the view namespace name. </summary>
            <value>namespace name</value>
        </member>
        <member name="P:com.espertech.esper.view.ViewFactoryContext.ViewName">
            <summary>Returns the view name. </summary>
            <value>view name</value>
        </member>
        <member name="P:com.espertech.esper.view.ViewFactoryContext.StatementContext">
            <summary>Returns the statement context. </summary>
            <value>statement context</value>
        </member>
        <member name="M:com.espertech.esper.view.ViewFactoryProxy.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            Intercepts the specified invocation.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="T:com.espertech.esper.view.ViewFieldEnum">
            <summary>
            Enumerates the valid values for each view's public fields. The name of the field or property can be used
            to obtain values from the view rather than using the hardcoded String value for the field.
            </summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.UNIVARIATE_STATISTICS__DATAPOINTS">
            <summary> Count.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.UNIVARIATE_STATISTICS__TOTAL">
            <summary> Sum.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.UNIVARIATE_STATISTICS__AVERAGE">
            <summary> Average.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.UNIVARIATE_STATISTICS__STDDEVPA">
            <summary> Standard dev population.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.UNIVARIATE_STATISTICS__STDDEV">
            <summary> Standard dev.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.UNIVARIATE_STATISTICS__VARIANCE">
            <summary> Variance.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.WEIGHTED_AVERAGE__AVERAGE">
            <summary> Weighted average.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.CORRELATION__CORRELATION">
            <summary> Correlation.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.REGRESSION__SLOPE">
            <summary> Slope.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.REGRESSION__YINTERCEPT">
            <summary> Y-intercept.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.SIZE_VIEW__SIZE">
            <summary> Size.</summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.REGRESSION__XAVERAGE">
            <summary>XAverage </summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.REGRESSION__XSTANDARDDEVIATIONPOP">
            <summary>XStandardDeviationPop </summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.REGRESSION__XSTANDARDDEVIATIONSAMPLE">
            <summary>XStandardDeviationSample </summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.REGRESSION__XSUM">
            <summary>XSum </summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.REGRESSION__XVARIANCE">
            <summary>XVariance </summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.REGRESSION__YAVERAGE">
            <summary>YAverage </summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.REGRESSION__YSTANDARDDEVIATIONPOP">
            <summary>YStandardDeviationPop </summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.REGRESSION__YSTANDARDDEVIATIONSAMPLE">
            <summary>YStandardDeviationSample </summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.REGRESSION__YSUM">
            <summary>YSum </summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.REGRESSION__YVARIANCE">
            <summary>YVariance </summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.REGRESSION__DATAPOINTS">
            <summary>dataPoints </summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.REGRESSION__N">
            <summary>n </summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.REGRESSION__SUMX">
            <summary>sumX </summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.REGRESSION__SUMXSQ">
            <summary>sumXSq </summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.REGRESSION__SUMXY">
            <summary>sumXY </summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.REGRESSION__SUMY">
            <summary>sumY </summary>
        </member>
        <member name="F:com.espertech.esper.view.ViewFieldEnum.REGRESSION__SUMYSQ">
            <summary>sumYSq </summary>
        </member>
        <member name="T:com.espertech.esper.view.ViewParameterException">
            <summary>
            Thrown to indicate a validation error in view parameterization.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewParameterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.view.ViewParameterException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:com.espertech.esper.view.ViewParameterException.#ctor(System.String)">
            <summary>Ctor.</summary>
            <param name="message">validation error message</param>
        </member>
        <member name="T:com.espertech.esper.view.ViewProcessingException">
            <summary>
            This exception is thrown to indicate a problem with a view expression.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewProcessingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.view.ViewProcessingException"/> class.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewProcessingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.view.ViewProcessingException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:com.espertech.esper.view.ViewProcessingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:com.espertech.esper.view.ViewProcessingException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:com.espertech.esper.view.ViewProxy.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            Intercepts the specified invocation.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="T:com.espertech.esper.view.ViewResolutionService">
            <summary>
            Factory service for resolving view names and for creating view instances based on a view specification including view name and namespace.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewResolutionService.Create(System.String,System.String)">
            <summary>
            Instantiates a <see cref="T:com.espertech.esper.view.ViewFactory"/> based on the view namespace and name stored in the view spec.
            <para>
            Does not actually use the view factory object created.
            </para>
            </summary>
            <param name="_namespace">is the view namespace</param>
            <param name="name">is the view name</param>
            <throws>ViewProcessingException if the view namespace or name cannot resolve</throws>
        </member>
        <member name="T:com.espertech.esper.view.ViewResolutionServiceImpl">
            <summary>
            Resolves view namespace and name to view factory class, using configuration.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewResolutionServiceImpl.#ctor(com.espertech.esper.epl.spec.PluggableObjectRegistry,System.String,System.Type)">
            <summary>
            Ctor.
            </summary>
            <param name="viewObjects">is the view objects to use for resolving views, can be both built-in and plug-in views.</param>
            <param name="optionalNamedWindowName">Name of the optional named window.</param>
            <param name="virtualDataWindowViewFactory">The virtual data window view factory.</param>
        </member>
        <member name="T:com.espertech.esper.view.ViewService">
            <summary>Service interface for creating views. </summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewService.CreateFactories(System.Int32,com.espertech.esper.client.EventType,System.Collections.Generic.IList{com.espertech.esper.epl.spec.ViewSpec},com.espertech.esper.epl.spec.StreamSpecOptions,com.espertech.esper.core.service.StatementContext)">
            <summary>
            Returns a chain of view factories that can be used to obtain the readonly event type, and 
            that can later be used to actually create the chain of views or reuse existing views.
            <para/>
            Does not actually hook up the view factories or views against the event stream, but creates 
            view factories and sets parameters on each view factory as supplied. Determines if view 
            factories are compatible in the chain via the attach method.
            </summary>
            <param name="streamNum">the stream number starting at zero, a join would have N streams</param>
            <param name="parentEventType">is the event type of the event stream that originates the raw events</param>
            <param name="viewSpecList">the specification for each view factory in the chain to be created</param>
            <param name="options">stream options such as unidirectional, retain-union etc</param>
            <param name="context">dependent services</param>
            <returns>chain of view factories</returns>
            <throws>ViewProcessingException thrown if a view factory doesn't take parameters as supplied,or cannot hook onto it's parent view or event stream </throws>
        </member>
        <member name="M:com.espertech.esper.view.ViewService.CreateViews(com.espertech.esper.view.Viewable,System.Collections.Generic.IList{com.espertech.esper.view.ViewFactory},com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext,System.Boolean)">
            <summary>
            Creates the views given a chain of view factories.
            <para/>
            Attempts to reuse compatible views under then parent event stream viewable as indicated by 
            each view factories reuse method.
            </summary>
            <param name="eventStreamViewable">is the event stream to hook into</param>
            <param name="viewFactoryChain">defines the list of view factorys to call makeView or canReuse on</param>
            <param name="viewFactoryChainContext">provides services</param>
            <param name="hasPreviousNode">if set to <c>true</c> [has previous node].</param>
            <returns>
            last viewable in chain, or the eventStreamViewable if no view factories are supplied
            </returns>
        </member>
        <member name="M:com.espertech.esper.view.ViewService.Remove(com.espertech.esper.view.EventStream,com.espertech.esper.view.Viewable)">
            <summary>
            Removes a view discoupling the view and any of it's parent views up the tree to the last 
            shared parent view.
            </summary>
            <param name="eventStream">the event stream that originates the raw events</param>
            <param name="view">the view (should be the last in a chain) to remove</param>
        </member>
        <member name="T:com.espertech.esper.view.ViewServiceHelper">
            <summary>
            Utility methods to deal with chains of views, and for merge/group-by views.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewServiceHelper.AddMergeViews(System.Collections.Generic.IList{com.espertech.esper.epl.spec.ViewSpec})">
            <summary>Add merge views for any views in the chain requiring a merge (group view). Appends to the list of view specifications passed in one ore more new view specifications that represent merge views. Merge views have the same parameter list as the (group) view they merge data for. </summary>
            <param name="specifications">is a list of view definitions defining the chain of views.</param>
            <throws>ViewProcessingException indicating that the view chain configuration is invalid</throws>
        </member>
        <member name="M:com.espertech.esper.view.ViewServiceHelper.InstantiateChain(com.espertech.esper.view.Viewable,System.Collections.Generic.IList{com.espertech.esper.view.ViewFactory},com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext)">
            <summary>
            Instantiate a chain of views.
            </summary>
            <param name="parentViewable">parent view to add the chain to</param>
            <param name="viewFactories">is the view factories to use to make each view, or reuse and existing view</param>
            <param name="viewFactoryChainContext">The view factory chain context.</param>
            <returns>chain of views instantiated</returns>
        </member>
        <member name="M:com.espertech.esper.view.ViewServiceHelper.RemoveChainLeafView(com.espertech.esper.view.Viewable,com.espertech.esper.view.Viewable)">
            <summary>Removes a view from a parent view returning the orphaned parent views in a list. </summary>
            <param name="parentViewable">parent to remove view from</param>
            <param name="viewToRemove">view to remove</param>
            <returns>chain of orphaned views</returns>
        </member>
        <member name="M:com.espertech.esper.view.ViewServiceHelper.MatchExistingViews(com.espertech.esper.view.Viewable,System.Collections.Generic.IList{com.espertech.esper.view.ViewFactory})">
            <summary>Match the views under the stream to the list of view specications passed in. The method changes the view specifications list passed in and removes those specifications for which matcing views have been found. If none of the views under the stream matches the first view specification passed in, the method returns the stream itself and leaves the view specification list unchanged. If one view under the stream matches, the view's specification is removed from the list. The method will then attempt to determine if any child views of that view also match specifications. </summary>
            <param name="rootViewable">is the top rootViewable event stream to which all views are attached as child viewsThis parameter is changed by this method, ie. specifications are removed if they match existing views. </param>
            <param name="viewFactories">is the view specifications for making views</param>
            <returns>a pair of (A) the stream if no views matched, or the last child view that matched (B) the full listof parent views </returns>
        </member>
        <member name="M:com.espertech.esper.view.ViewServiceHelper.InstantiateFactories(System.Int32,System.Collections.Generic.IList{com.espertech.esper.epl.spec.ViewSpec},com.espertech.esper.core.service.StatementContext)">
            <summary>Given a list of view specifications obtained from by parsing this method instantiates a list of view factories. The view factories are not yet aware of each other after leaving this method (so not yet chained logically). They are simply instantiated and assigned view parameters. </summary>
            <param name="streamNum">is the stream number</param>
            <param name="viewSpecList">is the view definition</param>
            <param name="statementContext">is statement service context and statement info</param>
            <returns>list of view factories</returns>
            <throws>ViewProcessingException if the factory cannot be creates such as for invalid view spec</throws>
        </member>
        <member name="T:com.espertech.esper.view.ViewServiceImpl">
            <summary>Implementation of the view evaluation service business interface. </summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewServiceImpl.#ctor">
            <summary>Ctor. </summary>
        </member>
        <member name="T:com.espertech.esper.view.ViewServiceProvider">
            <summary>
            Static factory for implementations of the <see cref="T:com.espertech.esper.view.ViewService"/> interface.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ViewServiceProvider.NewService">
            <summary> Creates an implementation of the ViewService interface.</summary>
            <returns> implementation
            </returns>
        </member>
        <member name="T:com.espertech.esper.view.window.ExpressionBatchView">
            <summary>
            This view is a moving window extending the into the past until the expression passed to it returns false.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.window.ExpressionViewBase">
            <summary>
            This view is a moving window extending the into the past until the expression passed to it returns false.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.ExpressionViewBase.ScheduleCallback">
            <summary>Implemented to check the expiry expression. </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.ExpressionBatchView.#ctor(com.espertech.esper.view.window.ExpressionBatchViewFactory,com.espertech.esper.collection.ViewUpdatedCollection,com.espertech.esper.epl.expression.ExprEvaluator,com.espertech.esper.epl.agg.service.AggregationServiceFactoryDesc,com.espertech.esper.events.map.MapEventBean,System.Collections.Generic.ICollection{System.String},com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext)">
            <summary>
            Constructor creates a moving window extending the specified number of elements into the past.
            </summary>
            <param name="dataWindowViewFactory">for copying this view in a group-by</param>
            <param name="viewUpdatedCollection">is a collection that the view must update when receiving events</param>
            <param name="expiryExpression">The expiry expression.</param>
            <param name="aggregationServiceFactoryDesc">The aggregation service factory desc.</param>
            <param name="builtinEventProps">The builtin event props.</param>
            <param name="variableNames">variable names</param>
            <param name="agentInstanceContext">The agent instance context.</param>
        </member>
        <member name="M:com.espertech.esper.view.window.ExpressionBatchView.IsEmpty">
            <summary>Returns true if the window is empty, or false if not empty. </summary>
            <returns>true if empty</returns>
        </member>
        <member name="T:com.espertech.esper.view.window.ExpressionBatchViewFactory">
            <summary>Factory for <seealso cref="T:com.espertech.esper.view.window.ExpressionBatchView"/>. </summary>
        </member>
        <member name="T:com.espertech.esper.view.window.ExpressionViewFactoryBase">
            <summary>Base factory for expression-based window and batch view. </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.ExpressionViewFactoryBase.MakeView(com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext)">
            <summary>
            Create a new view.
            </summary>
            <param name="agentInstanceViewFactoryContext"></param>
            <returns></returns>
        </member>
        <member name="M:com.espertech.esper.view.window.ExpressionViewFactoryBase.MakePreviousGetter">
            <summary>
            Makes the previous getter.
            </summary>
            <returns></returns>
        </member>
        <member name="T:com.espertech.esper.view.window.ExpressionViewUtil">
            <summary>
            This view is a moving window extending the into the past until the expression passed to it returns false.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.window.ExpressionWindowView">
            <summary>
            This view is a moving window extending the into the past until the expression passed to it returns false.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.ExpressionWindowView.#ctor(com.espertech.esper.view.window.ExpressionWindowViewFactory,com.espertech.esper.collection.ViewUpdatedCollection,com.espertech.esper.epl.expression.ExprEvaluator,com.espertech.esper.epl.agg.service.AggregationServiceFactoryDesc,com.espertech.esper.events.map.MapEventBean,System.Collections.Generic.ICollection{System.String},com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext)">
            <summary>
            Constructor creates a moving window extending the specified number of elements into the past.
            </summary>
            <param name="dataWindowViewFactory">for copying this view in a group-by</param>
            <param name="viewUpdatedCollection">is a collection that the view must update when receiving events</param>
            <param name="expiryExpression">The expiry expression.</param>
            <param name="aggregationServiceFactoryDesc">The aggregation service factory desc.</param>
            <param name="builtinEventProps">The builtin event props.</param>
            <param name="variableNames">variable names</param>
            <param name="agentInstanceContext">The agent instance context.</param>
        </member>
        <member name="M:com.espertech.esper.view.window.ExpressionWindowView.IsEmpty">
            <summary>Returns true if the window is empty, or false if not empty. </summary>
            <returns>true if empty</returns>
        </member>
        <member name="T:com.espertech.esper.view.window.ExpressionWindowViewFactory">
            <summary>
            Factory for <seealso cref="T:com.espertech.esper.view.window.ExpressionWindowView"/>
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.window.ExternallyTimedBatchView">
            <summary>Batch window based on timestamp of arriving events. </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.ExternallyTimedBatchView.#ctor(com.espertech.esper.view.window.ExternallyTimedBatchViewFactory,com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.epl.expression.ExprEvaluator,System.Int64,System.Nullable{System.Int64},com.espertech.esper.collection.ViewUpdatedCollection,com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext)">
            <summary>
            Constructor.
            </summary>
            <param name="factory">for copying this view in a group-by</param>
            <param name="timestampExpression">is the field name containing a long timestamp valuethat should be in ascending order for the natural order of events and is intended to reflect System.currentTimeInMillis but does not necessarily have to.</param>
            <param name="timestampExpressionEval">The timestamp expression eval.</param>
            <param name="msecBeforeExpiry">is the number of milliseconds before events gets pushedout of the window as oldData in the update method. The view compares each events timestamp against the newest event timestamp and those with a delta greater then secondsBeforeExpiry are pushed out of the window.</param>
            <param name="optionalReferencePoint">The optional reference point.</param>
            <param name="viewUpdatedCollection">is a collection that the view must update when receiving events</param>
            <param name="agentInstanceViewFactoryContext">context for expression evalauation</param>
        </member>
        <member name="M:com.espertech.esper.view.window.ExternallyTimedBatchView.IsEmpty">
            <summary>Returns true to indicate the window is empty, or false if the view is not empty. </summary>
            <returns>true if empty</returns>
        </member>
        <member name="P:com.espertech.esper.view.window.ExternallyTimedBatchView.TimestampExpression">
            <summary>Returns the field name to get timestamp values from. </summary>
            <value>field name for timestamp values</value>
        </member>
        <member name="T:com.espertech.esper.view.window.ExternallyTimedBatchViewFactory">
            <summary>
            Factory for <seealso cref="T:com.espertech.esper.view.window.ExternallyTimedBatchView"/>
            </summary>
        </member>
        <member name="F:com.espertech.esper.view.window.ExternallyTimedBatchViewFactory.TimestampExpression">
            <summary>The timestamp property name. </summary>
        </member>
        <member name="F:com.espertech.esper.view.window.ExternallyTimedBatchViewFactory.MillisecondsBeforeExpiry">
            <summary>The number of msec to expire. </summary>
        </member>
        <member name="T:com.espertech.esper.view.window.ExternallyTimedWindowView">
             <summary>
             View for a moving window extending the specified amount of time into the past, driven entirely by external timing
             supplied within long-type timestamp values in a field of the event beans that the view receives.
            
             The view is completely driven by timestamp values that are supplied by the events it receives,
             and does not use the schedule service time.
             It requires a field name as parameter for a field that returns ascending long-type timestamp values.
             It also requires a long-type parameter setting the time length in milliseconds of the time window.
             Events are expected to provide long-type timestamp values in natural order. The view does
             itself not use the current system time for keeping track of the time window, but just the
             timestamp values supplied by the events sent in.
            
             The arrival of new events with a newer timestamp then past events causes the window to be re-evaluated and the oldest
             events pushed out of the window. Ie. Assume event X1 with timestamp T1 is in the window.
             When event Xn with timestamp Tn arrives, and the window time length in milliseconds is t, then if
             ((Tn - T1) > t == true) then event X1 is pushed as oldData out of the window. It is assumed that
             events are sent in in their natural order and the timestamp values are ascending.
             </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.ExternallyTimedWindowView.#ctor(com.espertech.esper.view.window.ExternallyTimedWindowViewFactory,com.espertech.esper.epl.expression.ExprNode,com.espertech.esper.epl.expression.ExprEvaluator,System.Int64,com.espertech.esper.collection.ViewUpdatedCollection,com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext)">
            <summary>
            Constructor.
            </summary>
            <param name="externallyTimedWindowViewFactory">for copying this view in a group-by</param>
            <param name="timestampExpression">is the field name containing a long timestamp valuethat should be in ascending order for the natural order of events and is intended to reflect System.currentTimeInMillis but does not necessarily have to.</param>
            <param name="timestampExpressionEval">The timestamp expression eval.</param>
            <param name="msecBeforeExpiry">is the number of milliseconds before events gets pushedout of the window as oldData in the update method. The view compares each events timestamp against the newest event timestamp and those with a delta greater then secondsBeforeExpiry are pushed out of the window.</param>
            <param name="viewUpdatedCollection">is a collection that the view must update when receiving events</param>
            <param name="agentInstanceViewFactoryContext">context for expression evalauation</param>
        </member>
        <member name="M:com.espertech.esper.view.window.ExternallyTimedWindowView.IsEmpty">
            <summary>Returns true to indicate the window is empty, or false if the view is not empty. </summary>
            <returns>true if empty</returns>
        </member>
        <member name="P:com.espertech.esper.view.window.ExternallyTimedWindowView.TimestampExpression">
            <summary>Returns the field name to get timestamp values from. </summary>
            <value>field name for timestamp values</value>
        </member>
        <member name="P:com.espertech.esper.view.window.ExternallyTimedWindowView.MillisecondsBeforeExpiry">
            <summary>Retuns the window size in milliseconds. </summary>
            <value>number of milliseconds before events expire from the window</value>
        </member>
        <member name="T:com.espertech.esper.view.window.ExternallyTimedWindowViewFactory">
            <summary>Factory for <seealso cref="T:com.espertech.esper.view.window.ExternallyTimedWindowView"/>. </summary>
        </member>
        <member name="F:com.espertech.esper.view.window.ExternallyTimedWindowViewFactory.timestampExpression">
            <summary>The timestamp property name. </summary>
        </member>
        <member name="F:com.espertech.esper.view.window.ExternallyTimedWindowViewFactory.millisecondsBeforeExpiry">
            <summary>The number of msec to expire. </summary>
        </member>
        <member name="T:com.espertech.esper.view.window.FirstLengthWindowView">
            <summary>
            A length-first view takes the first N arriving events. 
            Further arriving insert stream events are disregarded until events 
            are deleted. 
            <para/>
            Remove stream events delete from the data window.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.FirstLengthWindowView.#ctor(com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext,com.espertech.esper.view.window.FirstLengthWindowViewFactory,System.Int32)">
            <summary>
            Ctor.
            </summary>
            <param name="agentInstanceViewFactoryContext">The agent instance view factory context.</param>
            <param name="lengthFirstWindowViewFactory">for copying this view in a group-by</param>
            <param name="size">the first N events to consider</param>
        </member>
        <member name="M:com.espertech.esper.view.window.FirstLengthWindowView.IsEmpty">
            <summary>Returns true if the window is empty, or false if not empty. </summary>
            <returns>true if empty</returns>
        </member>
        <member name="P:com.espertech.esper.view.window.FirstLengthWindowView.Size">
            <summary>Returns the size of the length window. </summary>
            <value>size of length window</value>
        </member>
        <member name="T:com.espertech.esper.view.window.FirstLengthWindowViewFactory">
            <summary>Factory for <seealso cref="T:com.espertech.esper.view.window.FirstLengthWindowView"/>. </summary>
        </member>
        <member name="F:com.espertech.esper.view.window.FirstLengthWindowViewFactory.size">
            <summary>Size of length first window. </summary>
        </member>
        <member name="T:com.espertech.esper.view.window.FirstTimeView">
            <summary> </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.FirstTimeView.#ctor(com.espertech.esper.view.window.FirstTimeViewFactory,com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext,System.Int64)">
            <summary>Constructor. </summary>
            <param name="agentInstanceContext"></param>
            <param name="msecIntervalSize">is the number of milliseconds to batch events for</param>
            <param name="timeFirstViewFactory">fr copying this view in a group-by</param>
        </member>
        <member name="M:com.espertech.esper.view.window.FirstTimeView.IsEmpty">
            <summary>Returns true if the window is empty, or false if not empty. </summary>
            <returns>true if empty</returns>
        </member>
        <member name="P:com.espertech.esper.view.window.FirstTimeView.MsecIntervalSize">
            <summary>Returns the interval size in milliseconds. </summary>
            <value>batch size</value>
        </member>
        <member name="T:com.espertech.esper.view.window.FirstTimeViewFactory">
            <summary>Factory for <seealso cref="T:com.espertech.esper.view.window.FirstTimeView"/>. </summary>
        </member>
        <member name="F:com.espertech.esper.view.window.FirstTimeViewFactory.millisecondsBeforeExpiry">
            <summary>Number of msec before expiry. </summary>
        </member>
        <member name="T:com.espertech.esper.view.window.IStreamRandomAccess">
            <summary>
            For use with length and time window views that must provide random access into data window contents provided for the "previous" expression if used.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.IStreamRandomAccess.#ctor(com.espertech.esper.view.window.RandomAccessByIndexObserver)">
            <summary>Ctor. </summary>
            <param name="updateObserver">is invoked when updates are received</param>
        </member>
        <member name="M:com.espertech.esper.view.window.IStreamRandomAccess.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.IStreamRandomAccess.Remove(com.espertech.esper.client.EventBean)">
            <summary>Remove event. </summary>
            <param name="oldData">event to remove</param>
        </member>
        <member name="M:com.espertech.esper.view.window.IStreamRandomAccess.Update(com.espertech.esper.client.EventBean)">
            <summary>Apply event </summary>
            <param name="newData">to apply</param>
        </member>
        <member name="M:com.espertech.esper.view.window.IStreamRandomAccess.IsEmpty">
            <summary>Returns true for empty. </summary>
            <returns>indicator</returns>
        </member>
        <member name="T:com.espertech.esper.view.window.IStreamRelativeAccess">
            <summary>
            Provides relative access to insert stream events for certain window.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.IStreamRelativeAccess.#ctor(com.espertech.esper.view.window.IStreamRelativeAccess.IStreamRelativeAccessUpdateObserver)">
            <summary>Ctor. </summary>
            <param name="updateObserver">is invoked when updates are received</param>
        </member>
        <member name="T:com.espertech.esper.view.window.IStreamRelativeAccess.IStreamRelativeAccessUpdateObserver">
            <summary>For indicating that the collection has been updated. </summary>
            <param name="iStreamRelativeAccess">is the collection</param>
            <param name="newData">is the new data available</param>
        </member>
        <member name="T:com.espertech.esper.view.window.KeepAllView">
            <summary>
            This view is a keep-all data window that simply keeps all events added. It in addition 
            allows to remove events efficiently for the remove-stream events received by the view.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.KeepAllView.#ctor(com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext,com.espertech.esper.view.window.KeepAllViewFactory,com.espertech.esper.collection.ViewUpdatedCollection)">
            <summary>
            Ctor.
            </summary>
            <param name="agentInstanceViewFactoryContext">The agent instance view factory context.</param>
            <param name="keepAllViewFactory">for copying this view in a group-by</param>
            <param name="viewUpdatedCollection">for satisfying queries that select previous events in window order</param>
        </member>
        <member name="M:com.espertech.esper.view.window.KeepAllView.IsEmpty">
            <summary>Returns true if the window is empty, or false if not empty. </summary>
            <returns>true if empty</returns>
        </member>
        <member name="P:com.espertech.esper.view.window.KeepAllView.ViewUpdatedCollection">
            <summary>Returns the (optional) collection handling random access to window contents for prior or previous events. </summary>
            <value>buffer for events</value>
        </member>
        <member name="T:com.espertech.esper.view.window.KeepAllViewFactory">
            <summary>
            Factory for <seealso cref="T:com.espertech.esper.view.window.KeepAllView"/>.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.window.LengthBatchView">
            <summary>
            A data view that aggregates events in a stream and releases them in one batch when 
            a maximum number of events has been collected.
            <para/>
            The view works similar to a length_window but is not continuous, and similar to a 
            time_batch however is not time-based but reacts to the number of events.
            <para/>
            The view releases the batched events, when a certain number of batched events has 
            been reached or exceeded, as new data to child views. The prior batch if not empty 
            is released as old data to any child views. The view doesn't release intervals with 
            no old or new data. It also does not collect old data published by a parent view.
            <para/>
            If there are no events in the current and prior batch, the view will not invoke the 
            update method of child views.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthBatchView.#ctor(com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext,com.espertech.esper.view.window.LengthBatchViewFactory,System.Int32,com.espertech.esper.collection.ViewUpdatedCollection)">
            <summary>
            Constructor.
            </summary>
            <param name="agentInstanceViewFactoryContext">The agent instance view factory context.</param>
            <param name="lengthBatchViewFactory">for copying this view in a group-by</param>
            <param name="size">is the number of events to batch</param>
            <param name="viewUpdatedCollection">is a collection that the view must update when receiving events</param>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthBatchView.SendBatch">
            <summary>This method updates child views and clears the batch of events. </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthBatchView.IsEmpty">
            <summary>Returns true if the window is empty, or false if not empty. </summary>
            <returns>true if empty</returns>
        </member>
        <member name="P:com.espertech.esper.view.window.LengthBatchView.Count">
            <summary>Returns the number of events to batch (data window size). </summary>
            <value>batch size</value>
        </member>
        <member name="T:com.espertech.esper.view.window.LengthBatchViewFactory">
            <summary>Factory for <seealso cref="T:com.espertech.esper.view.window.TimeBatchView"/>. </summary>
        </member>
        <member name="F:com.espertech.esper.view.window.LengthBatchViewFactory.size">
            <summary>The length window size. </summary>
        </member>
        <member name="T:com.espertech.esper.view.window.LengthBatchViewRStream">
            <summary>
            Same as the <seealso cref="T:com.espertech.esper.view.window.LengthBatchView"/>, this view also supports fast-remove from 
            the batch for remove stream events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthBatchViewRStream.#ctor(com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext,com.espertech.esper.view.window.LengthBatchViewFactory,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="agentInstanceViewFactoryContext">The agent instance view factory context.</param>
            <param name="lengthBatchViewFactory">for copying this view in a group-by</param>
            <param name="size">is the number of events to batch</param>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthBatchViewRStream.SendBatch">
            <summary>This method updates child views and clears the batch of events. </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthBatchViewRStream.IsEmpty">
            <summary>Returns true if the window is empty, or false if not empty. </summary>
            <returns>true if empty</returns>
        </member>
        <member name="P:com.espertech.esper.view.window.LengthBatchViewRStream.Count">
            <summary>Returns the number of events to batch (data window size). </summary>
            <value>batch size</value>
        </member>
        <member name="T:com.espertech.esper.view.window.LengthWindowView">
            <summary>
            This view is a moving window extending the specified number of elements into the past.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthWindowView.#ctor(com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext,com.espertech.esper.view.window.LengthWindowViewFactory,System.Int32,com.espertech.esper.collection.ViewUpdatedCollection)">
            <summary>
            Constructor creates a moving window extending the specified number of elements into the past.
            </summary>
            <param name="agentInstanceViewFactoryContext">The agent instance view factory context.</param>
            <param name="lengthWindowViewFactory">for copying this view in a group-by</param>
            <param name="size">is the specified number of elements into the past</param>
            <param name="viewUpdatedCollection">is a collection that the view must update when receiving events</param>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthWindowView.IsEmpty">
            <summary>Returns true if the window is empty, or false if not empty. </summary>
            <returns>true if empty</returns>
        </member>
        <member name="P:com.espertech.esper.view.window.LengthWindowView.Count">
            <summary>Returns the size of the length window. </summary>
            <value>size of length window</value>
        </member>
        <member name="P:com.espertech.esper.view.window.LengthWindowView.ViewUpdatedCollection">
            <summary>Returns the (optional) collection handling random access to window contents for prior or previous events. </summary>
            <value>buffer for events</value>
        </member>
        <member name="T:com.espertech.esper.view.window.LengthWindowViewFactory">
            <summary>Factory for <seealso cref="T:com.espertech.esper.view.window.LengthWindowView"/>. </summary>
        </member>
        <member name="F:com.espertech.esper.view.window.LengthWindowViewFactory._size">
            <summary>Size of length window. </summary>
        </member>
        <member name="T:com.espertech.esper.view.window.LengthWindowViewRStream">
            <summary>
            This view is a moving window extending the specified number of elements into the past, allowing 
            in addition to remove events efficiently for remove-stream events received by the view. 
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthWindowViewRStream.#ctor(com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext,com.espertech.esper.view.window.LengthWindowViewFactory,System.Int32)">
            <summary>
            Constructor creates a moving window extending the specified number of elements into the past.
            </summary>
            <param name="agentInstanceViewFactoryContext">The agent instance view factory context.</param>
            <param name="lengthWindowViewFactory">for copying this view in a group-by</param>
            <param name="size">is the specified number of elements into the past</param>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthWindowViewRStream.IsEmpty">
            <summary>Returns true if the window is empty, or false if not empty. </summary>
            <returns>true if empty</returns>
        </member>
        <member name="M:com.espertech.esper.view.window.LengthWindowViewRStream.GetSize">
            <summary>Returns the size of the length window. </summary>
            <returns>size of length window</returns>
        </member>
        <member name="T:com.espertech.esper.view.window.RandomAccessByIndexGetter">
            <summary>
            Getter that provides an index at runtime.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.window.RandomAccessByIndexObserver">
            <summary>For indicating that the collection has been updated. </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.RandomAccessByIndexObserver.Updated(com.espertech.esper.view.window.RandomAccessByIndex)">
            <summary>Callback to indicate an update </summary>
            <param name="randomAccessByIndex">is the collection</param>
        </member>
        <member name="M:com.espertech.esper.view.window.RandomAccessByIndexGetter.Updated(com.espertech.esper.view.window.RandomAccessByIndex)">
            <summary>
            Callback to indicate an update
            </summary>
            <param name="randomAccessByIndex">is the collection</param>
        </member>
        <member name="P:com.espertech.esper.view.window.RandomAccessByIndexGetter.Accessor">
            <summary>Returns the index for access.</summary>
            <returns>index</returns>
        </member>
        <member name="T:com.espertech.esper.view.window.RelativeAccessByEventNIndexGetter">
            <summary>
            Provides random-access into window contents by event and index as a combination.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.RelativeAccessByEventNIndexGetter.GetAccessor(com.espertech.esper.client.EventBean)">
            <summary>Returns the access into window contents given an event. </summary>
            <param name="theEvent">to which the method returns relative access from</param>
            <returns>buffer</returns>
        </member>
        <member name="T:com.espertech.esper.view.window.RelativeAccessByEventNIndexMap">
            <summary>
            Provides random-access into window contents by event and index as a combination.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.RelativeAccessByEventNIndexMap.GetAccessor(com.espertech.esper.client.EventBean)">
            <summary>
            Returns the access into window contents given an event.
            </summary>
            <param name="theEvent">to which the method returns relative access from</param>
            <returns>buffer</returns>
        </member>
        <member name="T:com.espertech.esper.view.window.TimeAccumView">
            <summary>
            A data window view that holds events in a stream and only removes events from a stream (rstream) if no 
            more events arrive for a given time interval.
            <para/>
            No batch version of the view exists as the batch version is simply the remove stream of this view, which 
            removes in batches.
            <para/>
            The view is continuous, the insert stream consists of arriving events. The remove stream only posts current 
            window contents when no more events arrive for a given timer interval.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeAccumView.#ctor(com.espertech.esper.view.window.TimeAccumViewFactory,com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext,System.Int64,com.espertech.esper.collection.ViewUpdatedCollection)">
            <summary>Constructor. </summary>
            <param name="msecIntervalSize">is the number of milliseconds to batch events for</param>
            <param name="viewUpdatedCollection">is a collection that the view must update when receiving events</param>
            <param name="timeBatchViewFactory">fr copying this view in a group-by</param>
            <param name="agentInstanceContext">is required view services</param>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeAccumView.SendRemoveStream">
            <summary>This method sends the remove stream for all accumulated events. </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeAccumView.IsEmpty">
            <summary>Returns true if the window is empty, or false if not empty. </summary>
            <returns>true if empty</returns>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeAccumView.MsecIntervalSize">
            <summary>Returns the interval size in milliseconds. </summary>
            <value>batch size</value>
        </member>
        <member name="T:com.espertech.esper.view.window.TimeAccumViewFactory">
            <summary>Factory for <seealso cref="T:com.espertech.esper.view.window.TimeAccumView"/>. </summary>
        </member>
        <member name="F:com.espertech.esper.view.window.TimeAccumViewFactory.MillisecondsQuietTime">
            <summary>Number of msec of quiet time before results are flushed. </summary>
        </member>
        <member name="T:com.espertech.esper.view.window.TimeAccumViewRStream">
            <summary>
            A data window view that holds events in a stream and only removes events from a stream (rstream) 
            if no more events arrive for a given time interval, also handling the remove stream by keeping 
            set-like semantics. See <seealso cref="T:com.espertech.esper.view.window.TimeAccumView"/> for the same behavior without remove 
            stream handling.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeAccumViewRStream.#ctor(com.espertech.esper.view.window.TimeAccumViewFactory,com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext,System.Int64)">
            <summary>
            Constructor.
            </summary>
            <param name="timeBatchViewFactory">fr copying this view in a group-by</param>
            <param name="agentInstanceContext">The agent instance context.</param>
            <param name="msecIntervalSize">is the number of milliseconds to batch events for</param>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeAccumViewRStream.SendRemoveStream">
            <summary>This method sends the remove stream for all accumulated events. </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeAccumViewRStream.IsEmpty">
            <summary>Returns true if the window is empty, or false if not empty. </summary>
            <returns>true if empty</returns>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeAccumViewRStream.MsecIntervalSize">
            <summary>Returns the interval size in milliseconds. </summary>
            <value>batch size</value>
        </member>
        <member name="T:com.espertech.esper.view.window.TimeBatchView">
            <summary>
            A data view that aggregates events in a stream and releases them in one batch at 
            every specified time interval. The view works similar to a time_window but in not 
            continuous. The view releases the batched events after the interval as new data to 
            child views. The prior batch if not empty is released as old data to child view.
            The view doesn't release intervals with no old or new data. It also does not collect 
            old data published by a parent view.  For example, we want to calculate the average 
            of IBM stock every hour, for the last hour. The view accepts 2 parameter combinations. 
            (1) A time interval is supplied with a reference point 
                - based on this point the intervals are set. 
            (1) A time interval is supplied but no reference point 
                - the reference point is set when the first event arrives.
            
            If there are no events in the current and prior batch, the view will not invoke the update 
            method of child views. In that case also, no next callback is scheduled with the scheduling 
            service until the next event arrives. 
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeBatchView.#ctor(com.espertech.esper.view.window.TimeBatchViewFactory,com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext,System.Int64,System.Nullable{System.Int64},System.Boolean,System.Boolean,com.espertech.esper.collection.ViewUpdatedCollection)">
            <summary>
            Constructor.
            </summary>
            <param name="timeBatchViewFactory">for copying this view in a group-by</param>
            <param name="agentInstanceContext">The agent instance context.</param>
            <param name="msecIntervalSize">is the number of milliseconds to batch events for</param>
            <param name="referencePoint">is the reference point onto which to base intervals, or null ifthere is no such reference point supplied</param>
            <param name="forceOutput">is true if the batch should produce empty output if there is no value to output following time intervals</param>
            <param name="isStartEager">is true for start-eager</param>
            <param name="viewUpdatedCollection">is a collection that the view must update when receiving events</param>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeBatchView.SendBatch">
            <summary>
            This method updates child views and clears the batch of events. We schedule a new callback at this
            time if there were events in the batch.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeBatchView.IsEmpty">
            <summary>Returns true if the window is empty, or false if not empty. </summary>
            <returns>true if empty</returns>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeBatchView.ComputeWaitMSec(System.Int64,System.Int64,System.Int64)">
            <summary>Given a current time and a reference time and an interval size, compute the amount of milliseconds till the next interval. </summary>
            <param name="current">is the current time</param>
            <param name="reference">is the reference point</param>
            <param name="interval">is the interval size</param>
            <returns>milliseconds after current time that marks the end of the current interval</returns>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeBatchView.MsecIntervalSize">
            <summary>Returns the interval size in milliseconds. </summary>
            <value>batch size</value>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeBatchView.InitialReferencePoint">
            <summary>Gets the reference point to use to anchor interval start and end dates to. </summary>
            <value>is the millisecond reference point.</value>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeBatchView.IsForceOutput">
            <summary>True for force-output. </summary>
            <value>indicates force-output</value>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeBatchView.IsStartEager">
            <summary>True for start-eager. </summary>
            <value>indicates start-eager</value>
        </member>
        <member name="T:com.espertech.esper.view.window.TimeBatchViewFactory">
            <summary>
            Factory for <seealso cref="T:com.espertech.esper.view.window.TimeBatchView"/>.
            </summary>
        </member>
        <member name="T:com.espertech.esper.view.window.TimeBatchViewFactoryParams">
            <summary>
            Parameters for batch views that provides common data flow parameter parsing.
            </summary>
        </member>
        <member name="F:com.espertech.esper.view.window.TimeBatchViewFactoryParams.FORCE_UPDATE_KEYWORD">
            <summary>Keyword for force update, i.e. update if no data. </summary>
        </member>
        <member name="F:com.espertech.esper.view.window.TimeBatchViewFactoryParams.START_EAGER_KEYWORD">
            <summary>Keyword for starting eager, i.e. start early. </summary>
        </member>
        <member name="F:com.espertech.esper.view.window.TimeBatchViewFactoryParams.eventType">
            <summary>Event type </summary>
        </member>
        <member name="F:com.espertech.esper.view.window.TimeBatchViewFactoryParams.millisecondsBeforeExpiry">
            <summary>Number of msec before batch fires (either interval or number of events). </summary>
        </member>
        <member name="F:com.espertech.esper.view.window.TimeBatchViewFactoryParams.isForceUpdate">
            <summary>Indicate whether to output only if there is data, or to keep outputting empty batches. </summary>
        </member>
        <member name="F:com.espertech.esper.view.window.TimeBatchViewFactoryParams.isStartEager">
            <summary>Indicate whether to output only if there is data, or to keep outputting empty batches. </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeBatchViewFactoryParams.ProcessExpiry(System.Object,System.String,System.String)">
            <summary>Process view expiry parameter </summary>
            <param name="parameter">the parameter to parse</param>
            <param name="errorMessage">error text</param>
            <param name="errorMessage2">error text</param>
            <throws>ViewParameterException if validation failed</throws>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeBatchViewFactoryParams.ProcessKeywords(System.Object,System.String)">
            <summary>Convert keywords into isForceUpdate and isStartEager members </summary>
            <param name="keywords">flow control keyword string</param>
            <param name="errorMessage">error message</param>
            <throws>ViewParameterException if parsing failed</throws>
        </member>
        <member name="F:com.espertech.esper.view.window.TimeBatchViewFactory.OptionalReferencePoint">
            <summary>The reference point, or null if none supplied. </summary>
        </member>
        <member name="T:com.espertech.esper.view.window.TimeBatchViewRStream">
            <summary>
            Same as the {@link TimeBatchView}, this view also supports fast-remove from 
            the batch for remove stream events.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeBatchViewRStream.#ctor(com.espertech.esper.view.window.TimeBatchViewFactory,com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext,System.Int64,System.Nullable{System.Int64},System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="timeBatchViewFactory">fr copying this view in a group-by</param>
            <param name="agentInstanceContext">The agent instance context.</param>
            <param name="msecIntervalSize">is the number of milliseconds to batch events for</param>
            <param name="referencePoint">is the reference point onto which to base intervals, or null ifthere is no such reference point supplied</param>
            <param name="forceOutput">is true if the batch should produce empty output if there is no value to output following time intervals</param>
            <param name="isStartEager">is true for start-eager</param>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeBatchViewRStream.SendBatch">
            <summary>This method updates child views and clears the batch of events. We schedule a new callback at this time if there were events in the batch. </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeBatchViewRStream.IsEmpty">
            <summary>Returns true if the window is empty, or false if not empty. </summary>
            <returns>true if empty</returns>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeBatchViewRStream.MsecIntervalSize">
            <summary>Returns the interval size in milliseconds. </summary>
            <value>batch size</value>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeBatchViewRStream.InitialReferencePoint">
            <summary>Gets the reference point to use to anchor interval start and end dates to. </summary>
            <value>is the millisecond reference point.</value>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeBatchViewRStream.IsForceOutput">
            <summary>True for force-output. </summary>
            <value>indicates force-output</value>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeBatchViewRStream.IsStartEager">
            <summary>True for start-eager. </summary>
            <value>indicates start-eager</value>
        </member>
        <member name="T:com.espertech.esper.view.window.TimeLengthBatchView">
            <summary>
            A data view that aggregates events in a stream and releases them in one batch if either 
            one of these conditions is reached, whichever comes first: One, a time interval passes. 
            Two, a given number of events collected. <para />The view releases the batched events after 
            the interval or number of events as new data to child views. The prior batch if not empty
            is released as old data to child view. The view DOES release intervals with no old or new 
            data. It does not collect old data published by a parent view. If there are no events in the 
            current and prior batch, the view WILL invoke the update method of child views. 
            <para />
            The view starts the first interval when the view is created. 
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeLengthBatchView.#ctor(com.espertech.esper.view.window.TimeLengthBatchViewFactory,com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext,System.Int64,System.Int64,System.Boolean,System.Boolean,com.espertech.esper.collection.ViewUpdatedCollection)">
            <summary>
            Constructor.
            </summary>
            <param name="timeBatchViewFactory">for copying this view in a group-by</param>
            <param name="agentInstanceContext">The agent instance context.</param>
            <param name="msecIntervalSize">is the number of milliseconds to batch events for</param>
            <param name="numberOfEvents">is the event count before the batch fires off</param>
            <param name="forceOutput">is true if the batch should produce empty output if there is no value to output following time intervals</param>
            <param name="isStartEager">is true for start-eager</param>
            <param name="viewUpdatedCollection">is a collection that the view must update when receiving events</param>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeLengthBatchView.SendBatch(System.Boolean)">
            <summary>This method updates child views and clears the batch of events. We cancel and old callback and schedule a new callback at this time if there were events in the batch. </summary>
            <param name="isFromSchedule">true if invoked from a schedule, false if not</param>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeLengthBatchView.IsEmpty">
            <summary>Returns true if the window is empty, or false if not empty. </summary>
            <returns>true if empty</returns>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeLengthBatchView.MsecIntervalSize">
            <summary>Returns the interval size in milliseconds. </summary>
            <value>batch size</value>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeLengthBatchView.IsForceOutput">
            <summary>True for force-output. </summary>
            <value>indicates force-output</value>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeLengthBatchView.NumberOfEvents">
            <summary>Returns the length of the batch. </summary>
            <value>maximum number of events allowed before window gets flushed</value>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeLengthBatchView.IsStartEager">
            <summary>True for start-eager. </summary>
            <value>indicates start-eager</value>
        </member>
        <member name="T:com.espertech.esper.view.window.TimeLengthBatchViewFactory">
            <summary>Factory for <seealso cref="T:com.espertech.esper.view.window.TimeLengthBatchView"/>. </summary>
        </member>
        <member name="F:com.espertech.esper.view.window.TimeLengthBatchViewFactory.NumberOfEvents">
            <summary>Number of events to collect before batch fires. </summary>
        </member>
        <member name="T:com.espertech.esper.view.window.TimeWindowView">
            <summary>
            This view is a moving timeWindow extending the specified amount of milliseconds into the
            past. The view bases the timeWindow on the time obtained from the scheduling service. All
            incoming events receive a timestamp and are placed in a sorted map by timestamp. The view
            does not care about old data published by the parent view to this view.  Events leave or 
            expire from the time timeWindow by means of a scheduled callback registered with the 
            scheduling service. Thus child views receive updates containing old data only asynchronously
            as the system-time-based timeWindow moves on. However child views receive updates containing
            new data as soon as the new data arrives.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeWindowView.#ctor(com.espertech.esper.core.context.util.AgentInstanceViewFactoryChainContext,com.espertech.esper.view.window.TimeWindowViewFactory,System.Int64,com.espertech.esper.collection.ViewUpdatedCollection)">
            <summary>
            Constructor.
            </summary>
            <param name="agentInstanceContext">The agent instance context.</param>
            <param name="timeWindowViewFactory">for copying the view in a group-by</param>
            <param name="millisecondsBeforeExpiry">is the number of milliseconds before events gets pushedout of the timeWindow as oldData in the update method.</param>
            <param name="viewUpdatedCollection">is a collection the view must update when receiving events</param>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeWindowView.GetViewUpdatedCollection">
            <summary>Returns the (optional) collection handling random access to window contents for prior or previous events. </summary>
            <returns>buffer for events</returns>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeWindowView.Expire">
            <summary>This method removes (expires) objects from the window and schedules a new callback for the time when the next oldest message would expire from the window. </summary>
        </member>
        <member name="M:com.espertech.esper.view.window.TimeWindowView.IsEmpty">
            <summary>Returns true if the window is empty, or false if not empty. </summary>
            <returns>true if empty</returns>
        </member>
        <member name="P:com.espertech.esper.view.window.TimeWindowView.MillisecondsBeforeExpiry">
            <summary>Returns the size of the time window in millisecond. </summary>
            <value>size of window</value>
        </member>
        <member name="T:com.espertech.esper.view.window.TimeWindowViewFactory">
            <summary>Factory for <seealso cref="T:com.espertech.esper.view.window.TimeWindowView"/>. </summary>
        </member>
        <member name="F:com.espertech.esper.view.window.TimeWindowViewFactory.millisecondsBeforeExpiry">
            <summary>Number of msec before expiry. </summary>
        </member>
        <member name="T:com.espertech.esper.view.ZeroDepthStream">
            <summary>
            Event stream implementation that does not keep any window by itself of the events coming into the stream.
            </summary>
        </member>
        <member name="M:com.espertech.esper.view.ZeroDepthStream.#ctor(com.espertech.esper.client.EventType)">
            <summary>
            Ctor.
            </summary>
            <param name="eventType">type of event</param>
        </member>
        <member name="M:com.espertech.esper.view.ZeroDepthStream.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:com.espertech.esper.view.ZeroDepthStream.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
